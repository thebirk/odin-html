target triple = "x86_64-pc-windows-msvc"

%..opaque = type {};
%..string = type {i8*, i64} ; Basic_string
%..rawptr = type i8* ; Basic_rawptr
%..complex32 = type {half, half} ; Basic_complex32
%..complex64 = type {float, float} ; Basic_complex64
%..complex128 = type {double, double} ; Basic_complex128
%..any = type {%..rawptr, %Type_Info*} ; Basic_any
declare void @llvm.dbg.declare(metadata, metadata, metadata) nounwind readnone 

%Calling_Convention = type i64
%Type_Info_Enum_Value = type {[0 x <8 x i8>], [8 x i8], i8}
%Type_Info_Named = type {%..string, %Type_Info*}
%Type_Info_Integer = type {i8}
%Type_Info_Rune = type {}
%Type_Info_Float = type {}
%Type_Info_Complex = type {}
%Type_Info_String = type {i8}
%Type_Info_Boolean = type {}
%Type_Info_Any = type {}
%Type_Info_Pointer = type {%Type_Info*}
%Type_Info_Procedure = type {%Type_Info*, %Type_Info*, i8, i64}
%Type_Info_Array = type {%Type_Info*, i64, i64}
%Type_Info_Dynamic_Array = type {%Type_Info*, i64}
%Type_Info_Slice = type {%Type_Info*, i64}
%Type_Info_Tuple = type {{%Type_Info**, i64}, {%..string*, i64}}
%Type_Info_Struct = type {{%Type_Info**, i64}, {%..string*, i64}, {i64*, i64}, {i8*, i64}, i8, i8, i8}
%Type_Info_Union = type {{%Type_Info**, i64}, i64, %Type_Info*}
%Type_Info_Enum = type {%Type_Info*, {%..string*, i64}, {%Type_Info_Enum_Value*, i64}, i8}
%Type_Info_Map = type {%Type_Info*, %Type_Info*, %Type_Info*}
%Type_Info_Bit_Field = type {{%..string*, i64}, {i32*, i64}, {i32*, i64}}
%Type_Info = type {i64, i64, {[0 x <8 x i8>], [72 x i8], i8}}
%Source_Code_Location = type {%..string, i64, i64, %..string}
%Allocator_Mode = type i8
%Allocator_Proc = type %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*
%Allocator = type {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr}
%Context = type {%Allocator, i64, %..any, i64, %Context*, %..any}
%__Map_Key = type {i64, %..string}
%__Map_Find_Result = type {i64, i64, i64}
%__Map_Entry_Header = type {%__Map_Key, i64}
%__Map_Header = type {%raw-5.Map*, i8, i64, i64, i64, i64}
%test1-0.Post = type {%html-11.Element*, %html-11.Element*, %html-11.Element*, %html-11.Element*}
%raw-5.String = type {i8*, i64}
%raw-5.Slice = type {%..rawptr, i64}
%raw-5.Dynamic_Array = type {%..rawptr, i64, i64, %Allocator}
%raw-5.Map = type {{i64*, i64, i64, %Allocator}, %raw-5.Dynamic_Array}
%utf8-4.Accept_Range = type {i8, i8}
%windows-6.Handle = type i64
%windows-6.Errno = type i64
%html-11.Document = type {%..string, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %html-11.Element*}*, i64, i64, %Allocator}}, %html-11.Element*, %html-11.Element*}
%html-11.Element = type {%..string, %..string, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {%html-11.Element**, i64, i64, %Allocator}}
%html-11.GenOptions = type {{i8*, i64, i64, %Allocator}*, i8, i8, i64, %..string}
%windows-13.Handle = type %..rawptr
%windows-13.Bool = type i32
%windows-13.Security_Attributes = type {i32, %..rawptr, i32}
%fmt-14.String_Buffer = type {i8*, i64, i64, %Allocator}
%fmt-14.Fmt_Info = type {i8, i8, i8, i8, i8, i8, i8, i64, i64, i64, i8, i8, {i8*, i64, i64, %Allocator}*, %..any}
%strconv-16.Int_Flag = type i64
%strconv-16.DecimalSlice = type {{i8*, i64}, i64, i64, i8}
%strconv-16.FloatInfo = type {i64, i64, i64}
%decimal-17.Decimal = type {[384 x i8], i64, i64, i8, i8}
%strconv-16.format_digits.Buffer-275 = type {{i8*, i64}, i64}

declare ccc void @llvm.assume(i1) #0 
declare ccc void @llvm.debugtrap() #0 
declare ccc void @llvm.trap() #0 
declare ccc i64 @llvm.readcyclecounter() #0 
declare ccc float @llvm.sqrt.f32(float) #0 
declare ccc double @llvm.sqrt.f64(double) #0 
declare ccc float @llvm.sin.f32(float) #0 
declare ccc double @llvm.sin.f64(double) #0 
declare ccc float @llvm.cos.f32(float) #0 
declare ccc double @llvm.cos.f64(double) #0 
declare ccc float @llvm.pow.f32(float, float) #0 
declare ccc double @llvm.pow.f64(double, double) #0 
declare ccc float @llvm.fmuladd.f32(float, float, float) #0 
declare ccc double @llvm.fmuladd.f64(double, double, double) #0 
declare cc 64 i32 @GetLastError() #0 
declare cc 64 i32 @GetCurrentThreadId() #0 
declare cc 64 i32 @CloseHandle(%..rawptr) #0 
declare cc 64 %..rawptr @GetStdHandle(i32) #0 
declare cc 64 %..rawptr @CreateFileA(i8*, i32, i32, %..rawptr, i32, i32, %..rawptr) #0 
declare cc 64 i32 @WriteFile(%..rawptr, %..rawptr, i32, i32*, %..rawptr) #0 
declare cc 64 i32 @SetHandleInformation(%..rawptr, i32, i32) #0 
declare cc 64 %..rawptr @HeapAlloc(%..rawptr, i32, i64) #0 
declare cc 64 %..rawptr @HeapReAlloc(%..rawptr, i32, %..rawptr, i64) #0 
declare cc 64 i32 @HeapFree(%..rawptr, i32, %..rawptr) #0 
declare cc 64 %..rawptr @GetProcessHeap() #0 
declare ccc void @llvm.memset.p0i8.i64(%..rawptr, i8, i64, i32, i1) #0 
declare ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) #0 
declare ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr, %..rawptr, i64, i32, i1) #0 
declare ccc float @llvm.fabs.f32(float) #0 
declare ccc double @llvm.fabs.f64(double) #0 
declare ccc float @llvm.minnum.f32(float, float) #0 
declare ccc double @llvm.minnum.f64(double, double) #0 
declare ccc float @llvm.maxnum.f32(float, float) #0 
declare ccc double @llvm.maxnum.f64(double, double) #0 

define %Type_Info* @type_info_base(%Type_Info* %info, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Type_Info*, align 16
	%1 = alloca %Type_Info*, align 16
	%2 = alloca %Type_Info_Named, align 16
	%3 = alloca {[0 x <8 x i8>], [72 x i8], i8}, align 16
	
	store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	
	%8 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %8, %Type_Info** %1
	; ForStmt
	br label %for.body-3

for.body-3:
	; TypeSwitchStmt
	; SelectorExpr
	%9 = load %Type_Info*, %Type_Info** %1, align 8
	%10 = getelementptr inbounds %Type_Info, %Type_Info* %9, i64 0
	%11 = getelementptr inbounds %Type_Info, %Type_Info* %10, i64 0, i32 2
	%12 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %11, align 8
	; get union's tag
	%13 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %11, i64 0, i32 2 ; UnionTagPtr
	%14 = load i8, i8* %13, align 1
	%15 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %11 to %..rawptr
	%16 = icmp eq i8 %14, 1
	br i1 %16, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	store {[0 x <8 x i8>], [72 x i8], i8} %12, {[0 x <8 x i8>], [72 x i8], i8}* %3
	; break
	; ReturnStmt
	%17 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %17

typeswitch.body-5:
	%18 = bitcast %..rawptr %15 to %Type_Info_Named*
	%19 = load %Type_Info_Named, %Type_Info_Named* %18, align 8
	store %Type_Info_Named %19, %Type_Info_Named* %2
	; AssignStmt
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2, i64 0, i32 1
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	store %Type_Info* %21, %Type_Info** %1
	br label %for.body-3
}

define %Type_Info* @type_info_base_without_enum(%Type_Info* %info, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Type_Info*, align 16
	%1 = alloca %Type_Info*, align 16
	%2 = alloca %Type_Info_Named, align 16
	%3 = alloca %Type_Info_Enum, align 16
	%4 = alloca {[0 x <8 x i8>], [72 x i8], i8}, align 16
	
	store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%5 = load %Type_Info*, %Type_Info** %0, align 8
	%6 = icmp eq %Type_Info* %5, zeroinitializer
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %Type_Info* zeroinitializer

if.done-2:
	; base
	
	%9 = load %Type_Info*, %Type_Info** %0, align 8
	store %Type_Info* %9, %Type_Info** %1
	; ForStmt
	br label %for.body-3

for.body-3:
	; TypeSwitchStmt
	; SelectorExpr
	%10 = load %Type_Info*, %Type_Info** %1, align 8
	%11 = getelementptr inbounds %Type_Info, %Type_Info* %10, i64 0
	%12 = getelementptr inbounds %Type_Info, %Type_Info* %11, i64 0, i32 2
	%13 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %12, align 8
	; get union's tag
	%14 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %12, i64 0, i32 2 ; UnionTagPtr
	%15 = load i8, i8* %14, align 1
	%16 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %12 to %..rawptr
	%17 = icmp eq i8 %15, 1
	br i1 %17, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	%18 = icmp eq i8 %15, 17
	br i1 %18, label %typeswitch.body-7, label %typeswitch.next-6

typeswitch.body-5:
	%19 = bitcast %..rawptr %16 to %Type_Info_Named*
	%20 = load %Type_Info_Named, %Type_Info_Named* %19, align 8
	store %Type_Info_Named %20, %Type_Info_Named* %2
	; AssignStmt
	; SelectorExpr
	%21 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2, i64 0, i32 1
	%22 = load %Type_Info*, %Type_Info** %21, align 8
	store %Type_Info* %22, %Type_Info** %1
	br label %typeswitch.done-8

typeswitch.next-6:
	store {[0 x <8 x i8>], [72 x i8], i8} %13, {[0 x <8 x i8>], [72 x i8], i8}* %4
	; break
	; ReturnStmt
	%23 = load %Type_Info*, %Type_Info** %1, align 8
	ret %Type_Info* %23

typeswitch.body-7:
	%24 = bitcast %..rawptr %16 to %Type_Info_Enum*
	%25 = load %Type_Info_Enum, %Type_Info_Enum* %24, align 8
	store %Type_Info_Enum %25, %Type_Info_Enum* %3
	; AssignStmt
	; SelectorExpr
	%26 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %3, i64 0, i32 0
	%27 = load %Type_Info*, %Type_Info** %26, align 8
	store %Type_Info* %27, %Type_Info** %1
	br label %typeswitch.done-8

typeswitch.done-8:
	br label %for.body-3
}

define %Source_Code_Location @make_source_code_location(%..string %file, i64 %line, i64 %column, %..string %procedure) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %..string, align 16
	%4 = alloca %Source_Code_Location, align 16
	
	store %..string %file, %..string* %0
	
	store i64 %line, i64* %1
	
	store i64 %column, i64* %2
	
	store %..string %procedure, %..string* %3
	; ReturnStmt
	; CompoundLit
	%5 = bitcast %Source_Code_Location* %4 to %..rawptr
	%6 = call %..rawptr @__mem_zero(%..rawptr %5, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %4
	store %Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %Source_Code_Location* %4
	%7 = load %..string, %..string* %0, align 8
	%8 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %4, i64 0, i32 0
	store %..string %7, %..string* %8
	%9 = load i64, i64* %1, align 8
	%10 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %4, i64 0, i32 1
	store i64 %9, i64* %10
	%11 = load i64, i64* %2, align 8
	%12 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %4, i64 0, i32 2
	store i64 %11, i64* %12
	%13 = load %..string, %..string* %3, align 8
	%14 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %4, i64 0, i32 3
	store %..string %13, %..string* %14
	%15 = load %Source_Code_Location, %Source_Code_Location* %4, align 8
	ret %Source_Code_Location %15
}

define void @__init_context_from_ptr(%Context* %c, %Context* %other) #0 {
decls-0:
	%0 = alloca %Context*, align 16
	%1 = alloca %Context*, align 16
	
	store %Context* %c, %Context** %0
	
	store %Context* %other, %Context** %1
	; IfStmt
	%2 = load %Context*, %Context** %0, align 8
	%3 = icmp eq %Context* %2, zeroinitializer
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	%6 = load %Context*, %Context** %0, align 8
	%7 = getelementptr inbounds %Context, %Context* %6, i64 0
	%8 = load %Context*, %Context** %1, align 8
	%9 = getelementptr inbounds %Context, %Context* %8, i64 0
	%10 = load %Context, %Context* %9, align 8
	store %Context %10, %Context* %7
	%11 = load %Context*, %Context** %0, align 8
	call void @__init_context(%Context* %11)
	ret void
}

define void @__init_context(%Context* %c) #0 {
decls-0:
	%0 = alloca %Context*, align 16
	%1 = alloca %Context, align 16
	%2 = bitcast %Context* %1 to %..rawptr
	%3 = call %..rawptr @__mem_zero(%..rawptr %2, i64 72)
	store %Context zeroinitializer, %Context* %1
	%4 = load %Context, %Context* @__ggv$0, align 8
	store %Context %4, %Context* %1
	%5 = getelementptr inbounds %Context, %Context* %1, i64 0, i32 0
	%6 = call %Allocator @default_allocator(%Context* noalias nonnull %1)
	store %Allocator %6, %Allocator* %5
	
	store %Context* %c, %Context** %0
	; IfStmt
	%7 = load %Context*, %Context** %0, align 8
	%8 = icmp eq %Context* %7, zeroinitializer
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%11 = load %Context*, %Context** %0, align 8
	%12 = getelementptr inbounds %Context, %Context* %11, i64 0
	%13 = getelementptr inbounds %Context, %Context* %12, i64 0, i32 0
	%14 = getelementptr inbounds %Allocator, %Allocator* %13, i64 0, i32 0
	%15 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %14, align 8
	%16 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %15, zeroinitializer
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%19 = load %Context*, %Context** %0, align 8
	%20 = getelementptr inbounds %Context, %Context* %19, i64 0
	%21 = getelementptr inbounds %Context, %Context* %20, i64 0, i32 0
	%22 = call %Allocator @default_allocator(%Context* noalias nonnull %1)
	store %Allocator %22, %Allocator* %21
	br label %if.done-4

if.done-4:
	; IfStmt
	; SelectorExpr
	%23 = load %Context*, %Context** %0, align 8
	%24 = getelementptr inbounds %Context, %Context* %23, i64 0
	%25 = getelementptr inbounds %Context, %Context* %24, i64 0, i32 1
	%26 = load i64, i64* %25, align 8
	%27 = icmp eq i64 %26, 0
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%30 = load %Context*, %Context** %0, align 8
	%31 = getelementptr inbounds %Context, %Context* %30, i64 0
	%32 = getelementptr inbounds %Context, %Context* %31, i64 0, i32 1
	; SelectorExpr
	%33 = call i64 @windows-6.current_thread_id(%Context* noalias nonnull %1)
	store i64 %33, i64* %32
	br label %if.done-6

if.done-6:
	ret void
}

define %..rawptr @alloc(i64 %size, i64 %alignment, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %Allocator, align 16
	%3 = alloca %Source_Code_Location, align 16
	
	store i64 %size, i64* %0
	
	store i64 %alignment, i64* %1
	%4 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; a
	
	; SelectorExpr
	%5 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%6 = load %Allocator, %Allocator* %5, align 8
	store %Allocator %6, %Allocator* %2
	; ReturnStmt
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 0
	%8 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %7, align 8
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %2, i64 0, i32 1
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = load i64, i64* %0, align 8
	%12 = load i64, i64* %1, align 8
	%13 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%14 = bitcast %Source_Code_Location* %3 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %13, %Source_Code_Location* %3
	%16 = call %..rawptr %8(%..rawptr %10, i8 0, i64 %11, i64 %12, %..rawptr zeroinitializer, i64 0, i64 0, %Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	ret %..rawptr %16
}

define void @free_ptr_with_allocator(%Allocator* %a, %..rawptr %ptr, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = load %Allocator, %Allocator* %a, align 8
	
	store %..rawptr %ptr, %..rawptr* %0
	%3 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%4 = load %..rawptr, %..rawptr* %0, align 8
	%5 = icmp eq %..rawptr %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %Allocator, %Allocator* %a, i64 0, i32 0
	%9 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %8, align 8
	%10 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; SelectorExpr
	%13 = getelementptr inbounds %Allocator, %Allocator* %a, i64 0, i32 0
	%14 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %13, align 8
	; SelectorExpr
	%15 = getelementptr inbounds %Allocator, %Allocator* %a, i64 0, i32 1
	%16 = load %..rawptr, %..rawptr* %15, align 8
	%17 = load %..rawptr, %..rawptr* %0, align 8
	%18 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%19 = bitcast %Source_Code_Location* %1 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %18, %Source_Code_Location* %1
	%21 = call %..rawptr %14(%..rawptr %16, i8 1, i64 0, i64 0, %..rawptr %17, i64 0, i64 0, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @free_ptr(%..rawptr %ptr, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %Allocator, align 16
	%2 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %ptr, %..rawptr* %0
	%3 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%5 = load %Allocator, %Allocator* %4, align 8
	%6 = load %..rawptr, %..rawptr* %0, align 8
	%7 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$0, i64 0, i32 0), i64 51}, i64 301, i64 66, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$1, i64 0, i32 0), i64 8})
	%8 = bitcast %Allocator* %1 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 16)
	store %Allocator zeroinitializer, %Allocator* %1
	store %Allocator %5, %Allocator* %1
	%10 = bitcast %Source_Code_Location* %2 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %7, %Source_Code_Location* %2
	call void @free_ptr_with_allocator(%Allocator* %1, %..rawptr %6, %Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @free_all(%Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %Allocator, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; a
	
	; SelectorExpr
	%3 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%4 = load %Allocator, %Allocator* %3, align 8
	store %Allocator %4, %Allocator* %0
	; SelectorExpr
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	%6 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %5, align 8
	; SelectorExpr
	%7 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	%8 = load %..rawptr, %..rawptr* %7, align 8
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%10 = bitcast %Source_Code_Location* %1 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %9, %Source_Code_Location* %1
	%12 = call %..rawptr %6(%..rawptr %8, i8 2, i64 0, i64 0, %..rawptr zeroinitializer, i64 0, i64 0, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define %..rawptr @resize(%..rawptr %ptr, i64 %old_size, i64 %new_size, i64 %alignment, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %Allocator, align 16
	%5 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %ptr, %..rawptr* %0
	
	store i64 %old_size, i64* %1
	
	store i64 %new_size, i64* %2
	
	store i64 %alignment, i64* %3
	%6 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; a
	
	; SelectorExpr
	%7 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%8 = load %Allocator, %Allocator* %7, align 8
	store %Allocator %8, %Allocator* %4
	; ReturnStmt
	; SelectorExpr
	%9 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 0
	%10 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %9, align 8
	; SelectorExpr
	%11 = getelementptr inbounds %Allocator, %Allocator* %4, i64 0, i32 1
	%12 = load %..rawptr, %..rawptr* %11, align 8
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %3, align 8
	%15 = load %..rawptr, %..rawptr* %0, align 8
	%16 = load i64, i64* %1, align 8
	%17 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%18 = bitcast %Source_Code_Location* %5 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %17, %Source_Code_Location* %5
	%20 = call %..rawptr %10(%..rawptr %12, i8 3, i64 %13, i64 %14, %..rawptr %15, i64 %16, i64 0, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	ret %..rawptr %20
}

define void @free_string(%..string %str, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %Source_Code_Location, align 16
	
	store %..string %str, %..string* %0
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; SelectorExpr
	%3 = load %..string, %..string* %0, align 8
	%4 = call i8* @raw-5.string_data-4271(%..string %3, %Context* noalias nonnull %__.context_ptr)
	%5 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%6 = bitcast i8* %4 to %..rawptr
	%7 = bitcast %Source_Code_Location* %1 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %5, %Source_Code_Location* %1
	call void @free_ptr(%..rawptr %6, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @free_cstring(i8* %str, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca %Source_Code_Location, align 16
	
	store i8* %str, i8** %0
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%3 = load i8*, i8** %0, align 8
	%4 = bitcast i8* %3 to i8*
	%5 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%6 = bitcast i8* %4 to %..rawptr
	%7 = bitcast %Source_Code_Location* %1 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %5, %Source_Code_Location* %1
	call void @free_ptr(%..rawptr %6, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define %..rawptr @default_resize_align(%..rawptr %old_memory, i64 %old_size, i64 %new_size, i64 %alignment, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %Source_Code_Location, align 16
	%5 = alloca %Source_Code_Location, align 16
	%6 = alloca %..rawptr, align 16
	%7 = alloca %Source_Code_Location, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %old_memory, %..rawptr* %0
	
	store i64 %old_size, i64* %1
	
	store i64 %new_size, i64* %2
	
	store i64 %alignment, i64* %3
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = icmp eq %..rawptr %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%14 = load i64, i64* %2, align 8
	%15 = load i64, i64* %3, align 8
	%16 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%17 = bitcast %Source_Code_Location* %4 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %4
	store %Source_Code_Location %16, %Source_Code_Location* %4
	%19 = call %..rawptr @alloc(i64 %14, i64 %15, %Source_Code_Location* %4, %Context* noalias nonnull %__.context_ptr)
	ret %..rawptr %19

if.done-2:
	; IfStmt
	%20 = load i64, i64* %2, align 8
	%21 = icmp eq i64 %20, 0
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	%24 = load %..rawptr, %..rawptr* %0, align 8
	%25 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%26 = bitcast %Source_Code_Location* %5 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %25, %Source_Code_Location* %5
	call void @free_ptr(%..rawptr %24, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-4:
	; IfStmt
	%28 = load i64, i64* %2, align 8
	%29 = load i64, i64* %1, align 8
	%30 = icmp eq i64 %28, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%33 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %33

if.done-6:
	; new_memory
	
	%34 = load i64, i64* %2, align 8
	%35 = load i64, i64* %3, align 8
	%36 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%37 = bitcast %Source_Code_Location* %7 to %..rawptr
	%38 = call %..rawptr @__mem_zero(%..rawptr %37, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %36, %Source_Code_Location* %7
	%39 = call %..rawptr @alloc(i64 %34, i64 %35, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %39, %..rawptr* %6
	; IfStmt
	%40 = load %..rawptr, %..rawptr* %6, align 8
	%41 = icmp eq %..rawptr %40, zeroinitializer
	%42 = zext i1 %41 to i8
	%43 = trunc i8 %42 to i1
	br i1 %43, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-8:
	%44 = load %..rawptr, %..rawptr* %6, align 8
	%45 = load %..rawptr, %..rawptr* %0, align 8
	; min
	%46 = load i64, i64* %2, align 8
	%47 = load i64, i64* %1, align 8
	%48 = icmp slt i64 %47, %46
	%49 = select i1 %48, i64 %47, i64 %46
	%50 = call %..rawptr @__mem_copy(%..rawptr %44, %..rawptr %45, i64 %49)
	%51 = load %..rawptr, %..rawptr* %0, align 8
	%52 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%53 = bitcast %Source_Code_Location* %8 to %..rawptr
	%54 = call %..rawptr @__mem_zero(%..rawptr %53, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %52, %Source_Code_Location* %8
	call void @free_ptr(%..rawptr %51, %Source_Code_Location* %8, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%55 = load %..rawptr, %..rawptr* %6, align 8
	ret %..rawptr %55
}

define %..rawptr @default_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..rawptr, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %allocator_data, %..rawptr* %0
	
	store i8 %mode, i8* %1
	
	store i64 %size, i64* %2
	
	store i64 %alignment, i64* %3
	
	store %..rawptr %old_memory, %..rawptr* %4
	
	store i64 %old_size, i64* %5
	
	store i64 %flags, i64* %6
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; SwitchStmt
	%10 = load i8, i8* %1, align 1
	%11 = icmp eq i8 %10, 0
	br i1 %11, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%12 = icmp eq i8 %10, 1
	br i1 %12, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; ReturnStmt
	; SelectorExpr
	%13 = load i64, i64* %2, align 8
	%14 = call %..rawptr @windows-6.heap_alloc(i64 %13, %Context* noalias nonnull %__.context_ptr)
	ret %..rawptr %14

switch.case.next-3:
	%15 = icmp eq i8 %10, 2
	br i1 %15, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	; SelectorExpr
	%16 = load %..rawptr, %..rawptr* %4, align 8
	call void @windows-6.heap_free(%..rawptr %16, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret %..rawptr zeroinitializer

switch.case.next-5:
	%17 = icmp eq i8 %10, 3
	br i1 %17, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	br label %switch.done-9

switch.case.next-7:
	br label %switch.done-9

switch.fall.body-8:
	; ptr
	
	; SelectorExpr
	%18 = load %..rawptr, %..rawptr* %4, align 8
	%19 = load i64, i64* %2, align 8
	%20 = call %..rawptr @windows-6.heap_resize(%..rawptr %18, i64 %19, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %20, %..rawptr* %7
	%21 = load %..rawptr, %..rawptr* %7, align 8
	%22 = icmp ne %..rawptr %21, zeroinitializer
	%23 = zext i1 %22 to i8
	%24 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$2, i64 0, i32 0), i64 51}, i64 573, i64 3, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$3, i64 0, i32 0), i64 22})
	%25 = trunc i8 %23 to i1
	%26 = bitcast %Source_Code_Location* %8 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %24, %Source_Code_Location* %8
	%28 = call i8 @assert(i1 %25, %..string zeroinitializer, %Source_Code_Location* %8)
	; ReturnStmt
	%29 = load %..rawptr, %..rawptr* %7, align 8
	ret %..rawptr %29

switch.done-9:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %Allocator @default_allocator(%Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Allocator, align 16
	; ReturnStmt
	; CompoundLit
	%1 = bitcast %Allocator* %0 to %..rawptr
	%2 = call %..rawptr @__mem_zero(%..rawptr %1, i64 16)
	store %Allocator zeroinitializer, %Allocator* %0
	store %Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* zeroinitializer, %..rawptr zeroinitializer}, %Allocator* %0
	%3 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* @default_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*
	%4 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %3, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %4
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %5
	%6 = load %Allocator, %Allocator* %0, align 8
	ret %Allocator %6
}

define %..rawptr @nil_allocator_proc(%..rawptr %allocator_data, i8 %mode, i64 %size, i64 %alignment, %..rawptr %old_memory, i64 %old_size, i64 %flags, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..rawptr, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	
	store %..rawptr %allocator_data, %..rawptr* %0
	
	store i8 %mode, i8* %1
	
	store i64 %size, i64* %2
	
	store i64 %alignment, i64* %3
	
	store %..rawptr %old_memory, %..rawptr* %4
	
	store i64 %old_size, i64* %5
	
	store i64 %flags, i64* %6
	%7 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define %Allocator @nil_allocator(%Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Allocator, align 16
	; ReturnStmt
	; CompoundLit
	%1 = bitcast %Allocator* %0 to %..rawptr
	%2 = call %..rawptr @__mem_zero(%..rawptr %1, i64 16)
	store %Allocator zeroinitializer, %Allocator* %0
	store %Allocator {%..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* zeroinitializer, %..rawptr zeroinitializer}, %Allocator* %0
	%3 = bitcast %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* @nil_allocator_proc to %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*
	%4 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 0
	store %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %3, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %4
	%5 = getelementptr inbounds %Allocator, %Allocator* %0, i64 0, i32 1
	store %..rawptr zeroinitializer, %..rawptr* %5
	%6 = load %Allocator, %Allocator* %0, align 8
	ret %Allocator %6
}

define void @__print_u64(i64 %fd, i64 %u, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca [129 x i8], align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca {i8*, i64}, align 16
	
	store i64 %fd, i64* %0
	
	store i64 %u, i64* %1
	; digits
	
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$4, i64 0, i32 0), i64 10}, %..string* %2
	; a
	%8 = bitcast [129 x i8]* %3 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 129)
	store [129 x i8] zeroinitializer, [129 x i8]* %3
	
	; i
	
	store i64 129, i64* %4
	; b
	
	store i64 10, i64* %5
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%10 = load i64, i64* %1, align 8
	%11 = load i64, i64* %5, align 8
	%12 = icmp uge i64 %10, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %for.body-2, label %for.done-3

for.body-2:
	; AssignStmt
	%15 = load i64, i64* %4, align 8
	%16 = sub i64 %15, 1
	store i64 %16, i64* %4
	; AssignStmt
	; IndexExpr
	%17 = load i64, i64* %4, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 %18
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$5, i64 0, i32 0), i64 51}, i64 608, i64 13, i64 %17, i64 129)
	; IndexExpr
	%20 = load %..string, %..string* %2, align 8
	%21 = extractvalue %..string %20, 0
	%22 = extractvalue %..string %20, 1
	%23 = load i64, i64* %1, align 8
	%24 = load i64, i64* %5, align 8
	%25 = urem i64 %23, %24
	%26 = bitcast i64 %25 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$6, i64 0, i32 0), i64 51}, i64 608, i64 25, i64 %26, i64 %22)
	%27 = getelementptr inbounds i8, i8* %21, i64 %26
	%28 = load i8, i8* %27, align 1
	store i8 %28, i8* %19
	; AssignStmt
	%29 = load i64, i64* %5, align 8
	%30 = load i64, i64* %1, align 8
	%31 = udiv i64 %30, %29
	store i64 %31, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	%32 = load i64, i64* %4, align 8
	%33 = sub i64 %32, 1
	store i64 %33, i64* %4
	; AssignStmt
	; IndexExpr
	%34 = load i64, i64* %4, align 8
	%35 = trunc i64 %34 to i32
	%36 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 %35
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$7, i64 0, i32 0), i64 51}, i64 611, i64 12, i64 %34, i64 129)
	; IndexExpr
	%37 = load %..string, %..string* %2, align 8
	%38 = extractvalue %..string %37, 0
	%39 = extractvalue %..string %37, 1
	%40 = load i64, i64* %1, align 8
	%41 = load i64, i64* %5, align 8
	%42 = urem i64 %40, %41
	%43 = bitcast i64 %42 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$8, i64 0, i32 0), i64 51}, i64 611, i64 24, i64 %43, i64 %39)
	%44 = getelementptr inbounds i8, i8* %38, i64 %43
	%45 = load i8, i8* %44, align 1
	store i8 %45, i8* %36
	; SelectorExpr
	%46 = load i64, i64* %0, align 8
	; SliceExpr
	%47 = load i64, i64* %4, align 8
	%48 = load [129 x i8], [129 x i8]* %3, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$9, i64 0, i32 0), i64 51}, i64 613, i64 16, i64 %47, i64 129, i64 129)
	%49 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 0
	%50 = getelementptr inbounds i8, i8* %49, i64 %47
	%51 = sub i64 129, %47
	%52 = bitcast {i8*, i64}* %6 to %..rawptr
	%53 = call %..rawptr @__mem_zero(%..rawptr %52, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	%54 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 0
	store i8* %50, i8** %54
	%55 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 1
	store i64 %51, i64* %55
	%56 = load {i8*, i64}, {i8*, i64}* %6, align 8
	%57 = bitcast {i8*, i64}* %7 to %..rawptr
	%58 = call %..rawptr @__mem_zero(%..rawptr %57, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	store {i8*, i64} %56, {i8*, i64}* %7
	%59 = call {i64, i64} @windows-6.write(i64 %46, {i8*, i64}* %7, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @__print_i64(i64 %fd, i64 %u, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca i8, align 16
	%4 = alloca [129 x i8], align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca {i8*, i64}, align 16
	%8 = alloca {i8*, i64}, align 16
	
	store i64 %fd, i64* %0
	
	store i64 %u, i64* %1
	; digits
	
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$a, i64 0, i32 0), i64 10}, %..string* %2
	; neg
	
	%9 = load i64, i64* %1, align 8
	%10 = icmp slt i64 %9, 0
	%11 = zext i1 %10 to i8
	store i8 %11, i8* %3
	; AssignStmt
	; abs
	%12 = load i64, i64* %1, align 8
	%13 = icmp slt i64 %12, 0
	%14 = sub i64 0, %12
	%15 = select i1 %13, i64 %14, i64 %12
	store i64 %15, i64* %1
	; a
	%16 = bitcast [129 x i8]* %4 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 129)
	store [129 x i8] zeroinitializer, [129 x i8]* %4
	
	; i
	
	store i64 129, i64* %5
	; b
	
	store i64 10, i64* %6
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%18 = load i64, i64* %1, align 8
	%19 = load i64, i64* %6, align 8
	%20 = icmp sge i64 %18, %19
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %for.body-2, label %for.done-3

for.body-2:
	; AssignStmt
	%23 = load i64, i64* %5, align 8
	%24 = sub i64 %23, 1
	store i64 %24, i64* %5
	; AssignStmt
	; IndexExpr
	%25 = load i64, i64* %5, align 8
	%26 = trunc i64 %25 to i32
	%27 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %26
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$b, i64 0, i32 0), i64 51}, i64 626, i64 13, i64 %25, i64 129)
	; IndexExpr
	%28 = load %..string, %..string* %2, align 8
	%29 = extractvalue %..string %28, 0
	%30 = extractvalue %..string %28, 1
	%31 = load i64, i64* %1, align 8
	%32 = load i64, i64* %6, align 8
	%33 = srem i64 %31, %32
	%34 = bitcast i64 %33 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$c, i64 0, i32 0), i64 51}, i64 626, i64 25, i64 %34, i64 %30)
	%35 = getelementptr inbounds i8, i8* %29, i64 %34
	%36 = load i8, i8* %35, align 1
	store i8 %36, i8* %27
	; AssignStmt
	%37 = load i64, i64* %6, align 8
	%38 = load i64, i64* %1, align 8
	%39 = sdiv i64 %38, %37
	store i64 %39, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	%40 = load i64, i64* %5, align 8
	%41 = sub i64 %40, 1
	store i64 %41, i64* %5
	; AssignStmt
	; IndexExpr
	%42 = load i64, i64* %5, align 8
	%43 = trunc i64 %42 to i32
	%44 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %43
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$d, i64 0, i32 0), i64 51}, i64 629, i64 12, i64 %42, i64 129)
	; IndexExpr
	%45 = load %..string, %..string* %2, align 8
	%46 = extractvalue %..string %45, 0
	%47 = extractvalue %..string %45, 1
	%48 = load i64, i64* %1, align 8
	%49 = load i64, i64* %6, align 8
	%50 = srem i64 %48, %49
	%51 = bitcast i64 %50 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$e, i64 0, i32 0), i64 51}, i64 629, i64 24, i64 %51, i64 %47)
	%52 = getelementptr inbounds i8, i8* %46, i64 %51
	%53 = load i8, i8* %52, align 1
	store i8 %53, i8* %44
	; IfStmt
	%54 = load i8, i8* %3, align 1
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	%56 = load i64, i64* %5, align 8
	%57 = sub i64 %56, 1
	store i64 %57, i64* %5
	; AssignStmt
	; IndexExpr
	%58 = load i64, i64* %5, align 8
	%59 = trunc i64 %58 to i32
	%60 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 %59
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$f, i64 0, i32 0), i64 51}, i64 631, i64 13, i64 %58, i64 129)
	store i8 45, i8* %60
	br label %if.done-5

if.done-5:
	; SelectorExpr
	%61 = load i64, i64* %0, align 8
	; SliceExpr
	%62 = load i64, i64* %5, align 8
	%63 = load [129 x i8], [129 x i8]* %4, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$10, i64 0, i32 0), i64 51}, i64 634, i64 16, i64 %62, i64 129, i64 129)
	%64 = getelementptr inbounds [129 x i8], [129 x i8]* %4, i64 0, i32 0
	%65 = getelementptr inbounds i8, i8* %64, i64 %62
	%66 = sub i64 129, %62
	%67 = bitcast {i8*, i64}* %7 to %..rawptr
	%68 = call %..rawptr @__mem_zero(%..rawptr %67, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	%69 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 0
	store i8* %65, i8** %69
	%70 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 1
	store i64 %66, i64* %70
	%71 = load {i8*, i64}, {i8*, i64}* %7, align 8
	%72 = bitcast {i8*, i64}* %8 to %..rawptr
	%73 = call %..rawptr @__mem_zero(%..rawptr %72, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %8
	store {i8*, i64} %71, {i8*, i64}* %8
	%74 = call {i64, i64} @windows-6.write(i64 %61, {i8*, i64}* %8, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @__print_caller_location(i64 %fd, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	
	store i64 %fd, i64* %0
	%1 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; SelectorExpr
	%2 = load i64, i64* %0, align 8
	%3 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 0
	%4 = load %..string, %..string* %3, align 8
	%5 = call {i64, i64} @os-3.write_string(i64 %2, %..string %4, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%6 = load i64, i64* %0, align 8
	%7 = call {i64, i64} @os-3.write_byte(i64 %6, i8 40, %Context* noalias nonnull %__.context_ptr)
	%8 = load i64, i64* %0, align 8
	%9 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = bitcast i64 %10 to i64
	call void @__print_u64(i64 %8, i64 %11, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%12 = load i64, i64* %0, align 8
	%13 = call {i64, i64} @os-3.write_byte(i64 %12, i8 58, %Context* noalias nonnull %__.context_ptr)
	%14 = load i64, i64* %0, align 8
	%15 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 2
	%16 = load i64, i64* %15, align 8
	%17 = bitcast i64 %16 to i64
	call void @__print_u64(i64 %14, i64 %17, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%18 = load i64, i64* %0, align 8
	%19 = call {i64, i64} @os-3.write_byte(i64 %18, i8 41, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @__print_type(i64 %fd, %Type_Info* %ti, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info*, align 16
	%2 = alloca %Type_Info_Named, align 16
	%3 = alloca %Type_Info_Integer, align 16
	%4 = alloca %..any, align 16
	%5 = alloca %..any, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca %..any, align 16
	%10 = alloca %Type_Info_Rune, align 16
	%11 = alloca %Type_Info_Float, align 16
	%12 = alloca %Type_Info_Complex, align 16
	%13 = alloca %Type_Info_String, align 16
	%14 = alloca %Type_Info_Boolean, align 16
	%15 = alloca %..any, align 16
	%16 = alloca %..any, align 16
	%17 = alloca i8, align 16
	%18 = alloca %..any, align 16
	%19 = alloca %Type_Info_Any, align 16
	%20 = alloca %Type_Info_Pointer, align 16
	%21 = alloca %Type_Info_Procedure, align 16
	%22 = alloca %Type_Info_Tuple, align 16
	%23 = alloca {%Type_Info_Tuple, i8}, align 16
	%24 = alloca %Type_Info*, align 16
	%25 = alloca i64, align 16
	%26 = alloca i64, align 16
	%27 = alloca i64, align 16
	%28 = alloca %Type_Info_Tuple, align 16
	%29 = alloca i64, align 16
	%30 = alloca %..string, align 16
	%31 = alloca i64, align 16
	%32 = alloca i64, align 16
	%33 = alloca i64, align 16
	%34 = alloca %Type_Info*, align 16
	%35 = alloca %Type_Info_Array, align 16
	%36 = alloca %Type_Info_Dynamic_Array, align 16
	%37 = alloca %Type_Info_Slice, align 16
	%38 = alloca %Type_Info_Map, align 16
	%39 = alloca %Type_Info_Struct, align 16
	%40 = alloca %..string, align 16
	%41 = alloca i64, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca %Type_Info_Union, align 16
	%45 = alloca %Type_Info*, align 16
	%46 = alloca i64, align 16
	%47 = alloca i64, align 16
	%48 = alloca i64, align 16
	%49 = alloca %Type_Info_Enum, align 16
	%50 = alloca %..string, align 16
	%51 = alloca i64, align 16
	%52 = alloca i64, align 16
	%53 = alloca i64, align 16
	%54 = alloca %Type_Info_Bit_Field, align 16
	%55 = alloca %..string, align 16
	%56 = alloca i64, align 16
	%57 = alloca i64, align 16
	%58 = alloca i64, align 16
	
	store i64 %fd, i64* %0
	
	store %Type_Info* %ti, %Type_Info** %1
	; IfStmt
	%59 = load %Type_Info*, %Type_Info** %1, align 8
	%60 = icmp eq %Type_Info* %59, zeroinitializer
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%63 = load i64, i64* %0, align 8
	%64 = call {i64, i64} @os-3.write_string(i64 %63, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$11, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; TypeSwitchStmt
	; SelectorExpr
	%65 = load %Type_Info*, %Type_Info** %1, align 8
	%66 = getelementptr inbounds %Type_Info, %Type_Info* %65, i64 0
	%67 = getelementptr inbounds %Type_Info, %Type_Info* %66, i64 0, i32 2
	%68 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %67, align 8
	; get union's tag
	%69 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %67, i64 0, i32 2 ; UnionTagPtr
	%70 = load i8, i8* %69, align 1
	%71 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %67 to %..rawptr
	%72 = icmp eq i8 %70, 1
	br i1 %72, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%73 = icmp eq i8 %70, 2
	br i1 %73, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%74 = bitcast %..rawptr %71 to %Type_Info_Named*
	%75 = load %Type_Info_Named, %Type_Info_Named* %74, align 8
	store %Type_Info_Named %75, %Type_Info_Named* %2
	; SelectorExpr
	%76 = load i64, i64* %0, align 8
	; SelectorExpr
	%77 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2, i64 0, i32 0
	%78 = load %..string, %..string* %77, align 8
	%79 = call {i64, i64} @os-3.write_string(i64 %76, %..string %78, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-5:
	%80 = icmp eq i8 %70, 3
	br i1 %80, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-6:
	%81 = bitcast %..rawptr %71 to %Type_Info_Integer*
	%82 = load %Type_Info_Integer, %Type_Info_Integer* %81, align 1
	store %Type_Info_Integer %82, %Type_Info_Integer* %3
	; a
	
	; CompoundLit
	%83 = bitcast %..any* %5 to %..rawptr
	%84 = call %..rawptr @__mem_zero(%..rawptr %83, i64 16)
	store %..any zeroinitializer, %..any* %5
	store %..any zeroinitializer, %..any* %5
	%85 = load %Type_Info*, %Type_Info** %1, align 8
	%86 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %85, %Type_Info** %86
	%87 = load %..any, %..any* %5, align 8
	store %..any %87, %..any* %4
	; TypeSwitchStmt
	%88 = load %..any, %..any* %4, align 8
	%89 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%90 = load %Type_Info*, %Type_Info** %89, align 8
	%91 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%92 = icmp eq %Type_Info* %90, %91
	br i1 %92, label %typeswitch.body-8, label %typeswitch.next-7

typeswitch.next-7:
	%93 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%94 = load %Type_Info*, %Type_Info** %93, align 8
	%95 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%96 = icmp eq %Type_Info* %94, %95
	br i1 %96, label %typeswitch.body-10, label %typeswitch.next-9

typeswitch.body-8:
	%97 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%98 = load %..rawptr, %..rawptr* %97, align 8
	%99 = bitcast %..rawptr %98 to i64*
	%100 = load i64, i64* %99, align 8
	store i64 %100, i64* %6
	; SelectorExpr
	%101 = load i64, i64* %0, align 8
	%102 = call {i64, i64} @os-3.write_string(i64 %101, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$12, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.next-9:
	%103 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%104 = load %Type_Info*, %Type_Info** %103, align 8
	%105 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%106 = icmp eq %Type_Info* %104, %105
	br i1 %106, label %typeswitch.body-12, label %typeswitch.next-11

typeswitch.body-10:
	%107 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%108 = load %..rawptr, %..rawptr* %107, align 8
	%109 = bitcast %..rawptr %108 to i64*
	%110 = load i64, i64* %109, align 8
	store i64 %110, i64* %7
	; SelectorExpr
	%111 = load i64, i64* %0, align 8
	%112 = call {i64, i64} @os-3.write_string(i64 %111, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$13, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.next-11:
	store %..any %88, %..any* %9
	; SelectorExpr
	%113 = load i64, i64* %0, align 8
	; TernaryExpr
	; SelectorExpr
	%114 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %3, i64 0, i32 0
	%115 = load i8, i8* %114, align 1
	%116 = trunc i8 %115 to i1
	br i1 %116, label %if.then-13, label %if.else-14

typeswitch.body-12:
	%117 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%118 = load %..rawptr, %..rawptr* %117, align 8
	%119 = bitcast %..rawptr %118 to i64*
	%120 = load i64, i64* %119, align 8
	store i64 %120, i64* %8
	; SelectorExpr
	%121 = load i64, i64* %0, align 8
	%122 = call {i64, i64} @os-3.write_string(i64 %121, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$14, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

if.then-13:
	br label %if.done-15

if.else-14:
	br label %if.done-15

if.done-15:
	%123 = phi i32 [ 105, %if.then-13 ], [ 117, %if.else-14 ]
	%124 = trunc i32 %123 to i8
	%125 = call {i64, i64} @os-3.write_byte(i64 %113, i8 %124, %Context* noalias nonnull %__.context_ptr)
	%126 = load i64, i64* %0, align 8
	; SelectorExpr
	%127 = load %Type_Info*, %Type_Info** %1, align 8
	%128 = getelementptr inbounds %Type_Info, %Type_Info* %127, i64 0
	%129 = getelementptr inbounds %Type_Info, %Type_Info* %128, i64 0, i32 0
	%130 = load i64, i64* %129, align 8
	%131 = mul i64 8, %130
	%132 = bitcast i64 %131 to i64
	call void @__print_u64(i64 %126, i64 %132, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.done-16:
	br label %typeswitch.done-108

typeswitch.next-17:
	%133 = icmp eq i8 %70, 4
	br i1 %133, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%134 = bitcast %..rawptr %71 to %Type_Info_Rune*
	%135 = load %Type_Info_Rune, %Type_Info_Rune* %134, align 1
	store %Type_Info_Rune %135, %Type_Info_Rune* %10
	; SelectorExpr
	%136 = load i64, i64* %0, align 8
	%137 = call {i64, i64} @os-3.write_string(i64 %136, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$15, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-19:
	%138 = icmp eq i8 %70, 5
	br i1 %138, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%139 = bitcast %..rawptr %71 to %Type_Info_Float*
	%140 = load %Type_Info_Float, %Type_Info_Float* %139, align 1
	store %Type_Info_Float %140, %Type_Info_Float* %11
	; SelectorExpr
	%141 = load i64, i64* %0, align 8
	%142 = call {i64, i64} @os-3.write_byte(i64 %141, i8 102, %Context* noalias nonnull %__.context_ptr)
	%143 = load i64, i64* %0, align 8
	; SelectorExpr
	%144 = load %Type_Info*, %Type_Info** %1, align 8
	%145 = getelementptr inbounds %Type_Info, %Type_Info* %144, i64 0
	%146 = getelementptr inbounds %Type_Info, %Type_Info* %145, i64 0, i32 0
	%147 = load i64, i64* %146, align 8
	%148 = mul i64 8, %147
	%149 = bitcast i64 %148 to i64
	call void @__print_u64(i64 %143, i64 %149, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-21:
	%150 = icmp eq i8 %70, 6
	br i1 %150, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%151 = bitcast %..rawptr %71 to %Type_Info_Complex*
	%152 = load %Type_Info_Complex, %Type_Info_Complex* %151, align 1
	store %Type_Info_Complex %152, %Type_Info_Complex* %12
	; SelectorExpr
	%153 = load i64, i64* %0, align 8
	%154 = call {i64, i64} @os-3.write_string(i64 %153, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$16, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%155 = load i64, i64* %0, align 8
	; SelectorExpr
	%156 = load %Type_Info*, %Type_Info** %1, align 8
	%157 = getelementptr inbounds %Type_Info, %Type_Info* %156, i64 0
	%158 = getelementptr inbounds %Type_Info, %Type_Info* %157, i64 0, i32 0
	%159 = load i64, i64* %158, align 8
	%160 = mul i64 8, %159
	%161 = bitcast i64 %160 to i64
	call void @__print_u64(i64 %155, i64 %161, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-23:
	%162 = icmp eq i8 %70, 7
	br i1 %162, label %typeswitch.body-26, label %typeswitch.next-25

typeswitch.body-24:
	%163 = bitcast %..rawptr %71 to %Type_Info_String*
	%164 = load %Type_Info_String, %Type_Info_String* %163, align 1
	store %Type_Info_String %164, %Type_Info_String* %13
	; SelectorExpr
	%165 = load i64, i64* %0, align 8
	%166 = call {i64, i64} @os-3.write_string(i64 %165, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$17, i64 0, i32 0), i64 6}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-25:
	%167 = icmp eq i8 %70, 8
	br i1 %167, label %typeswitch.body-31, label %typeswitch.next-30

typeswitch.body-26:
	%168 = bitcast %..rawptr %71 to %Type_Info_Boolean*
	%169 = load %Type_Info_Boolean, %Type_Info_Boolean* %168, align 1
	store %Type_Info_Boolean %169, %Type_Info_Boolean* %14
	; a
	
	; CompoundLit
	%170 = bitcast %..any* %16 to %..rawptr
	%171 = call %..rawptr @__mem_zero(%..rawptr %170, i64 16)
	store %..any zeroinitializer, %..any* %16
	store %..any zeroinitializer, %..any* %16
	%172 = load %Type_Info*, %Type_Info** %1, align 8
	%173 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %172, %Type_Info** %173
	%174 = load %..any, %..any* %16, align 8
	store %..any %174, %..any* %15
	; TypeSwitchStmt
	%175 = load %..any, %..any* %15, align 8
	%176 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	%177 = load %Type_Info*, %Type_Info** %176, align 8
	%178 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%179 = icmp eq %Type_Info* %177, %178
	br i1 %179, label %typeswitch.body-28, label %typeswitch.next-27

typeswitch.next-27:
	store %..any %175, %..any* %18
	; SelectorExpr
	%180 = load i64, i64* %0, align 8
	%181 = call {i64, i64} @os-3.write_byte(i64 %180, i8 98, %Context* noalias nonnull %__.context_ptr)
	%182 = load i64, i64* %0, align 8
	; SelectorExpr
	%183 = load %Type_Info*, %Type_Info** %1, align 8
	%184 = getelementptr inbounds %Type_Info, %Type_Info* %183, i64 0
	%185 = getelementptr inbounds %Type_Info, %Type_Info* %184, i64 0, i32 0
	%186 = load i64, i64* %185, align 8
	%187 = mul i64 8, %186
	%188 = bitcast i64 %187 to i64
	call void @__print_u64(i64 %182, i64 %188, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-29

typeswitch.body-28:
	%189 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%190 = load %..rawptr, %..rawptr* %189, align 8
	%191 = bitcast %..rawptr %190 to i8*
	%192 = load i8, i8* %191, align 1
	store i8 %192, i8* %17
	; SelectorExpr
	%193 = load i64, i64* %0, align 8
	%194 = call {i64, i64} @os-3.write_string(i64 %193, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$18, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-29

typeswitch.done-29:
	br label %typeswitch.done-108

typeswitch.next-30:
	%195 = icmp eq i8 %70, 9
	br i1 %195, label %typeswitch.body-33, label %typeswitch.next-32

typeswitch.body-31:
	%196 = bitcast %..rawptr %71 to %Type_Info_Any*
	%197 = load %Type_Info_Any, %Type_Info_Any* %196, align 1
	store %Type_Info_Any %197, %Type_Info_Any* %19
	; SelectorExpr
	%198 = load i64, i64* %0, align 8
	%199 = call {i64, i64} @os-3.write_string(i64 %198, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$19, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-32:
	%200 = icmp eq i8 %70, 10
	br i1 %200, label %typeswitch.body-38, label %typeswitch.next-37

typeswitch.body-33:
	%201 = bitcast %..rawptr %71 to %Type_Info_Pointer*
	%202 = load %Type_Info_Pointer, %Type_Info_Pointer* %201, align 8
	store %Type_Info_Pointer %202, %Type_Info_Pointer* %20
	; IfStmt
	; SelectorExpr
	%203 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %20, i64 0, i32 0
	%204 = load %Type_Info*, %Type_Info** %203, align 8
	%205 = icmp eq %Type_Info* %204, zeroinitializer
	%206 = zext i1 %205 to i8
	%207 = trunc i8 %206 to i1
	br i1 %207, label %if.then-34, label %if.else-35

if.then-34:
	; SelectorExpr
	%208 = load i64, i64* %0, align 8
	%209 = call {i64, i64} @os-3.write_string(i64 %208, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$1a, i64 0, i32 0), i64 6}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-36

if.else-35:
	; SelectorExpr
	%210 = load i64, i64* %0, align 8
	%211 = call {i64, i64} @os-3.write_string(i64 %210, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$1b, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%212 = load i64, i64* %0, align 8
	; SelectorExpr
	%213 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %20, i64 0, i32 0
	%214 = load %Type_Info*, %Type_Info** %213, align 8
	call void @__print_type(i64 %212, %Type_Info* %214, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-36

if.done-36:
	br label %typeswitch.done-108

typeswitch.next-37:
	%215 = icmp eq i8 %70, 14
	br i1 %215, label %typeswitch.body-52, label %typeswitch.next-51

typeswitch.body-38:
	%216 = bitcast %..rawptr %71 to %Type_Info_Procedure*
	%217 = load %Type_Info_Procedure, %Type_Info_Procedure* %216, align 8
	store %Type_Info_Procedure %217, %Type_Info_Procedure* %21
	; SelectorExpr
	%218 = load i64, i64* %0, align 8
	%219 = call {i64, i64} @os-3.write_string(i64 %218, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$1c, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%220 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 0
	%221 = load %Type_Info*, %Type_Info** %220, align 8
	%222 = icmp eq %Type_Info* %221, zeroinitializer
	%223 = zext i1 %222 to i8
	%224 = trunc i8 %223 to i1
	br i1 %224, label %if.then-39, label %if.else-40

if.then-39:
	; SelectorExpr
	%225 = load i64, i64* %0, align 8
	%226 = call {i64, i64} @os-3.write_string(i64 %225, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$1d, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-48

if.else-40:
	; t
	
	; SelectorExpr
	; SelectorExpr
	%227 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 0
	%228 = load %Type_Info*, %Type_Info** %227, align 8
	%229 = getelementptr inbounds %Type_Info, %Type_Info* %228, i64 0
	%230 = getelementptr inbounds %Type_Info, %Type_Info* %229, i64 0, i32 2
	%231 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %230, align 8
	; cast - union_cast
	%232 = bitcast {%Type_Info_Tuple, i8}* %23 to %..rawptr
	%233 = call %..rawptr @__mem_zero(%..rawptr %232, i64 40)
	store {%Type_Info_Tuple, i8} zeroinitializer, {%Type_Info_Tuple, i8}* %23
	%234 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %230, i64 0, i32 2 ; UnionTagPtr
	%235 = load i8, i8* %234, align 1
	%236 = icmp eq i8 %235, 14
	br i1 %236, label %union_cast.ok-41, label %union_cast.end-42

union_cast.ok-41:
	%237 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 0
	%238 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 1
	%239 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %230 to %Type_Info_Tuple*
	%240 = load %Type_Info_Tuple, %Type_Info_Tuple* %239, align 8
	store %Type_Info_Tuple %240, %Type_Info_Tuple* %237
	store i8 1, i8* %238
	br label %union_cast.end-42

union_cast.end-42:
	%241 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 1
	%242 = load i8, i8* %241, align 1
	%243 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%244 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 33
	%245 = trunc i8 %242 to i1
	call void @__type_assertion_check(i1 %245, %..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$1e, i64 0, i32 0), i64 51}, i64 698, i64 21, %Type_Info* %243, %Type_Info* %244)
	%246 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 0
	%247 = load %Type_Info_Tuple, %Type_Info_Tuple* %246, align 8
	store %Type_Info_Tuple %247, %Type_Info_Tuple* %22
	; SelectorExpr
	%248 = load i64, i64* %0, align 8
	%249 = call {i64, i64} @os-3.write_string(i64 %248, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$1f, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; t
	%250 = bitcast %Type_Info** %24 to %..rawptr
	%251 = call %..rawptr @__mem_zero(%..rawptr %250, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %24
	
	; i
	%252 = bitcast i64* %25 to %..rawptr
	%253 = call %..rawptr @__mem_zero(%..rawptr %252, i64 8)
	store i64 zeroinitializer, i64* %25
	
	; SelectorExpr
	%254 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %22, i64 0, i32 0
	%255 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %254, align 8
	%256 = bitcast i64* %26 to %..rawptr
	%257 = call %..rawptr @__mem_zero(%..rawptr %256, i64 8)
	store i64 zeroinitializer, i64* %26
	%258 = extractvalue {%Type_Info**, i64} %255, 1
	store i64 %258, i64* %26
	%259 = bitcast i64* %27 to %..rawptr
	%260 = call %..rawptr @__mem_zero(%..rawptr %259, i64 8)
	store i64 zeroinitializer, i64* %27
	store i64 -1, i64* %27
	br label %for.index.loop-43

for.index.loop-43:
	%261 = load i64, i64* %27, align 8
	%262 = add i64 %261, 1
	store i64 %262, i64* %27
	%263 = load i64, i64* %26, align 8
	%264 = icmp slt i64 %262, %263
	br i1 %264, label %for.index.body-44, label %for.index.done-47

for.index.body-44:
	%265 = load i64, i64* %27, align 8
	%266 = extractvalue {%Type_Info**, i64} %255, 0
	%267 = getelementptr inbounds %Type_Info*, %Type_Info** %266, i64 %265
	%268 = load %Type_Info*, %Type_Info** %267, align 8
	store %Type_Info* %268, %Type_Info** %24
	store i64 %265, i64* %25
	; IfStmt
	%269 = load i64, i64* %25, align 8
	%270 = icmp sgt i64 %269, 0
	%271 = zext i1 %270 to i8
	%272 = trunc i8 %271 to i1
	br i1 %272, label %if.then-45, label %if.done-46

if.then-45:
	; SelectorExpr
	%273 = load i64, i64* %0, align 8
	%274 = call {i64, i64} @os-3.write_string(i64 %273, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$20, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-46

if.done-46:
	%275 = load i64, i64* %0, align 8
	%276 = load %Type_Info*, %Type_Info** %24, align 8
	call void @__print_type(i64 %275, %Type_Info* %276, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-43

for.index.done-47:
	; SelectorExpr
	%277 = load i64, i64* %0, align 8
	%278 = call {i64, i64} @os-3.write_string(i64 %277, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$21, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-48

if.done-48:
	; IfStmt
	; SelectorExpr
	%279 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 1
	%280 = load %Type_Info*, %Type_Info** %279, align 8
	%281 = icmp ne %Type_Info* %280, zeroinitializer
	%282 = zext i1 %281 to i8
	%283 = trunc i8 %282 to i1
	br i1 %283, label %if.then-49, label %if.done-50

if.then-49:
	; SelectorExpr
	%284 = load i64, i64* %0, align 8
	%285 = call {i64, i64} @os-3.write_string(i64 %284, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$22, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	%286 = load i64, i64* %0, align 8
	; SelectorExpr
	%287 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 1
	%288 = load %Type_Info*, %Type_Info** %287, align 8
	call void @__print_type(i64 %286, %Type_Info* %288, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-50

if.done-50:
	br label %typeswitch.done-108

typeswitch.next-51:
	%289 = icmp eq i8 %70, 11
	br i1 %289, label %typeswitch.body-65, label %typeswitch.next-64

typeswitch.body-52:
	%290 = bitcast %..rawptr %71 to %Type_Info_Tuple*
	%291 = load %Type_Info_Tuple, %Type_Info_Tuple* %290, align 8
	store %Type_Info_Tuple %291, %Type_Info_Tuple* %28
	; count
	
	; SelectorExpr
	%292 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 1
	%293 = load {%..string*, i64}, {%..string*, i64}* %292, align 8
	%294 = extractvalue {%..string*, i64} %293, 1
	store i64 %294, i64* %29
	; IfStmt
	%295 = load i64, i64* %29, align 8
	%296 = icmp ne i64 %295, 1
	%297 = zext i1 %296 to i8
	%298 = trunc i8 %297 to i1
	br i1 %298, label %if.then-53, label %if.done-54

if.then-53:
	; SelectorExpr
	%299 = load i64, i64* %0, align 8
	%300 = call {i64, i64} @os-3.write_string(i64 %299, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$23, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-54

if.done-54:
	; RangeStmt
	; name
	%301 = bitcast %..string* %30 to %..rawptr
	%302 = call %..rawptr @__mem_zero(%..rawptr %301, i64 16)
	store %..string zeroinitializer, %..string* %30
	
	; i
	%303 = bitcast i64* %31 to %..rawptr
	%304 = call %..rawptr @__mem_zero(%..rawptr %303, i64 8)
	store i64 zeroinitializer, i64* %31
	
	; SelectorExpr
	%305 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 1
	%306 = load {%..string*, i64}, {%..string*, i64}* %305, align 8
	%307 = bitcast i64* %32 to %..rawptr
	%308 = call %..rawptr @__mem_zero(%..rawptr %307, i64 8)
	store i64 zeroinitializer, i64* %32
	%309 = extractvalue {%..string*, i64} %306, 1
	store i64 %309, i64* %32
	%310 = bitcast i64* %33 to %..rawptr
	%311 = call %..rawptr @__mem_zero(%..rawptr %310, i64 8)
	store i64 zeroinitializer, i64* %33
	store i64 -1, i64* %33
	br label %for.index.loop-55

for.index.loop-55:
	%312 = load i64, i64* %33, align 8
	%313 = add i64 %312, 1
	store i64 %313, i64* %33
	%314 = load i64, i64* %32, align 8
	%315 = icmp slt i64 %313, %314
	br i1 %315, label %for.index.body-56, label %for.index.done-61

for.index.body-56:
	%316 = load i64, i64* %33, align 8
	%317 = extractvalue {%..string*, i64} %306, 0
	%318 = getelementptr inbounds %..string, %..string* %317, i64 %316
	%319 = load %..string, %..string* %318, align 8
	store %..string %319, %..string* %30
	store i64 %316, i64* %31
	; IfStmt
	%320 = load i64, i64* %31, align 8
	%321 = icmp sgt i64 %320, 0
	%322 = zext i1 %321 to i8
	%323 = trunc i8 %322 to i1
	br i1 %323, label %if.then-57, label %if.done-58

if.then-57:
	; SelectorExpr
	%324 = load i64, i64* %0, align 8
	%325 = call {i64, i64} @os-3.write_string(i64 %324, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$24, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-58

if.done-58:
	; t
	
	; IndexExpr
	; SelectorExpr
	%326 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 0
	%327 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %326, align 8
	%328 = extractvalue {%Type_Info**, i64} %327, 0
	%329 = load i64, i64* %31, align 8
	%330 = extractvalue {%Type_Info**, i64} %327, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$25, i64 0, i32 0), i64 51}, i64 716, i64 20, i64 %329, i64 %330)
	%331 = getelementptr inbounds %Type_Info*, %Type_Info** %328, i64 %329
	%332 = load %Type_Info*, %Type_Info** %331, align 8
	store %Type_Info* %332, %Type_Info** %34
	; IfStmt
	%333 = load %..string, %..string* %30, align 8
	%334 = extractvalue %..string %333, 1
	%335 = icmp sgt i64 %334, 0
	%336 = zext i1 %335 to i8
	%337 = trunc i8 %336 to i1
	br i1 %337, label %if.then-59, label %if.done-60

if.then-59:
	; SelectorExpr
	%338 = load i64, i64* %0, align 8
	%339 = load %..string, %..string* %30, align 8
	%340 = call {i64, i64} @os-3.write_string(i64 %338, %..string %339, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%341 = load i64, i64* %0, align 8
	%342 = call {i64, i64} @os-3.write_string(i64 %341, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$26, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-60

if.done-60:
	%343 = load i64, i64* %0, align 8
	%344 = load %Type_Info*, %Type_Info** %34, align 8
	call void @__print_type(i64 %343, %Type_Info* %344, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-55

for.index.done-61:
	; IfStmt
	%345 = load i64, i64* %29, align 8
	%346 = icmp ne i64 %345, 1
	%347 = zext i1 %346 to i8
	%348 = trunc i8 %347 to i1
	br i1 %348, label %if.then-62, label %if.done-63

if.then-62:
	; SelectorExpr
	%349 = load i64, i64* %0, align 8
	%350 = call {i64, i64} @os-3.write_string(i64 %349, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$27, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-63

if.done-63:
	br label %typeswitch.done-108

typeswitch.next-64:
	%351 = icmp eq i8 %70, 12
	br i1 %351, label %typeswitch.body-67, label %typeswitch.next-66

typeswitch.body-65:
	%352 = bitcast %..rawptr %71 to %Type_Info_Array*
	%353 = load %Type_Info_Array, %Type_Info_Array* %352, align 8
	store %Type_Info_Array %353, %Type_Info_Array* %35
	; SelectorExpr
	%354 = load i64, i64* %0, align 8
	%355 = call {i64, i64} @os-3.write_string(i64 %354, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$28, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%356 = load i64, i64* %0, align 8
	; SelectorExpr
	%357 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %35, i64 0, i32 2
	%358 = load i64, i64* %357, align 8
	%359 = bitcast i64 %358 to i64
	call void @__print_u64(i64 %356, i64 %359, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%360 = load i64, i64* %0, align 8
	%361 = call {i64, i64} @os-3.write_string(i64 %360, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$29, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%362 = load i64, i64* %0, align 8
	; SelectorExpr
	%363 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %35, i64 0, i32 0
	%364 = load %Type_Info*, %Type_Info** %363, align 8
	call void @__print_type(i64 %362, %Type_Info* %364, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-66:
	%365 = icmp eq i8 %70, 13
	br i1 %365, label %typeswitch.body-69, label %typeswitch.next-68

typeswitch.body-67:
	%366 = bitcast %..rawptr %71 to %Type_Info_Dynamic_Array*
	%367 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %366, align 8
	store %Type_Info_Dynamic_Array %367, %Type_Info_Dynamic_Array* %36
	; SelectorExpr
	%368 = load i64, i64* %0, align 8
	%369 = call {i64, i64} @os-3.write_string(i64 %368, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$2a, i64 0, i32 0), i64 9}, %Context* noalias nonnull %__.context_ptr)
	%370 = load i64, i64* %0, align 8
	; SelectorExpr
	%371 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %36, i64 0, i32 0
	%372 = load %Type_Info*, %Type_Info** %371, align 8
	call void @__print_type(i64 %370, %Type_Info* %372, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-68:
	%373 = icmp eq i8 %70, 18
	br i1 %373, label %typeswitch.body-71, label %typeswitch.next-70

typeswitch.body-69:
	%374 = bitcast %..rawptr %71 to %Type_Info_Slice*
	%375 = load %Type_Info_Slice, %Type_Info_Slice* %374, align 8
	store %Type_Info_Slice %375, %Type_Info_Slice* %37
	; SelectorExpr
	%376 = load i64, i64* %0, align 8
	%377 = call {i64, i64} @os-3.write_string(i64 %376, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$2b, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%378 = load i64, i64* %0, align 8
	; SelectorExpr
	%379 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %37, i64 0, i32 0
	%380 = load %Type_Info*, %Type_Info** %379, align 8
	call void @__print_type(i64 %378, %Type_Info* %380, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-70:
	%381 = icmp eq i8 %70, 15
	br i1 %381, label %typeswitch.body-73, label %typeswitch.next-72

typeswitch.body-71:
	%382 = bitcast %..rawptr %71 to %Type_Info_Map*
	%383 = load %Type_Info_Map, %Type_Info_Map* %382, align 8
	store %Type_Info_Map %383, %Type_Info_Map* %38
	; SelectorExpr
	%384 = load i64, i64* %0, align 8
	%385 = call {i64, i64} @os-3.write_string(i64 %384, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2c, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	%386 = load i64, i64* %0, align 8
	; SelectorExpr
	%387 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %38, i64 0, i32 0
	%388 = load %Type_Info*, %Type_Info** %387, align 8
	call void @__print_type(i64 %386, %Type_Info* %388, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%389 = load i64, i64* %0, align 8
	%390 = call {i64, i64} @os-3.write_byte(i64 %389, i8 93, %Context* noalias nonnull %__.context_ptr)
	%391 = load i64, i64* %0, align 8
	; SelectorExpr
	%392 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %38, i64 0, i32 1
	%393 = load %Type_Info*, %Type_Info** %392, align 8
	call void @__print_type(i64 %391, %Type_Info* %393, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-72:
	%394 = icmp eq i8 %70, 16
	br i1 %394, label %typeswitch.body-86, label %typeswitch.next-85

typeswitch.body-73:
	%395 = bitcast %..rawptr %71 to %Type_Info_Struct*
	%396 = load %Type_Info_Struct, %Type_Info_Struct* %395, align 8
	store %Type_Info_Struct %396, %Type_Info_Struct* %39
	; SelectorExpr
	%397 = load i64, i64* %0, align 8
	%398 = call {i64, i64} @os-3.write_string(i64 %397, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2d, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%399 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 4
	%400 = load i8, i8* %399, align 1
	%401 = trunc i8 %400 to i1
	br i1 %401, label %if.then-74, label %if.done-75

if.then-74:
	; SelectorExpr
	%402 = load i64, i64* %0, align 8
	%403 = call {i64, i64} @os-3.write_string(i64 %402, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$2e, i64 0, i32 0), i64 8}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-75

if.done-75:
	; IfStmt
	; SelectorExpr
	%404 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 5
	%405 = load i8, i8* %404, align 1
	%406 = trunc i8 %405 to i1
	br i1 %406, label %if.then-76, label %if.done-77

if.then-76:
	; SelectorExpr
	%407 = load i64, i64* %0, align 8
	%408 = call {i64, i64} @os-3.write_string(i64 %407, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$2f, i64 0, i32 0), i64 11}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-77

if.done-77:
	; IfStmt
	; SelectorExpr
	%409 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 6
	%410 = load i8, i8* %409, align 1
	%411 = trunc i8 %410 to i1
	br i1 %411, label %if.then-78, label %if.done-79

if.then-78:
	; SelectorExpr
	%412 = load i64, i64* %0, align 8
	%413 = call {i64, i64} @os-3.write_string(i64 %412, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$30, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%414 = load i64, i64* %0, align 8
	; SelectorExpr
	%415 = load %Type_Info*, %Type_Info** %1, align 8
	%416 = getelementptr inbounds %Type_Info, %Type_Info* %415, i64 0
	%417 = getelementptr inbounds %Type_Info, %Type_Info* %416, i64 0, i32 1
	%418 = load i64, i64* %417, align 8
	%419 = bitcast i64 %418 to i64
	call void @__print_u64(i64 %414, i64 %419, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%420 = load i64, i64* %0, align 8
	%421 = call {i64, i64} @os-3.write_byte(i64 %420, i8 32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-79

if.done-79:
	; SelectorExpr
	%422 = load i64, i64* %0, align 8
	%423 = call {i64, i64} @os-3.write_byte(i64 %422, i8 123, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%424 = bitcast %..string* %40 to %..rawptr
	%425 = call %..rawptr @__mem_zero(%..rawptr %424, i64 16)
	store %..string zeroinitializer, %..string* %40
	
	; i
	%426 = bitcast i64* %41 to %..rawptr
	%427 = call %..rawptr @__mem_zero(%..rawptr %426, i64 8)
	store i64 zeroinitializer, i64* %41
	
	; SelectorExpr
	%428 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 1
	%429 = load {%..string*, i64}, {%..string*, i64}* %428, align 8
	%430 = bitcast i64* %42 to %..rawptr
	%431 = call %..rawptr @__mem_zero(%..rawptr %430, i64 8)
	store i64 zeroinitializer, i64* %42
	%432 = extractvalue {%..string*, i64} %429, 1
	store i64 %432, i64* %42
	%433 = bitcast i64* %43 to %..rawptr
	%434 = call %..rawptr @__mem_zero(%..rawptr %433, i64 8)
	store i64 zeroinitializer, i64* %43
	store i64 -1, i64* %43
	br label %for.index.loop-80

for.index.loop-80:
	%435 = load i64, i64* %43, align 8
	%436 = add i64 %435, 1
	store i64 %436, i64* %43
	%437 = load i64, i64* %42, align 8
	%438 = icmp slt i64 %436, %437
	br i1 %438, label %for.index.body-81, label %for.index.done-84

for.index.body-81:
	%439 = load i64, i64* %43, align 8
	%440 = extractvalue {%..string*, i64} %429, 0
	%441 = getelementptr inbounds %..string, %..string* %440, i64 %439
	%442 = load %..string, %..string* %441, align 8
	store %..string %442, %..string* %40
	store i64 %439, i64* %41
	; IfStmt
	%443 = load i64, i64* %41, align 8
	%444 = icmp sgt i64 %443, 0
	%445 = zext i1 %444 to i8
	%446 = trunc i8 %445 to i1
	br i1 %446, label %if.then-82, label %if.done-83

if.then-82:
	; SelectorExpr
	%447 = load i64, i64* %0, align 8
	%448 = call {i64, i64} @os-3.write_string(i64 %447, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$31, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-83

if.done-83:
	; SelectorExpr
	%449 = load i64, i64* %0, align 8
	%450 = load %..string, %..string* %40, align 8
	%451 = call {i64, i64} @os-3.write_string(i64 %449, %..string %450, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%452 = load i64, i64* %0, align 8
	%453 = call {i64, i64} @os-3.write_string(i64 %452, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$32, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%454 = load i64, i64* %0, align 8
	; IndexExpr
	; SelectorExpr
	%455 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 0
	%456 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %455, align 8
	%457 = extractvalue {%Type_Info**, i64} %456, 0
	%458 = load i64, i64* %41, align 8
	%459 = extractvalue {%Type_Info**, i64} %456, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$33, i64 0, i32 0), i64 51}, i64 758, i64 32, i64 %458, i64 %459)
	%460 = getelementptr inbounds %Type_Info*, %Type_Info** %457, i64 %458
	%461 = load %Type_Info*, %Type_Info** %460, align 8
	call void @__print_type(i64 %454, %Type_Info* %461, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-80

for.index.done-84:
	; SelectorExpr
	%462 = load i64, i64* %0, align 8
	%463 = call {i64, i64} @os-3.write_byte(i64 %462, i8 125, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-85:
	%464 = icmp eq i8 %70, 17
	br i1 %464, label %typeswitch.body-93, label %typeswitch.next-92

typeswitch.body-86:
	%465 = bitcast %..rawptr %71 to %Type_Info_Union*
	%466 = load %Type_Info_Union, %Type_Info_Union* %465, align 8
	store %Type_Info_Union %466, %Type_Info_Union* %44
	; SelectorExpr
	%467 = load i64, i64* %0, align 8
	%468 = call {i64, i64} @os-3.write_string(i64 %467, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$34, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; variant
	%469 = bitcast %Type_Info** %45 to %..rawptr
	%470 = call %..rawptr @__mem_zero(%..rawptr %469, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %45
	
	; i
	%471 = bitcast i64* %46 to %..rawptr
	%472 = call %..rawptr @__mem_zero(%..rawptr %471, i64 8)
	store i64 zeroinitializer, i64* %46
	
	; SelectorExpr
	%473 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %44, i64 0, i32 0
	%474 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %473, align 8
	%475 = bitcast i64* %47 to %..rawptr
	%476 = call %..rawptr @__mem_zero(%..rawptr %475, i64 8)
	store i64 zeroinitializer, i64* %47
	%477 = extractvalue {%Type_Info**, i64} %474, 1
	store i64 %477, i64* %47
	%478 = bitcast i64* %48 to %..rawptr
	%479 = call %..rawptr @__mem_zero(%..rawptr %478, i64 8)
	store i64 zeroinitializer, i64* %48
	store i64 -1, i64* %48
	br label %for.index.loop-87

for.index.loop-87:
	%480 = load i64, i64* %48, align 8
	%481 = add i64 %480, 1
	store i64 %481, i64* %48
	%482 = load i64, i64* %47, align 8
	%483 = icmp slt i64 %481, %482
	br i1 %483, label %for.index.body-88, label %for.index.done-91

for.index.body-88:
	%484 = load i64, i64* %48, align 8
	%485 = extractvalue {%Type_Info**, i64} %474, 0
	%486 = getelementptr inbounds %Type_Info*, %Type_Info** %485, i64 %484
	%487 = load %Type_Info*, %Type_Info** %486, align 8
	store %Type_Info* %487, %Type_Info** %45
	store i64 %484, i64* %46
	; IfStmt
	%488 = load i64, i64* %46, align 8
	%489 = icmp sgt i64 %488, 0
	%490 = zext i1 %489 to i8
	%491 = trunc i8 %490 to i1
	br i1 %491, label %if.then-89, label %if.done-90

if.then-89:
	; SelectorExpr
	%492 = load i64, i64* %0, align 8
	%493 = call {i64, i64} @os-3.write_string(i64 %492, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$35, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-90

if.done-90:
	%494 = load i64, i64* %0, align 8
	%495 = load %Type_Info*, %Type_Info** %45, align 8
	call void @__print_type(i64 %494, %Type_Info* %495, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-87

for.index.done-91:
	; SelectorExpr
	%496 = load i64, i64* %0, align 8
	%497 = call {i64, i64} @os-3.write_string(i64 %496, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$36, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-92:
	%498 = icmp eq i8 %70, 19
	br i1 %498, label %typeswitch.body-100, label %typeswitch.next-99

typeswitch.body-93:
	%499 = bitcast %..rawptr %71 to %Type_Info_Enum*
	%500 = load %Type_Info_Enum, %Type_Info_Enum* %499, align 8
	store %Type_Info_Enum %500, %Type_Info_Enum* %49
	; SelectorExpr
	%501 = load i64, i64* %0, align 8
	%502 = call {i64, i64} @os-3.write_string(i64 %501, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$37, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	%503 = load i64, i64* %0, align 8
	; SelectorExpr
	%504 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %49, i64 0, i32 0
	%505 = load %Type_Info*, %Type_Info** %504, align 8
	call void @__print_type(i64 %503, %Type_Info* %505, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%506 = load i64, i64* %0, align 8
	%507 = call {i64, i64} @os-3.write_string(i64 %506, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$38, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%508 = bitcast %..string* %50 to %..rawptr
	%509 = call %..rawptr @__mem_zero(%..rawptr %508, i64 16)
	store %..string zeroinitializer, %..string* %50
	
	; i
	%510 = bitcast i64* %51 to %..rawptr
	%511 = call %..rawptr @__mem_zero(%..rawptr %510, i64 8)
	store i64 zeroinitializer, i64* %51
	
	; SelectorExpr
	%512 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %49, i64 0, i32 1
	%513 = load {%..string*, i64}, {%..string*, i64}* %512, align 8
	%514 = bitcast i64* %52 to %..rawptr
	%515 = call %..rawptr @__mem_zero(%..rawptr %514, i64 8)
	store i64 zeroinitializer, i64* %52
	%516 = extractvalue {%..string*, i64} %513, 1
	store i64 %516, i64* %52
	%517 = bitcast i64* %53 to %..rawptr
	%518 = call %..rawptr @__mem_zero(%..rawptr %517, i64 8)
	store i64 zeroinitializer, i64* %53
	store i64 -1, i64* %53
	br label %for.index.loop-94

for.index.loop-94:
	%519 = load i64, i64* %53, align 8
	%520 = add i64 %519, 1
	store i64 %520, i64* %53
	%521 = load i64, i64* %52, align 8
	%522 = icmp slt i64 %520, %521
	br i1 %522, label %for.index.body-95, label %for.index.done-98

for.index.body-95:
	%523 = load i64, i64* %53, align 8
	%524 = extractvalue {%..string*, i64} %513, 0
	%525 = getelementptr inbounds %..string, %..string* %524, i64 %523
	%526 = load %..string, %..string* %525, align 8
	store %..string %526, %..string* %50
	store i64 %523, i64* %51
	; IfStmt
	%527 = load i64, i64* %51, align 8
	%528 = icmp sgt i64 %527, 0
	%529 = zext i1 %528 to i8
	%530 = trunc i8 %529 to i1
	br i1 %530, label %if.then-96, label %if.done-97

if.then-96:
	; SelectorExpr
	%531 = load i64, i64* %0, align 8
	%532 = call {i64, i64} @os-3.write_string(i64 %531, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$39, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-97

if.done-97:
	; SelectorExpr
	%533 = load i64, i64* %0, align 8
	%534 = load %..string, %..string* %50, align 8
	%535 = call {i64, i64} @os-3.write_string(i64 %533, %..string %534, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-94

for.index.done-98:
	; SelectorExpr
	%536 = load i64, i64* %0, align 8
	%537 = call {i64, i64} @os-3.write_string(i64 %536, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$3a, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.next-99:
	br label %typeswitch.done-108

typeswitch.body-100:
	%538 = bitcast %..rawptr %71 to %Type_Info_Bit_Field*
	%539 = load %Type_Info_Bit_Field, %Type_Info_Bit_Field* %538, align 8
	store %Type_Info_Bit_Field %539, %Type_Info_Bit_Field* %54
	; SelectorExpr
	%540 = load i64, i64* %0, align 8
	%541 = call {i64, i64} @os-3.write_string(i64 %540, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$3b, i64 0, i32 0), i64 10}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%542 = load %Type_Info*, %Type_Info** %1, align 8
	%543 = getelementptr inbounds %Type_Info, %Type_Info* %542, i64 0
	%544 = getelementptr inbounds %Type_Info, %Type_Info* %543, i64 0, i32 1
	%545 = load i64, i64* %544, align 8
	%546 = icmp ne i64 %545, 1
	%547 = zext i1 %546 to i8
	%548 = trunc i8 %547 to i1
	br i1 %548, label %if.then-101, label %if.done-102

if.then-101:
	; SelectorExpr
	%549 = load i64, i64* %0, align 8
	%550 = call {i64, i64} @os-3.write_string(i64 %549, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$3c, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%551 = load i64, i64* %0, align 8
	; SelectorExpr
	%552 = load %Type_Info*, %Type_Info** %1, align 8
	%553 = getelementptr inbounds %Type_Info, %Type_Info* %552, i64 0
	%554 = getelementptr inbounds %Type_Info, %Type_Info* %553, i64 0, i32 1
	%555 = load i64, i64* %554, align 8
	%556 = bitcast i64 %555 to i64
	call void @__print_u64(i64 %551, i64 %556, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%557 = load i64, i64* %0, align 8
	%558 = call {i64, i64} @os-3.write_byte(i64 %557, i8 32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-102

if.done-102:
	; SelectorExpr
	%559 = load i64, i64* %0, align 8
	%560 = call {i64, i64} @os-3.write_string(i64 %559, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$3d, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%561 = bitcast %..string* %55 to %..rawptr
	%562 = call %..rawptr @__mem_zero(%..rawptr %561, i64 16)
	store %..string zeroinitializer, %..string* %55
	
	; i
	%563 = bitcast i64* %56 to %..rawptr
	%564 = call %..rawptr @__mem_zero(%..rawptr %563, i64 8)
	store i64 zeroinitializer, i64* %56
	
	; SelectorExpr
	%565 = getelementptr inbounds %Type_Info_Bit_Field, %Type_Info_Bit_Field* %54, i64 0, i32 0
	%566 = load {%..string*, i64}, {%..string*, i64}* %565, align 8
	%567 = bitcast i64* %57 to %..rawptr
	%568 = call %..rawptr @__mem_zero(%..rawptr %567, i64 8)
	store i64 zeroinitializer, i64* %57
	%569 = extractvalue {%..string*, i64} %566, 1
	store i64 %569, i64* %57
	%570 = bitcast i64* %58 to %..rawptr
	%571 = call %..rawptr @__mem_zero(%..rawptr %570, i64 8)
	store i64 zeroinitializer, i64* %58
	store i64 -1, i64* %58
	br label %for.index.loop-103

for.index.loop-103:
	%572 = load i64, i64* %58, align 8
	%573 = add i64 %572, 1
	store i64 %573, i64* %58
	%574 = load i64, i64* %57, align 8
	%575 = icmp slt i64 %573, %574
	br i1 %575, label %for.index.body-104, label %for.index.done-107

for.index.body-104:
	%576 = load i64, i64* %58, align 8
	%577 = extractvalue {%..string*, i64} %566, 0
	%578 = getelementptr inbounds %..string, %..string* %577, i64 %576
	%579 = load %..string, %..string* %578, align 8
	store %..string %579, %..string* %55
	store i64 %576, i64* %56
	; IfStmt
	%580 = load i64, i64* %56, align 8
	%581 = icmp sgt i64 %580, 0
	%582 = zext i1 %581 to i8
	%583 = trunc i8 %582 to i1
	br i1 %583, label %if.then-105, label %if.done-106

if.then-105:
	; SelectorExpr
	%584 = load i64, i64* %0, align 8
	%585 = call {i64, i64} @os-3.write_string(i64 %584, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$3e, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-106

if.done-106:
	; SelectorExpr
	%586 = load i64, i64* %0, align 8
	%587 = load %..string, %..string* %55, align 8
	%588 = call {i64, i64} @os-3.write_string(i64 %586, %..string %587, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%589 = load i64, i64* %0, align 8
	%590 = call {i64, i64} @os-3.write_string(i64 %589, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$3f, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%591 = load i64, i64* %0, align 8
	; IndexExpr
	; SelectorExpr
	%592 = getelementptr inbounds %Type_Info_Bit_Field, %Type_Info_Bit_Field* %54, i64 0, i32 1
	%593 = load {i32*, i64}, {i32*, i64}* %592, align 8
	%594 = extractvalue {i32*, i64} %593, 0
	%595 = load i64, i64* %56, align 8
	%596 = extractvalue {i32*, i64} %593, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$40, i64 0, i32 0), i64 51}, i64 792, i64 34, i64 %595, i64 %596)
	%597 = getelementptr inbounds i32, i32* %594, i64 %595
	%598 = load i32, i32* %597, align 4
	%599 = sext i32 %598 to i64
	call void @__print_u64(i64 %591, i64 %599, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-103

for.index.done-107:
	; SelectorExpr
	%600 = load i64, i64* %0, align 8
	%601 = call {i64, i64} @os-3.write_string(i64 %600, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$41, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-108

typeswitch.done-108:
	ret void
}

define i8 @assert(i1 %condition, %..string %message, %Source_Code_Location* %loc) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca %Context, align 16
	%4 = bitcast %Context* %3 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 72)
	store %Context zeroinitializer, %Context* %3
	%6 = load %Context, %Context* @__ggv$0, align 8
	store %Context %6, %Context* %3
	%7 = getelementptr inbounds %Context, %Context* %3, i64 0, i32 0
	%8 = call %Allocator @default_allocator(%Context* noalias nonnull %3)
	store %Allocator %8, %Allocator* %7
	%9 = alloca %Source_Code_Location, align 16
	
	%10 = zext i1 %condition to i8
	store i8 %10, i8* %0
	
	store %..string %message, %..string* %1
	%11 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%12 = load i8, i8* %0, align 1
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.done-4, label %if.then-1

if.then-1:
	; fd
	
	; SelectorExpr
	%14 = load i64, i64* @windows-6.stderr, align 8
	store i64 %14, i64* %2
	%15 = load i64, i64* %2, align 8
	%16 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%17 = bitcast %Source_Code_Location* %9 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %9
	store %Source_Code_Location %16, %Source_Code_Location* %9
	call void @__print_caller_location(i64 %15, %Source_Code_Location* %9, %Context* noalias nonnull %3)
	; SelectorExpr
	%19 = load i64, i64* %2, align 8
	%20 = call {i64, i64} @os-3.write_string(i64 %19, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$42, i64 0, i32 0), i64 18}, %Context* noalias nonnull %3)
	; IfStmt
	%21 = load %..string, %..string* %1, align 8
	%22 = extractvalue %..string %21, 1
	%23 = icmp sgt i64 %22, 0
	%24 = zext i1 %23 to i8
	%25 = trunc i8 %24 to i1
	br i1 %25, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%26 = load i64, i64* %2, align 8
	%27 = call {i64, i64} @os-3.write_string(i64 %26, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$43, i64 0, i32 0), i64 2}, %Context* noalias nonnull %3)
	; SelectorExpr
	%28 = load i64, i64* %2, align 8
	%29 = load %..string, %..string* %1, align 8
	%30 = call {i64, i64} @os-3.write_string(i64 %28, %..string %29, %Context* noalias nonnull %3)
	br label %if.done-3

if.done-3:
	; SelectorExpr
	%31 = load i64, i64* %2, align 8
	%32 = call {i64, i64} @os-3.write_byte(i64 %31, i8 10, %Context* noalias nonnull %3)
	call ccc void @llvm.debugtrap()
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%33 = load i8, i8* %0, align 1
	ret i8 %33
}

define void @panic(%..string %message, %Source_Code_Location* %loc) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca %Context, align 16
	%3 = bitcast %Context* %2 to %..rawptr
	%4 = call %..rawptr @__mem_zero(%..rawptr %3, i64 72)
	store %Context zeroinitializer, %Context* %2
	%5 = load %Context, %Context* @__ggv$0, align 8
	store %Context %5, %Context* %2
	%6 = getelementptr inbounds %Context, %Context* %2, i64 0, i32 0
	%7 = call %Allocator @default_allocator(%Context* noalias nonnull %2)
	store %Allocator %7, %Allocator* %6
	%8 = alloca %Source_Code_Location, align 16
	
	store %..string %message, %..string* %0
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; fd
	
	; SelectorExpr
	%10 = load i64, i64* @windows-6.stderr, align 8
	store i64 %10, i64* %1
	%11 = load i64, i64* %1, align 8
	%12 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%13 = bitcast %Source_Code_Location* %8 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %12, %Source_Code_Location* %8
	call void @__print_caller_location(i64 %11, %Source_Code_Location* %8, %Context* noalias nonnull %2)
	; SelectorExpr
	%15 = load i64, i64* %1, align 8
	%16 = call {i64, i64} @os-3.write_string(i64 %15, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$44, i64 0, i32 0), i64 6}, %Context* noalias nonnull %2)
	; IfStmt
	%17 = load %..string, %..string* %0, align 8
	%18 = extractvalue %..string %17, 1
	%19 = icmp sgt i64 %18, 0
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%22 = load i64, i64* %1, align 8
	%23 = call {i64, i64} @os-3.write_string(i64 %22, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$45, i64 0, i32 0), i64 2}, %Context* noalias nonnull %2)
	; SelectorExpr
	%24 = load i64, i64* %1, align 8
	%25 = load %..string, %..string* %0, align 8
	%26 = call {i64, i64} @os-3.write_string(i64 %24, %..string %25, %Context* noalias nonnull %2)
	br label %if.done-2

if.done-2:
	; SelectorExpr
	%27 = load i64, i64* %1, align 8
	%28 = call {i64, i64} @os-3.write_byte(i64 %27, i8 10, %Context* noalias nonnull %2)
	call ccc void @llvm.debugtrap()
	ret void
}

define i8 @__string_eq(%..string %a, %..string %b) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; SwitchStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 1
	%4 = load %..string, %..string* %1, align 8
	%5 = extractvalue %..string %4, 1
	%6 = icmp ne i64 %3, %5
	%7 = zext i1 %6 to i8
	%8 = icmp eq i8 1, %7
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = load %..string, %..string* %0, align 8
	%10 = extractvalue %..string %9, 1
	%11 = icmp eq i64 %10, 0
	%12 = zext i1 %11 to i8
	%13 = icmp eq i8 1, %12
	br i1 %13, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; ReturnStmt
	ret i8 0

switch.case.next-3:
	; IndexExpr
	%14 = load %..string, %..string* %0, align 8
	%15 = extractvalue %..string %14, 0
	%16 = extractvalue %..string %14, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$46, i64 0, i32 0), i64 51}, i64 855, i64 10, i64 0, i64 %16)
	%17 = getelementptr inbounds i8, i8* %15, i64 0
	%18 = getelementptr inbounds i8, i8* %17, i64 0
	; IndexExpr
	%19 = load %..string, %..string* %1, align 8
	%20 = extractvalue %..string %19, 0
	%21 = extractvalue %..string %19, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$47, i64 0, i32 0), i64 51}, i64 855, i64 19, i64 0, i64 %21)
	%22 = getelementptr inbounds i8, i8* %20, i64 0
	%23 = getelementptr inbounds i8, i8* %22, i64 0
	%24 = icmp eq i8* %18, %23
	%25 = zext i1 %24 to i8
	%26 = icmp eq i8 1, %25
	br i1 %26, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	; ReturnStmt
	ret i8 1

switch.case.next-5:
	; ReturnStmt
	%27 = load %..string, %..string* %0, align 8
	%28 = load %..string, %..string* %1, align 8
	%29 = call i64 @__string_cmp(%..string %27, %..string %28)
	%30 = icmp eq i64 %29, 0
	%31 = zext i1 %30 to i8
	ret i8 %31

switch.fall.body-6:
	; ReturnStmt
	ret i8 1
}

define i64 @__string_cmp(%..string %a, %..string %b) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	; IndexExpr
	%2 = load %..string, %..string* %0, align 8
	%3 = extractvalue %..string %2, 0
	%4 = extractvalue %..string %2, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$48, i64 0, i32 0), i64 51}, i64 861, i64 26, i64 0, i64 %4)
	%5 = getelementptr inbounds i8, i8* %3, i64 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	; IndexExpr
	%7 = load %..string, %..string* %1, align 8
	%8 = extractvalue %..string %7, 0
	%9 = extractvalue %..string %7, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$49, i64 0, i32 0), i64 51}, i64 861, i64 33, i64 0, i64 %9)
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	; min
	%12 = load %..string, %..string* %1, align 8
	%13 = extractvalue %..string %12, 1
	%14 = load %..string, %..string* %0, align 8
	%15 = extractvalue %..string %14, 1
	%16 = icmp slt i64 %15, %13
	%17 = select i1 %16, i64 %15, i64 %13
	%18 = call i64 @__mem_compare(i8* %6, i8* %11, i64 %17)
	ret i64 %18
}

define i8 @__string_ne(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i8 @__string_eq(%..string %2, %..string %3)
	%5 = xor i8 -1, %4
	ret i8 %5
}

define i8 @__string_lt(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @__string_cmp(%..string %2, %..string %3)
	%5 = icmp slt i64 %4, 0
	%6 = zext i1 %5 to i8
	ret i8 %6
}

define i8 @__string_gt(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @__string_cmp(%..string %2, %..string %3)
	%5 = icmp sgt i64 %4, 0
	%6 = zext i1 %5 to i8
	ret i8 %6
}

define i8 @__string_le(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @__string_cmp(%..string %2, %..string %3)
	%5 = icmp sle i64 %4, 0
	%6 = zext i1 %5 to i8
	ret i8 %6
}

define i8 @__string_ge(%..string %a, %..string %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	
	store %..string %a, %..string* %0
	
	store %..string %b, %..string* %1
	; ReturnStmt
	%2 = load %..string, %..string* %0, align 8
	%3 = load %..string, %..string* %1, align 8
	%4 = call i64 @__string_cmp(%..string %2, %..string %3)
	%5 = icmp sge i64 %4, 0
	%6 = zext i1 %5 to i8
	ret i8 %6
}

define i64 @__cstring_len(i8* %s) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8*, align 16
	
	store i8* %s, i8** %0
	; n
	
	store i64 0, i64* %1
	; ForStmt
	; p
	
	%3 = load i8*, i8** %0, align 8
	%4 = bitcast i8* %3 to i8*
	store i8* %4, i8** %2
	br label %for.loop-1

for.loop-1:
	%5 = load i8*, i8** %2, align 8
	%6 = icmp ne i8* %5, zeroinitializer
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %cmp.and-2, label %for.done-4

cmp.and-2:
	%9 = load i8*, i8** %2, align 8
	%10 = getelementptr inbounds i8, i8* %9, i64 0
	%11 = load i8, i8* %10, align 1
	%12 = icmp ne i8 %11, 0
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %for.body-3, label %for.done-4

for.body-3:
	; AssignStmt
	%15 = load i64, i64* %1, align 8
	%16 = add i64 %15, 1
	store i64 %16, i64* %1
	; AssignStmt
	%17 = load i8*, i8** %2, align 8
	%18 = getelementptr inbounds i8, i8* %17, i64 1
	store i8* %18, i8** %2
	br label %for.loop-1

for.done-4:
	; ReturnStmt
	%19 = load i64, i64* %1, align 8
	ret i64 %19
}

define %..string @__cstring_to_string(i8* %s) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i64, align 16
	%3 = alloca %raw-5.String, align 16
	
	store i8* %s, i8** %0
	; IfStmt
	%4 = load i8*, i8** %0, align 8
	%5 = bitcast i8* %4 to i8*
	%6 = bitcast %..rawptr null to i8*
	%7 = icmp eq i8* %5, %6
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %..string zeroinitializer

if.done-2:
	; ptr
	
	%10 = load i8*, i8** %0, align 8
	%11 = bitcast i8* %10 to i8*
	store i8* %11, i8** %1
	; n
	
	%12 = load i8*, i8** %0, align 8
	%13 = call i64 @__cstring_len(i8* %12)
	store i64 %13, i64* %2
	; ReturnStmt
	; CompoundLit
	%14 = bitcast %raw-5.String* %3 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 16)
	store %raw-5.String zeroinitializer, %raw-5.String* %3
	store %raw-5.String {i8* zeroinitializer, i64 zeroinitializer}, %raw-5.String* %3
	%16 = load i8*, i8** %1, align 8
	%17 = getelementptr inbounds %raw-5.String, %raw-5.String* %3, i64 0, i32 0
	store i8* %16, i8** %17
	%18 = load i64, i64* %2, align 8
	%19 = getelementptr inbounds %raw-5.String, %raw-5.String* %3, i64 0, i32 1
	store i64 %18, i64* %19
	%20 = load %raw-5.String, %raw-5.String* %3, align 8
	%21 = bitcast %raw-5.String* %3 to %..string*
	%22 = load %..string, %..string* %21, align 8
	ret %..string %22
}

define i8 @__complex64_eq(%..complex64 %a, %..complex64 %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..complex64, align 16
	%1 = alloca %..complex64, align 16
	
	store %..complex64 %a, %..complex64* %0
	
	store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 4
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 4
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp oeq float %3, %5
	%7 = zext i1 %6 to i8
	; real
	%8 = load %..complex64, %..complex64* %0, align 4
	%9 = extractvalue %..complex64 %8, 0
	; real
	%10 = load %..complex64, %..complex64* %1, align 4
	%11 = extractvalue %..complex64 %10, 0
	%12 = fcmp oeq float %9, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%15 = load %..complex64, %..complex64* %0, align 4
	%16 = extractvalue %..complex64 %15, 1
	; imag
	%17 = load %..complex64, %..complex64* %1, align 4
	%18 = extractvalue %..complex64 %17, 1
	%19 = fcmp oeq float %16, %18
	%20 = zext i1 %19 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%21 = phi i8 [ 0, %decls-0 ], [ %20, %logical.cmp.rhs-1 ]
	ret i8 %21
}

define i8 @__complex64_ne(%..complex64 %a, %..complex64 %b) alwaysinline #1 {
decls-0:
	%0 = alloca %..complex64, align 16
	%1 = alloca %..complex64, align 16
	
	store %..complex64 %a, %..complex64* %0
	
	store %..complex64 %b, %..complex64* %1
	; ReturnStmt
	; real
	%2 = load %..complex64, %..complex64* %0, align 4
	%3 = extractvalue %..complex64 %2, 0
	; real
	%4 = load %..complex64, %..complex64* %1, align 4
	%5 = extractvalue %..complex64 %4, 0
	%6 = fcmp one float %3, %5
	%7 = zext i1 %6 to i8
	; real
	%8 = load %..complex64, %..complex64* %0, align 4
	%9 = extractvalue %..complex64 %8, 0
	; real
	%10 = load %..complex64, %..complex64* %1, align 4
	%11 = extractvalue %..complex64 %10, 0
	%12 = fcmp one float %9, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%15 = load %..complex64, %..complex64* %0, align 4
	%16 = extractvalue %..complex64 %15, 1
	; imag
	%17 = load %..complex64, %..complex64* %1, align 4
	%18 = extractvalue %..complex64 %17, 1
	%19 = fcmp one float %16, %18
	%20 = zext i1 %19 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%21 = phi i8 [ 1, %decls-0 ], [ %20, %logical.cmp.rhs-1 ]
	ret i8 %21
}

define i8 @__complex128_eq(%..complex128* %a, %..complex128* %b) alwaysinline #1 {
decls-0:
	%0 = load %..complex128, %..complex128* %a, align 8
	%1 = load %..complex128, %..complex128* %b, align 8
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %a, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %b, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp oeq double %3, %5
	%7 = zext i1 %6 to i8
	; real
	%8 = load %..complex128, %..complex128* %a, align 8
	%9 = extractvalue %..complex128 %8, 0
	; real
	%10 = load %..complex128, %..complex128* %b, align 8
	%11 = extractvalue %..complex128 %10, 0
	%12 = fcmp oeq double %9, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	; imag
	%15 = load %..complex128, %..complex128* %a, align 8
	%16 = extractvalue %..complex128 %15, 1
	; imag
	%17 = load %..complex128, %..complex128* %b, align 8
	%18 = extractvalue %..complex128 %17, 1
	%19 = fcmp oeq double %16, %18
	%20 = zext i1 %19 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%21 = phi i8 [ 0, %decls-0 ], [ %20, %logical.cmp.rhs-1 ]
	ret i8 %21
}

define i8 @__complex128_ne(%..complex128* %a, %..complex128* %b) alwaysinline #1 {
decls-0:
	%0 = load %..complex128, %..complex128* %a, align 8
	%1 = load %..complex128, %..complex128* %b, align 8
	; ReturnStmt
	; real
	%2 = load %..complex128, %..complex128* %a, align 8
	%3 = extractvalue %..complex128 %2, 0
	; real
	%4 = load %..complex128, %..complex128* %b, align 8
	%5 = extractvalue %..complex128 %4, 0
	%6 = fcmp one double %3, %5
	%7 = zext i1 %6 to i8
	; real
	%8 = load %..complex128, %..complex128* %a, align 8
	%9 = extractvalue %..complex128 %8, 0
	; real
	%10 = load %..complex128, %..complex128* %b, align 8
	%11 = extractvalue %..complex128 %10, 0
	%12 = fcmp one double %9, %11
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %logical.cmp.done-2, label %logical.cmp.rhs-1

logical.cmp.rhs-1:
	; imag
	%15 = load %..complex128, %..complex128* %a, align 8
	%16 = extractvalue %..complex128 %15, 1
	; imag
	%17 = load %..complex128, %..complex128* %b, align 8
	%18 = extractvalue %..complex128 %17, 1
	%19 = fcmp one double %16, %18
	%20 = zext i1 %19 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%21 = phi i8 [ 1, %decls-0 ], [ %20, %logical.cmp.rhs-1 ]
	ret i8 %21
}

define void @__bounds_check_error(%..string %file, i64 %line, i64 %column, i64 %index, i64 %count) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca %Context, align 16
	%8 = bitcast %Context* %7 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 72)
	store %Context zeroinitializer, %Context* %7
	%10 = load %Context, %Context* @__ggv$0, align 8
	store %Context %10, %Context* %7
	%11 = getelementptr inbounds %Context, %Context* %7, i64 0, i32 0
	%12 = call %Allocator @default_allocator(%Context* noalias nonnull %7)
	store %Allocator %12, %Allocator* %11
	%13 = alloca %Source_Code_Location, align 16
	
	store %..string %file, %..string* %0
	
	store i64 %line, i64* %1
	
	store i64 %column, i64* %2
	
	store i64 %index, i64* %3
	
	store i64 %count, i64* %4
	; IfStmt
	%14 = load i64, i64* %3, align 8
	%15 = icmp sle i64 0, %14
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %cmp.and-1, label %if.done-3

cmp.and-1:
	%18 = load i64, i64* %3, align 8
	%19 = load i64, i64* %4, align 8
	%20 = icmp slt i64 %18, %19
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; fd
	
	; SelectorExpr
	%23 = load i64, i64* @windows-6.stderr, align 8
	store i64 %23, i64* %5
	%24 = load i64, i64* %5, align 8
	; CompoundLit
	%25 = bitcast %Source_Code_Location* %6 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %Source_Code_Location* %6
	%27 = load %..string, %..string* %0, align 8
	%28 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %6, i64 0, i32 0
	store %..string %27, %..string* %28
	%29 = load i64, i64* %1, align 8
	%30 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %6, i64 0, i32 1
	store i64 %29, i64* %30
	%31 = load i64, i64* %2, align 8
	%32 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %6, i64 0, i32 2
	store i64 %31, i64* %32
	%33 = load %Source_Code_Location, %Source_Code_Location* %6, align 8
	%34 = bitcast %Source_Code_Location* %13 to %..rawptr
	%35 = call %..rawptr @__mem_zero(%..rawptr %34, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %13
	store %Source_Code_Location %33, %Source_Code_Location* %13
	call void @__print_caller_location(i64 %24, %Source_Code_Location* %13, %Context* noalias nonnull %7)
	; SelectorExpr
	%36 = load i64, i64* %5, align 8
	%37 = call {i64, i64} @os-3.write_string(i64 %36, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$4a, i64 0, i32 0), i64 7}, %Context* noalias nonnull %7)
	%38 = load i64, i64* %5, align 8
	%39 = load i64, i64* %3, align 8
	%40 = bitcast i64 %39 to i64
	call void @__print_i64(i64 %38, i64 %40, %Context* noalias nonnull %7)
	; SelectorExpr
	%41 = load i64, i64* %5, align 8
	%42 = call {i64, i64} @os-3.write_string(i64 %41, %..string {i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__str$4b, i64 0, i32 0), i64 27}, %Context* noalias nonnull %7)
	%43 = load i64, i64* %5, align 8
	%44 = load i64, i64* %4, align 8
	%45 = bitcast i64 %44 to i64
	call void @__print_i64(i64 %43, i64 %45, %Context* noalias nonnull %7)
	; SelectorExpr
	%46 = load i64, i64* %5, align 8
	%47 = call {i64, i64} @os-3.write_byte(i64 %46, i8 10, %Context* noalias nonnull %7)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @__slice_expr_error(%..string %file, i64 %line, i64 %column, i64 %lo, i64 %hi, i64 %len) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %Source_Code_Location, align 16
	%8 = alloca %Context, align 16
	%9 = bitcast %Context* %8 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 72)
	store %Context zeroinitializer, %Context* %8
	%11 = load %Context, %Context* @__ggv$0, align 8
	store %Context %11, %Context* %8
	%12 = getelementptr inbounds %Context, %Context* %8, i64 0, i32 0
	%13 = call %Allocator @default_allocator(%Context* noalias nonnull %8)
	store %Allocator %13, %Allocator* %12
	%14 = alloca %Source_Code_Location, align 16
	
	store %..string %file, %..string* %0
	
	store i64 %line, i64* %1
	
	store i64 %column, i64* %2
	
	store i64 %lo, i64* %3
	
	store i64 %hi, i64* %4
	
	store i64 %len, i64* %5
	; IfStmt
	%15 = load i64, i64* %3, align 8
	%16 = icmp sle i64 0, %15
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%19 = load i64, i64* %3, align 8
	%20 = load i64, i64* %4, align 8
	%21 = icmp sle i64 %19, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%24 = load i64, i64* %4, align 8
	%25 = load i64, i64* %5, align 8
	%26 = icmp sle i64 %24, %25
	%27 = zext i1 %26 to i8
	%28 = trunc i8 %27 to i1
	br i1 %28, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; fd
	
	; SelectorExpr
	%29 = load i64, i64* @windows-6.stderr, align 8
	store i64 %29, i64* %6
	%30 = load i64, i64* %6, align 8
	; CompoundLit
	%31 = bitcast %Source_Code_Location* %7 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %Source_Code_Location* %7
	%33 = load %..string, %..string* %0, align 8
	%34 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 0
	store %..string %33, %..string* %34
	%35 = load i64, i64* %1, align 8
	%36 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 1
	store i64 %35, i64* %36
	%37 = load i64, i64* %2, align 8
	%38 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 2
	store i64 %37, i64* %38
	%39 = load %Source_Code_Location, %Source_Code_Location* %7, align 8
	%40 = bitcast %Source_Code_Location* %14 to %..rawptr
	%41 = call %..rawptr @__mem_zero(%..rawptr %40, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %39, %Source_Code_Location* %14
	call void @__print_caller_location(i64 %30, %Source_Code_Location* %14, %Context* noalias nonnull %8)
	; SelectorExpr
	%42 = load i64, i64* %6, align 8
	%43 = call {i64, i64} @os-3.write_string(i64 %42, %..string {i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__str$4c, i64 0, i32 0), i64 24}, %Context* noalias nonnull %8)
	%44 = load i64, i64* %6, align 8
	%45 = load i64, i64* %3, align 8
	%46 = bitcast i64 %45 to i64
	call void @__print_i64(i64 %44, i64 %46, %Context* noalias nonnull %8)
	; SelectorExpr
	%47 = load i64, i64* %6, align 8
	%48 = call {i64, i64} @os-3.write_string(i64 %47, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$4d, i64 0, i32 0), i64 2}, %Context* noalias nonnull %8)
	%49 = load i64, i64* %6, align 8
	%50 = load i64, i64* %4, align 8
	%51 = bitcast i64 %50 to i64
	call void @__print_i64(i64 %49, i64 %51, %Context* noalias nonnull %8)
	; SelectorExpr
	%52 = load i64, i64* %6, align 8
	%53 = call {i64, i64} @os-3.write_string(i64 %52, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$4e, i64 0, i32 0), i64 2}, %Context* noalias nonnull %8)
	%54 = load i64, i64* %6, align 8
	%55 = load i64, i64* %5, align 8
	%56 = bitcast i64 %55 to i64
	call void @__print_i64(i64 %54, i64 %56, %Context* noalias nonnull %8)
	; SelectorExpr
	%57 = load i64, i64* %6, align 8
	%58 = call {i64, i64} @os-3.write_byte(i64 %57, i8 10, %Context* noalias nonnull %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @__dynamic_array_expr_error(%..string %file, i64 %line, i64 %column, i64 %low, i64 %high, i64 %max) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %Source_Code_Location, align 16
	%8 = alloca %Context, align 16
	%9 = bitcast %Context* %8 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 72)
	store %Context zeroinitializer, %Context* %8
	%11 = load %Context, %Context* @__ggv$0, align 8
	store %Context %11, %Context* %8
	%12 = getelementptr inbounds %Context, %Context* %8, i64 0, i32 0
	%13 = call %Allocator @default_allocator(%Context* noalias nonnull %8)
	store %Allocator %13, %Allocator* %12
	%14 = alloca %Source_Code_Location, align 16
	
	store %..string %file, %..string* %0
	
	store i64 %line, i64* %1
	
	store i64 %column, i64* %2
	
	store i64 %low, i64* %3
	
	store i64 %high, i64* %4
	
	store i64 %max, i64* %5
	; IfStmt
	%15 = load i64, i64* %3, align 8
	%16 = icmp sle i64 0, %15
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %cmp.and-1, label %if.done-4

cmp.and-1:
	%19 = load i64, i64* %3, align 8
	%20 = load i64, i64* %4, align 8
	%21 = icmp sle i64 %19, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %cmp.and-2, label %if.done-4

cmp.and-2:
	%24 = load i64, i64* %4, align 8
	%25 = load i64, i64* %5, align 8
	%26 = icmp sle i64 %24, %25
	%27 = zext i1 %26 to i8
	%28 = trunc i8 %27 to i1
	br i1 %28, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret void

if.done-4:
	; fd
	
	; SelectorExpr
	%29 = load i64, i64* @windows-6.stderr, align 8
	store i64 %29, i64* %6
	%30 = load i64, i64* %6, align 8
	; CompoundLit
	%31 = bitcast %Source_Code_Location* %7 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %Source_Code_Location* %7
	%33 = load %..string, %..string* %0, align 8
	%34 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 0
	store %..string %33, %..string* %34
	%35 = load i64, i64* %1, align 8
	%36 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 1
	store i64 %35, i64* %36
	%37 = load i64, i64* %2, align 8
	%38 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 2
	store i64 %37, i64* %38
	%39 = load %Source_Code_Location, %Source_Code_Location* %7, align 8
	%40 = bitcast %Source_Code_Location* %14 to %..rawptr
	%41 = call %..rawptr @__mem_zero(%..rawptr %40, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %39, %Source_Code_Location* %14
	call void @__print_caller_location(i64 %30, %Source_Code_Location* %14, %Context* noalias nonnull %8)
	; SelectorExpr
	%42 = load i64, i64* %6, align 8
	%43 = call {i64, i64} @os-3.write_string(i64 %42, %..string {i8* getelementptr inbounds ([32 x i8], [32 x i8]* @__str$4f, i64 0, i32 0), i64 31}, %Context* noalias nonnull %8)
	%44 = load i64, i64* %6, align 8
	%45 = load i64, i64* %3, align 8
	%46 = bitcast i64 %45 to i64
	call void @__print_i64(i64 %44, i64 %46, %Context* noalias nonnull %8)
	; SelectorExpr
	%47 = load i64, i64* %6, align 8
	%48 = call {i64, i64} @os-3.write_string(i64 %47, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$50, i64 0, i32 0), i64 2}, %Context* noalias nonnull %8)
	%49 = load i64, i64* %6, align 8
	%50 = load i64, i64* %4, align 8
	%51 = bitcast i64 %50 to i64
	call void @__print_i64(i64 %49, i64 %51, %Context* noalias nonnull %8)
	; SelectorExpr
	%52 = load i64, i64* %6, align 8
	%53 = call {i64, i64} @os-3.write_string(i64 %52, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$51, i64 0, i32 0), i64 2}, %Context* noalias nonnull %8)
	%54 = load i64, i64* %6, align 8
	%55 = load i64, i64* %5, align 8
	%56 = bitcast i64 %55 to i64
	call void @__print_i64(i64 %54, i64 %56, %Context* noalias nonnull %8)
	; SelectorExpr
	%57 = load i64, i64* %6, align 8
	%58 = call {i64, i64} @os-3.write_byte(i64 %57, i8 10, %Context* noalias nonnull %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define void @__type_assertion_check(i1 %ok, %..string %file, i64 %line, i64 %column, %Type_Info* %from, %Type_Info* %to) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %Type_Info*, align 16
	%5 = alloca %Type_Info*, align 16
	%6 = alloca i64, align 16
	%7 = alloca %Source_Code_Location, align 16
	%8 = alloca %Context, align 16
	%9 = bitcast %Context* %8 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 72)
	store %Context zeroinitializer, %Context* %8
	%11 = load %Context, %Context* @__ggv$0, align 8
	store %Context %11, %Context* %8
	%12 = getelementptr inbounds %Context, %Context* %8, i64 0, i32 0
	%13 = call %Allocator @default_allocator(%Context* noalias nonnull %8)
	store %Allocator %13, %Allocator* %12
	%14 = alloca %Source_Code_Location, align 16
	
	%15 = zext i1 %ok to i8
	store i8 %15, i8* %0
	
	store %..string %file, %..string* %1
	
	store i64 %line, i64* %2
	
	store i64 %column, i64* %3
	
	store %Type_Info* %from, %Type_Info** %4
	
	store %Type_Info* %to, %Type_Info** %5
	; IfStmt
	%16 = load i8, i8* %0, align 1
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; fd
	
	; SelectorExpr
	%18 = load i64, i64* @windows-6.stderr, align 8
	store i64 %18, i64* %6
	%19 = load i64, i64* %6, align 8
	; CompoundLit
	%20 = bitcast %Source_Code_Location* %7 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location {%..string zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, %..string zeroinitializer}, %Source_Code_Location* %7
	%22 = load %..string, %..string* %1, align 8
	%23 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 0
	store %..string %22, %..string* %23
	%24 = load i64, i64* %2, align 8
	%25 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 1
	store i64 %24, i64* %25
	%26 = load i64, i64* %3, align 8
	%27 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %7, i64 0, i32 2
	store i64 %26, i64* %27
	%28 = load %Source_Code_Location, %Source_Code_Location* %7, align 8
	%29 = bitcast %Source_Code_Location* %14 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %28, %Source_Code_Location* %14
	call void @__print_caller_location(i64 %19, %Source_Code_Location* %14, %Context* noalias nonnull %8)
	; SelectorExpr
	%31 = load i64, i64* %6, align 8
	%32 = call {i64, i64} @os-3.write_string(i64 %31, %..string {i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__str$52, i64 0, i32 0), i64 28}, %Context* noalias nonnull %8)
	%33 = load i64, i64* %6, align 8
	%34 = load %Type_Info*, %Type_Info** %4, align 8
	call void @__print_type(i64 %33, %Type_Info* %34, %Context* noalias nonnull %8)
	; SelectorExpr
	%35 = load i64, i64* %6, align 8
	%36 = call {i64, i64} @os-3.write_string(i64 %35, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$53, i64 0, i32 0), i64 4}, %Context* noalias nonnull %8)
	%37 = load i64, i64* %6, align 8
	%38 = load %Type_Info*, %Type_Info** %5, align 8
	call void @__print_type(i64 %37, %Type_Info* %38, %Context* noalias nonnull %8)
	; SelectorExpr
	%39 = load i64, i64* %6, align 8
	%40 = call {i64, i64} @os-3.write_byte(i64 %39, i8 10, %Context* noalias nonnull %8)
	call ccc void @llvm.debugtrap()
	ret void
}

define {i32, i64} @__string_decode_rune(%..string %s) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %Context, align 16
	%2 = bitcast %Context* %1 to %..rawptr
	%3 = call %..rawptr @__mem_zero(%..rawptr %2, i64 72)
	store %Context zeroinitializer, %Context* %1
	%4 = load %Context, %Context* @__ggv$0, align 8
	store %Context %4, %Context* %1
	%5 = getelementptr inbounds %Context, %Context* %1, i64 0, i32 0
	%6 = call %Allocator @default_allocator(%Context* noalias nonnull %1)
	store %Allocator %6, %Allocator* %5
	%7 = alloca {i32, i64}, align 16
	
	store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%8 = load %..string, %..string* %0, align 8
	%9 = call {i32, i64} @utf8-4.decode_rune_from_string(%..string %8, %Context* noalias nonnull %1)
	%10 = extractvalue {i32, i64} %9, 0
	%11 = extractvalue {i32, i64} %9, 1
	%12 = bitcast {i32, i64}* %7 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %7
	%14 = getelementptr inbounds {i32, i64}, {i32, i64}* %7, i64 0, i32 0
	store i32 %10, i32* %14
	%15 = getelementptr inbounds {i32, i64}, {i32, i64}* %7, i64 0, i32 1
	store i64 %11, i64* %15
	%16 = load {i32, i64}, {i32, i64}* %7, align 8
	ret {i32, i64} %16
}

define void @__bounds_check_error_loc(%Source_Code_Location* %loc, i64 %index, i64 %count) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	
	store i64 %index, i64* %0
	
	store i64 %count, i64* %1
	%3 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 0
	%4 = load %..string, %..string* %3, align 8
	%5 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 1
	%6 = load i64, i64* %5, align 8
	%7 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 2
	%8 = load i64, i64* %7, align 8
	%9 = load i64, i64* %0, align 8
	%10 = load i64, i64* %1, align 8
	call void @__bounds_check_error(%..string %4, i64 %6, i64 %8, i64 %9, i64 %10)
	ret void
}

define void @__slice_expr_error_loc(%Source_Code_Location* %loc, i64 %lo, i64 %hi, i64 %len) alwaysinline #1 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	
	store i64 %lo, i64* %0
	
	store i64 %hi, i64* %1
	
	store i64 %len, i64* %2
	%4 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 0
	%5 = load %..string, %..string* %4, align 8
	%6 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 1
	%7 = load i64, i64* %6, align 8
	%8 = getelementptr inbounds %Source_Code_Location, %Source_Code_Location* %loc, i64 0, i32 2
	%9 = load i64, i64* %8, align 8
	%10 = load i64, i64* %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = load i64, i64* %2, align 8
	call void @__slice_expr_error(%..string %5, i64 %7, i64 %9, i64 %10, i64 %11, i64 %12)
	ret void
}

define %..rawptr @__mem_set(%..rawptr %data, i32 %value, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i32, align 16
	%2 = alloca i64, align 16
	
	store %..rawptr %data, %..rawptr* %0
	
	store i32 %value, i32* %1
	
	store i64 %len, i64* %2
	; IfStmt
	%3 = load %..rawptr, %..rawptr* %0, align 8
	%4 = icmp eq %..rawptr %3, zeroinitializer
	%5 = zext i1 %4 to i8
	%6 = trunc i8 %5 to i1
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	%7 = load %..rawptr, %..rawptr* %0, align 8
	%8 = load i32, i32* %1, align 4
	%9 = trunc i32 %8 to i8
	%10 = load i64, i64* %2, align 8
	call ccc void @llvm.memset.p0i8.i64(%..rawptr %7, i8 %9, i64 %10, i32 1, i1 false)
	; ReturnStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %11
}

define %..rawptr @__mem_zero(%..rawptr %data, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	
	store %..rawptr %data, %..rawptr* %0
	
	store i64 %len, i64* %1
	; ReturnStmt
	%2 = load %..rawptr, %..rawptr* %0, align 8
	%3 = load i64, i64* %1, align 8
	%4 = call %..rawptr @__mem_set(%..rawptr %2, i32 0, i64 %3)
	ret %..rawptr %4
}

define %..rawptr @__mem_copy(%..rawptr %dst, %..rawptr %src, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i64, align 16
	
	store %..rawptr %dst, %..rawptr* %0
	
	store %..rawptr %src, %..rawptr* %1
	
	store i64 %len, i64* %2
	; IfStmt
	%3 = load %..rawptr, %..rawptr* %1, align 8
	%4 = icmp eq %..rawptr %3, zeroinitializer
	%5 = zext i1 %4 to i8
	%6 = trunc i8 %5 to i1
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7

if.done-2:
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = load %..rawptr, %..rawptr* %1, align 8
	%10 = load i64, i64* %2, align 8
	call ccc void @llvm.memmove.p0i8.p0i8.i64(%..rawptr %8, %..rawptr %9, i64 %10, i32 1, i1 false)
	; ReturnStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %11
}

define %..rawptr @__mem_copy_non_overlapping(%..rawptr %dst, %..rawptr %src, i64 %len) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i64, align 16
	
	store %..rawptr %dst, %..rawptr* %0
	
	store %..rawptr %src, %..rawptr* %1
	
	store i64 %len, i64* %2
	; IfStmt
	%3 = load %..rawptr, %..rawptr* %1, align 8
	%4 = icmp eq %..rawptr %3, zeroinitializer
	%5 = zext i1 %4 to i8
	%6 = trunc i8 %5 to i1
	br i1 %6, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %7

if.done-2:
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = load %..rawptr, %..rawptr* %1, align 8
	%10 = load i64, i64* %2, align 8
	call ccc void @llvm.memcpy.p0i8.p0i8.i64(%..rawptr %8, %..rawptr %9, i64 %10, i32 1, i1 false)
	; ReturnStmt
	%11 = load %..rawptr, %..rawptr* %0, align 8
	ret %..rawptr %11
}

define i64 @__mem_compare(i8* %a, i8* %b, i64 %n) #0 {
decls-0:
	%0 = alloca i8*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	
	store i8* %a, i8** %0
	
	store i8* %b, i8** %1
	
	store i64 %n, i64* %2
	; RangeStmt
	; i
	%6 = bitcast i64* %3 to %..rawptr
	%7 = call %..rawptr @__mem_zero(%..rawptr %6, i64 8)
	store i64 zeroinitializer, i64* %3
	
	%8 = bitcast i64* %4 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	%10 = bitcast i64* %5 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 8)
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	br label %for.interval.loop-1

for.interval.loop-1:
	%12 = load i64, i64* %2, align 8
	%13 = load i64, i64* %4, align 8
	%14 = icmp slt i64 %13, %12
	br i1 %14, label %for.interval.body-2, label %for.interval.done-7

for.interval.body-2:
	%15 = load i64, i64* %4, align 8
	%16 = load i64, i64* %5, align 8
	%17 = load i64, i64* %4, align 8
	%18 = add i64 %17, 1
	store i64 %18, i64* %4
	%19 = load i64, i64* %5, align 8
	%20 = add i64 %19, 1
	store i64 %20, i64* %5
	store i64 %15, i64* %3
	; SwitchStmt
	%21 = load i8*, i8** %0, align 8
	%22 = load i64, i64* %3, align 8
	%23 = getelementptr inbounds i8, i8* %21, i64 %22
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = load i8, i8* %24, align 1
	%26 = load i8*, i8** %1, align 8
	%27 = load i64, i64* %3, align 8
	%28 = getelementptr inbounds i8, i8* %26, i64 %27
	%29 = getelementptr inbounds i8, i8* %28, i64 0
	%30 = load i8, i8* %29, align 1
	%31 = icmp ult i8 %25, %30
	%32 = zext i1 %31 to i8
	%33 = icmp eq i8 1, %32
	br i1 %33, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%34 = load i8*, i8** %0, align 8
	%35 = load i64, i64* %3, align 8
	%36 = getelementptr inbounds i8, i8* %34, i64 %35
	%37 = getelementptr inbounds i8, i8* %36, i64 0
	%38 = load i8, i8* %37, align 1
	%39 = load i8*, i8** %1, align 8
	%40 = load i64, i64* %3, align 8
	%41 = getelementptr inbounds i8, i8* %39, i64 %40
	%42 = getelementptr inbounds i8, i8* %41, i64 0
	%43 = load i8, i8* %42, align 1
	%44 = icmp ugt i8 %38, %43
	%45 = zext i1 %44 to i8
	%46 = icmp eq i8 1, %45
	br i1 %46, label %switch.fall.body-6, label %switch.case.next-5

switch.case.body-4:
	; ReturnStmt
	ret i64 -1

switch.case.next-5:
	br label %for.interval.loop-1

switch.fall.body-6:
	; ReturnStmt
	ret i64 1

for.interval.done-7:
	; ReturnStmt
	ret i64 0
}

define float @__abs_f32(float %x) alwaysinline #1 {
decls-0:
	%0 = alloca float, align 16
	
	store float %x, float* %0
	; ReturnStmt
	%1 = load float, float* %0, align 4
	%2 = call ccc float @llvm.fabs.f32(float %1)
	ret float %2
}

define double @__abs_f64(double %x) alwaysinline #1 {
decls-0:
	%0 = alloca double, align 16
	
	store double %x, double* %0
	; ReturnStmt
	%1 = load double, double* %0, align 8
	%2 = call ccc double @llvm.fabs.f64(double %1)
	ret double %2
}

define float @__min_f32(float %a, float %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca float, align 16
	%1 = alloca float, align 16
	
	store float %a, float* %0
	
	store float %b, float* %1
	; ReturnStmt
	%2 = load float, float* %0, align 4
	%3 = load float, float* %1, align 4
	%4 = call ccc float @llvm.minnum.f32(float %2, float %3)
	ret float %4
}

define double @__min_f64(double %a, double %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca double, align 16
	
	store double %a, double* %0
	
	store double %b, double* %1
	; ReturnStmt
	%2 = load double, double* %0, align 8
	%3 = load double, double* %1, align 8
	%4 = call ccc double @llvm.minnum.f64(double %2, double %3)
	ret double %4
}

define float @__max_f32(float %a, float %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca float, align 16
	%1 = alloca float, align 16
	
	store float %a, float* %0
	
	store float %b, float* %1
	; ReturnStmt
	%2 = load float, float* %0, align 4
	%3 = load float, float* %1, align 4
	%4 = call ccc float @llvm.maxnum.f32(float %2, float %3)
	ret float %4
}

define double @__max_f64(double %a, double %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca double, align 16
	
	store double %a, double* %0
	
	store double %b, double* %1
	; ReturnStmt
	%2 = load double, double* %0, align 8
	%3 = load double, double* %1, align 8
	%4 = call ccc double @llvm.maxnum.f64(double %2, double %3)
	ret double %4
}

define float @__abs_complex64(%..complex64 %x) alwaysinline #1 {
decls-0:
	%0 = alloca %..complex64, align 16
	%1 = alloca float, align 16
	%2 = alloca float, align 16
	
	store %..complex64 %x, %..complex64* %0
	; r
	
	; i
	
	; real
	%3 = load %..complex64, %..complex64* %0, align 4
	%4 = extractvalue %..complex64 %3, 0
	; imag
	%5 = load %..complex64, %..complex64* %0, align 4
	%6 = extractvalue %..complex64 %5, 1
	store float %4, float* %1
	store float %6, float* %2
	; ReturnStmt
	%7 = load float, float* %1, align 4
	%8 = load float, float* %1, align 4
	%9 = fmul float %7, %8
	%10 = load float, float* %2, align 4
	%11 = load float, float* %2, align 4
	%12 = fmul float %10, %11
	%13 = fadd float %9, %12
	%14 = call ccc float @llvm.sqrt.f32(float %13)
	ret float %14
}

define double @__abs_complex128(%..complex128* %x) alwaysinline #1 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca double, align 16
	%2 = load %..complex128, %..complex128* %x, align 8
	; r
	
	; i
	
	; real
	%3 = load %..complex128, %..complex128* %x, align 8
	%4 = extractvalue %..complex128 %3, 0
	; imag
	%5 = load %..complex128, %..complex128* %x, align 8
	%6 = extractvalue %..complex128 %5, 1
	store double %4, double* %0
	store double %6, double* %1
	; ReturnStmt
	%7 = load double, double* %0, align 8
	%8 = load double, double* %0, align 8
	%9 = fmul double %7, %8
	%10 = load double, double* %1, align 8
	%11 = load double, double* %1, align 8
	%12 = fmul double %10, %11
	%13 = fadd double %9, %12
	%14 = call ccc double @llvm.sqrt.f64(double %13)
	ret double %14
}

define void @__dynamic_array_make(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %len, i64 %cap, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca %raw-5.Dynamic_Array*, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %array_, %..rawptr* %0
	
	store i64 %elem_size, i64* %1
	
	store i64 %elem_align, i64* %2
	
	store i64 %len, i64* %3
	
	store i64 %cap, i64* %4
	%8 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; array
	
	%9 = load %..rawptr, %..rawptr* %0, align 8
	%10 = bitcast %..rawptr %9 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %10, %raw-5.Dynamic_Array** %5
	; AssignStmt
	; SelectorExpr
	%11 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%12 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %11, i64 0
	%13 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %12, i64 0, i32 3
	; SelectorExpr
	%14 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%15 = load %Allocator, %Allocator* %14, align 8
	store %Allocator %15, %Allocator* %13
	; SelectorExpr
	; SelectorExpr
	%16 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%17 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %16, i64 0
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0, i32 3
	%19 = getelementptr inbounds %Allocator, %Allocator* %18, i64 0, i32 0
	%20 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %19, align 8
	%21 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %20, zeroinitializer
	%22 = zext i1 %21 to i8
	%23 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$54, i64 0, i32 0), i64 51}, i64 1087, i64 2, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$55, i64 0, i32 0), i64 20})
	%24 = trunc i8 %22 to i1
	%25 = bitcast %Source_Code_Location* %6 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %23, %Source_Code_Location* %6
	%27 = call i8 @assert(i1 %24, %..string zeroinitializer, %Source_Code_Location* %6)
	; IfStmt
	%28 = load i64, i64* %4, align 8
	%29 = icmp sgt i64 %28, 0
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-1, label %if.done-2

if.then-1:
	%32 = load %..rawptr, %..rawptr* %0, align 8
	%33 = load i64, i64* %1, align 8
	%34 = load i64, i64* %2, align 8
	%35 = load i64, i64* %4, align 8
	%36 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%37 = bitcast %Source_Code_Location* %7 to %..rawptr
	%38 = call %..rawptr @__mem_zero(%..rawptr %37, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %36, %Source_Code_Location* %7
	%39 = call i8 @__dynamic_array_reserve(%..rawptr %32, i64 %33, i64 %34, i64 %35, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; SelectorExpr
	%40 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%41 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %40, i64 0
	%42 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %41, i64 0, i32 1
	%43 = load i64, i64* %3, align 8
	store i64 %43, i64* %42
	br label %if.done-2

if.done-2:
	ret void
}

define i8 @__dynamic_array_reserve(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %cap, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca %Source_Code_Location, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca %Allocator, align 16
	%9 = alloca %..rawptr, align 16
	%10 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %array_, %..rawptr* %0
	
	store i64 %elem_size, i64* %1
	
	store i64 %elem_align, i64* %2
	
	store i64 %cap, i64* %3
	%11 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; array
	
	%12 = load %..rawptr, %..rawptr* %0, align 8
	%13 = bitcast %..rawptr %12 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %13, %raw-5.Dynamic_Array** %4
	; IfStmt
	%14 = load i64, i64* %3, align 8
	; SelectorExpr
	%15 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%16 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %15, i64 0
	%17 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %16, i64 0, i32 2
	%18 = load i64, i64* %17, align 8
	%19 = icmp sle i64 %14, %18
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 1

if.done-2:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%22 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%23 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %22, i64 0
	%24 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %23, i64 0, i32 3
	%25 = getelementptr inbounds %Allocator, %Allocator* %24, i64 0, i32 0
	%26 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %25, align 8
	%27 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %26, zeroinitializer
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%30 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%31 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %30, i64 0
	%32 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %31, i64 0, i32 3
	; SelectorExpr
	%33 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%34 = load %Allocator, %Allocator* %33, align 8
	store %Allocator %34, %Allocator* %32
	br label %if.done-4

if.done-4:
	; SelectorExpr
	; SelectorExpr
	%35 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%36 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %36, i64 0, i32 3
	%38 = getelementptr inbounds %Allocator, %Allocator* %37, i64 0, i32 0
	%39 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %38, align 8
	%40 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %39, zeroinitializer
	%41 = zext i1 %40 to i8
	%42 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$56, i64 0, i32 0), i64 51}, i64 1103, i64 2, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__str$57, i64 0, i32 0), i64 23})
	%43 = trunc i8 %41 to i1
	%44 = bitcast %Source_Code_Location* %5 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %42, %Source_Code_Location* %5
	%46 = call i8 @assert(i1 %43, %..string zeroinitializer, %Source_Code_Location* %5)
	; old_size
	
	; SelectorExpr
	%47 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%48 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %47, i64 0
	%49 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %48, i64 0, i32 2
	%50 = load i64, i64* %49, align 8
	%51 = load i64, i64* %1, align 8
	%52 = mul i64 %50, %51
	store i64 %52, i64* %6
	; new_size
	
	%53 = load i64, i64* %3, align 8
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 %53, %54
	store i64 %55, i64* %7
	; allocator
	
	; SelectorExpr
	%56 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%57 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %56, i64 0
	%58 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %57, i64 0, i32 3
	%59 = load %Allocator, %Allocator* %58, align 8
	store %Allocator %59, %Allocator* %8
	; new_data
	
	; SelectorExpr
	%60 = getelementptr inbounds %Allocator, %Allocator* %8, i64 0, i32 0
	%61 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %60, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %Allocator, %Allocator* %8, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = load i64, i64* %7, align 8
	%65 = load i64, i64* %2, align 8
	; SelectorExpr
	%66 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%67 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %66, i64 0
	%68 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %67, i64 0, i32 0
	%69 = load %..rawptr, %..rawptr* %68, align 8
	%70 = load i64, i64* %6, align 8
	%71 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%72 = bitcast %Source_Code_Location* %10 to %..rawptr
	%73 = call %..rawptr @__mem_zero(%..rawptr %72, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %10
	store %Source_Code_Location %71, %Source_Code_Location* %10
	%74 = call %..rawptr %61(%..rawptr %63, i8 3, i64 %64, i64 %65, %..rawptr %69, i64 %70, i64 0, %Source_Code_Location* %10, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %74, %..rawptr* %9
	; IfStmt
	%75 = load %..rawptr, %..rawptr* %9, align 8
	%76 = icmp eq %..rawptr %75, zeroinitializer
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	ret i8 0

if.done-6:
	; AssignStmt
	; SelectorExpr
	%79 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%80 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %79, i64 0
	%81 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %80, i64 0, i32 0
	%82 = load %..rawptr, %..rawptr* %9, align 8
	store %..rawptr %82, %..rawptr* %81
	; AssignStmt
	; SelectorExpr
	%83 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%84 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %83, i64 0
	%85 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %84, i64 0, i32 2
	%86 = load i64, i64* %3, align 8
	store i64 %86, i64* %85
	; ReturnStmt
	ret i8 1
}

define i8 @__dynamic_array_resize(%..rawptr %array_, i64 %elem_size, i64 %elem_align, i64 %len, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca i8, align 16
	%6 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %array_, %..rawptr* %0
	
	store i64 %elem_size, i64* %1
	
	store i64 %elem_align, i64* %2
	
	store i64 %len, i64* %3
	%7 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; array
	
	%8 = load %..rawptr, %..rawptr* %0, align 8
	%9 = bitcast %..rawptr %8 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %9, %raw-5.Dynamic_Array** %4
	; ok
	
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = load i64, i64* %2, align 8
	%13 = load i64, i64* %3, align 8
	%14 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%15 = bitcast %Source_Code_Location* %6 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %14, %Source_Code_Location* %6
	%17 = call i8 @__dynamic_array_reserve(%..rawptr %10, i64 %11, i64 %12, i64 %13, %Source_Code_Location* %6, %Context* noalias nonnull %__.context_ptr)
	store i8 %17, i8* %5
	; IfStmt
	%18 = load i8, i8* %5, align 1
	%19 = trunc i8 %18 to i1
	br i1 %19, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%20 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%21 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %20, i64 0
	%22 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %21, i64 0, i32 1
	%23 = load i64, i64* %3, align 8
	store i64 %23, i64* %22
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%24 = load i8, i8* %5, align 1
	ret i8 %24
}

define i64 @__dynamic_array_append(%..rawptr %array_, i64 %elem_size, i64 %elem_align, %..rawptr %items, i64 %item_count, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %..rawptr, align 16
	%4 = alloca i64, align 16
	%5 = alloca %raw-5.Dynamic_Array*, align 16
	%6 = alloca i8, align 16
	%7 = alloca i64, align 16
	%8 = alloca %Source_Code_Location, align 16
	%9 = alloca i8*, align 16
	%10 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %array_, %..rawptr* %0
	
	store i64 %elem_size, i64* %1
	
	store i64 %elem_align, i64* %2
	
	store %..rawptr %items, %..rawptr* %3
	
	store i64 %item_count, i64* %4
	%11 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; array
	
	%12 = load %..rawptr, %..rawptr* %0, align 8
	%13 = bitcast %..rawptr %12 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %13, %raw-5.Dynamic_Array** %5
	; IfStmt
	%14 = load %..rawptr, %..rawptr* %3, align 8
	%15 = icmp eq %..rawptr %14, zeroinitializer
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; IfStmt
	%18 = load i64, i64* %4, align 8
	%19 = icmp sle i64 %18, 0
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i64 0

if.done-4:
	; ok
	
	store i8 1, i8* %6
	; IfStmt
	; SelectorExpr
	%22 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%23 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %22, i64 0
	%24 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %23, i64 0, i32 2
	%25 = load i64, i64* %24, align 8
	; SelectorExpr
	%26 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%27 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %26, i64 0
	%28 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %27, i64 0, i32 1
	%29 = load i64, i64* %28, align 8
	%30 = load i64, i64* %4, align 8
	%31 = add i64 %29, %30
	%32 = icmp sle i64 %25, %31
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %if.then-5, label %if.done-6

if.then-5:
	; cap
	
	; SelectorExpr
	%35 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%36 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %35, i64 0
	%37 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %36, i64 0, i32 2
	%38 = load i64, i64* %37, align 8
	%39 = mul i64 2, %38
	; max
	%40 = load i64, i64* %4, align 8
	%41 = icmp sgt i64 8, %40
	%42 = select i1 %41, i64 8, i64 %40
	%43 = add i64 %39, %42
	store i64 %43, i64* %7
	; AssignStmt
	%44 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%45 = load i64, i64* %1, align 8
	%46 = load i64, i64* %2, align 8
	%47 = load i64, i64* %7, align 8
	%48 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%49 = bitcast %raw-5.Dynamic_Array* %44 to %..rawptr
	%50 = bitcast %Source_Code_Location* %8 to %..rawptr
	%51 = call %..rawptr @__mem_zero(%..rawptr %50, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %48, %Source_Code_Location* %8
	%52 = call i8 @__dynamic_array_reserve(%..rawptr %49, i64 %45, i64 %46, i64 %47, %Source_Code_Location* %8, %Context* noalias nonnull %__.context_ptr)
	store i8 %52, i8* %6
	br label %if.done-6

if.done-6:
	; IfStmt
	%53 = load i8, i8* %6, align 1
	%54 = trunc i8 %53 to i1
	br i1 %54, label %if.done-8, label %if.then-7

if.then-7:
	; ReturnStmt
	; SelectorExpr
	%55 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%56 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %55, i64 0
	%57 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %56, i64 0, i32 1
	%58 = load i64, i64* %57, align 8
	ret i64 %58

if.done-8:
	; data
	
	; SelectorExpr
	%59 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%60 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %59, i64 0
	%61 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %60, i64 0, i32 0
	%62 = load %..rawptr, %..rawptr* %61, align 8
	%63 = bitcast %..rawptr %62 to i8*
	store i8* %63, i8** %9
	%64 = load i8*, i8** %9, align 8
	%65 = icmp ne i8* %64, zeroinitializer
	%66 = zext i1 %65 to i8
	%67 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$58, i64 0, i32 0), i64 51}, i64 1143, i64 2, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$59, i64 0, i32 0), i64 22})
	%68 = trunc i8 %66 to i1
	%69 = bitcast %Source_Code_Location* %10 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %10
	store %Source_Code_Location %67, %Source_Code_Location* %10
	%71 = call i8 @assert(i1 %68, %..string zeroinitializer, %Source_Code_Location* %10)
	%72 = load i8*, i8** %9, align 8
	%73 = load i64, i64* %1, align 8
	; SelectorExpr
	%74 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%75 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %74, i64 0
	%76 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %75, i64 0, i32 1
	%77 = load i64, i64* %76, align 8
	%78 = mul i64 %73, %77
	%79 = getelementptr inbounds i8, i8* %72, i64 %78
	%80 = load %..rawptr, %..rawptr* %3, align 8
	%81 = load i64, i64* %1, align 8
	%82 = load i64, i64* %4, align 8
	%83 = mul i64 %81, %82
	%84 = bitcast i8* %79 to %..rawptr
	%85 = call %..rawptr @__mem_copy(%..rawptr %84, %..rawptr %80, i64 %83)
	; AssignStmt
	; SelectorExpr
	%86 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%87 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %86, i64 0
	%88 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %87, i64 0, i32 1
	%89 = load i64, i64* %4, align 8
	%90 = load i64, i64* %88, align 8
	%91 = add i64 %90, %89
	store i64 %91, i64* %88
	; ReturnStmt
	; SelectorExpr
	%92 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %5, align 8
	%93 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %92, i64 0
	%94 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %93, i64 0, i32 1
	%95 = load i64, i64* %94, align 8
	ret i64 %95
}

define i64 @__dynamic_array_append_nothing(%..rawptr %array_, i64 %elem_size, i64 %elem_align, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %raw-5.Dynamic_Array*, align 16
	%4 = alloca i8, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca i8*, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store %..rawptr %array_, %..rawptr* %0
	
	store i64 %elem_size, i64* %1
	
	store i64 %elem_align, i64* %2
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; array
	
	%10 = load %..rawptr, %..rawptr* %0, align 8
	%11 = bitcast %..rawptr %10 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %11, %raw-5.Dynamic_Array** %3
	; ok
	
	store i8 1, i8* %4
	; IfStmt
	; SelectorExpr
	%12 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%13 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %12, i64 0
	%14 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	; SelectorExpr
	%16 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%17 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %16, i64 0
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0, i32 1
	%19 = load i64, i64* %18, align 8
	%20 = add i64 %19, 1
	%21 = icmp sle i64 %15, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.done-2

if.then-1:
	; cap
	
	; SelectorExpr
	%24 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%25 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %25, i64 0, i32 2
	%27 = load i64, i64* %26, align 8
	%28 = mul i64 2, %27
	%29 = add i64 %28, 8
	store i64 %29, i64* %5
	; AssignStmt
	%30 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%31 = load i64, i64* %1, align 8
	%32 = load i64, i64* %2, align 8
	%33 = load i64, i64* %5, align 8
	%34 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%35 = bitcast %raw-5.Dynamic_Array* %30 to %..rawptr
	%36 = bitcast %Source_Code_Location* %6 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %34, %Source_Code_Location* %6
	%38 = call i8 @__dynamic_array_reserve(%..rawptr %35, i64 %31, i64 %32, i64 %33, %Source_Code_Location* %6, %Context* noalias nonnull %__.context_ptr)
	store i8 %38, i8* %4
	br label %if.done-2

if.done-2:
	; IfStmt
	%39 = load i8, i8* %4, align 1
	%40 = trunc i8 %39 to i1
	br i1 %40, label %if.done-4, label %if.then-3

if.then-3:
	; ReturnStmt
	; SelectorExpr
	%41 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%42 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %41, i64 0
	%43 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	ret i64 %44

if.done-4:
	; data
	
	; SelectorExpr
	%45 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%46 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %45, i64 0
	%47 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %46, i64 0, i32 0
	%48 = load %..rawptr, %..rawptr* %47, align 8
	%49 = bitcast %..rawptr %48 to i8*
	store i8* %49, i8** %7
	%50 = load i8*, i8** %7, align 8
	%51 = icmp ne i8* %50, zeroinitializer
	%52 = zext i1 %51 to i8
	%53 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$5a, i64 0, i32 0), i64 51}, i64 1161, i64 2, %..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__str$5b, i64 0, i32 0), i64 30})
	%54 = trunc i8 %52 to i1
	%55 = bitcast %Source_Code_Location* %8 to %..rawptr
	%56 = call %..rawptr @__mem_zero(%..rawptr %55, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %53, %Source_Code_Location* %8
	%57 = call i8 @assert(i1 %54, %..string zeroinitializer, %Source_Code_Location* %8)
	%58 = load i8*, i8** %7, align 8
	%59 = load i64, i64* %1, align 8
	; SelectorExpr
	%60 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%61 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %61, i64 0, i32 1
	%63 = load i64, i64* %62, align 8
	%64 = mul i64 %59, %63
	%65 = getelementptr inbounds i8, i8* %58, i64 %64
	%66 = load i64, i64* %1, align 8
	%67 = bitcast i8* %65 to %..rawptr
	%68 = call %..rawptr @__mem_zero(%..rawptr %67, i64 %66)
	; AssignStmt
	; SelectorExpr
	%69 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%70 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %69, i64 0
	%71 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %70, i64 0, i32 1
	%72 = load i64, i64* %71, align 8
	%73 = add i64 %72, 1
	store i64 %73, i64* %71
	; ReturnStmt
	; SelectorExpr
	%74 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%75 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %74, i64 0
	%76 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %75, i64 0, i32 1
	%77 = load i64, i64* %76, align 8
	ret i64 %77
}

define i64 @__default_hash({i8*, i64}* %data, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64}, align 16
	%1 = load {i8*, i64}, {i8*, i64}* %data, align 8
	; ReturnStmt
	%2 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%3 = bitcast {i8*, i64}* %0 to %..rawptr
	%4 = call %..rawptr @__mem_zero(%..rawptr %3, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %0
	store {i8*, i64} %2, {i8*, i64}* %0
	%5 = call i64 @__default_hash.fnv64a-0({i8*, i64}* %0, %Context* noalias nonnull %__.context_ptr)
	ret i64 %5
}

define i64 @__default_hash.fnv64a-0({i8*, i64}* %data, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = load {i8*, i64}, {i8*, i64}* %data, align 8
	; h
	
	store i64 -3750763034362895579, i64* %0
	; RangeStmt
	; b
	%5 = bitcast i8* %1 to %..rawptr
	%6 = call %..rawptr @__mem_zero(%..rawptr %5, i64 1)
	store i8 zeroinitializer, i8* %1
	
	%7 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%8 = bitcast i64* %2 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 8)
	store i64 zeroinitializer, i64* %2
	%10 = extractvalue {i8*, i64} %7, 1
	store i64 %10, i64* %2
	%11 = bitcast i64* %3 to %..rawptr
	%12 = call %..rawptr @__mem_zero(%..rawptr %11, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%13 = load i64, i64* %3, align 8
	%14 = add i64 %13, 1
	store i64 %14, i64* %3
	%15 = load i64, i64* %2, align 8
	%16 = icmp slt i64 %14, %15
	br i1 %16, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%17 = load i64, i64* %3, align 8
	%18 = extractvalue {i8*, i64} %7, 0
	%19 = getelementptr inbounds i8, i8* %18, i64 %17
	%20 = load i8, i8* %19, align 1
	store i8 %20, i8* %1
	; AssignStmt
	%21 = load i64, i64* %0, align 8
	%22 = load i8, i8* %1, align 1
	%23 = zext i8 %22 to i64
	%24 = xor i64 %21, %23
	%25 = mul i64 %24, 1099511628211
	store i64 %25, i64* %0
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%26 = load i64, i64* %0, align 8
	ret i64 %26
}

define i64 @__default_hash_string(%..string %s, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8*, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	
	store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	%5 = extractvalue %..string %4, 0
	%6 = bitcast i8** %1 to %..rawptr
	%7 = call %..rawptr @__mem_zero(%..rawptr %6, i64 8)
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%8 = extractvalue %..string %4, 1
	%9 = sub i64 %8, 0
	%10 = load i8*, i8** %1, align 8
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = bitcast {i8*, i64}* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%14 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %11, i8** %14
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 %9, i64* %15
	%16 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%17 = bitcast {i8*, i64}* %3 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %16, {i8*, i64}* %3
	%19 = call i64 @__default_hash({i8*, i64}* %3, %Context* noalias nonnull %__.context_ptr)
	ret i64 %19
}

define void @__dynamic_map_reserve(%__Map_Header* %header, i64 %cap, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = alloca %Source_Code_Location, align 16
	%3 = load %__Map_Header, %__Map_Header* %header, align 8
	
	store i64 %cap, i64* %0
	%4 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%6 = load %raw-5.Map*, %raw-5.Map** %5, align 8
	%7 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %6, i64 0
	%8 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %7, i64 0, i32 0
	%9 = getelementptr inbounds {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %8, i64 0
	%10 = load i64, i64* %0, align 8
	%11 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%12 = bitcast {i64*, i64, i64, %Allocator}* %9 to %..rawptr
	%13 = bitcast %Source_Code_Location* %1 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %11, %Source_Code_Location* %1
	%15 = call i8 @__dynamic_array_reserve(%..rawptr %12, i64 8, i64 8, i64 %10, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%17 = load %raw-5.Map*, %raw-5.Map** %16, align 8
	%18 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %17, i64 0
	%19 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %18, i64 0, i32 1
	%20 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %19, i64 0
	%21 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 2
	%22 = load i64, i64* %21, align 8
	%23 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 3
	%24 = load i64, i64* %23, align 8
	%25 = load i64, i64* %0, align 8
	%26 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%27 = bitcast %raw-5.Dynamic_Array* %20 to %..rawptr
	%28 = bitcast %Source_Code_Location* %2 to %..rawptr
	%29 = call %..rawptr @__mem_zero(%..rawptr %28, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %26, %Source_Code_Location* %2
	%30 = call i8 @__dynamic_array_reserve(%..rawptr %27, i64 %22, i64 %24, i64 %25, %Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @__dynamic_map_rehash(%__Map_Header* %header, i64 %new_count, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %__Map_Header, align 16
	%2 = alloca %raw-5.Map, align 16
	%3 = alloca %raw-5.Dynamic_Array*, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca %Source_Code_Location, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca %__Map_Header, align 16
	%14 = alloca %Source_Code_Location, align 16
	%15 = alloca %__Map_Entry_Header*, align 16
	%16 = alloca %__Map_Header, align 16
	%17 = alloca i8*, align 16
	%18 = alloca %__Map_Find_Result, align 16
	%19 = alloca %__Map_Header, align 16
	%20 = alloca %__Map_Key, align 16
	%21 = alloca i64, align 16
	%22 = alloca %__Map_Header, align 16
	%23 = alloca %__Map_Key, align 16
	%24 = alloca %Source_Code_Location, align 16
	%25 = alloca %__Map_Entry_Header*, align 16
	%26 = alloca %__Map_Header, align 16
	%27 = alloca %__Map_Entry_Header*, align 16
	%28 = alloca %__Map_Header, align 16
	%29 = alloca i8*, align 16
	%30 = alloca %__Map_Header, align 16
	%31 = alloca %__Map_Header, align 16
	%32 = alloca %Source_Code_Location, align 16
	%33 = alloca %Allocator, align 16
	%34 = alloca %Source_Code_Location, align 16
	%35 = alloca %Allocator, align 16
	%36 = alloca %Source_Code_Location, align 16
	%37 = load %__Map_Header, %__Map_Header* %header, align 8
	
	store i64 %new_count, i64* %0
	%38 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; new_header
	
	%39 = load %__Map_Header, %__Map_Header* %header, align 8
	store %__Map_Header %39, %__Map_Header* %1
	; nm
	%40 = bitcast %raw-5.Map* %2 to %..rawptr
	%41 = call %..rawptr @__mem_zero(%..rawptr %40, i64 80)
	store %raw-5.Map zeroinitializer, %raw-5.Map* %2
	
	; AssignStmt
	; SelectorExpr
	%42 = getelementptr inbounds %__Map_Header, %__Map_Header* %1, i64 0, i32 0
	%43 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0
	store %raw-5.Map* %43, %raw-5.Map** %42
	; header_hashes
	
	; SelectorExpr
	; SelectorExpr
	%44 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%45 = load %raw-5.Map*, %raw-5.Map** %44, align 8
	%46 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %45, i64 0
	%47 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %46, i64 0, i32 0
	%48 = getelementptr inbounds {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %47, i64 0
	%49 = bitcast {i64*, i64, i64, %Allocator}* %48 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %49, %raw-5.Dynamic_Array** %3
	; nm_hashes
	
	; SelectorExpr
	%50 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0, i32 0
	%51 = getelementptr inbounds {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %50, i64 0
	%52 = bitcast {i64*, i64, i64, %Allocator}* %51 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %52, %raw-5.Dynamic_Array** %4
	%53 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%54 = load i64, i64* %0, align 8
	%55 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%56 = bitcast %raw-5.Dynamic_Array* %53 to %..rawptr
	%57 = bitcast %Source_Code_Location* %5 to %..rawptr
	%58 = call %..rawptr @__mem_zero(%..rawptr %57, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %55, %Source_Code_Location* %5
	%59 = call i8 @__dynamic_array_resize(%..rawptr %56, i64 8, i64 8, i64 %54, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%60 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0, i32 1
	%61 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %60, i64 0
	%62 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 2
	%63 = load i64, i64* %62, align 8
	%64 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 3
	%65 = load i64, i64* %64, align 8
	; SelectorExpr
	; SelectorExpr
	%66 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%67 = load %raw-5.Map*, %raw-5.Map** %66, align 8
	%68 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %67, i64 0
	%69 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %68, i64 0, i32 1
	%70 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %69, i64 0, i32 1
	%71 = load i64, i64* %70, align 8
	%72 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%73 = bitcast %raw-5.Dynamic_Array* %61 to %..rawptr
	%74 = bitcast %Source_Code_Location* %6 to %..rawptr
	%75 = call %..rawptr @__mem_zero(%..rawptr %74, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %72, %Source_Code_Location* %6
	%76 = call i8 @__dynamic_array_reserve(%..rawptr %73, i64 %63, i64 %65, i64 %71, %Source_Code_Location* %6, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; i
	%77 = bitcast i64* %7 to %..rawptr
	%78 = call %..rawptr @__mem_zero(%..rawptr %77, i64 8)
	store i64 zeroinitializer, i64* %7
	
	%79 = bitcast i64* %8 to %..rawptr
	%80 = call %..rawptr @__mem_zero(%..rawptr %79, i64 8)
	store i64 zeroinitializer, i64* %8
	store i64 0, i64* %8
	%81 = bitcast i64* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 8)
	store i64 zeroinitializer, i64* %9
	store i64 0, i64* %9
	br label %for.interval.loop-1

for.interval.loop-1:
	%83 = load i64, i64* %0, align 8
	%84 = load i64, i64* %8, align 8
	%85 = icmp slt i64 %84, %83
	br i1 %85, label %for.interval.body-2, label %for.interval.done-3

for.interval.body-2:
	%86 = load i64, i64* %8, align 8
	%87 = load i64, i64* %9, align 8
	%88 = load i64, i64* %8, align 8
	%89 = add i64 %88, 1
	store i64 %89, i64* %8
	%90 = load i64, i64* %9, align 8
	%91 = add i64 %90, 1
	store i64 %91, i64* %9
	store i64 %86, i64* %7
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%92 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0, i32 0
	%93 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %92, align 8
	%94 = extractvalue {i64*, i64, i64, %Allocator} %93, 0
	%95 = extractvalue {i64*, i64, i64, %Allocator} %93, 1
	%96 = load i64, i64* %7, align 8
	%97 = getelementptr inbounds i64, i64* %94, i64 %96
	store i64 -1, i64* %97
	br label %for.interval.loop-1

for.interval.done-3:
	; RangeStmt
	; i
	%98 = bitcast i64* %10 to %..rawptr
	%99 = call %..rawptr @__mem_zero(%..rawptr %98, i64 8)
	store i64 zeroinitializer, i64* %10
	
	%100 = bitcast i64* %11 to %..rawptr
	%101 = call %..rawptr @__mem_zero(%..rawptr %100, i64 8)
	store i64 zeroinitializer, i64* %11
	store i64 0, i64* %11
	%102 = bitcast i64* %12 to %..rawptr
	%103 = call %..rawptr @__mem_zero(%..rawptr %102, i64 8)
	store i64 zeroinitializer, i64* %12
	store i64 0, i64* %12
	br label %for.interval.loop-4

for.interval.loop-4:
	; SelectorExpr
	; SelectorExpr
	%104 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%105 = load %raw-5.Map*, %raw-5.Map** %104, align 8
	%106 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %105, i64 0
	%107 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %106, i64 0, i32 1
	%108 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %107, i64 0, i32 1
	%109 = load i64, i64* %108, align 8
	%110 = load i64, i64* %11, align 8
	%111 = icmp slt i64 %110, %109
	br i1 %111, label %for.interval.body-5, label %for.interval.done-13

for.interval.body-5:
	%112 = load i64, i64* %11, align 8
	%113 = load i64, i64* %12, align 8
	%114 = load i64, i64* %11, align 8
	%115 = add i64 %114, 1
	store i64 %115, i64* %11
	%116 = load i64, i64* %12, align 8
	%117 = add i64 %116, 1
	store i64 %117, i64* %12
	store i64 %112, i64* %10
	; IfStmt
	; SelectorExpr
	%118 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0, i32 0
	%119 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %118, align 8
	%120 = extractvalue {i64*, i64, i64, %Allocator} %119, 1
	%121 = icmp eq i64 %120, 0
	%122 = zext i1 %121 to i8
	%123 = trunc i8 %122 to i1
	br i1 %123, label %if.then-6, label %if.done-7

if.then-6:
	%124 = load %__Map_Header, %__Map_Header* %1, align 8
	%125 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%126 = bitcast %__Map_Header* %13 to %..rawptr
	%127 = call %..rawptr @__mem_zero(%..rawptr %126, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	store %__Map_Header %124, %__Map_Header* %13
	%128 = bitcast %Source_Code_Location* %14 to %..rawptr
	%129 = call %..rawptr @__mem_zero(%..rawptr %128, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %125, %Source_Code_Location* %14
	call void @__dynamic_map_grow(%__Map_Header* %13, %Source_Code_Location* %14, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-7

if.done-7:
	; entry_header
	
	%130 = load %__Map_Header, %__Map_Header* %header, align 8
	%131 = load i64, i64* %10, align 8
	%132 = bitcast %__Map_Header* %16 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	store %__Map_Header %130, %__Map_Header* %16
	%134 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %16, i64 %131, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %134, %__Map_Entry_Header** %15
	; data
	
	%135 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%136 = bitcast %__Map_Entry_Header* %135 to i8*
	store i8* %136, i8** %17
	; fr
	
	%137 = load %__Map_Header, %__Map_Header* %1, align 8
	; SelectorExpr
	%138 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%139 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %138, i64 0
	%140 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %139, i64 0, i32 0
	%141 = load %__Map_Key, %__Map_Key* %140, align 8
	%142 = bitcast %__Map_Header* %19 to %..rawptr
	%143 = call %..rawptr @__mem_zero(%..rawptr %142, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %19
	store %__Map_Header %137, %__Map_Header* %19
	%144 = bitcast %__Map_Key* %20 to %..rawptr
	%145 = call %..rawptr @__mem_zero(%..rawptr %144, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %20
	store %__Map_Key %141, %__Map_Key* %20
	%146 = call %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %19, %__Map_Key* %20, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Find_Result %146, %__Map_Find_Result* %18
	; j
	
	%147 = load %__Map_Header, %__Map_Header* %1, align 8
	; SelectorExpr
	%148 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%149 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %148, i64 0
	%150 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %149, i64 0, i32 0
	%151 = load %__Map_Key, %__Map_Key* %150, align 8
	%152 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%153 = bitcast %__Map_Header* %22 to %..rawptr
	%154 = call %..rawptr @__mem_zero(%..rawptr %153, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %22
	store %__Map_Header %147, %__Map_Header* %22
	%155 = bitcast %__Map_Key* %23 to %..rawptr
	%156 = call %..rawptr @__mem_zero(%..rawptr %155, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %23
	store %__Map_Key %151, %__Map_Key* %23
	%157 = bitcast %Source_Code_Location* %24 to %..rawptr
	%158 = call %..rawptr @__mem_zero(%..rawptr %157, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %24
	store %Source_Code_Location %152, %Source_Code_Location* %24
	%159 = call i64 @__dynamic_map_add_entry(%__Map_Header* %22, %__Map_Key* %23, %Source_Code_Location* %24, %Context* noalias nonnull %__.context_ptr)
	store i64 %159, i64* %21
	; IfStmt
	; SelectorExpr
	%160 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %18, i64 0, i32 1
	%161 = load i64, i64* %160, align 8
	%162 = icmp slt i64 %161, 0
	%163 = zext i1 %162 to i8
	%164 = trunc i8 %163 to i1
	br i1 %164, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%165 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0, i32 0
	%166 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %165, align 8
	%167 = extractvalue {i64*, i64, i64, %Allocator} %166, 0
	%168 = extractvalue {i64*, i64, i64, %Allocator} %166, 1
	; SelectorExpr
	%169 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %18, i64 0, i32 0
	%170 = load i64, i64* %169, align 8
	%171 = getelementptr inbounds i64, i64* %167, i64 %170
	%172 = load i64, i64* %21, align 8
	store i64 %172, i64* %171
	br label %if.done-10

if.else-9:
	; e
	
	%173 = load %__Map_Header, %__Map_Header* %1, align 8
	; SelectorExpr
	%174 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %18, i64 0, i32 1
	%175 = load i64, i64* %174, align 8
	%176 = bitcast %__Map_Header* %26 to %..rawptr
	%177 = call %..rawptr @__mem_zero(%..rawptr %176, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %26
	store %__Map_Header %173, %__Map_Header* %26
	%178 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %26, i64 %175, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %178, %__Map_Entry_Header** %25
	; AssignStmt
	; SelectorExpr
	%179 = load %__Map_Entry_Header*, %__Map_Entry_Header** %25, align 8
	%180 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %179, i64 0
	%181 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %180, i64 0, i32 1
	%182 = load i64, i64* %21, align 8
	store i64 %182, i64* %181
	br label %if.done-10

if.done-10:
	; e
	
	%183 = load %__Map_Header, %__Map_Header* %1, align 8
	%184 = load i64, i64* %21, align 8
	%185 = bitcast %__Map_Header* %28 to %..rawptr
	%186 = call %..rawptr @__mem_zero(%..rawptr %185, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %28
	store %__Map_Header %183, %__Map_Header* %28
	%187 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %28, i64 %184, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %187, %__Map_Entry_Header** %27
	; AssignStmt
	; SelectorExpr
	%188 = load %__Map_Entry_Header*, %__Map_Entry_Header** %27, align 8
	%189 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %188, i64 0
	%190 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %189, i64 0, i32 1
	; SelectorExpr
	%191 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %18, i64 0, i32 2
	%192 = load i64, i64* %191, align 8
	store i64 %192, i64* %190
	; ndata
	
	%193 = load %__Map_Entry_Header*, %__Map_Entry_Header** %27, align 8
	%194 = bitcast %__Map_Entry_Header* %193 to i8*
	store i8* %194, i8** %29
	%195 = load i8*, i8** %29, align 8
	%196 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 4
	%197 = load i64, i64* %196, align 8
	%198 = bitcast i64 %197 to i64
	%199 = getelementptr inbounds i8, i8* %195, i64 %198
	%200 = load i8*, i8** %17, align 8
	%201 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 4
	%202 = load i64, i64* %201, align 8
	%203 = bitcast i64 %202 to i64
	%204 = getelementptr inbounds i8, i8* %200, i64 %203
	%205 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 5
	%206 = load i64, i64* %205, align 8
	%207 = bitcast i8* %199 to %..rawptr
	%208 = bitcast i8* %204 to %..rawptr
	%209 = call %..rawptr @__mem_copy(%..rawptr %207, %..rawptr %208, i64 %206)
	; IfStmt
	%210 = load %__Map_Header, %__Map_Header* %1, align 8
	%211 = bitcast %__Map_Header* %30 to %..rawptr
	%212 = call %..rawptr @__mem_zero(%..rawptr %211, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %30
	store %__Map_Header %210, %__Map_Header* %30
	%213 = call i8 @__dynamic_map_full(%__Map_Header* %30, %Context* noalias nonnull %__.context_ptr)
	%214 = trunc i8 %213 to i1
	br i1 %214, label %if.then-11, label %if.done-12

if.then-11:
	%215 = load %__Map_Header, %__Map_Header* %1, align 8
	%216 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%217 = bitcast %__Map_Header* %31 to %..rawptr
	%218 = call %..rawptr @__mem_zero(%..rawptr %217, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %31
	store %__Map_Header %215, %__Map_Header* %31
	%219 = bitcast %Source_Code_Location* %32 to %..rawptr
	%220 = call %..rawptr @__mem_zero(%..rawptr %219, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %32
	store %Source_Code_Location %216, %Source_Code_Location* %32
	call void @__dynamic_map_grow(%__Map_Header* %31, %Source_Code_Location* %32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-12

if.done-12:
	br label %for.interval.loop-4

for.interval.done-13:
	; SelectorExpr
	%221 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%222 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %221, i64 0
	%223 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %222, i64 0, i32 3
	%224 = load %Allocator, %Allocator* %223, align 8
	; SelectorExpr
	%225 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %3, align 8
	%226 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %225, i64 0
	%227 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %226, i64 0, i32 0
	%228 = load %..rawptr, %..rawptr* %227, align 8
	%229 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%230 = bitcast %Allocator* %33 to %..rawptr
	%231 = call %..rawptr @__mem_zero(%..rawptr %230, i64 16)
	store %Allocator zeroinitializer, %Allocator* %33
	store %Allocator %224, %Allocator* %33
	%232 = bitcast %Source_Code_Location* %34 to %..rawptr
	%233 = call %..rawptr @__mem_zero(%..rawptr %232, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %34
	store %Source_Code_Location %229, %Source_Code_Location* %34
	call void @free_ptr_with_allocator(%Allocator* %33, %..rawptr %228, %Source_Code_Location* %34, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%234 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%235 = load %raw-5.Map*, %raw-5.Map** %234, align 8
	%236 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %235, i64 0
	%237 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %236, i64 0, i32 1
	%238 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %237, i64 0, i32 3
	%239 = load %Allocator, %Allocator* %238, align 8
	; SelectorExpr
	; SelectorExpr
	; SelectorExpr
	%240 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%241 = load %raw-5.Map*, %raw-5.Map** %240, align 8
	%242 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %241, i64 0
	%243 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %242, i64 0, i32 1
	%244 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %243, i64 0, i32 0
	%245 = load %..rawptr, %..rawptr* %244, align 8
	%246 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%247 = bitcast %Allocator* %35 to %..rawptr
	%248 = call %..rawptr @__mem_zero(%..rawptr %247, i64 16)
	store %Allocator zeroinitializer, %Allocator* %35
	store %Allocator %239, %Allocator* %35
	%249 = bitcast %Source_Code_Location* %36 to %..rawptr
	%250 = call %..rawptr @__mem_zero(%..rawptr %249, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %36
	store %Source_Code_Location %246, %Source_Code_Location* %36
	call void @free_ptr_with_allocator(%Allocator* %35, %..rawptr %245, %Source_Code_Location* %36, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; SelectorExpr
	%251 = getelementptr inbounds %__Map_Header, %__Map_Header* %header, i64 0, i32 0
	%252 = load %raw-5.Map*, %raw-5.Map** %251, align 8
	%253 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %252, i64 0
	%254 = load %raw-5.Map, %raw-5.Map* %2, align 8
	store %raw-5.Map %254, %raw-5.Map* %253
	ret void
}

define %..rawptr @__dynamic_map_get(%__Map_Header* %h, %__Map_Key* %key, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %__Map_Header, align 16
	%2 = alloca %__Map_Key, align 16
	%3 = alloca %__Map_Find_Result, align 16
	%4 = alloca i8*, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = load %__Map_Header, %__Map_Header* %h, align 8
	%7 = load %__Map_Key, %__Map_Key* %key, align 8
	; index
	
	; SelectorExpr
	%8 = load %__Map_Header, %__Map_Header* %h, align 8
	%9 = load %__Map_Key, %__Map_Key* %key, align 8
	%10 = bitcast %__Map_Header* %1 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %1
	store %__Map_Header %8, %__Map_Header* %1
	%12 = bitcast %__Map_Key* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %2
	store %__Map_Key %9, %__Map_Key* %2
	%14 = call %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %1, %__Map_Key* %2, %Context* noalias nonnull %__.context_ptr)
	%15 = bitcast %__Map_Find_Result* %3 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 24)
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %3
	store %__Map_Find_Result %14, %__Map_Find_Result* %3
	%17 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %3, i64 0, i32 2
	%18 = load i64, i64* %17, align 8
	store i64 %18, i64* %0
	; IfStmt
	%19 = load i64, i64* %0, align 8
	%20 = icmp sge i64 %19, 0
	%21 = zext i1 %20 to i8
	%22 = trunc i8 %21 to i1
	br i1 %22, label %if.then-1, label %if.done-2

if.then-1:
	; data
	
	%23 = load %__Map_Header, %__Map_Header* %h, align 8
	%24 = load i64, i64* %0, align 8
	%25 = bitcast %__Map_Header* %5 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	store %__Map_Header %23, %__Map_Header* %5
	%27 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %5, i64 %24, %Context* noalias nonnull %__.context_ptr)
	%28 = bitcast %__Map_Entry_Header* %27 to i8*
	store i8* %28, i8** %4
	; ReturnStmt
	%29 = load i8*, i8** %4, align 8
	; SelectorExpr
	%30 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 4
	%31 = load i64, i64* %30, align 8
	%32 = bitcast i64 %31 to i64
	%33 = getelementptr inbounds i8, i8* %29, i64 %32
	%34 = bitcast i8* %33 to %..rawptr
	ret %..rawptr %34

if.done-2:
	; ReturnStmt
	ret %..rawptr zeroinitializer
}

define void @__dynamic_map_set(%__Map_Header* %h, %__Map_Key* %key, %..rawptr %value, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	%2 = alloca %Source_Code_Location, align 16
	%3 = alloca %__Map_Header, align 16
	%4 = alloca %Source_Code_Location, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca %__Map_Find_Result, align 16
	%8 = alloca %__Map_Header, align 16
	%9 = alloca %__Map_Key, align 16
	%10 = alloca %__Map_Header, align 16
	%11 = alloca %__Map_Key, align 16
	%12 = alloca %Source_Code_Location, align 16
	%13 = alloca %__Map_Entry_Header*, align 16
	%14 = alloca %__Map_Header, align 16
	%15 = alloca %__Map_Entry_Header*, align 16
	%16 = alloca %__Map_Header, align 16
	%17 = alloca i8*, align 16
	%18 = alloca %__Map_Header, align 16
	%19 = alloca %__Map_Header, align 16
	%20 = alloca %Source_Code_Location, align 16
	%21 = load %__Map_Header, %__Map_Header* %h, align 8
	%22 = load %__Map_Key, %__Map_Key* %key, align 8
	
	store %..rawptr %value, %..rawptr* %0
	%23 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; index
	%24 = bitcast i64* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 8)
	store i64 zeroinitializer, i64* %1
	
	%26 = load %..rawptr, %..rawptr* %0, align 8
	%27 = icmp ne %..rawptr %26, zeroinitializer
	%28 = zext i1 %27 to i8
	%29 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$5c, i64 0, i32 0), i64 51}, i64 1236, i64 2, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$5d, i64 0, i32 0), i64 17})
	%30 = trunc i8 %28 to i1
	%31 = bitcast %Source_Code_Location* %2 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %29, %Source_Code_Location* %2
	%33 = call i8 @assert(i1 %30, %..string zeroinitializer, %Source_Code_Location* %2)
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%34 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%35 = load %raw-5.Map*, %raw-5.Map** %34, align 8
	%36 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %35, i64 0
	%37 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %36, i64 0, i32 0
	%38 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %37, align 8
	%39 = extractvalue {i64*, i64, i64, %Allocator} %38, 1
	%40 = icmp eq i64 %39, 0
	%41 = zext i1 %40 to i8
	%42 = trunc i8 %41 to i1
	br i1 %42, label %if.then-1, label %if.done-2

if.then-1:
	%43 = load %__Map_Header, %__Map_Header* %h, align 8
	%44 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%45 = bitcast %__Map_Header* %3 to %..rawptr
	%46 = call %..rawptr @__mem_zero(%..rawptr %45, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	store %__Map_Header %43, %__Map_Header* %3
	%47 = bitcast %Source_Code_Location* %4 to %..rawptr
	%48 = call %..rawptr @__mem_zero(%..rawptr %47, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %4
	store %Source_Code_Location %44, %Source_Code_Location* %4
	call void @__dynamic_map_reserve(%__Map_Header* %3, i64 16, %Source_Code_Location* %4, %Context* noalias nonnull %__.context_ptr)
	%49 = load %__Map_Header, %__Map_Header* %h, align 8
	%50 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%51 = bitcast %__Map_Header* %5 to %..rawptr
	%52 = call %..rawptr @__mem_zero(%..rawptr %51, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	store %__Map_Header %49, %__Map_Header* %5
	%53 = bitcast %Source_Code_Location* %6 to %..rawptr
	%54 = call %..rawptr @__mem_zero(%..rawptr %53, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %50, %Source_Code_Location* %6
	call void @__dynamic_map_grow(%__Map_Header* %5, %Source_Code_Location* %6, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-2

if.done-2:
	; fr
	
	%55 = load %__Map_Header, %__Map_Header* %h, align 8
	%56 = load %__Map_Key, %__Map_Key* %key, align 8
	%57 = bitcast %__Map_Header* %8 to %..rawptr
	%58 = call %..rawptr @__mem_zero(%..rawptr %57, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %8
	store %__Map_Header %55, %__Map_Header* %8
	%59 = bitcast %__Map_Key* %9 to %..rawptr
	%60 = call %..rawptr @__mem_zero(%..rawptr %59, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %9
	store %__Map_Key %56, %__Map_Key* %9
	%61 = call %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %8, %__Map_Key* %9, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Find_Result %61, %__Map_Find_Result* %7
	; IfStmt
	; SelectorExpr
	%62 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %7, i64 0, i32 2
	%63 = load i64, i64* %62, align 8
	%64 = icmp sge i64 %63, 0
	%65 = zext i1 %64 to i8
	%66 = trunc i8 %65 to i1
	br i1 %66, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%67 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %7, i64 0, i32 2
	%68 = load i64, i64* %67, align 8
	store i64 %68, i64* %1
	br label %if.done-8

if.else-4:
	; AssignStmt
	%69 = load %__Map_Header, %__Map_Header* %h, align 8
	%70 = load %__Map_Key, %__Map_Key* %key, align 8
	%71 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%72 = bitcast %__Map_Header* %10 to %..rawptr
	%73 = call %..rawptr @__mem_zero(%..rawptr %72, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	store %__Map_Header %69, %__Map_Header* %10
	%74 = bitcast %__Map_Key* %11 to %..rawptr
	%75 = call %..rawptr @__mem_zero(%..rawptr %74, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	store %__Map_Key %70, %__Map_Key* %11
	%76 = bitcast %Source_Code_Location* %12 to %..rawptr
	%77 = call %..rawptr @__mem_zero(%..rawptr %76, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %12
	store %Source_Code_Location %71, %Source_Code_Location* %12
	%78 = call i64 @__dynamic_map_add_entry(%__Map_Header* %10, %__Map_Key* %11, %Source_Code_Location* %12, %Context* noalias nonnull %__.context_ptr)
	store i64 %78, i64* %1
	; IfStmt
	; SelectorExpr
	%79 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %7, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	%81 = icmp sge i64 %80, 0
	%82 = zext i1 %81 to i8
	%83 = trunc i8 %82 to i1
	br i1 %83, label %if.then-5, label %if.else-6

if.then-5:
	; entry
	
	%84 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%85 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %7, i64 0, i32 1
	%86 = load i64, i64* %85, align 8
	%87 = bitcast %__Map_Header* %14 to %..rawptr
	%88 = call %..rawptr @__mem_zero(%..rawptr %87, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %14
	store %__Map_Header %84, %__Map_Header* %14
	%89 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %14, i64 %86, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %89, %__Map_Entry_Header** %13
	; AssignStmt
	; SelectorExpr
	%90 = load %__Map_Entry_Header*, %__Map_Entry_Header** %13, align 8
	%91 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %90, i64 0
	%92 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %91, i64 0, i32 1
	%93 = load i64, i64* %1, align 8
	store i64 %93, i64* %92
	br label %if.done-7

if.else-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	; SelectorExpr
	%94 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%95 = load %raw-5.Map*, %raw-5.Map** %94, align 8
	%96 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %95, i64 0
	%97 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %96, i64 0, i32 0
	%98 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %97, align 8
	%99 = extractvalue {i64*, i64, i64, %Allocator} %98, 0
	%100 = extractvalue {i64*, i64, i64, %Allocator} %98, 1
	; SelectorExpr
	%101 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %7, i64 0, i32 0
	%102 = load i64, i64* %101, align 8
	%103 = getelementptr inbounds i64, i64* %99, i64 %102
	%104 = load i64, i64* %1, align 8
	store i64 %104, i64* %103
	br label %if.done-7

if.done-7:
	br label %if.done-8

if.done-8:
	; e
	
	%105 = load %__Map_Header, %__Map_Header* %h, align 8
	%106 = load i64, i64* %1, align 8
	%107 = bitcast %__Map_Header* %16 to %..rawptr
	%108 = call %..rawptr @__mem_zero(%..rawptr %107, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %16
	store %__Map_Header %105, %__Map_Header* %16
	%109 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %16, i64 %106, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %109, %__Map_Entry_Header** %15
	; AssignStmt
	; SelectorExpr
	%110 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%111 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %110, i64 0
	%112 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %111, i64 0, i32 0
	%113 = load %__Map_Key, %__Map_Key* %key, align 8
	store %__Map_Key %113, %__Map_Key* %112
	; val
	
	%114 = load %__Map_Entry_Header*, %__Map_Entry_Header** %15, align 8
	%115 = ptrtoint %__Map_Entry_Header* %114 to i64
	; SelectorExpr
	%116 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 4
	%117 = load i64, i64* %116, align 8
	%118 = add i64 %115, %117
	%119 = inttoptr i64 %118 to i8*
	store i8* %119, i8** %17
	%120 = load i8*, i8** %17, align 8
	%121 = load %..rawptr, %..rawptr* %0, align 8
	; SelectorExpr
	%122 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 5
	%123 = load i64, i64* %122, align 8
	%124 = bitcast i8* %120 to %..rawptr
	%125 = call %..rawptr @__mem_copy(%..rawptr %124, %..rawptr %121, i64 %123)
	; IfStmt
	%126 = load %__Map_Header, %__Map_Header* %h, align 8
	%127 = bitcast %__Map_Header* %18 to %..rawptr
	%128 = call %..rawptr @__mem_zero(%..rawptr %127, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %18
	store %__Map_Header %126, %__Map_Header* %18
	%129 = call i8 @__dynamic_map_full(%__Map_Header* %18, %Context* noalias nonnull %__.context_ptr)
	%130 = trunc i8 %129 to i1
	br i1 %130, label %if.then-9, label %if.done-10

if.then-9:
	%131 = load %__Map_Header, %__Map_Header* %h, align 8
	%132 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%133 = bitcast %__Map_Header* %19 to %..rawptr
	%134 = call %..rawptr @__mem_zero(%..rawptr %133, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %19
	store %__Map_Header %131, %__Map_Header* %19
	%135 = bitcast %Source_Code_Location* %20 to %..rawptr
	%136 = call %..rawptr @__mem_zero(%..rawptr %135, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %20
	store %Source_Code_Location %132, %Source_Code_Location* %20
	call void @__dynamic_map_grow(%__Map_Header* %19, %Source_Code_Location* %20, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-10

if.done-10:
	ret void
}

define void @__dynamic_map_grow(%__Map_Header* %h, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %__Map_Header, align 16
	%2 = alloca %Source_Code_Location, align 16
	%3 = load %__Map_Header, %__Map_Header* %h, align 8
	%4 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; new_count
	
	; max
	; SelectorExpr
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%6 = load %raw-5.Map*, %raw-5.Map** %5, align 8
	%7 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %6, i64 0
	%8 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %7, i64 0, i32 1
	%9 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %8, i64 0, i32 2
	%10 = load i64, i64* %9, align 8
	%11 = mul i64 4, %10
	%12 = add i64 %11, 7
	%13 = icmp sgt i64 %12, 16
	%14 = select i1 %13, i64 %12, i64 16
	store i64 %14, i64* %0
	%15 = load %__Map_Header, %__Map_Header* %h, align 8
	%16 = load i64, i64* %0, align 8
	%17 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%18 = bitcast %__Map_Header* %1 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %1
	store %__Map_Header %15, %__Map_Header* %1
	%20 = bitcast %Source_Code_Location* %2 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %17, %Source_Code_Location* %2
	call void @__dynamic_map_rehash(%__Map_Header* %1, i64 %16, %Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define i8 @__dynamic_map_full(%__Map_Header* %h, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = load %__Map_Header, %__Map_Header* %h, align 8
	; ReturnStmt
	; SelectorExpr
	%1 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%2 = load %raw-5.Map*, %raw-5.Map** %1, align 8
	%3 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %2, i64 0
	%4 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %3, i64 0, i32 0
	%5 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %4, align 8
	%6 = extractvalue {i64*, i64, i64, %Allocator} %5, 1
	%7 = sitofp i64 %6 to double
	%8 = fmul double 0x3fe8000000000000, %7
	%9 = fptosi double %8 to i64
	; SelectorExpr
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%11 = load %raw-5.Map*, %raw-5.Map** %10, align 8
	%12 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %11, i64 0
	%13 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %12, i64 0, i32 1
	%14 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %13, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sle i64 %9, %15
	%17 = zext i1 %16 to i8
	ret i8 %17
}

define i8 @__dynamic_map_hash_equal(%__Map_Header* %h, %__Map_Key* %a, %__Map_Key* %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = load %__Map_Header, %__Map_Header* %h, align 8
	%1 = load %__Map_Key, %__Map_Key* %a, align 8
	%2 = load %__Map_Key, %__Map_Key* %b, align 8
	; IfStmt
	; SelectorExpr
	%3 = getelementptr inbounds %__Map_Key, %__Map_Key* %a, i64 0, i32 0
	%4 = load i64, i64* %3, align 8
	; SelectorExpr
	%5 = getelementptr inbounds %__Map_Key, %__Map_Key* %b, i64 0, i32 0
	%6 = load i64, i64* %5, align 8
	%7 = icmp eq i64 %4, %6
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-4

if.then-1:
	; IfStmt
	; SelectorExpr
	%10 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 1
	%11 = load i8, i8* %10, align 1
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	; SelectorExpr
	%13 = getelementptr inbounds %__Map_Key, %__Map_Key* %a, i64 0, i32 1
	%14 = load %..string, %..string* %13, align 8
	; SelectorExpr
	%15 = getelementptr inbounds %__Map_Key, %__Map_Key* %b, i64 0, i32 1
	%16 = load %..string, %..string* %15, align 8
	%17 = call i8 @__string_eq(%..string %14, %..string %16)
	ret i8 %17

if.done-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; ReturnStmt
	ret i8 0
}

define %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %h, %__Map_Key* %key, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %__Map_Find_Result, align 16
	%1 = alloca %__Map_Entry_Header*, align 16
	%2 = alloca %__Map_Header, align 16
	%3 = alloca %__Map_Header, align 16
	%4 = alloca %__Map_Key, align 16
	%5 = alloca %__Map_Key, align 16
	%6 = load %__Map_Header, %__Map_Header* %h, align 8
	%7 = load %__Map_Key, %__Map_Key* %key, align 8
	; fr
	
	store %__Map_Find_Result {i64 -1, i64 -1, i64 -1}, %__Map_Find_Result* %0
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%9 = load %raw-5.Map*, %raw-5.Map** %8, align 8
	%10 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %9, i64 0
	%11 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %10, i64 0, i32 0
	%12 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %11, align 8
	%13 = extractvalue {i64*, i64, i64, %Allocator} %12, 1
	%14 = icmp sgt i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %if.then-1, label %if.done-7

if.then-1:
	; AssignStmt
	; SelectorExpr
	%17 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 0
	; SelectorExpr
	%18 = getelementptr inbounds %__Map_Key, %__Map_Key* %key, i64 0, i32 0
	%19 = load i64, i64* %18, align 8
	; SelectorExpr
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%21 = load %raw-5.Map*, %raw-5.Map** %20, align 8
	%22 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %21, i64 0
	%23 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %22, i64 0, i32 0
	%24 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %23, align 8
	%25 = extractvalue {i64*, i64, i64, %Allocator} %24, 1
	%26 = bitcast i64 %25 to i64
	%27 = urem i64 %19, %26
	%28 = bitcast i64 %27 to i64
	store i64 %28, i64* %17
	; AssignStmt
	; SelectorExpr
	%29 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	; IndexExpr
	; SelectorExpr
	%30 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%31 = load %raw-5.Map*, %raw-5.Map** %30, align 8
	%32 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %31, i64 0
	%33 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %32, i64 0, i32 0
	%34 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %33, align 8
	%35 = extractvalue {i64*, i64, i64, %Allocator} %34, 0
	%36 = extractvalue {i64*, i64, i64, %Allocator} %34, 1
	; SelectorExpr
	%37 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 0
	%38 = load i64, i64* %37, align 8
	%39 = getelementptr inbounds i64, i64* %35, i64 %38
	%40 = load i64, i64* %39, align 8
	store i64 %40, i64* %29
	; ForStmt
	br label %for.loop-2

for.loop-2:
	; SelectorExpr
	%41 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	%42 = load i64, i64* %41, align 8
	%43 = icmp sge i64 %42, 0
	%44 = zext i1 %43 to i8
	%45 = trunc i8 %44 to i1
	br i1 %45, label %for.body-3, label %for.done-6

for.body-3:
	; entry
	
	%46 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%47 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	%48 = load i64, i64* %47, align 8
	%49 = bitcast %__Map_Header* %2 to %..rawptr
	%50 = call %..rawptr @__mem_zero(%..rawptr %49, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	store %__Map_Header %46, %__Map_Header* %2
	%51 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %2, i64 %48, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %51, %__Map_Entry_Header** %1
	; IfStmt
	%52 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%53 = load %__Map_Entry_Header*, %__Map_Entry_Header** %1, align 8
	%54 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %53, i64 0
	%55 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %54, i64 0, i32 0
	%56 = load %__Map_Key, %__Map_Key* %55, align 8
	%57 = load %__Map_Key, %__Map_Key* %key, align 8
	%58 = bitcast %__Map_Header* %3 to %..rawptr
	%59 = call %..rawptr @__mem_zero(%..rawptr %58, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	store %__Map_Header %52, %__Map_Header* %3
	%60 = bitcast %__Map_Key* %4 to %..rawptr
	%61 = call %..rawptr @__mem_zero(%..rawptr %60, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %4
	store %__Map_Key %56, %__Map_Key* %4
	%62 = bitcast %__Map_Key* %5 to %..rawptr
	%63 = call %..rawptr @__mem_zero(%..rawptr %62, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	store %__Map_Key %57, %__Map_Key* %5
	%64 = call i8 @__dynamic_map_hash_equal(%__Map_Header* %3, %__Map_Key* %4, %__Map_Key* %5, %Context* noalias nonnull %__.context_ptr)
	%65 = trunc i8 %64 to i1
	br i1 %65, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	%66 = load %__Map_Find_Result, %__Map_Find_Result* %0, align 8
	ret %__Map_Find_Result %66

if.done-5:
	; AssignStmt
	; SelectorExpr
	%67 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 1
	; SelectorExpr
	%68 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	%69 = load i64, i64* %68, align 8
	store i64 %69, i64* %67
	; AssignStmt
	; SelectorExpr
	%70 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	; SelectorExpr
	%71 = load %__Map_Entry_Header*, %__Map_Entry_Header** %1, align 8
	%72 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %71, i64 0
	%73 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %72, i64 0, i32 1
	%74 = load i64, i64* %73, align 8
	store i64 %74, i64* %70
	br label %for.loop-2

for.done-6:
	br label %if.done-7

if.done-7:
	; ReturnStmt
	%75 = load %__Map_Find_Result, %__Map_Find_Result* %0, align 8
	ret %__Map_Find_Result %75
}

define i64 @__dynamic_map_add_entry(%__Map_Header* %h, %__Map_Key* %key, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca %Source_Code_Location, align 16
	%3 = alloca %__Map_Entry_Header*, align 16
	%4 = alloca %__Map_Header, align 16
	%5 = load %__Map_Header, %__Map_Header* %h, align 8
	%6 = load %__Map_Key, %__Map_Key* %key, align 8
	%7 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; prev
	
	; SelectorExpr
	; SelectorExpr
	%8 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%9 = load %raw-5.Map*, %raw-5.Map** %8, align 8
	%10 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %9, i64 0
	%11 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %10, i64 0, i32 1
	%12 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %11, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	store i64 %13, i64* %0
	; c
	
	; SelectorExpr
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%15 = load %raw-5.Map*, %raw-5.Map** %14, align 8
	%16 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %15, i64 0
	%17 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %16, i64 0, i32 1
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 3
	%22 = load i64, i64* %21, align 8
	%23 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%24 = bitcast %raw-5.Dynamic_Array* %18 to %..rawptr
	%25 = bitcast %Source_Code_Location* %2 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %23, %Source_Code_Location* %2
	%27 = call i64 @__dynamic_array_append_nothing(%..rawptr %24, i64 %20, i64 %22, %Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	store i64 %27, i64* %1
	; IfStmt
	%28 = load i64, i64* %1, align 8
	%29 = load i64, i64* %0, align 8
	%30 = icmp ne i64 %28, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-1, label %if.done-2

if.then-1:
	; end
	
	%33 = load %__Map_Header, %__Map_Header* %h, align 8
	%34 = load i64, i64* %1, align 8
	%35 = sub i64 %34, 1
	%36 = bitcast %__Map_Header* %4 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	store %__Map_Header %33, %__Map_Header* %4
	%38 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %4, i64 %35, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Entry_Header* %38, %__Map_Entry_Header** %3
	; AssignStmt
	; SelectorExpr
	%39 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%40 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %39, i64 0
	%41 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %40, i64 0, i32 0
	%42 = load %__Map_Key, %__Map_Key* %key, align 8
	store %__Map_Key %42, %__Map_Key* %41
	; AssignStmt
	; SelectorExpr
	%43 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%44 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %43, i64 0
	%45 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %44, i64 0, i32 1
	store i64 -1, i64* %45
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%46 = load i64, i64* %0, align 8
	ret i64 %46
}

define void @__dynamic_map_delete(%__Map_Header* %h, %__Map_Key* %key, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %__Map_Find_Result, align 16
	%1 = alloca %__Map_Header, align 16
	%2 = alloca %__Map_Key, align 16
	%3 = alloca %__Map_Header, align 16
	%4 = alloca %__Map_Find_Result, align 16
	%5 = load %__Map_Header, %__Map_Header* %h, align 8
	%6 = load %__Map_Key, %__Map_Key* %key, align 8
	; fr
	
	%7 = load %__Map_Header, %__Map_Header* %h, align 8
	%8 = load %__Map_Key, %__Map_Key* %key, align 8
	%9 = bitcast %__Map_Header* %1 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %1
	store %__Map_Header %7, %__Map_Header* %1
	%11 = bitcast %__Map_Key* %2 to %..rawptr
	%12 = call %..rawptr @__mem_zero(%..rawptr %11, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %2
	store %__Map_Key %8, %__Map_Key* %2
	%13 = call %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %1, %__Map_Key* %2, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Find_Result %13, %__Map_Find_Result* %0
	; IfStmt
	; SelectorExpr
	%14 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %0, i64 0, i32 2
	%15 = load i64, i64* %14, align 8
	%16 = icmp sge i64 %15, 0
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-1, label %if.done-2

if.then-1:
	%19 = load %__Map_Header, %__Map_Header* %h, align 8
	%20 = load %__Map_Find_Result, %__Map_Find_Result* %0, align 8
	%21 = bitcast %__Map_Header* %3 to %..rawptr
	%22 = call %..rawptr @__mem_zero(%..rawptr %21, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %3
	store %__Map_Header %19, %__Map_Header* %3
	%23 = bitcast %__Map_Find_Result* %4 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 24)
	store %__Map_Find_Result zeroinitializer, %__Map_Find_Result* %4
	store %__Map_Find_Result %20, %__Map_Find_Result* %4
	call void @__dynamic_map_erase(%__Map_Header* %3, %__Map_Find_Result* %4, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-2

if.done-2:
	ret void
}

define %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %h, i64 %index, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = load %__Map_Header, %__Map_Header* %h, align 8
	
	store i64 %index, i64* %0
	%3 = load i64, i64* %0, align 8
	%4 = icmp sle i64 0, %3
	%5 = zext i1 %4 to i8
	%6 = load i64, i64* %0, align 8
	%7 = icmp sle i64 0, %6
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%10 = load i64, i64* %0, align 8
	; SelectorExpr
	; SelectorExpr
	%11 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%12 = load %raw-5.Map*, %raw-5.Map** %11, align 8
	%13 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %12, i64 0
	%14 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %13, i64 0, i32 1
	%15 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	%17 = icmp slt i64 %10, %16
	%18 = zext i1 %17 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%19 = phi i8 [ 0, %decls-0 ], [ %18, %logical.cmp.rhs-1 ]
	%20 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$5e, i64 0, i32 0), i64 51}, i64 1321, i64 2, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__str$5f, i64 0, i32 0), i64 23})
	%21 = trunc i8 %19 to i1
	%22 = bitcast %Source_Code_Location* %1 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %20, %Source_Code_Location* %1
	%24 = call i8 @assert(i1 %21, %..string zeroinitializer, %Source_Code_Location* %1)
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%25 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%26 = load %raw-5.Map*, %raw-5.Map** %25, align 8
	%27 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %26, i64 0
	%28 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %27, i64 0, i32 1
	%29 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %28, i64 0, i32 0
	%30 = load %..rawptr, %..rawptr* %29, align 8
	%31 = ptrtoint %..rawptr %30 to i64
	%32 = load i64, i64* %0, align 8
	%33 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 2
	%34 = load i64, i64* %33, align 8
	%35 = mul i64 %32, %34
	%36 = bitcast i64 %35 to i64
	%37 = add i64 %31, %36
	%38 = inttoptr i64 %37 to %__Map_Entry_Header*
	ret %__Map_Entry_Header* %38
}

define void @__dynamic_map_erase(%__Map_Header* %h, %__Map_Find_Result* %fr, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %__Map_Header, align 16
	%1 = alloca %__Map_Entry_Header*, align 16
	%2 = alloca %__Map_Header, align 16
	%3 = alloca %__Map_Entry_Header*, align 16
	%4 = alloca %__Map_Header, align 16
	%5 = alloca %__Map_Entry_Header*, align 16
	%6 = alloca %__Map_Header, align 16
	%7 = alloca %__Map_Header, align 16
	%8 = alloca %__Map_Find_Result, align 16
	%9 = alloca %__Map_Header, align 16
	%10 = alloca %__Map_Entry_Header*, align 16
	%11 = alloca %__Map_Header, align 16
	%12 = alloca %__Map_Key, align 16
	%13 = alloca %__Map_Header, align 16
	%14 = alloca %__Map_Entry_Header*, align 16
	%15 = load %__Map_Header, %__Map_Header* %h, align 8
	%16 = load %__Map_Find_Result, %__Map_Find_Result* %fr, align 8
	; IfStmt
	; SelectorExpr
	%17 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 1
	%18 = load i64, i64* %17, align 8
	%19 = icmp slt i64 %18, 0
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %if.then-1, label %if.else-2

if.then-1:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%22 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%23 = load %raw-5.Map*, %raw-5.Map** %22, align 8
	%24 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %23, i64 0
	%25 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %24, i64 0, i32 0
	%26 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %25, align 8
	%27 = extractvalue {i64*, i64, i64, %Allocator} %26, 0
	%28 = extractvalue {i64*, i64, i64, %Allocator} %26, 1
	; SelectorExpr
	%29 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 0
	%30 = load i64, i64* %29, align 8
	%31 = getelementptr inbounds i64, i64* %27, i64 %30
	; SelectorExpr
	%32 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%33 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%34 = load i64, i64* %33, align 8
	%35 = bitcast %__Map_Header* %0 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %0
	store %__Map_Header %32, %__Map_Header* %0
	%37 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %0, i64 %34, %Context* noalias nonnull %__.context_ptr)
	%38 = bitcast %__Map_Entry_Header** %1 to %..rawptr
	%39 = call %..rawptr @__mem_zero(%..rawptr %38, i64 8)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %1
	store %__Map_Entry_Header* %37, %__Map_Entry_Header** %1
	%40 = load %__Map_Entry_Header*, %__Map_Entry_Header** %1, align 8
	%41 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %40, i64 0
	%42 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %41, i64 0, i32 1
	%43 = load i64, i64* %42, align 8
	store i64 %43, i64* %31
	br label %if.done-3

if.else-2:
	; AssignStmt
	; SelectorExpr
	%44 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%45 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 1
	%46 = load i64, i64* %45, align 8
	%47 = bitcast %__Map_Header* %2 to %..rawptr
	%48 = call %..rawptr @__mem_zero(%..rawptr %47, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	store %__Map_Header %44, %__Map_Header* %2
	%49 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %2, i64 %46, %Context* noalias nonnull %__.context_ptr)
	%50 = bitcast %__Map_Entry_Header** %3 to %..rawptr
	%51 = call %..rawptr @__mem_zero(%..rawptr %50, i64 8)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %3
	store %__Map_Entry_Header* %49, %__Map_Entry_Header** %3
	%52 = load %__Map_Entry_Header*, %__Map_Entry_Header** %3, align 8
	%53 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %52, i64 0
	%54 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %53, i64 0, i32 1
	; SelectorExpr
	%55 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%56 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%57 = load i64, i64* %56, align 8
	%58 = bitcast %__Map_Header* %4 to %..rawptr
	%59 = call %..rawptr @__mem_zero(%..rawptr %58, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	store %__Map_Header %55, %__Map_Header* %4
	%60 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %4, i64 %57, %Context* noalias nonnull %__.context_ptr)
	%61 = bitcast %__Map_Entry_Header** %5 to %..rawptr
	%62 = call %..rawptr @__mem_zero(%..rawptr %61, i64 8)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %5
	store %__Map_Entry_Header* %60, %__Map_Entry_Header** %5
	%63 = load %__Map_Entry_Header*, %__Map_Entry_Header** %5, align 8
	%64 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %63, i64 0
	%65 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %64, i64 0, i32 1
	%66 = load i64, i64* %65, align 8
	store i64 %66, i64* %54
	br label %if.done-3

if.done-3:
	%67 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%68 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%69 = load i64, i64* %68, align 8
	%70 = bitcast %__Map_Header* %6 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	store %__Map_Header %67, %__Map_Header* %6
	%72 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %6, i64 %69, %Context* noalias nonnull %__.context_ptr)
	%73 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	; SelectorExpr
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%75 = load %raw-5.Map*, %raw-5.Map** %74, align 8
	%76 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %75, i64 0
	%77 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %76, i64 0, i32 1
	%78 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %77, i64 0, i32 1
	%79 = load i64, i64* %78, align 8
	%80 = sub i64 %79, 1
	%81 = bitcast %__Map_Header* %7 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %7
	store %__Map_Header %73, %__Map_Header* %7
	%83 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %7, i64 %80, %Context* noalias nonnull %__.context_ptr)
	%84 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 2
	%85 = load i64, i64* %84, align 8
	%86 = bitcast %__Map_Entry_Header* %72 to %..rawptr
	%87 = bitcast %__Map_Entry_Header* %83 to %..rawptr
	%88 = call %..rawptr @__mem_copy(%..rawptr %86, %..rawptr %87, i64 %85)
	; last
	
	%89 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%90 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%91 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%92 = load i64, i64* %91, align 8
	%93 = bitcast %__Map_Header* %9 to %..rawptr
	%94 = call %..rawptr @__mem_zero(%..rawptr %93, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %9
	store %__Map_Header %90, %__Map_Header* %9
	%95 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %9, i64 %92, %Context* noalias nonnull %__.context_ptr)
	%96 = bitcast %__Map_Entry_Header** %10 to %..rawptr
	%97 = call %..rawptr @__mem_zero(%..rawptr %96, i64 8)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %10
	store %__Map_Entry_Header* %95, %__Map_Entry_Header** %10
	%98 = load %__Map_Entry_Header*, %__Map_Entry_Header** %10, align 8
	%99 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %98, i64 0
	%100 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %99, i64 0, i32 0
	%101 = load %__Map_Key, %__Map_Key* %100, align 8
	%102 = bitcast %__Map_Header* %11 to %..rawptr
	%103 = call %..rawptr @__mem_zero(%..rawptr %102, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %11
	store %__Map_Header %89, %__Map_Header* %11
	%104 = bitcast %__Map_Key* %12 to %..rawptr
	%105 = call %..rawptr @__mem_zero(%..rawptr %104, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %12
	store %__Map_Key %101, %__Map_Key* %12
	%106 = call %__Map_Find_Result @__dynamic_map_find(%__Map_Header* %11, %__Map_Key* %12, %Context* noalias nonnull %__.context_ptr)
	store %__Map_Find_Result %106, %__Map_Find_Result* %8
	; IfStmt
	; SelectorExpr
	%107 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %8, i64 0, i32 1
	%108 = load i64, i64* %107, align 8
	%109 = icmp sge i64 %108, 0
	%110 = zext i1 %109 to i8
	%111 = trunc i8 %110 to i1
	br i1 %111, label %if.then-4, label %if.else-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%112 = load %__Map_Header, %__Map_Header* %h, align 8
	; SelectorExpr
	%113 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %8, i64 0, i32 1
	%114 = load i64, i64* %113, align 8
	%115 = bitcast %__Map_Header* %13 to %..rawptr
	%116 = call %..rawptr @__mem_zero(%..rawptr %115, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	store %__Map_Header %112, %__Map_Header* %13
	%117 = call %__Map_Entry_Header* @__dynamic_map_get_entry(%__Map_Header* %13, i64 %114, %Context* noalias nonnull %__.context_ptr)
	%118 = bitcast %__Map_Entry_Header** %14 to %..rawptr
	%119 = call %..rawptr @__mem_zero(%..rawptr %118, i64 8)
	store %__Map_Entry_Header* zeroinitializer, %__Map_Entry_Header** %14
	store %__Map_Entry_Header* %117, %__Map_Entry_Header** %14
	%120 = load %__Map_Entry_Header*, %__Map_Entry_Header** %14, align 8
	%121 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %120, i64 0
	%122 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %121, i64 0, i32 1
	; SelectorExpr
	%123 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%124 = load i64, i64* %123, align 8
	store i64 %124, i64* %122
	br label %if.done-6

if.else-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%126 = load %raw-5.Map*, %raw-5.Map** %125, align 8
	%127 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %126, i64 0
	%128 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %127, i64 0, i32 0
	%129 = load {i64*, i64, i64, %Allocator}, {i64*, i64, i64, %Allocator}* %128, align 8
	%130 = extractvalue {i64*, i64, i64, %Allocator} %129, 0
	%131 = extractvalue {i64*, i64, i64, %Allocator} %129, 1
	; SelectorExpr
	%132 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %8, i64 0, i32 0
	%133 = load i64, i64* %132, align 8
	%134 = getelementptr inbounds i64, i64* %130, i64 %133
	; SelectorExpr
	%135 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%136 = load i64, i64* %135, align 8
	store i64 %136, i64* %134
	br label %if.done-6

if.done-6:
	; IfStmt
	; SelectorExpr
	%137 = getelementptr inbounds %__Map_Find_Result, %__Map_Find_Result* %fr, i64 0, i32 2
	%138 = load i64, i64* %137, align 8
	; SelectorExpr
	; SelectorExpr
	%139 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%140 = load %raw-5.Map*, %raw-5.Map** %139, align 8
	%141 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %140, i64 0
	%142 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %141, i64 0, i32 1
	%143 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %142, i64 0, i32 1
	%144 = load i64, i64* %143, align 8
	%145 = sub i64 %144, 1
	%146 = icmp eq i64 %138, %145
	%147 = zext i1 %146 to i8
	%148 = trunc i8 %147 to i1
	br i1 %148, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	; SelectorExpr
	; SelectorExpr
	%149 = getelementptr inbounds %__Map_Header, %__Map_Header* %h, i64 0, i32 0
	%150 = load %raw-5.Map*, %raw-5.Map** %149, align 8
	%151 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %150, i64 0
	%152 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %151, i64 0, i32 1
	%153 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %152, i64 0, i32 1
	%154 = load i64, i64* %153, align 8
	%155 = sub i64 %154, 1
	store i64 %155, i64* %153
	br label %if.done-8

if.done-8:
	ret void
}

define {i64, i64} @os-3.write_string(i64 %fd, %..string %str, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i8*, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i64, i64}, align 16
	
	store i64 %fd, i64* %0
	
	store %..string %str, %..string* %1
	; ReturnStmt
	%6 = load i64, i64* %0, align 8
	%7 = load %..string, %..string* %1, align 8
	%8 = extractvalue %..string %7, 0
	%9 = bitcast i8** %2 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 8)
	store i8* zeroinitializer, i8** %2
	store i8* %8, i8** %2
	%11 = extractvalue %..string %7, 1
	%12 = sub i64 %11, 0
	%13 = load i8*, i8** %2, align 8
	%14 = getelementptr inbounds i8, i8* %13, i64 0
	%15 = bitcast {i8*, i64}* %3 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	%17 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 0
	store i8* %14, i8** %17
	%18 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3, i64 0, i32 1
	store i64 %12, i64* %18
	%19 = load {i8*, i64}, {i8*, i64}* %3, align 8
	%20 = bitcast {i8*, i64}* %4 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %19, {i8*, i64}* %4
	%22 = call {i64, i64} @windows-6.write(i64 %6, {i8*, i64}* %4, %Context* noalias nonnull %__.context_ptr)
	%23 = extractvalue {i64, i64} %22, 0
	%24 = extractvalue {i64, i64} %22, 1
	%25 = bitcast {i64, i64}* %5 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %5
	%27 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 0
	store i64 %23, i64* %27
	%28 = getelementptr inbounds {i64, i64}, {i64, i64}* %5, i64 0, i32 1
	store i64 %24, i64* %28
	%29 = load {i64, i64}, {i64, i64}* %5, align 8
	ret {i64, i64} %29
}

define {i64, i64} @os-3.write_byte(i64 %fd, i8 %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i8, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i64, i64}, align 16
	
	store i64 %fd, i64* %0
	
	store i8 %b, i8* %1
	; ReturnStmt
	%5 = load i64, i64* %0, align 8
	; CompoundLit
	%6 = bitcast {i8*, i64}* %2 to %..rawptr
	%7 = call %..rawptr @__mem_zero(%..rawptr %6, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%8 = getelementptr inbounds [1 x i8], [1 x i8]* @__csba$0, i64 0, i32 0
	%9 = load i8, i8* %1, align 1
	%10 = getelementptr inbounds i8, i8* %8, i64 0
	store i8 %9, i8* %10
	%11 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %8, i8** %11
	%12 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %12
	%13 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%14 = bitcast {i8*, i64}* %3 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %13, {i8*, i64}* %3
	%16 = call {i64, i64} @windows-6.write(i64 %5, {i8*, i64}* %3, %Context* noalias nonnull %__.context_ptr)
	%17 = extractvalue {i64, i64} %16, 0
	%18 = extractvalue {i64, i64} %16, 1
	%19 = bitcast {i64, i64}* %4 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %4
	%21 = getelementptr inbounds {i64, i64}, {i64, i64}* %4, i64 0, i32 0
	store i64 %17, i64* %21
	%22 = getelementptr inbounds {i64, i64}, {i64, i64}* %4, i64 0, i32 1
	store i64 %18, i64* %22
	%23 = load {i64, i64}, {i64, i64}* %4, align 8
	ret {i64, i64} %23
}

define i8 @os-3.write_entire_file(%..string %name, {i8*, i64}* %data, i1 %truncate, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca {i8*, i64}, align 16
	
	store %..string %name, %..string* %0
	%8 = load {i8*, i64}, {i8*, i64}* %data, align 8
	
	%9 = zext i1 %truncate to i8
	store i8 %9, i8* %1
	%10 = bitcast i8* %2 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 1)
	store i8 zeroinitializer, i8* %2
	
	; flags
	
	store i64 65, i64* %3
	; IfStmt
	%12 = load i8, i8* %1, align 1
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	%14 = load i64, i64* %3, align 8
	%15 = or i64 %14, 512
	store i64 %15, i64* %3
	br label %if.done-2

if.done-2:
	; fd
	
	; err
	
	%16 = load %..string, %..string* %0, align 8
	%17 = load i64, i64* %3, align 8
	%18 = call {i64, i64} @windows-6.open(%..string %16, i64 %17, i32 0, %Context* noalias nonnull %__.context_ptr)
	%19 = extractvalue {i64, i64} %18, 0
	%20 = extractvalue {i64, i64} %18, 1
	store i64 %19, i64* %4
	store i64 %20, i64* %5
	; IfStmt
	%21 = load i64, i64* %5, align 8
	%22 = icmp ne i64 %21, 0
	%23 = zext i1 %22 to i8
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 0

if.done-4:
	; DeferStmt
	; write_err
	
	%25 = load i64, i64* %4, align 8
	%26 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%27 = bitcast {i8*, i64}* %7 to %..rawptr
	%28 = call %..rawptr @__mem_zero(%..rawptr %27, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	store {i8*, i64} %26, {i8*, i64}* %7
	%29 = call {i64, i64} @windows-6.write(i64 %25, {i8*, i64}* %7, %Context* noalias nonnull %__.context_ptr)
	%30 = extractvalue {i64, i64} %29, 0
	%31 = extractvalue {i64, i64} %29, 1
	store i64 %31, i64* %6
	; ReturnStmt
	%32 = load i64, i64* %6, align 8
	%33 = icmp eq i64 %32, 0
	%34 = zext i1 %33 to i8
	; defer
	%35 = load i64, i64* %4, align 8
	call void @windows-6.close(i64 %35, %Context* noalias nonnull %__.context_ptr)
	ret i8 %34
}

define %test1-0.Post @test1-0.make_post(%..string %title_text, %..string %author_text, %..string %body_text, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %test1-0.Post, align 16
	
	store %..string %title_text, %..string* %0
	
	store %..string %author_text, %..string* %1
	
	store %..string %body_text, %..string* %2
	; post
	%4 = bitcast %test1-0.Post* %3 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %3
	
	; AssignStmt
	%6 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	; SelectorExpr
	%7 = call %html-11.Element* @html-11.div(%Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %7, %html-11.Element** %6
	; SelectorExpr
	%8 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	%9 = load %html-11.Element*, %html-11.Element** %8, align 8
	call void @html-11.class(%html-11.Element* %9, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$60, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%10 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 1
	; SelectorExpr
	%11 = load %..string, %..string* %0, align 8
	%12 = call %html-11.Element* @html-11.h(%..string %11, i64 2, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %12, %html-11.Element** %10
	; SelectorExpr
	%13 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	%14 = load %html-11.Element*, %html-11.Element** %13, align 8
	%15 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 1
	%16 = load %html-11.Element*, %html-11.Element** %15, align 8
	call void @html-11.append_to_element(%html-11.Element* %14, %html-11.Element* %16, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%17 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 2
	; SelectorExpr
	%18 = load %..string, %..string* %1, align 8
	%19 = call %html-11.Element* @html-11.h(%..string %18, i64 4, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %19, %html-11.Element** %17
	; SelectorExpr
	%20 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	%21 = load %html-11.Element*, %html-11.Element** %20, align 8
	%22 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 2
	%23 = load %html-11.Element*, %html-11.Element** %22, align 8
	call void @html-11.append_to_element(%html-11.Element* %21, %html-11.Element* %23, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%24 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	%25 = load %html-11.Element*, %html-11.Element** %24, align 8
	; SelectorExpr
	%26 = call %html-11.Element* @html-11.hr(%Context* noalias nonnull %__.context_ptr)
	call void @html-11.append_to_element(%html-11.Element* %25, %html-11.Element* %26, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%27 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 3
	; SelectorExpr
	%28 = load %..string, %..string* %2, align 8
	%29 = call %html-11.Element* @html-11.p(%..string %28, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %29, %html-11.Element** %27
	; SelectorExpr
	%30 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 0
	%31 = load %html-11.Element*, %html-11.Element** %30, align 8
	%32 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %3, i64 0, i32 3
	%33 = load %html-11.Element*, %html-11.Element** %32, align 8
	call void @html-11.append_to_element(%html-11.Element* %31, %html-11.Element* %33, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%34 = load %test1-0.Post, %test1-0.Post* %3, align 8
	ret %test1-0.Post %34
}

define void @test1-0.main() #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %Context, align 16
	%2 = bitcast %Context* %1 to %..rawptr
	%3 = call %..rawptr @__mem_zero(%..rawptr %2, i64 72)
	store %Context zeroinitializer, %Context* %1
	%4 = load %Context, %Context* @__ggv$0, align 8
	store %Context %4, %Context* %1
	%5 = getelementptr inbounds %Context, %Context* %1, i64 0, i32 0
	%6 = call %Allocator @default_allocator(%Context* noalias nonnull %1)
	store %Allocator %6, %Allocator* %5
	%7 = alloca %html-11.Element*, align 16
	%8 = alloca %html-11.Element*, align 16
	%9 = alloca %html-11.Element*, align 16
	%10 = alloca %test1-0.Post, align 16
	%11 = alloca %test1-0.Post, align 16
	%12 = alloca %test1-0.Post, align 16
	%13 = alloca %test1-0.Post, align 16
	%14 = alloca %test1-0.Post, align 16
	%15 = alloca %test1-0.Post, align 16
	%16 = alloca %html-11.Element*, align 16
	%17 = alloca {i8*, i64, i64, %Allocator}, align 16
	%18 = alloca {i8*, i64}, align 16
	%19 = alloca {i8*, i64}, align 16
	; doc
	
	; SelectorExpr
	%20 = call %html-11.Document* @html-11.make_document(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$61, i64 0, i32 0), i64 4}, %Context* noalias nonnull %1)
	store %html-11.Document* %20, %html-11.Document** %0
	; SelectorExpr
	%21 = load %html-11.Document*, %html-11.Document** %0, align 8
	call void @html-11.lang(%html-11.Document* %21, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$62, i64 0, i32 0), i64 2}, %Context* noalias nonnull %1)
	; SelectorExpr
	%22 = load %html-11.Document*, %html-11.Document** %0, align 8
	%23 = call %html-11.Element* @html-11.title(%html-11.Document* %22, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$63, i64 0, i32 0), i64 4}, %Context* noalias nonnull %1)
	; SelectorExpr
	%24 = load %html-11.Document*, %html-11.Document** %0, align 8
	%25 = call %html-11.Element* @html-11.charset(%html-11.Document* %24, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$64, i64 0, i32 0), i64 5}, %Context* noalias nonnull %1)
	; SelectorExpr
	%26 = load %html-11.Document*, %html-11.Document** %0, align 8
	%27 = call %html-11.Element* @html-11.meta(%html-11.Document* %26, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$65, i64 0, i32 0), i64 8}, %..string {i8* getelementptr inbounds ([36 x i8], [36 x i8]* @__str$66, i64 0, i32 0), i64 35}, %Context* noalias nonnull %1)
	; SelectorExpr
	%28 = load %html-11.Document*, %html-11.Document** %0, align 8
	%29 = call %html-11.Element* @html-11.append_css(%html-11.Document* %28, %..string {i8* getelementptr inbounds ([505 x i8], [505 x i8]* @__str$67, i64 0, i32 0), i64 504}, %Context* noalias nonnull %1)
	; title
	
	; SelectorExpr
	%30 = call %html-11.Element* @html-11.h(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$68, i64 0, i32 0), i64 4}, i64 1, %Context* noalias nonnull %1)
	store %html-11.Element* %30, %html-11.Element** %7
	; SelectorExpr
	%31 = load %html-11.Element*, %html-11.Element** %7, align 8
	call void @html-11.id(%html-11.Element* %31, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$69, i64 0, i32 0), i64 5}, %Context* noalias nonnull %1)
	; SelectorExpr
	%32 = load %html-11.Document*, %html-11.Document** %0, align 8
	%33 = load %html-11.Element*, %html-11.Element** %7, align 8
	call void @html-11.append_to_document(%html-11.Document* %32, %html-11.Element* %33, %Context* noalias nonnull %1)
	; title_line
	
	; SelectorExpr
	%34 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$6a, i64 0, i32 0), i64 2}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %1)
	store %html-11.Element* %34, %html-11.Element** %8
	; SelectorExpr
	%35 = load %html-11.Document*, %html-11.Document** %0, align 8
	; SelectorExpr
	%36 = call %html-11.Element* @html-11.hr(%Context* noalias nonnull %1)
	call void @html-11.append_to_document(%html-11.Document* %35, %html-11.Element* %36, %Context* noalias nonnull %1)
	; post_div
	
	; SelectorExpr
	%37 = call %html-11.Element* @html-11.div(%Context* noalias nonnull %1)
	store %html-11.Element* %37, %html-11.Element** %9
	; SelectorExpr
	%38 = load %html-11.Element*, %html-11.Element** %9, align 8
	call void @html-11.id(%html-11.Element* %38, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$6b, i64 0, i32 0), i64 5}, %Context* noalias nonnull %1)
	; SelectorExpr
	%39 = load %html-11.Document*, %html-11.Document** %0, align 8
	%40 = load %html-11.Element*, %html-11.Element** %9, align 8
	call void @html-11.append_to_document(%html-11.Document* %39, %html-11.Element* %40, %Context* noalias nonnull %1)
	; SelectorExpr
	%41 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%42 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$6c, i64 0, i32 0), i64 12}, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$6d, i64 0, i32 0), i64 18}, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$6e, i64 0, i32 0), i64 20}, %Context* noalias nonnull %1)
	%43 = bitcast %test1-0.Post* %10 to %..rawptr
	%44 = call %..rawptr @__mem_zero(%..rawptr %43, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %10
	store %test1-0.Post %42, %test1-0.Post* %10
	%45 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %10, i64 0, i32 0
	%46 = load %html-11.Element*, %html-11.Element** %45, align 8
	call void @html-11.append_to_element(%html-11.Element* %41, %html-11.Element* %46, %Context* noalias nonnull %1)
	; SelectorExpr
	%47 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%48 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$6f, i64 0, i32 0), i64 12}, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$70, i64 0, i32 0), i64 11}, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$71, i64 0, i32 0), i64 22}, %Context* noalias nonnull %1)
	%49 = bitcast %test1-0.Post* %11 to %..rawptr
	%50 = call %..rawptr @__mem_zero(%..rawptr %49, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %11
	store %test1-0.Post %48, %test1-0.Post* %11
	%51 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %11, i64 0, i32 0
	%52 = load %html-11.Element*, %html-11.Element** %51, align 8
	call void @html-11.append_to_element(%html-11.Element* %47, %html-11.Element* %52, %Context* noalias nonnull %1)
	; SelectorExpr
	%53 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%54 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$72, i64 0, i32 0), i64 9}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$73, i64 0, i32 0), i64 8}, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$74, i64 0, i32 0), i64 20}, %Context* noalias nonnull %1)
	%55 = bitcast %test1-0.Post* %12 to %..rawptr
	%56 = call %..rawptr @__mem_zero(%..rawptr %55, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %12
	store %test1-0.Post %54, %test1-0.Post* %12
	%57 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %12, i64 0, i32 0
	%58 = load %html-11.Element*, %html-11.Element** %57, align 8
	call void @html-11.append_to_element(%html-11.Element* %53, %html-11.Element* %58, %Context* noalias nonnull %1)
	; SelectorExpr
	%59 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%60 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$75, i64 0, i32 0), i64 9}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$76, i64 0, i32 0), i64 8}, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$77, i64 0, i32 0), i64 20}, %Context* noalias nonnull %1)
	%61 = bitcast %test1-0.Post* %13 to %..rawptr
	%62 = call %..rawptr @__mem_zero(%..rawptr %61, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %13
	store %test1-0.Post %60, %test1-0.Post* %13
	%63 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %13, i64 0, i32 0
	%64 = load %html-11.Element*, %html-11.Element** %63, align 8
	call void @html-11.append_to_element(%html-11.Element* %59, %html-11.Element* %64, %Context* noalias nonnull %1)
	; SelectorExpr
	%65 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%66 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$78, i64 0, i32 0), i64 9}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$79, i64 0, i32 0), i64 8}, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$7a, i64 0, i32 0), i64 20}, %Context* noalias nonnull %1)
	%67 = bitcast %test1-0.Post* %14 to %..rawptr
	%68 = call %..rawptr @__mem_zero(%..rawptr %67, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %14
	store %test1-0.Post %66, %test1-0.Post* %14
	%69 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %14, i64 0, i32 0
	%70 = load %html-11.Element*, %html-11.Element** %69, align 8
	call void @html-11.append_to_element(%html-11.Element* %65, %html-11.Element* %70, %Context* noalias nonnull %1)
	; SelectorExpr
	%71 = load %html-11.Element*, %html-11.Element** %9, align 8
	; SelectorExpr
	%72 = call %test1-0.Post @test1-0.make_post(%..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$7b, i64 0, i32 0), i64 9}, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$7c, i64 0, i32 0), i64 8}, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$7d, i64 0, i32 0), i64 20}, %Context* noalias nonnull %1)
	%73 = bitcast %test1-0.Post* %15 to %..rawptr
	%74 = call %..rawptr @__mem_zero(%..rawptr %73, i64 32)
	store %test1-0.Post zeroinitializer, %test1-0.Post* %15
	store %test1-0.Post %72, %test1-0.Post* %15
	%75 = getelementptr inbounds %test1-0.Post, %test1-0.Post* %15, i64 0, i32 0
	%76 = load %html-11.Element*, %html-11.Element** %75, align 8
	call void @html-11.append_to_element(%html-11.Element* %71, %html-11.Element* %76, %Context* noalias nonnull %1)
	; table_div
	
	; SelectorExpr
	%77 = call %html-11.Element* @html-11.div(%Context* noalias nonnull %1)
	store %html-11.Element* %77, %html-11.Element** %16
	; SelectorExpr
	%78 = load %html-11.Element*, %html-11.Element** %16, align 8
	call void @html-11.id(%html-11.Element* %78, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$7e, i64 0, i32 0), i64 5}, %Context* noalias nonnull %1)
	; SelectorExpr
	%79 = load %html-11.Document*, %html-11.Document** %0, align 8
	%80 = load %html-11.Element*, %html-11.Element** %16, align 8
	call void @html-11.append_to_document(%html-11.Document* %79, %html-11.Element* %80, %Context* noalias nonnull %1)
	; SelectorExpr
	%81 = load %html-11.Element*, %html-11.Element** %16, align 8
	; SelectorExpr
	%82 = call %html-11.Element* @html-11.p(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$7f, i64 0, i32 0), i64 5}, %Context* noalias nonnull %1)
	call void @html-11.append_to_element(%html-11.Element* %81, %html-11.Element* %82, %Context* noalias nonnull %1)
	; data
	
	; SelectorExpr
	%83 = load %html-11.Document*, %html-11.Document** %0, align 8
	%84 = call {i8*, i64, i64, %Allocator} @html-11.gen(%html-11.Document* %83, i1 true, i1 true, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$80, i64 0, i32 0), i64 1}, %Context* noalias nonnull %1)
	store {i8*, i64, i64, %Allocator} %84, {i8*, i64, i64, %Allocator}* %17
	; SelectorExpr
	; SliceExpr
	%85 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %17, align 8
	%86 = extractvalue {i8*, i64, i64, %Allocator} %85, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__str$81, i64 0, i32 0), i64 59}, i64 103, i64 41, i64 0, i64 %86, i64 %86)
	%87 = extractvalue {i8*, i64, i64, %Allocator} %85, 0
	%88 = getelementptr inbounds i8, i8* %87, i64 0
	%89 = sub i64 %86, 0
	%90 = bitcast {i8*, i64}* %18 to %..rawptr
	%91 = call %..rawptr @__mem_zero(%..rawptr %90, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %18
	%92 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 0
	store i8* %88, i8** %92
	%93 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 1
	store i64 %89, i64* %93
	%94 = load {i8*, i64}, {i8*, i64}* %18, align 8
	%95 = bitcast {i8*, i64}* %19 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %19
	store {i8*, i64} %94, {i8*, i64}* %19
	%97 = call i8 @os-3.write_entire_file(%..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$82, i64 0, i32 0), i64 10}, {i8*, i64}* %19, i1 true, %Context* noalias nonnull %1)
	ret void
}

define {[4 x i8], i64} @utf8-4.encode_rune(i32 %r, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca [4 x i8], align 16
	%2 = alloca i32, align 16
	%3 = alloca {[4 x i8], i64}, align 16
	%4 = alloca {[4 x i8], i64}, align 16
	%5 = alloca {[4 x i8], i64}, align 16
	%6 = alloca {[4 x i8], i64}, align 16
	
	store i32 %r, i32* %0
	; buf
	%7 = bitcast [4 x i8]* %1 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 4)
	store [4 x i8] zeroinitializer, [4 x i8]* %1
	
	; i
	
	%9 = load i32, i32* %0, align 4
	%10 = bitcast i32 %9 to i32
	store i32 %10, i32* %2
	; IfStmt
	%11 = load i32, i32* %2, align 4
	%12 = icmp ule i32 %11, 127
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	%15 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%16 = load i32, i32* %0, align 4
	%17 = trunc i32 %16 to i8
	store i8 %17, i8* %15
	; ReturnStmt
	%18 = load [4 x i8], [4 x i8]* %1, align 1
	%19 = bitcast {[4 x i8], i64}* %3 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 16)
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %3
	%21 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 0
	store [4 x i8] %18, [4 x i8]* %21
	%22 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %3, i64 0, i32 1
	store i64 1, i64* %22
	%23 = load {[4 x i8], i64}, {[4 x i8], i64}* %3, align 8
	ret {[4 x i8], i64} %23

if.done-2:
	; IfStmt
	%24 = load i32, i32* %2, align 4
	%25 = icmp ule i32 %24, 2047
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	%28 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%29 = load i32, i32* %0, align 4
	%30 = lshr i32 %29, 6
	%31 = trunc i32 %30 to i8
	%32 = or i8 192, %31
	store i8 %32, i8* %28
	; AssignStmt
	; IndexExpr
	%33 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%34 = load i32, i32* %0, align 4
	%35 = trunc i32 %34 to i8
	%36 = and i8 %35, 63
	%37 = or i8 128, %36
	store i8 %37, i8* %33
	; ReturnStmt
	%38 = load [4 x i8], [4 x i8]* %1, align 1
	%39 = bitcast {[4 x i8], i64}* %4 to %..rawptr
	%40 = call %..rawptr @__mem_zero(%..rawptr %39, i64 16)
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %4
	%41 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 0
	store [4 x i8] %38, [4 x i8]* %41
	%42 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %4, i64 0, i32 1
	store i64 2, i64* %42
	%43 = load {[4 x i8], i64}, {[4 x i8], i64}* %4, align 8
	ret {[4 x i8], i64} %43

if.done-4:
	; IfStmt
	%44 = load i32, i32* %2, align 4
	%45 = icmp ugt i32 %44, 1114111
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %if.then-7, label %cmp.or-5

cmp.or-5:
	%48 = load i32, i32* %2, align 4
	%49 = icmp ule i32 55296, %48
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%52 = load i32, i32* %2, align 4
	%53 = icmp ule i32 %52, 57343
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	store i32 65533, i32* %0
	br label %if.done-8

if.done-8:
	; IfStmt
	%56 = load i32, i32* %2, align 4
	%57 = icmp ule i32 %56, 65535
	%58 = zext i1 %57 to i8
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.then-9, label %if.done-10

if.then-9:
	; AssignStmt
	; IndexExpr
	%60 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%61 = load i32, i32* %0, align 4
	%62 = lshr i32 %61, 12
	%63 = trunc i32 %62 to i8
	%64 = or i8 224, %63
	store i8 %64, i8* %60
	; AssignStmt
	; IndexExpr
	%65 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%66 = load i32, i32* %0, align 4
	%67 = lshr i32 %66, 6
	%68 = trunc i32 %67 to i8
	%69 = and i8 %68, 63
	%70 = or i8 128, %69
	store i8 %70, i8* %65
	; AssignStmt
	; IndexExpr
	%71 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	%72 = load i32, i32* %0, align 4
	%73 = trunc i32 %72 to i8
	%74 = and i8 %73, 63
	%75 = or i8 128, %74
	store i8 %75, i8* %71
	; ReturnStmt
	%76 = load [4 x i8], [4 x i8]* %1, align 1
	%77 = bitcast {[4 x i8], i64}* %5 to %..rawptr
	%78 = call %..rawptr @__mem_zero(%..rawptr %77, i64 16)
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %5
	%79 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 0
	store [4 x i8] %76, [4 x i8]* %79
	%80 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %5, i64 0, i32 1
	store i64 3, i64* %80
	%81 = load {[4 x i8], i64}, {[4 x i8], i64}* %5, align 8
	ret {[4 x i8], i64} %81

if.done-10:
	; AssignStmt
	; IndexExpr
	%82 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 0
	%83 = load i32, i32* %0, align 4
	%84 = lshr i32 %83, 18
	%85 = trunc i32 %84 to i8
	%86 = or i8 240, %85
	store i8 %86, i8* %82
	; AssignStmt
	; IndexExpr
	%87 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 1
	%88 = load i32, i32* %0, align 4
	%89 = lshr i32 %88, 12
	%90 = trunc i32 %89 to i8
	%91 = and i8 %90, 63
	%92 = or i8 128, %91
	store i8 %92, i8* %87
	; AssignStmt
	; IndexExpr
	%93 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 2
	%94 = load i32, i32* %0, align 4
	%95 = lshr i32 %94, 6
	%96 = trunc i32 %95 to i8
	%97 = and i8 %96, 63
	%98 = or i8 128, %97
	store i8 %98, i8* %93
	; AssignStmt
	; IndexExpr
	%99 = getelementptr inbounds [4 x i8], [4 x i8]* %1, i64 0, i32 3
	%100 = load i32, i32* %0, align 4
	%101 = trunc i32 %100 to i8
	%102 = and i8 %101, 63
	%103 = or i8 128, %102
	store i8 %103, i8* %99
	; ReturnStmt
	%104 = load [4 x i8], [4 x i8]* %1, align 1
	%105 = bitcast {[4 x i8], i64}* %6 to %..rawptr
	%106 = call %..rawptr @__mem_zero(%..rawptr %105, i64 16)
	store {[4 x i8], i64} zeroinitializer, {[4 x i8], i64}* %6
	%107 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 0
	store [4 x i8] %104, [4 x i8]* %107
	%108 = getelementptr inbounds {[4 x i8], i64}, {[4 x i8], i64}* %6, i64 0, i32 1
	store i64 4, i64* %108
	%109 = load {[4 x i8], i64}, {[4 x i8], i64}* %6, align 8
	ret {[4 x i8], i64} %109
}

define {i32, i64} @utf8-4.decode_rune_from_string(%..string %s, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8*, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	%4 = alloca {i32, i64}, align 16
	
	store %..string %s, %..string* %0
	; ReturnStmt
	%5 = load %..string, %..string* %0, align 8
	%6 = extractvalue %..string %5, 0
	%7 = bitcast i8** %1 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 8)
	store i8* zeroinitializer, i8** %1
	store i8* %6, i8** %1
	%9 = extractvalue %..string %5, 1
	%10 = sub i64 %9, 0
	%11 = load i8*, i8** %1, align 8
	%12 = getelementptr inbounds i8, i8* %11, i64 0
	%13 = bitcast {i8*, i64}* %2 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %12, i8** %15
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 %10, i64* %16
	%17 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%18 = bitcast {i8*, i64}* %3 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %17, {i8*, i64}* %3
	%20 = call {i32, i64} @utf8-4.decode_rune({i8*, i64}* %3, %Context* noalias nonnull %__.context_ptr)
	%21 = extractvalue {i32, i64} %20, 0
	%22 = extractvalue {i32, i64} %20, 1
	%23 = bitcast {i32, i64}* %4 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %4
	%25 = getelementptr inbounds {i32, i64}, {i32, i64}* %4, i64 0, i32 0
	store i32 %21, i32* %25
	%26 = getelementptr inbounds {i32, i64}, {i32, i64}* %4, i64 0, i32 1
	store i64 %22, i64* %26
	%27 = load {i32, i64}, {i32, i64}* %4, align 8
	ret {i32, i64} %27
}

define {i32, i64} @utf8-4.decode_rune({i8*, i64}* %s, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca {i32, i64}, align 16
	%2 = alloca i8, align 16
	%3 = alloca i8, align 16
	%4 = alloca i32, align 16
	%5 = alloca {i32, i64}, align 16
	%6 = alloca i8, align 16
	%7 = alloca %utf8-4.Accept_Range, align 16
	%8 = alloca {i32, i64}, align 16
	%9 = alloca i8, align 16
	%10 = alloca {i32, i64}, align 16
	%11 = alloca {i32, i64}, align 16
	%12 = alloca i8, align 16
	%13 = alloca {i32, i64}, align 16
	%14 = alloca {i32, i64}, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i64}, align 16
	%17 = alloca {i32, i64}, align 16
	%18 = load {i8*, i64}, {i8*, i64}* %s, align 8
	; n
	
	%19 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%20 = extractvalue {i8*, i64} %19, 1
	store i64 %20, i64* %0
	; IfStmt
	%21 = load i64, i64* %0, align 8
	%22 = icmp slt i64 %21, 1
	%23 = zext i1 %22 to i8
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%25 = bitcast {i32, i64}* %1 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %1
	%27 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 0
	store i32 65533, i32* %27
	%28 = getelementptr inbounds {i32, i64}, {i32, i64}* %1, i64 0, i32 1
	store i64 0, i64* %28
	%29 = load {i32, i64}, {i32, i64}* %1, align 8
	ret {i32, i64} %29

if.done-2:
	; s0
	
	; IndexExpr
	%30 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%31 = extractvalue {i8*, i64} %30, 0
	%32 = extractvalue {i8*, i64} %30, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$83, i64 0, i32 0), i64 47}, i64 101, i64 10, i64 0, i64 %32)
	%33 = getelementptr inbounds i8, i8* %31, i64 0
	%34 = load i8, i8* %33, align 1
	store i8 %34, i8* %2
	; x
	
	; IndexExpr
	%35 = load i8, i8* %2, align 1
	%36 = zext i8 %35 to i64
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [256 x i8], [256 x i8]* @utf8-4.accept_sizes, i64 0, i32 %37
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$84, i64 0, i32 0), i64 47}, i64 102, i64 20, i64 %36, i64 256)
	%39 = load i8, i8* %38, align 1
	store i8 %39, i8* %3
	; IfStmt
	%40 = load i8, i8* %3, align 1
	%41 = icmp uge i8 %40, 240
	%42 = zext i1 %41 to i8
	%43 = trunc i8 %42 to i1
	br i1 %43, label %if.then-3, label %if.done-4

if.then-3:
	; mask
	
	%44 = load i8, i8* %3, align 1
	%45 = zext i8 %44 to i32
	%46 = shl i32 %45, 31
	%47 = lshr i32 %46, 31
	store i32 %47, i32* %4
	; ReturnStmt
	; IndexExpr
	%48 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%49 = extractvalue {i8*, i64} %48, 0
	%50 = extractvalue {i8*, i64} %48, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$85, i64 0, i32 0), i64 47}, i64 105, i64 17, i64 0, i64 %50)
	%51 = getelementptr inbounds i8, i8* %49, i64 0
	%52 = load i8, i8* %51, align 1
	%53 = zext i8 %52 to i32
	%54 = load i32, i32* %4, align 4
	%55 = xor i32 %54, -1
	%56 = and i32 %53, %55
	%57 = load i32, i32* %4, align 4
	%58 = and i32 65533, %57
	%59 = or i32 %56, %58
	%60 = bitcast {i32, i64}* %5 to %..rawptr
	%61 = call %..rawptr @__mem_zero(%..rawptr %60, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %5
	%62 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 0
	store i32 %59, i32* %62
	%63 = getelementptr inbounds {i32, i64}, {i32, i64}* %5, i64 0, i32 1
	store i64 1, i64* %63
	%64 = load {i32, i64}, {i32, i64}* %5, align 8
	ret {i32, i64} %64

if.done-4:
	; sz
	
	%65 = load i8, i8* %3, align 1
	%66 = and i8 %65, 7
	store i8 %66, i8* %6
	; accept
	
	; IndexExpr
	%67 = load i8, i8* %3, align 1
	%68 = lshr i8 %67, 4
	%69 = zext i8 %68 to i64
	%70 = trunc i64 %69 to i32
	%71 = getelementptr inbounds [5 x %utf8-4.Accept_Range], [5 x %utf8-4.Accept_Range]* @utf8-4.accept_ranges, i64 0, i32 %70
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$86, i64 0, i32 0), i64 47}, i64 108, i64 26, i64 %69, i64 5)
	%72 = load %utf8-4.Accept_Range, %utf8-4.Accept_Range* %71, align 1
	store %utf8-4.Accept_Range %72, %utf8-4.Accept_Range* %7
	; IfStmt
	%73 = load i64, i64* %0, align 8
	%74 = load i8, i8* %6, align 1
	%75 = zext i8 %74 to i64
	%76 = icmp slt i64 %73, %75
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %if.then-5, label %if.done-6

if.then-5:
	; ReturnStmt
	%79 = bitcast {i32, i64}* %8 to %..rawptr
	%80 = call %..rawptr @__mem_zero(%..rawptr %79, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %8
	%81 = getelementptr inbounds {i32, i64}, {i32, i64}* %8, i64 0, i32 0
	store i32 65533, i32* %81
	%82 = getelementptr inbounds {i32, i64}, {i32, i64}* %8, i64 0, i32 1
	store i64 1, i64* %82
	%83 = load {i32, i64}, {i32, i64}* %8, align 8
	ret {i32, i64} %83

if.done-6:
	; b1
	
	; IndexExpr
	%84 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%85 = extractvalue {i8*, i64} %84, 0
	%86 = extractvalue {i8*, i64} %84, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$87, i64 0, i32 0), i64 47}, i64 112, i64 10, i64 1, i64 %86)
	%87 = getelementptr inbounds i8, i8* %85, i64 1
	%88 = load i8, i8* %87, align 1
	store i8 %88, i8* %9
	; IfStmt
	%89 = load i8, i8* %9, align 1
	; SelectorExpr
	%90 = getelementptr inbounds %utf8-4.Accept_Range, %utf8-4.Accept_Range* %7, i64 0, i32 0
	%91 = load i8, i8* %90, align 1
	%92 = icmp ult i8 %89, %91
	%93 = zext i1 %92 to i8
	%94 = trunc i8 %93 to i1
	br i1 %94, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; SelectorExpr
	%95 = getelementptr inbounds %utf8-4.Accept_Range, %utf8-4.Accept_Range* %7, i64 0, i32 1
	%96 = load i8, i8* %95, align 1
	%97 = load i8, i8* %9, align 1
	%98 = icmp ult i8 %96, %97
	%99 = zext i1 %98 to i8
	%100 = trunc i8 %99 to i1
	br i1 %100, label %if.then-8, label %if.done-9

if.then-8:
	; ReturnStmt
	%101 = bitcast {i32, i64}* %10 to %..rawptr
	%102 = call %..rawptr @__mem_zero(%..rawptr %101, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %10
	%103 = getelementptr inbounds {i32, i64}, {i32, i64}* %10, i64 0, i32 0
	store i32 65533, i32* %103
	%104 = getelementptr inbounds {i32, i64}, {i32, i64}* %10, i64 0, i32 1
	store i64 1, i64* %104
	%105 = load {i32, i64}, {i32, i64}* %10, align 8
	ret {i32, i64} %105

if.done-9:
	; IfStmt
	%106 = load i8, i8* %6, align 1
	%107 = icmp eq i8 %106, 2
	%108 = zext i1 %107 to i8
	%109 = trunc i8 %108 to i1
	br i1 %109, label %if.then-10, label %if.done-11

if.then-10:
	; ReturnStmt
	%110 = load i8, i8* %2, align 1
	%111 = and i8 %110, 31
	%112 = zext i8 %111 to i32
	%113 = shl i32 %112, 6
	%114 = load i8, i8* %9, align 1
	%115 = and i8 %114, 63
	%116 = zext i8 %115 to i32
	%117 = or i32 %113, %116
	%118 = bitcast {i32, i64}* %11 to %..rawptr
	%119 = call %..rawptr @__mem_zero(%..rawptr %118, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %11
	%120 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 0
	store i32 %117, i32* %120
	%121 = getelementptr inbounds {i32, i64}, {i32, i64}* %11, i64 0, i32 1
	store i64 2, i64* %121
	%122 = load {i32, i64}, {i32, i64}* %11, align 8
	ret {i32, i64} %122

if.done-11:
	; b2
	
	; IndexExpr
	%123 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%124 = extractvalue {i8*, i64} %123, 0
	%125 = extractvalue {i8*, i64} %123, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$88, i64 0, i32 0), i64 47}, i64 119, i64 10, i64 2, i64 %125)
	%126 = getelementptr inbounds i8, i8* %124, i64 2
	%127 = load i8, i8* %126, align 1
	store i8 %127, i8* %12
	; IfStmt
	%128 = load i8, i8* %12, align 1
	%129 = icmp ult i8 %128, 128
	%130 = zext i1 %129 to i8
	%131 = trunc i8 %130 to i1
	br i1 %131, label %if.then-13, label %cmp.or-12

cmp.or-12:
	%132 = load i8, i8* %12, align 1
	%133 = icmp ult i8 191, %132
	%134 = zext i1 %133 to i8
	%135 = trunc i8 %134 to i1
	br i1 %135, label %if.then-13, label %if.done-14

if.then-13:
	; ReturnStmt
	%136 = bitcast {i32, i64}* %13 to %..rawptr
	%137 = call %..rawptr @__mem_zero(%..rawptr %136, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %13
	%138 = getelementptr inbounds {i32, i64}, {i32, i64}* %13, i64 0, i32 0
	store i32 65533, i32* %138
	%139 = getelementptr inbounds {i32, i64}, {i32, i64}* %13, i64 0, i32 1
	store i64 1, i64* %139
	%140 = load {i32, i64}, {i32, i64}* %13, align 8
	ret {i32, i64} %140

if.done-14:
	; IfStmt
	%141 = load i8, i8* %6, align 1
	%142 = icmp eq i8 %141, 3
	%143 = zext i1 %142 to i8
	%144 = trunc i8 %143 to i1
	br i1 %144, label %if.then-15, label %if.done-16

if.then-15:
	; ReturnStmt
	%145 = load i8, i8* %2, align 1
	%146 = and i8 %145, 15
	%147 = zext i8 %146 to i32
	%148 = shl i32 %147, 12
	%149 = load i8, i8* %9, align 1
	%150 = and i8 %149, 63
	%151 = zext i8 %150 to i32
	%152 = shl i32 %151, 6
	%153 = or i32 %148, %152
	%154 = load i8, i8* %12, align 1
	%155 = and i8 %154, 63
	%156 = zext i8 %155 to i32
	%157 = or i32 %153, %156
	%158 = bitcast {i32, i64}* %14 to %..rawptr
	%159 = call %..rawptr @__mem_zero(%..rawptr %158, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %14
	%160 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 0
	store i32 %157, i32* %160
	%161 = getelementptr inbounds {i32, i64}, {i32, i64}* %14, i64 0, i32 1
	store i64 3, i64* %161
	%162 = load {i32, i64}, {i32, i64}* %14, align 8
	ret {i32, i64} %162

if.done-16:
	; b3
	
	; IndexExpr
	%163 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%164 = extractvalue {i8*, i64} %163, 0
	%165 = extractvalue {i8*, i64} %163, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$89, i64 0, i32 0), i64 47}, i64 126, i64 10, i64 3, i64 %165)
	%166 = getelementptr inbounds i8, i8* %164, i64 3
	%167 = load i8, i8* %166, align 1
	store i8 %167, i8* %15
	; IfStmt
	%168 = load i8, i8* %15, align 1
	%169 = icmp ult i8 %168, 128
	%170 = zext i1 %169 to i8
	%171 = trunc i8 %170 to i1
	br i1 %171, label %if.then-18, label %cmp.or-17

cmp.or-17:
	%172 = load i8, i8* %15, align 1
	%173 = icmp ult i8 191, %172
	%174 = zext i1 %173 to i8
	%175 = trunc i8 %174 to i1
	br i1 %175, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	%176 = bitcast {i32, i64}* %16 to %..rawptr
	%177 = call %..rawptr @__mem_zero(%..rawptr %176, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %16
	%178 = getelementptr inbounds {i32, i64}, {i32, i64}* %16, i64 0, i32 0
	store i32 65533, i32* %178
	%179 = getelementptr inbounds {i32, i64}, {i32, i64}* %16, i64 0, i32 1
	store i64 1, i64* %179
	%180 = load {i32, i64}, {i32, i64}* %16, align 8
	ret {i32, i64} %180

if.done-19:
	; ReturnStmt
	%181 = load i8, i8* %2, align 1
	%182 = and i8 %181, 7
	%183 = zext i8 %182 to i32
	%184 = shl i32 %183, 18
	%185 = load i8, i8* %9, align 1
	%186 = and i8 %185, 63
	%187 = zext i8 %186 to i32
	%188 = shl i32 %187, 12
	%189 = or i32 %184, %188
	%190 = load i8, i8* %12, align 1
	%191 = and i8 %190, 63
	%192 = zext i8 %191 to i32
	%193 = shl i32 %192, 6
	%194 = or i32 %189, %193
	%195 = load i8, i8* %15, align 1
	%196 = and i8 %195, 63
	%197 = zext i8 %196 to i32
	%198 = or i32 %194, %197
	%199 = bitcast {i32, i64}* %17 to %..rawptr
	%200 = call %..rawptr @__mem_zero(%..rawptr %199, i64 16)
	store {i32, i64} zeroinitializer, {i32, i64}* %17
	%201 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 0
	store i32 %198, i32* %201
	%202 = getelementptr inbounds {i32, i64}, {i32, i64}* %17, i64 0, i32 1
	store i64 4, i64* %202
	%203 = load {i32, i64}, {i32, i64}* %17, align 8
	ret {i32, i64} %203
}

define i64 @utf8-4.rune_count_from_string(%..string %s, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i8*, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	
	store %..string %s, %..string* %0
	; ReturnStmt
	%4 = load %..string, %..string* %0, align 8
	%5 = extractvalue %..string %4, 0
	%6 = bitcast i8** %1 to %..rawptr
	%7 = call %..rawptr @__mem_zero(%..rawptr %6, i64 8)
	store i8* zeroinitializer, i8** %1
	store i8* %5, i8** %1
	%8 = extractvalue %..string %4, 1
	%9 = sub i64 %8, 0
	%10 = load i8*, i8** %1, align 8
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = bitcast {i8*, i64}* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%14 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %11, i8** %14
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 %9, i64* %15
	%16 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%17 = bitcast {i8*, i64}* %3 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %16, {i8*, i64}* %3
	%19 = call i64 @utf8-4.rune_count({i8*, i64}* %3, %Context* noalias nonnull %__.context_ptr)
	ret i64 %19
}

define i64 @utf8-4.rune_count({i8*, i64}* %s, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca i8, align 16
	%5 = alloca i64, align 16
	%6 = alloca %utf8-4.Accept_Range, align 16
	%7 = alloca i8, align 16
	%8 = alloca i8, align 16
	%9 = alloca i8, align 16
	%10 = load {i8*, i64}, {i8*, i64}* %s, align 8
	; count
	
	store i64 0, i64* %0
	; n
	
	%11 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%12 = extractvalue {i8*, i64} %11, 1
	store i64 %12, i64* %1
	; ForStmt
	; i
	
	store i64 0, i64* %2
	br label %for.loop-1

for.loop-1:
	%13 = load i64, i64* %2, align 8
	%14 = load i64, i64* %1, align 8
	%15 = icmp slt i64 %13, %14
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %for.body-2, label %for.done-26

for.body-2:
	; DeferStmt
	; si
	
	; IndexExpr
	%18 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%19 = extractvalue {i8*, i64} %18, 0
	%20 = load i64, i64* %2, align 8
	%21 = extractvalue {i8*, i64} %18, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8a, i64 0, i32 0), i64 47}, i64 223, i64 11, i64 %20, i64 %21)
	%22 = getelementptr inbounds i8, i8* %19, i64 %20
	%23 = load i8, i8* %22, align 1
	store i8 %23, i8* %3
	; IfStmt
	%24 = load i8, i8* %3, align 1
	%25 = icmp ult i8 %24, 128
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	%28 = load i64, i64* %2, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %2
	; defer
	; AssignStmt
	%30 = load i64, i64* %0, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %0
	; continue
	br label %for.loop-1

if.done-4:
	; x
	
	; IndexExpr
	%32 = load i8, i8* %3, align 1
	%33 = zext i8 %32 to i64
	%34 = trunc i64 %33 to i32
	%35 = getelementptr inbounds [256 x i8], [256 x i8]* @utf8-4.accept_sizes, i64 0, i32 %34
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8b, i64 0, i32 0), i64 47}, i64 228, i64 21, i64 %33, i64 256)
	%36 = load i8, i8* %35, align 1
	store i8 %36, i8* %4
	; IfStmt
	%37 = load i8, i8* %4, align 1
	%38 = icmp eq i8 %37, 241
	%39 = zext i1 %38 to i8
	%40 = trunc i8 %39 to i1
	br i1 %40, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	%41 = load i64, i64* %2, align 8
	%42 = add i64 %41, 1
	store i64 %42, i64* %2
	; defer
	; AssignStmt
	%43 = load i64, i64* %0, align 8
	%44 = add i64 %43, 1
	store i64 %44, i64* %0
	; continue
	br label %for.loop-1

if.done-6:
	; size
	
	%45 = load i8, i8* %4, align 1
	%46 = and i8 %45, 7
	%47 = zext i8 %46 to i64
	store i64 %47, i64* %5
	; IfStmt
	%48 = load i64, i64* %2, align 8
	%49 = load i64, i64* %5, align 8
	%50 = add i64 %48, %49
	%51 = load i64, i64* %1, align 8
	%52 = icmp sgt i64 %50, %51
	%53 = zext i1 %52 to i8
	%54 = trunc i8 %53 to i1
	br i1 %54, label %if.then-7, label %if.done-8

if.then-7:
	; AssignStmt
	%55 = load i64, i64* %2, align 8
	%56 = add i64 %55, 1
	store i64 %56, i64* %2
	; defer
	; AssignStmt
	%57 = load i64, i64* %0, align 8
	%58 = add i64 %57, 1
	store i64 %58, i64* %0
	; continue
	br label %for.loop-1

if.done-8:
	; ar
	
	; IndexExpr
	%59 = load i8, i8* %4, align 1
	%60 = lshr i8 %59, 4
	%61 = zext i8 %60 to i64
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [5 x %utf8-4.Accept_Range], [5 x %utf8-4.Accept_Range]* @utf8-4.accept_ranges, i64 0, i32 %62
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8c, i64 0, i32 0), i64 47}, i64 238, i64 23, i64 %61, i64 5)
	%64 = load %utf8-4.Accept_Range, %utf8-4.Accept_Range* %63, align 1
	store %utf8-4.Accept_Range %64, %utf8-4.Accept_Range* %6
	; IfStmt
	; b
	
	; IndexExpr
	%65 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%66 = extractvalue {i8*, i64} %65, 0
	%67 = load i64, i64* %2, align 8
	%68 = add i64 %67, 1
	%69 = extractvalue {i8*, i64} %65, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8d, i64 0, i32 0), i64 47}, i64 239, i64 13, i64 %68, i64 %69)
	%70 = getelementptr inbounds i8, i8* %66, i64 %68
	%71 = load i8, i8* %70, align 1
	store i8 %71, i8* %7
	%72 = load i8, i8* %7, align 1
	; SelectorExpr
	%73 = getelementptr inbounds %utf8-4.Accept_Range, %utf8-4.Accept_Range* %6, i64 0, i32 0
	%74 = load i8, i8* %73, align 1
	%75 = icmp ult i8 %72, %74
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %if.then-10, label %cmp.or-9

cmp.or-9:
	; SelectorExpr
	%78 = getelementptr inbounds %utf8-4.Accept_Range, %utf8-4.Accept_Range* %6, i64 0, i32 1
	%79 = load i8, i8* %78, align 1
	%80 = load i8, i8* %7, align 1
	%81 = icmp ult i8 %79, %80
	%82 = zext i1 %81 to i8
	%83 = trunc i8 %82 to i1
	br i1 %83, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-25

if.else-11:
	; IfStmt
	%84 = load i64, i64* %5, align 8
	%85 = icmp eq i64 %84, 2
	%86 = zext i1 %85 to i8
	%87 = trunc i8 %86 to i1
	br i1 %87, label %if.then-12, label %if.else-13

if.then-12:
	br label %if.done-24

if.else-13:
	; IfStmt
	; b
	
	; IndexExpr
	%88 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%89 = extractvalue {i8*, i64} %88, 0
	%90 = load i64, i64* %2, align 8
	%91 = add i64 %90, 2
	%92 = extractvalue {i8*, i64} %88, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8e, i64 0, i32 0), i64 47}, i64 243, i64 20, i64 %91, i64 %92)
	%93 = getelementptr inbounds i8, i8* %89, i64 %91
	%94 = load i8, i8* %93, align 1
	store i8 %94, i8* %8
	%95 = load i8, i8* %8, align 1
	%96 = icmp ult i8 %95, 128
	%97 = zext i1 %96 to i8
	%98 = trunc i8 %97 to i1
	br i1 %98, label %if.then-15, label %cmp.or-14

cmp.or-14:
	%99 = load i8, i8* %8, align 1
	%100 = icmp ult i8 191, %99
	%101 = zext i1 %100 to i8
	%102 = trunc i8 %101 to i1
	br i1 %102, label %if.then-15, label %if.else-16

if.then-15:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-23

if.else-16:
	; IfStmt
	%103 = load i64, i64* %5, align 8
	%104 = icmp eq i64 %103, 3
	%105 = zext i1 %104 to i8
	%106 = trunc i8 %105 to i1
	br i1 %106, label %if.then-17, label %if.else-18

if.then-17:
	br label %if.done-22

if.else-18:
	; IfStmt
	; b
	
	; IndexExpr
	%107 = load {i8*, i64}, {i8*, i64}* %s, align 8
	%108 = extractvalue {i8*, i64} %107, 0
	%109 = load i64, i64* %2, align 8
	%110 = add i64 %109, 3
	%111 = extractvalue {i8*, i64} %107, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__str$8f, i64 0, i32 0), i64 47}, i64 247, i64 20, i64 %110, i64 %111)
	%112 = getelementptr inbounds i8, i8* %108, i64 %110
	%113 = load i8, i8* %112, align 1
	store i8 %113, i8* %9
	%114 = load i8, i8* %9, align 1
	%115 = icmp ult i8 %114, 128
	%116 = zext i1 %115 to i8
	%117 = trunc i8 %116 to i1
	br i1 %117, label %if.then-20, label %cmp.or-19

cmp.or-19:
	%118 = load i8, i8* %9, align 1
	%119 = icmp ult i8 191, %118
	%120 = zext i1 %119 to i8
	%121 = trunc i8 %120 to i1
	br i1 %121, label %if.then-20, label %if.done-21

if.then-20:
	; AssignStmt
	store i64 1, i64* %5
	br label %if.done-21

if.done-21:
	br label %if.done-22

if.done-22:
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	br label %if.done-25

if.done-25:
	; AssignStmt
	%122 = load i64, i64* %5, align 8
	%123 = load i64, i64* %2, align 8
	%124 = add i64 %123, %122
	store i64 %124, i64* %2
	; defer
	; AssignStmt
	%125 = load i64, i64* %0, align 8
	%126 = add i64 %125, 1
	store i64 %126, i64* %0
	br label %for.loop-1

for.done-26:
	; ReturnStmt
	%127 = load i64, i64* %0, align 8
	ret i64 %127
}

define {i64, i64} @windows-6.open(%..string %path, i64 %mode, i32 %perm, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i32, align 16
	%3 = alloca {i64, i64}, align 16
	%4 = alloca i32, align 16
	%5 = alloca i32, align 16
	%6 = alloca %windows-13.Security_Attributes*, align 16
	%7 = alloca %windows-13.Security_Attributes, align 16
	%8 = alloca i32, align 16
	%9 = alloca [300 x i8], align 16
	%10 = alloca {i8*, i64}, align 16
	%11 = alloca i8*, align 16
	%12 = alloca {i8*, i64}, align 16
	%13 = alloca {i8*, i64}, align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca i64, align 16
	%16 = alloca {i64, i64}, align 16
	%17 = alloca i64, align 16
	%18 = alloca {i64, i64}, align 16
	
	store %..string %path, %..string* %0
	
	store i64 %mode, i64* %1
	
	store i32 %perm, i32* %2
	; IfStmt
	%19 = load %..string, %..string* %0, align 8
	%20 = extractvalue %..string %19, 1
	%21 = icmp eq i64 %20, 0
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%24 = bitcast {i64, i64}* %3 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %3
	%26 = getelementptr inbounds {i64, i64}, {i64, i64}* %3, i64 0, i32 0
	store i64 -1, i64* %26
	%27 = getelementptr inbounds {i64, i64}, {i64, i64}* %3, i64 0, i32 1
	store i64 2, i64* %27
	%28 = load {i64, i64}, {i64, i64}* %3, align 8
	ret {i64, i64} %28

if.done-2:
	; access
	%29 = bitcast i32* %4 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 4)
	store i32 zeroinitializer, i32* %4
	
	; SwitchStmt
	%31 = load i64, i64* %1, align 8
	%32 = and i64 %31, 3
	%33 = icmp eq i64 %32, 0
	br i1 %33, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%34 = icmp eq i64 %32, 1
	br i1 %34, label %switch.fall.body-6, label %switch.case.next-5

switch.case.body-4:
	; AssignStmt
	store i32 2147483648, i32* %4
	br label %switch.done-9

switch.case.next-5:
	%35 = icmp eq i64 %32, 2
	br i1 %35, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	; AssignStmt
	store i32 1073741824, i32* %4
	br label %switch.done-9

switch.case.next-7:
	br label %switch.done-9

switch.fall.body-8:
	; AssignStmt
	store i32 3221225472, i32* %4
	br label %switch.done-9

switch.done-9:
	; IfStmt
	%36 = load i64, i64* %1, align 8
	%37 = and i64 %36, 64
	%38 = icmp ne i64 %37, 0
	%39 = zext i1 %38 to i8
	%40 = trunc i8 %39 to i1
	br i1 %40, label %if.then-10, label %if.done-11

if.then-10:
	; AssignStmt
	%41 = load i32, i32* %4, align 4
	%42 = or i32 %41, 1073741824
	store i32 %42, i32* %4
	br label %if.done-11

if.done-11:
	; IfStmt
	%43 = load i64, i64* %1, align 8
	%44 = and i64 %43, 1024
	%45 = icmp ne i64 %44, 0
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%48 = load i32, i32* %4, align 4
	%49 = xor i32 1073741824, -1
	%50 = and i32 %48, %49
	store i32 %50, i32* %4
	; AssignStmt
	%51 = load i32, i32* %4, align 4
	%52 = or i32 %51, 4
	store i32 %52, i32* %4
	br label %if.done-13

if.done-13:
	; share_mode
	
	store i32 3, i32* %5
	; sa
	
	store %windows-13.Security_Attributes* zeroinitializer, %windows-13.Security_Attributes** %6
	; sa_inherit
	
	store %windows-13.Security_Attributes {i32 24, %..rawptr zeroinitializer, i32 1}, %windows-13.Security_Attributes* %7
	; IfStmt
	%53 = load i64, i64* %1, align 8
	%54 = and i64 %53, 524288
	%55 = icmp eq i64 %54, 0
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	%58 = getelementptr inbounds %windows-13.Security_Attributes, %windows-13.Security_Attributes* %7, i64 0
	store %windows-13.Security_Attributes* %58, %windows-13.Security_Attributes** %6
	br label %if.done-15

if.done-15:
	; create_mode
	%59 = bitcast i32* %8 to %..rawptr
	%60 = call %..rawptr @__mem_zero(%..rawptr %59, i64 4)
	store i32 zeroinitializer, i32* %8
	
	; SwitchStmt
	%61 = load i64, i64* %1, align 8
	%62 = and i64 %61, 192
	%63 = icmp eq i64 %62, 192
	%64 = zext i1 %63 to i8
	%65 = icmp eq i8 1, %64
	br i1 %65, label %switch.case.body-17, label %switch.case.next-16

switch.case.next-16:
	%66 = load i64, i64* %1, align 8
	%67 = and i64 %66, 576
	%68 = icmp eq i64 %67, 576
	%69 = zext i1 %68 to i8
	%70 = icmp eq i8 1, %69
	br i1 %70, label %switch.fall.body-19, label %switch.case.next-18

switch.case.body-17:
	; AssignStmt
	store i32 1, i32* %8
	br label %switch.done-24

switch.case.next-18:
	%71 = load i64, i64* %1, align 8
	%72 = and i64 %71, 64
	%73 = icmp eq i64 %72, 64
	%74 = zext i1 %73 to i8
	%75 = icmp eq i8 1, %74
	br i1 %75, label %switch.fall.body-21, label %switch.case.next-20

switch.fall.body-19:
	; AssignStmt
	store i32 2, i32* %8
	br label %switch.done-24

switch.case.next-20:
	%76 = load i64, i64* %1, align 8
	%77 = and i64 %76, 512
	%78 = icmp eq i64 %77, 512
	%79 = zext i1 %78 to i8
	%80 = icmp eq i8 1, %79
	br i1 %80, label %switch.fall.body-23, label %switch.case.next-22

switch.fall.body-21:
	; AssignStmt
	store i32 4, i32* %8
	br label %switch.done-24

switch.case.next-22:
	; AssignStmt
	store i32 3, i32* %8
	br label %switch.done-24

switch.fall.body-23:
	; AssignStmt
	store i32 5, i32* %8
	br label %switch.done-24

switch.done-24:
	; buf
	%81 = bitcast [300 x i8]* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 300)
	store [300 x i8] zeroinitializer, [300 x i8]* %9
	
	; SliceExpr
	%83 = load [300 x i8], [300 x i8]* %9, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__str$90, i64 0, i32 0), i64 53}, i64 99, i64 10, i64 0, i64 300, i64 300)
	%84 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i32 0
	%85 = getelementptr inbounds i8, i8* %84, i64 0
	%86 = sub i64 300, 0
	%87 = bitcast {i8*, i64}* %10 to %..rawptr
	%88 = call %..rawptr @__mem_zero(%..rawptr %87, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %10
	%89 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 0
	store i8* %85, i8** %89
	%90 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 1
	store i64 %86, i64* %90
	%91 = load {i8*, i64}, {i8*, i64}* %10, align 8
	%92 = load %..string, %..string* %0, align 8
	%93 = extractvalue %..string %92, 0
	%94 = bitcast i8** %11 to %..rawptr
	%95 = call %..rawptr @__mem_zero(%..rawptr %94, i64 8)
	store i8* zeroinitializer, i8** %11
	store i8* %93, i8** %11
	%96 = extractvalue %..string %92, 1
	%97 = sub i64 %96, 0
	%98 = load i8*, i8** %11, align 8
	%99 = getelementptr inbounds i8, i8* %98, i64 0
	%100 = bitcast {i8*, i64}* %12 to %..rawptr
	%101 = call %..rawptr @__mem_zero(%..rawptr %100, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %12
	%102 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 0
	store i8* %99, i8** %102
	%103 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 1
	store i64 %97, i64* %103
	%104 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%105 = bitcast {i8*, i64}* %13 to %..rawptr
	%106 = call %..rawptr @__mem_zero(%..rawptr %105, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %13
	store {i8*, i64} %91, {i8*, i64}* %13
	%107 = bitcast {i8*, i64}* %14 to %..rawptr
	%108 = call %..rawptr @__mem_zero(%..rawptr %107, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %104, {i8*, i64}* %14
	%109 = call i64 @_preload-0.copy-4790({i8*, i64}* %13, {i8*, i64}* %14)
	; handle
	
	; SelectorExpr
	; IndexExpr
	%110 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i32 0
	%111 = getelementptr inbounds i8, i8* %110, i64 0
	%112 = bitcast i8* %111 to i8*
	%113 = load i32, i32* %4, align 4
	%114 = load i32, i32* %5, align 4
	%115 = load %windows-13.Security_Attributes*, %windows-13.Security_Attributes** %6, align 8
	%116 = load i32, i32* %8, align 4
	%117 = bitcast %windows-13.Security_Attributes* %115 to %..rawptr
	%118 = call cc 64 %..rawptr @CreateFileA(i8* %112, i32 %113, i32 %114, %..rawptr %117, i32 %116, i32 128, %..rawptr zeroinitializer)
	%119 = ptrtoint %..rawptr %118 to i64
	store i64 %119, i64* %15
	; IfStmt
	%120 = load i64, i64* %15, align 8
	%121 = icmp ne i64 %120, -1
	%122 = zext i1 %121 to i8
	%123 = trunc i8 %122 to i1
	br i1 %123, label %if.then-25, label %if.done-26

if.then-25:
	; ReturnStmt
	%124 = load i64, i64* %15, align 8
	%125 = bitcast {i64, i64}* %16 to %..rawptr
	%126 = call %..rawptr @__mem_zero(%..rawptr %125, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %16
	%127 = getelementptr inbounds {i64, i64}, {i64, i64}* %16, i64 0, i32 0
	store i64 %124, i64* %127
	%128 = getelementptr inbounds {i64, i64}, {i64, i64}* %16, i64 0, i32 1
	store i64 0, i64* %128
	%129 = load {i64, i64}, {i64, i64}* %16, align 8
	ret {i64, i64} %129

if.done-26:
	; err
	
	; SelectorExpr
	%130 = call cc 64 i32 @GetLastError()
	%131 = sext i32 %130 to i64
	store i64 %131, i64* %17
	; ReturnStmt
	%132 = load i64, i64* %17, align 8
	%133 = bitcast {i64, i64}* %18 to %..rawptr
	%134 = call %..rawptr @__mem_zero(%..rawptr %133, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %18
	%135 = getelementptr inbounds {i64, i64}, {i64, i64}* %18, i64 0, i32 0
	store i64 -1, i64* %135
	%136 = getelementptr inbounds {i64, i64}, {i64, i64}* %18, i64 0, i32 1
	store i64 %132, i64* %136
	%137 = load {i64, i64}, {i64, i64}* %18, align 8
	ret {i64, i64} %137
}

define void @windows-6.close(i64 %fd, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	
	store i64 %fd, i64* %0
	; SelectorExpr
	%1 = load i64, i64* %0, align 8
	%2 = inttoptr i64 %1 to %..rawptr
	%3 = call cc 64 i32 @CloseHandle(%..rawptr %2)
	ret void
}

define {i64, i64} @windows-6.write(i64 %fd, {i8*, i64}* %data, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca {i64, i64}, align 16
	%2 = alloca i32, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i32, align 16
	%7 = alloca i32, align 16
	%8 = alloca i64, align 16
	%9 = alloca {i64, i64}, align 16
	%10 = alloca {i64, i64}, align 16
	
	store i64 %fd, i64* %0
	%11 = load {i8*, i64}, {i8*, i64}* %data, align 8
	; IfStmt
	%12 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%13 = extractvalue {i8*, i64} %12, 1
	%14 = icmp eq i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = trunc i8 %15 to i1
	br i1 %16, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%17 = bitcast {i64, i64}* %1 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %1
	%19 = getelementptr inbounds {i64, i64}, {i64, i64}* %1, i64 0, i32 0
	store i64 0, i64* %19
	%20 = getelementptr inbounds {i64, i64}, {i64, i64}* %1, i64 0, i32 1
	store i64 0, i64* %20
	%21 = load {i64, i64}, {i64, i64}* %1, align 8
	ret {i64, i64} %21

if.done-2:
	; single_write_length
	%22 = bitcast i32* %2 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 4)
	store i32 zeroinitializer, i32* %2
	
	; total_write
	%24 = bitcast i64* %3 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 8)
	store i64 zeroinitializer, i64* %3
	
	; length
	
	%26 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%27 = extractvalue {i8*, i64} %26, 1
	%28 = bitcast i64 %27 to i64
	store i64 %28, i64* %4
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%29 = load i64, i64* %3, align 8
	%30 = load i64, i64* %4, align 8
	%31 = icmp slt i64 %29, %30
	%32 = zext i1 %31 to i8
	%33 = trunc i8 %32 to i1
	br i1 %33, label %for.body-4, label %for.done-8

for.body-4:
	; remaining
	
	%34 = load i64, i64* %4, align 8
	%35 = load i64, i64* %3, align 8
	%36 = sub i64 %34, %35
	store i64 %36, i64* %5
	; to_write
	
	; min
	%37 = load i64, i64* %5, align 8
	%38 = trunc i64 %37 to i32
	%39 = icmp slt i32 %38, 2147483647
	%40 = select i1 %39, i32 %38, i32 2147483647
	store i32 %40, i32* %6
	; e
	
	; SelectorExpr
	%41 = load i64, i64* %0, align 8
	%42 = inttoptr i64 %41 to %..rawptr
	; IndexExpr
	%43 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%44 = extractvalue {i8*, i64} %43, 0
	%45 = load i64, i64* %3, align 8
	%46 = bitcast i64 %45 to i64
	%47 = extractvalue {i8*, i64} %43, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__str$91, i64 0, i32 0), i64 53}, i64 125, i64 49, i64 %46, i64 %47)
	%48 = getelementptr inbounds i8, i8* %44, i64 %46
	%49 = getelementptr inbounds i8, i8* %48, i64 0
	%50 = load i32, i32* %6, align 4
	%51 = getelementptr inbounds i32, i32* %2, i64 0
	%52 = bitcast i8* %49 to %..rawptr
	%53 = call cc 64 i32 @WriteFile(%..rawptr %42, %..rawptr %52, i32 %50, i32* %51, %..rawptr zeroinitializer)
	store i32 %53, i32* %7
	; IfStmt
	%54 = load i32, i32* %2, align 4
	%55 = icmp sle i32 %54, 0
	%56 = zext i1 %55 to i32
	%57 = icmp ne i32 %56, 0
	%58 = zext i1 %57 to i8
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.then-6, label %cmp.or-5

cmp.or-5:
	%60 = load i32, i32* %7, align 4
	%61 = icmp ne i32 %60, 0
	%62 = zext i1 %61 to i8
	%63 = trunc i8 %62 to i1
	br i1 %63, label %if.done-7, label %if.then-6

if.then-6:
	; err
	
	; SelectorExpr
	%64 = call cc 64 i32 @GetLastError()
	%65 = sext i32 %64 to i64
	store i64 %65, i64* %8
	; ReturnStmt
	%66 = load i64, i64* %3, align 8
	%67 = bitcast i64 %66 to i64
	%68 = load i64, i64* %8, align 8
	%69 = bitcast {i64, i64}* %9 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %9
	%71 = getelementptr inbounds {i64, i64}, {i64, i64}* %9, i64 0, i32 0
	store i64 %67, i64* %71
	%72 = getelementptr inbounds {i64, i64}, {i64, i64}* %9, i64 0, i32 1
	store i64 %68, i64* %72
	%73 = load {i64, i64}, {i64, i64}* %9, align 8
	ret {i64, i64} %73

if.done-7:
	; AssignStmt
	%74 = load i32, i32* %2, align 4
	%75 = sext i32 %74 to i64
	%76 = load i64, i64* %3, align 8
	%77 = add i64 %76, %75
	store i64 %77, i64* %3
	br label %for.loop-3

for.done-8:
	; ReturnStmt
	%78 = load i64, i64* %3, align 8
	%79 = bitcast i64 %78 to i64
	%80 = bitcast {i64, i64}* %10 to %..rawptr
	%81 = call %..rawptr @__mem_zero(%..rawptr %80, i64 16)
	store {i64, i64} zeroinitializer, {i64, i64}* %10
	%82 = getelementptr inbounds {i64, i64}, {i64, i64}* %10, i64 0, i32 0
	store i64 %79, i64* %82
	%83 = getelementptr inbounds {i64, i64}, {i64, i64}* %10, i64 0, i32 1
	store i64 0, i64* %83
	%84 = load {i64, i64}, {i64, i64}* %10, align 8
	ret {i64, i64} %84
}

define i64 @windows-6.get_std_handle(i64 %h, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..rawptr, align 16
	
	store i64 %h, i64* %0
	; fd
	
	; SelectorExpr
	%2 = load i64, i64* %0, align 8
	%3 = trunc i64 %2 to i32
	%4 = call cc 64 %..rawptr @GetStdHandle(i32 %3)
	store %..rawptr %4, %..rawptr* %1
	; SelectorExpr
	%5 = load %..rawptr, %..rawptr* %1, align 8
	%6 = call cc 64 i32 @SetHandleInformation(%..rawptr %5, i32 1, i32 0)
	; ReturnStmt
	%7 = load %..rawptr, %..rawptr* %1, align 8
	%8 = ptrtoint %..rawptr %7 to i64
	ret i64 %8
}

define %..rawptr @windows-6.heap_alloc(i64 %size, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	
	store i64 %size, i64* %0
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%1 = call cc 64 %..rawptr @GetProcessHeap()
	%2 = load i64, i64* %0, align 8
	%3 = call cc 64 %..rawptr @HeapAlloc(%..rawptr %1, i32 8, i64 %2)
	ret %..rawptr %3
}

define %..rawptr @windows-6.heap_resize(%..rawptr %ptr, i64 %new_size, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	%1 = alloca i64, align 16
	
	store %..rawptr %ptr, %..rawptr* %0
	
	store i64 %new_size, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp eq i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-1, label %if.done-2

if.then-1:
	%6 = load %..rawptr, %..rawptr* %0, align 8
	call void @windows-6.heap_free(%..rawptr %6, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret %..rawptr zeroinitializer

if.done-2:
	; IfStmt
	%7 = load %..rawptr, %..rawptr* %0, align 8
	%8 = icmp eq %..rawptr %7, zeroinitializer
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%11 = load i64, i64* %1, align 8
	%12 = call %..rawptr @windows-6.heap_alloc(i64 %11, %Context* noalias nonnull %__.context_ptr)
	ret %..rawptr %12

if.done-4:
	; ReturnStmt
	; SelectorExpr
	; SelectorExpr
	%13 = call cc 64 %..rawptr @GetProcessHeap()
	%14 = load %..rawptr, %..rawptr* %0, align 8
	%15 = load i64, i64* %1, align 8
	%16 = call cc 64 %..rawptr @HeapReAlloc(%..rawptr %13, i32 8, %..rawptr %14, i64 %15)
	ret %..rawptr %16
}

define void @windows-6.heap_free(%..rawptr %ptr, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..rawptr, align 16
	
	store %..rawptr %ptr, %..rawptr* %0
	; IfStmt
	%1 = load %..rawptr, %..rawptr* %0, align 8
	%2 = icmp eq %..rawptr %1, zeroinitializer
	%3 = zext i1 %2 to i8
	%4 = trunc i8 %3 to i1
	br i1 %4, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; SelectorExpr
	; SelectorExpr
	%5 = call cc 64 %..rawptr @GetProcessHeap()
	%6 = load %..rawptr, %..rawptr* %0, align 8
	%7 = call cc 64 i32 @HeapFree(%..rawptr %5, i32 0, %..rawptr %6)
	ret void
}

define i64 @windows-6.current_thread_id(%Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	; ReturnStmt
	; SelectorExpr
	%0 = call cc 64 i32 @GetCurrentThreadId()
	%1 = zext i32 %0 to i64
	ret i64 %1
}

define void @html-11.lang(%html-11.Document* %doc, %..string %lang, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %__Map_Header, align 16
	%3 = alloca %__Map_Key, align 16
	%4 = alloca %..string, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %__Map_Key, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %..string %lang, %..string* %1
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%8 = load %html-11.Document*, %html-11.Document** %0, align 8
	%9 = getelementptr inbounds %html-11.Document, %html-11.Document* %8, i64 0
	%10 = getelementptr inbounds %html-11.Document, %html-11.Document* %9, i64 0, i32 1
	%11 = load %..string, %..string* %1, align 8
	%12 = bitcast %__Map_Header* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%15 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %10 to %raw-5.Map*
	store %raw-5.Map* %15, %raw-5.Map** %14
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i8 1, i8* %16
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 48, i64* %17
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %18
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %19
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 5
	store i64 16, i64* %20
	%21 = load %__Map_Header, %__Map_Header* %2, align 8
	%22 = bitcast %__Map_Key* %3 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%24 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 315497910460527221, i64* %24
	%25 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$92, i64 0, i32 0), i64 4}, %..string* %25
	%26 = load %__Map_Key, %__Map_Key* %3, align 8
	%27 = bitcast %..string* %4 to %..rawptr
	%28 = call %..rawptr @__mem_zero(%..rawptr %27, i64 16)
	store %..string zeroinitializer, %..string* %4
	store %..string %11, %..string* %4
	%29 = bitcast %..string* %4 to %..rawptr
	%30 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$93, i64 0, i32 0), i64 4})
	%31 = bitcast %__Map_Header* %5 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	store %__Map_Header %21, %__Map_Header* %5
	%33 = bitcast %__Map_Key* %6 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	store %__Map_Key %26, %__Map_Key* %6
	%35 = bitcast %Source_Code_Location* %7 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %30, %Source_Code_Location* %7
	call void @__dynamic_map_set(%__Map_Header* %5, %__Map_Key* %6, %..rawptr %29, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @html-11.id(%html-11.Element* %el, %..string %id, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %__Map_Header, align 16
	%3 = alloca %__Map_Key, align 16
	%4 = alloca %..string, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %__Map_Key, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store %html-11.Element* %el, %html-11.Element** %0
	
	store %..string %id, %..string* %1
	; AssignStmt
	; IndexExpr
	%8 = load %html-11.Element*, %html-11.Element** %0, align 8
	%9 = getelementptr inbounds %html-11.Element, %html-11.Element* %8, i64 0
	%10 = getelementptr inbounds %html-11.Element, %html-11.Element* %9, i64 0, i32 2
	%11 = load %..string, %..string* %1, align 8
	%12 = bitcast %__Map_Header* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%15 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %10 to %raw-5.Map*
	store %raw-5.Map* %15, %raw-5.Map** %14
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i8 1, i8* %16
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 48, i64* %17
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %18
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %19
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 5
	store i64 16, i64* %20
	%21 = load %__Map_Header, %__Map_Header* %2, align 8
	%22 = bitcast %__Map_Key* %3 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%24 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 628021283683842752, i64* %24
	%25 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$94, i64 0, i32 0), i64 2}, %..string* %25
	%26 = load %__Map_Key, %__Map_Key* %3, align 8
	%27 = bitcast %..string* %4 to %..rawptr
	%28 = call %..rawptr @__mem_zero(%..rawptr %27, i64 16)
	store %..string zeroinitializer, %..string* %4
	store %..string %11, %..string* %4
	%29 = bitcast %..string* %4 to %..rawptr
	%30 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$95, i64 0, i32 0), i64 2})
	%31 = bitcast %__Map_Header* %5 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	store %__Map_Header %21, %__Map_Header* %5
	%33 = bitcast %__Map_Key* %6 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	store %__Map_Key %26, %__Map_Key* %6
	%35 = bitcast %Source_Code_Location* %7 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %30, %Source_Code_Location* %7
	call void @__dynamic_map_set(%__Map_Header* %5, %__Map_Key* %6, %..rawptr %29, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @html-11.class(%html-11.Element* %el, %..string %class, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %__Map_Header, align 16
	%3 = alloca %__Map_Key, align 16
	%4 = alloca %..string, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %__Map_Key, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store %html-11.Element* %el, %html-11.Element** %0
	
	store %..string %class, %..string* %1
	; AssignStmt
	; IndexExpr
	%8 = load %html-11.Element*, %html-11.Element** %0, align 8
	%9 = getelementptr inbounds %html-11.Element, %html-11.Element* %8, i64 0
	%10 = getelementptr inbounds %html-11.Element, %html-11.Element* %9, i64 0, i32 2
	%11 = load %..string, %..string* %1, align 8
	%12 = bitcast %__Map_Header* %2 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %2
	%14 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 0
	%15 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %10 to %raw-5.Map*
	store %raw-5.Map* %15, %raw-5.Map** %14
	%16 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 1
	store i8 1, i8* %16
	%17 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 2
	store i64 48, i64* %17
	%18 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 3
	store i64 8, i64* %18
	%19 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 4
	store i64 32, i64* %19
	%20 = getelementptr inbounds %__Map_Header, %__Map_Header* %2, i64 0, i32 5
	store i64 16, i64* %20
	%21 = load %__Map_Header, %__Map_Header* %2, align 8
	%22 = bitcast %__Map_Key* %3 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %3
	%24 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 0
	store i64 -3380420371054613601, i64* %24
	%25 = getelementptr inbounds %__Map_Key, %__Map_Key* %3, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$96, i64 0, i32 0), i64 5}, %..string* %25
	%26 = load %__Map_Key, %__Map_Key* %3, align 8
	%27 = bitcast %..string* %4 to %..rawptr
	%28 = call %..rawptr @__mem_zero(%..rawptr %27, i64 16)
	store %..string zeroinitializer, %..string* %4
	store %..string %11, %..string* %4
	%29 = bitcast %..string* %4 to %..rawptr
	%30 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$97, i64 0, i32 0), i64 5})
	%31 = bitcast %__Map_Header* %5 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	store %__Map_Header %21, %__Map_Header* %5
	%33 = bitcast %__Map_Key* %6 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	store %__Map_Key %26, %__Map_Key* %6
	%35 = bitcast %Source_Code_Location* %7 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %30, %Source_Code_Location* %7
	call void @__dynamic_map_set(%__Map_Header* %5, %__Map_Key* %6, %..rawptr %29, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define %html-11.Element* @html-11.meta(%html-11.Document* %doc, %..string %name, %..string %content, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %html-11.Element*, align 16
	%4 = alloca %__Map_Header, align 16
	%5 = alloca %__Map_Key, align 16
	%6 = alloca %..string, align 16
	%7 = alloca %__Map_Header, align 16
	%8 = alloca %__Map_Key, align 16
	%9 = alloca %Source_Code_Location, align 16
	%10 = alloca %__Map_Header, align 16
	%11 = alloca %__Map_Key, align 16
	%12 = alloca %..string, align 16
	%13 = alloca %__Map_Header, align 16
	%14 = alloca %__Map_Key, align 16
	%15 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %..string %name, %..string* %1
	
	store %..string %content, %..string* %2
	; el
	
	%16 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$98, i64 0, i32 0), i64 4}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %16, %html-11.Element** %3
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%17 = load %html-11.Element*, %html-11.Element** %3, align 8
	%18 = getelementptr inbounds %html-11.Element, %html-11.Element* %17, i64 0
	%19 = getelementptr inbounds %html-11.Element, %html-11.Element* %18, i64 0, i32 2
	%20 = load %..string, %..string* %1, align 8
	%21 = bitcast %__Map_Header* %4 to %..rawptr
	%22 = call %..rawptr @__mem_zero(%..rawptr %21, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %4
	%23 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 0
	%24 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %19 to %raw-5.Map*
	store %raw-5.Map* %24, %raw-5.Map** %23
	%25 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 1
	store i8 1, i8* %25
	%26 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 2
	store i64 48, i64* %26
	%27 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 3
	store i64 8, i64* %27
	%28 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 4
	store i64 32, i64* %28
	%29 = getelementptr inbounds %__Map_Header, %__Map_Header* %4, i64 0, i32 5
	store i64 16, i64* %29
	%30 = load %__Map_Header, %__Map_Header* %4, align 8
	%31 = bitcast %__Map_Key* %5 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %5
	%33 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 0
	store i64 -4270347329889690746, i64* %33
	%34 = getelementptr inbounds %__Map_Key, %__Map_Key* %5, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$99, i64 0, i32 0), i64 4}, %..string* %34
	%35 = load %__Map_Key, %__Map_Key* %5, align 8
	%36 = bitcast %..string* %6 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 16)
	store %..string zeroinitializer, %..string* %6
	store %..string %20, %..string* %6
	%38 = bitcast %..string* %6 to %..rawptr
	%39 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$9a, i64 0, i32 0), i64 4})
	%40 = bitcast %__Map_Header* %7 to %..rawptr
	%41 = call %..rawptr @__mem_zero(%..rawptr %40, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %7
	store %__Map_Header %30, %__Map_Header* %7
	%42 = bitcast %__Map_Key* %8 to %..rawptr
	%43 = call %..rawptr @__mem_zero(%..rawptr %42, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %8
	store %__Map_Key %35, %__Map_Key* %8
	%44 = bitcast %Source_Code_Location* %9 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %9
	store %Source_Code_Location %39, %Source_Code_Location* %9
	call void @__dynamic_map_set(%__Map_Header* %7, %__Map_Key* %8, %..rawptr %38, %Source_Code_Location* %9, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%46 = load %html-11.Element*, %html-11.Element** %3, align 8
	%47 = getelementptr inbounds %html-11.Element, %html-11.Element* %46, i64 0
	%48 = getelementptr inbounds %html-11.Element, %html-11.Element* %47, i64 0, i32 2
	%49 = load %..string, %..string* %2, align 8
	%50 = bitcast %__Map_Header* %10 to %..rawptr
	%51 = call %..rawptr @__mem_zero(%..rawptr %50, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%52 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%53 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %48 to %raw-5.Map*
	store %raw-5.Map* %53, %raw-5.Map** %52
	%54 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i8 1, i8* %54
	%55 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 48, i64* %55
	%56 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %56
	%57 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %57
	%58 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 5
	store i64 16, i64* %58
	%59 = load %__Map_Header, %__Map_Header* %10, align 8
	%60 = bitcast %__Map_Key* %11 to %..rawptr
	%61 = call %..rawptr @__mem_zero(%..rawptr %60, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%62 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 4759308327122588290, i64* %62
	%63 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$9b, i64 0, i32 0), i64 7}, %..string* %63
	%64 = load %__Map_Key, %__Map_Key* %11, align 8
	%65 = bitcast %..string* %12 to %..rawptr
	%66 = call %..rawptr @__mem_zero(%..rawptr %65, i64 16)
	store %..string zeroinitializer, %..string* %12
	store %..string %49, %..string* %12
	%67 = bitcast %..string* %12 to %..rawptr
	%68 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$9c, i64 0, i32 0), i64 4})
	%69 = bitcast %__Map_Header* %13 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	store %__Map_Header %59, %__Map_Header* %13
	%71 = bitcast %__Map_Key* %14 to %..rawptr
	%72 = call %..rawptr @__mem_zero(%..rawptr %71, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %14
	store %__Map_Key %64, %__Map_Key* %14
	%73 = bitcast %Source_Code_Location* %15 to %..rawptr
	%74 = call %..rawptr @__mem_zero(%..rawptr %73, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %15
	store %Source_Code_Location %68, %Source_Code_Location* %15
	call void @__dynamic_map_set(%__Map_Header* %13, %__Map_Key* %14, %..rawptr %67, %Source_Code_Location* %15, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%75 = load %html-11.Document*, %html-11.Document** %0, align 8
	%76 = getelementptr inbounds %html-11.Document, %html-11.Document* %75, i64 0
	%77 = getelementptr inbounds %html-11.Document, %html-11.Document* %76, i64 0, i32 3
	%78 = load %html-11.Element*, %html-11.Element** %77, align 8
	%79 = load %html-11.Element*, %html-11.Element** %3, align 8
	call void @html-11.append_to_element(%html-11.Element* %78, %html-11.Element* %79, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%80 = load %html-11.Element*, %html-11.Element** %3, align 8
	ret %html-11.Element* %80
}

define %html-11.Element* @html-11.charset(%html-11.Document* %doc, %..string %charset, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %html-11.Element*, align 16
	%3 = alloca i8, align 16
	%4 = alloca {%html-11.Element*, i8}, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %__Map_Key, align 16
	%7 = alloca %__Map_Header, align 16
	%8 = alloca %__Map_Key, align 16
	%9 = alloca %__Map_Header, align 16
	%10 = alloca %__Map_Key, align 16
	%11 = alloca %..string, align 16
	%12 = alloca %__Map_Header, align 16
	%13 = alloca %__Map_Key, align 16
	%14 = alloca %Source_Code_Location, align 16
	%15 = alloca %__Map_Header, align 16
	%16 = alloca %__Map_Key, align 16
	%17 = alloca %..string, align 16
	%18 = alloca %__Map_Header, align 16
	%19 = alloca %__Map_Key, align 16
	%20 = alloca %Source_Code_Location, align 16
	%21 = alloca %__Map_Header, align 16
	%22 = alloca %__Map_Key, align 16
	%23 = alloca %html-11.Element*, align 16
	%24 = alloca %__Map_Header, align 16
	%25 = alloca %__Map_Key, align 16
	%26 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %..string %charset, %..string* %1
	; el
	
	; ok
	
	; IndexExpr
	; SelectorExpr
	%27 = load %html-11.Document*, %html-11.Document** %0, align 8
	%28 = getelementptr inbounds %html-11.Document, %html-11.Document* %27, i64 0
	%29 = getelementptr inbounds %html-11.Document, %html-11.Document* %28, i64 0, i32 2
	%30 = bitcast {%html-11.Element*, i8}* %4 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 16)
	store {%html-11.Element*, i8} zeroinitializer, {%html-11.Element*, i8}* %4
	%32 = bitcast %__Map_Header* %5 to %..rawptr
	%33 = call %..rawptr @__mem_zero(%..rawptr %32, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	%34 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 0
	%35 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %html-11.Element*}*, i64, i64, %Allocator}}* %29 to %raw-5.Map*
	store %raw-5.Map* %35, %raw-5.Map** %34
	%36 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 1
	store i8 1, i8* %36
	%37 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 2
	store i64 40, i64* %37
	%38 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 3
	store i64 8, i64* %38
	%39 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 4
	store i64 32, i64* %39
	%40 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 5
	store i64 8, i64* %40
	%41 = load %__Map_Header, %__Map_Header* %5, align 8
	%42 = bitcast %__Map_Key* %6 to %..rawptr
	%43 = call %..rawptr @__mem_zero(%..rawptr %42, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	%44 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 0
	store i64 -8485156115979864085, i64* %44
	%45 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$9d, i64 0, i32 0), i64 7}, %..string* %45
	%46 = load %__Map_Key, %__Map_Key* %6, align 8
	%47 = bitcast %__Map_Header* %7 to %..rawptr
	%48 = call %..rawptr @__mem_zero(%..rawptr %47, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %7
	store %__Map_Header %41, %__Map_Header* %7
	%49 = bitcast %__Map_Key* %8 to %..rawptr
	%50 = call %..rawptr @__mem_zero(%..rawptr %49, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %8
	store %__Map_Key %46, %__Map_Key* %8
	%51 = call %..rawptr @__dynamic_map_get(%__Map_Header* %7, %__Map_Key* %8, %Context* noalias nonnull %__.context_ptr)
	%52 = icmp ne %..rawptr %51, null
	%53 = zext i1 %52 to i8
	%54 = getelementptr inbounds {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, i64 0, i32 1
	store i8 %53, i8* %54
	%55 = trunc i8 %53 to i1
	br i1 %55, label %map.get.then-1, label %map.get.done-2

map.get.then-1:
	%56 = getelementptr inbounds {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, i64 0, i32 0
	%57 = bitcast %..rawptr %51 to %html-11.Element**
	%58 = load %html-11.Element*, %html-11.Element** %57, align 8
	store %html-11.Element* %58, %html-11.Element** %56
	br label %map.get.done-2

map.get.done-2:
	%59 = load {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, align 8
	%60 = extractvalue {%html-11.Element*, i8} %59, 0
	%61 = extractvalue {%html-11.Element*, i8} %59, 1
	store %html-11.Element* %60, %html-11.Element** %2
	store i8 %61, i8* %3
	; IfStmt
	%62 = load i8, i8* %3, align 1
	%63 = trunc i8 %62 to i1
	br i1 %63, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%64 = load %html-11.Element*, %html-11.Element** %2, align 8
	%65 = getelementptr inbounds %html-11.Element, %html-11.Element* %64, i64 0
	%66 = getelementptr inbounds %html-11.Element, %html-11.Element* %65, i64 0, i32 2
	%67 = load %..string, %..string* %1, align 8
	%68 = bitcast %__Map_Header* %9 to %..rawptr
	%69 = call %..rawptr @__mem_zero(%..rawptr %68, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %9
	%70 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 0
	%71 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %66 to %raw-5.Map*
	store %raw-5.Map* %71, %raw-5.Map** %70
	%72 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 1
	store i8 1, i8* %72
	%73 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 2
	store i64 48, i64* %73
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 3
	store i64 8, i64* %74
	%75 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 4
	store i64 32, i64* %75
	%76 = getelementptr inbounds %__Map_Header, %__Map_Header* %9, i64 0, i32 5
	store i64 16, i64* %76
	%77 = load %__Map_Header, %__Map_Header* %9, align 8
	%78 = bitcast %__Map_Key* %10 to %..rawptr
	%79 = call %..rawptr @__mem_zero(%..rawptr %78, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %10
	%80 = getelementptr inbounds %__Map_Key, %__Map_Key* %10, i64 0, i32 0
	store i64 -8485156115979864085, i64* %80
	%81 = getelementptr inbounds %__Map_Key, %__Map_Key* %10, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$9e, i64 0, i32 0), i64 7}, %..string* %81
	%82 = load %__Map_Key, %__Map_Key* %10, align 8
	%83 = bitcast %..string* %11 to %..rawptr
	%84 = call %..rawptr @__mem_zero(%..rawptr %83, i64 16)
	store %..string zeroinitializer, %..string* %11
	store %..string %67, %..string* %11
	%85 = bitcast %..string* %11 to %..rawptr
	%86 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$9f, i64 0, i32 0), i64 7})
	%87 = bitcast %__Map_Header* %12 to %..rawptr
	%88 = call %..rawptr @__mem_zero(%..rawptr %87, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %12
	store %__Map_Header %77, %__Map_Header* %12
	%89 = bitcast %__Map_Key* %13 to %..rawptr
	%90 = call %..rawptr @__mem_zero(%..rawptr %89, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %13
	store %__Map_Key %82, %__Map_Key* %13
	%91 = bitcast %Source_Code_Location* %14 to %..rawptr
	%92 = call %..rawptr @__mem_zero(%..rawptr %91, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %86, %Source_Code_Location* %14
	call void @__dynamic_map_set(%__Map_Header* %12, %__Map_Key* %13, %..rawptr %85, %Source_Code_Location* %14, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-5

if.else-4:
	; AssignStmt
	%93 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$a0, i64 0, i32 0), i64 4}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %93, %html-11.Element** %2
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%94 = load %html-11.Element*, %html-11.Element** %2, align 8
	%95 = getelementptr inbounds %html-11.Element, %html-11.Element* %94, i64 0
	%96 = getelementptr inbounds %html-11.Element, %html-11.Element* %95, i64 0, i32 2
	%97 = load %..string, %..string* %1, align 8
	%98 = bitcast %__Map_Header* %15 to %..rawptr
	%99 = call %..rawptr @__mem_zero(%..rawptr %98, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %15
	%100 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 0
	%101 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %96 to %raw-5.Map*
	store %raw-5.Map* %101, %raw-5.Map** %100
	%102 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 1
	store i8 1, i8* %102
	%103 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 2
	store i64 48, i64* %103
	%104 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 3
	store i64 8, i64* %104
	%105 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 4
	store i64 32, i64* %105
	%106 = getelementptr inbounds %__Map_Header, %__Map_Header* %15, i64 0, i32 5
	store i64 16, i64* %106
	%107 = load %__Map_Header, %__Map_Header* %15, align 8
	%108 = bitcast %__Map_Key* %16 to %..rawptr
	%109 = call %..rawptr @__mem_zero(%..rawptr %108, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %16
	%110 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 0
	store i64 -8485156115979864085, i64* %110
	%111 = getelementptr inbounds %__Map_Key, %__Map_Key* %16, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$a1, i64 0, i32 0), i64 7}, %..string* %111
	%112 = load %__Map_Key, %__Map_Key* %16, align 8
	%113 = bitcast %..string* %17 to %..rawptr
	%114 = call %..rawptr @__mem_zero(%..rawptr %113, i64 16)
	store %..string zeroinitializer, %..string* %17
	store %..string %97, %..string* %17
	%115 = bitcast %..string* %17 to %..rawptr
	%116 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$a2, i64 0, i32 0), i64 7})
	%117 = bitcast %__Map_Header* %18 to %..rawptr
	%118 = call %..rawptr @__mem_zero(%..rawptr %117, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %18
	store %__Map_Header %107, %__Map_Header* %18
	%119 = bitcast %__Map_Key* %19 to %..rawptr
	%120 = call %..rawptr @__mem_zero(%..rawptr %119, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %19
	store %__Map_Key %112, %__Map_Key* %19
	%121 = bitcast %Source_Code_Location* %20 to %..rawptr
	%122 = call %..rawptr @__mem_zero(%..rawptr %121, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %20
	store %Source_Code_Location %116, %Source_Code_Location* %20
	call void @__dynamic_map_set(%__Map_Header* %18, %__Map_Key* %19, %..rawptr %115, %Source_Code_Location* %20, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%123 = load %html-11.Document*, %html-11.Document** %0, align 8
	%124 = getelementptr inbounds %html-11.Document, %html-11.Document* %123, i64 0
	%125 = getelementptr inbounds %html-11.Document, %html-11.Document* %124, i64 0, i32 3
	%126 = load %html-11.Element*, %html-11.Element** %125, align 8
	%127 = load %html-11.Element*, %html-11.Element** %2, align 8
	call void @html-11.append_to_element(%html-11.Element* %126, %html-11.Element* %127, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%128 = load %html-11.Document*, %html-11.Document** %0, align 8
	%129 = getelementptr inbounds %html-11.Document, %html-11.Document* %128, i64 0
	%130 = getelementptr inbounds %html-11.Document, %html-11.Document* %129, i64 0, i32 2
	%131 = load %html-11.Element*, %html-11.Element** %2, align 8
	%132 = bitcast %__Map_Header* %21 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %21
	%134 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 0
	%135 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %html-11.Element*}*, i64, i64, %Allocator}}* %130 to %raw-5.Map*
	store %raw-5.Map* %135, %raw-5.Map** %134
	%136 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 1
	store i8 1, i8* %136
	%137 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 2
	store i64 40, i64* %137
	%138 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 3
	store i64 8, i64* %138
	%139 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 4
	store i64 32, i64* %139
	%140 = getelementptr inbounds %__Map_Header, %__Map_Header* %21, i64 0, i32 5
	store i64 8, i64* %140
	%141 = load %__Map_Header, %__Map_Header* %21, align 8
	%142 = bitcast %__Map_Key* %22 to %..rawptr
	%143 = call %..rawptr @__mem_zero(%..rawptr %142, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %22
	%144 = getelementptr inbounds %__Map_Key, %__Map_Key* %22, i64 0, i32 0
	store i64 -8485156115979864085, i64* %144
	%145 = getelementptr inbounds %__Map_Key, %__Map_Key* %22, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$a3, i64 0, i32 0), i64 7}, %..string* %145
	%146 = load %__Map_Key, %__Map_Key* %22, align 8
	%147 = bitcast %html-11.Element** %23 to %..rawptr
	%148 = call %..rawptr @__mem_zero(%..rawptr %147, i64 8)
	store %html-11.Element* zeroinitializer, %html-11.Element** %23
	store %html-11.Element* %131, %html-11.Element** %23
	%149 = bitcast %html-11.Element** %23 to %..rawptr
	%150 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$a4, i64 0, i32 0), i64 7})
	%151 = bitcast %__Map_Header* %24 to %..rawptr
	%152 = call %..rawptr @__mem_zero(%..rawptr %151, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %24
	store %__Map_Header %141, %__Map_Header* %24
	%153 = bitcast %__Map_Key* %25 to %..rawptr
	%154 = call %..rawptr @__mem_zero(%..rawptr %153, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %25
	store %__Map_Key %146, %__Map_Key* %25
	%155 = bitcast %Source_Code_Location* %26 to %..rawptr
	%156 = call %..rawptr @__mem_zero(%..rawptr %155, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %26
	store %Source_Code_Location %150, %Source_Code_Location* %26
	call void @__dynamic_map_set(%__Map_Header* %24, %__Map_Key* %25, %..rawptr %149, %Source_Code_Location* %26, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-5

if.done-5:
	; ReturnStmt
	%157 = load %html-11.Element*, %html-11.Element** %2, align 8
	ret %html-11.Element* %157
}

define %html-11.Element* @html-11.title(%html-11.Document* %doc, %..string %title, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %html-11.Element*, align 16
	%3 = alloca i8, align 16
	%4 = alloca {%html-11.Element*, i8}, align 16
	%5 = alloca %__Map_Header, align 16
	%6 = alloca %__Map_Key, align 16
	%7 = alloca %__Map_Header, align 16
	%8 = alloca %__Map_Key, align 16
	%9 = alloca %html-11.Element*, align 16
	%10 = alloca %__Map_Header, align 16
	%11 = alloca %__Map_Key, align 16
	%12 = alloca %html-11.Element*, align 16
	%13 = alloca %__Map_Header, align 16
	%14 = alloca %__Map_Key, align 16
	%15 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %..string %title, %..string* %1
	; el
	
	; ok
	
	; IndexExpr
	; SelectorExpr
	%16 = load %html-11.Document*, %html-11.Document** %0, align 8
	%17 = getelementptr inbounds %html-11.Document, %html-11.Document* %16, i64 0
	%18 = getelementptr inbounds %html-11.Document, %html-11.Document* %17, i64 0, i32 2
	%19 = bitcast {%html-11.Element*, i8}* %4 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 16)
	store {%html-11.Element*, i8} zeroinitializer, {%html-11.Element*, i8}* %4
	%21 = bitcast %__Map_Header* %5 to %..rawptr
	%22 = call %..rawptr @__mem_zero(%..rawptr %21, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %5
	%23 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 0
	%24 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %html-11.Element*}*, i64, i64, %Allocator}}* %18 to %raw-5.Map*
	store %raw-5.Map* %24, %raw-5.Map** %23
	%25 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 1
	store i8 1, i8* %25
	%26 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 2
	store i64 40, i64* %26
	%27 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 3
	store i64 8, i64* %27
	%28 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 4
	store i64 32, i64* %28
	%29 = getelementptr inbounds %__Map_Header, %__Map_Header* %5, i64 0, i32 5
	store i64 8, i64* %29
	%30 = load %__Map_Header, %__Map_Header* %5, align 8
	%31 = bitcast %__Map_Key* %6 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %6
	%33 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 0
	store i64 -2724350755546111959, i64* %33
	%34 = getelementptr inbounds %__Map_Key, %__Map_Key* %6, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$a5, i64 0, i32 0), i64 5}, %..string* %34
	%35 = load %__Map_Key, %__Map_Key* %6, align 8
	%36 = bitcast %__Map_Header* %7 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %7
	store %__Map_Header %30, %__Map_Header* %7
	%38 = bitcast %__Map_Key* %8 to %..rawptr
	%39 = call %..rawptr @__mem_zero(%..rawptr %38, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %8
	store %__Map_Key %35, %__Map_Key* %8
	%40 = call %..rawptr @__dynamic_map_get(%__Map_Header* %7, %__Map_Key* %8, %Context* noalias nonnull %__.context_ptr)
	%41 = icmp ne %..rawptr %40, null
	%42 = zext i1 %41 to i8
	%43 = getelementptr inbounds {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, i64 0, i32 1
	store i8 %42, i8* %43
	%44 = trunc i8 %42 to i1
	br i1 %44, label %map.get.then-1, label %map.get.done-2

map.get.then-1:
	%45 = getelementptr inbounds {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, i64 0, i32 0
	%46 = bitcast %..rawptr %40 to %html-11.Element**
	%47 = load %html-11.Element*, %html-11.Element** %46, align 8
	store %html-11.Element* %47, %html-11.Element** %45
	br label %map.get.done-2

map.get.done-2:
	%48 = load {%html-11.Element*, i8}, {%html-11.Element*, i8}* %4, align 8
	%49 = extractvalue {%html-11.Element*, i8} %48, 0
	%50 = extractvalue {%html-11.Element*, i8} %48, 1
	store %html-11.Element* %49, %html-11.Element** %2
	store i8 %50, i8* %3
	; IfStmt
	%51 = load i8, i8* %3, align 1
	%52 = trunc i8 %51 to i1
	br i1 %52, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; SelectorExpr
	%53 = load %html-11.Element*, %html-11.Element** %2, align 8
	%54 = getelementptr inbounds %html-11.Element, %html-11.Element* %53, i64 0
	%55 = getelementptr inbounds %html-11.Element, %html-11.Element* %54, i64 0, i32 1
	%56 = load %..string, %..string* %1, align 8
	store %..string %56, %..string* %55
	br label %if.done-5

if.else-4:
	; el
	
	%57 = load %..string, %..string* %1, align 8
	%58 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$a6, i64 0, i32 0), i64 5}, %..string %57, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %58, %html-11.Element** %9
	; SelectorExpr
	%59 = load %html-11.Document*, %html-11.Document** %0, align 8
	%60 = getelementptr inbounds %html-11.Document, %html-11.Document* %59, i64 0
	%61 = getelementptr inbounds %html-11.Document, %html-11.Document* %60, i64 0, i32 3
	%62 = load %html-11.Element*, %html-11.Element** %61, align 8
	%63 = load %html-11.Element*, %html-11.Element** %9, align 8
	call void @html-11.append_to_element(%html-11.Element* %62, %html-11.Element* %63, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%64 = load %html-11.Document*, %html-11.Document** %0, align 8
	%65 = getelementptr inbounds %html-11.Document, %html-11.Document* %64, i64 0
	%66 = getelementptr inbounds %html-11.Document, %html-11.Document* %65, i64 0, i32 2
	%67 = load %html-11.Element*, %html-11.Element** %9, align 8
	%68 = bitcast %__Map_Header* %10 to %..rawptr
	%69 = call %..rawptr @__mem_zero(%..rawptr %68, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %10
	%70 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 0
	%71 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %html-11.Element*}*, i64, i64, %Allocator}}* %66 to %raw-5.Map*
	store %raw-5.Map* %71, %raw-5.Map** %70
	%72 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 1
	store i8 1, i8* %72
	%73 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 2
	store i64 40, i64* %73
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 3
	store i64 8, i64* %74
	%75 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 4
	store i64 32, i64* %75
	%76 = getelementptr inbounds %__Map_Header, %__Map_Header* %10, i64 0, i32 5
	store i64 8, i64* %76
	%77 = load %__Map_Header, %__Map_Header* %10, align 8
	%78 = bitcast %__Map_Key* %11 to %..rawptr
	%79 = call %..rawptr @__mem_zero(%..rawptr %78, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %11
	%80 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 0
	store i64 -2724350755546111959, i64* %80
	%81 = getelementptr inbounds %__Map_Key, %__Map_Key* %11, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$a7, i64 0, i32 0), i64 5}, %..string* %81
	%82 = load %__Map_Key, %__Map_Key* %11, align 8
	%83 = bitcast %html-11.Element** %12 to %..rawptr
	%84 = call %..rawptr @__mem_zero(%..rawptr %83, i64 8)
	store %html-11.Element* zeroinitializer, %html-11.Element** %12
	store %html-11.Element* %67, %html-11.Element** %12
	%85 = bitcast %html-11.Element** %12 to %..rawptr
	%86 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$a8, i64 0, i32 0), i64 5})
	%87 = bitcast %__Map_Header* %13 to %..rawptr
	%88 = call %..rawptr @__mem_zero(%..rawptr %87, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %13
	store %__Map_Header %77, %__Map_Header* %13
	%89 = bitcast %__Map_Key* %14 to %..rawptr
	%90 = call %..rawptr @__mem_zero(%..rawptr %89, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %14
	store %__Map_Key %82, %__Map_Key* %14
	%91 = bitcast %Source_Code_Location* %15 to %..rawptr
	%92 = call %..rawptr @__mem_zero(%..rawptr %91, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %15
	store %Source_Code_Location %86, %Source_Code_Location* %15
	call void @__dynamic_map_set(%__Map_Header* %13, %__Map_Key* %14, %..rawptr %85, %Source_Code_Location* %15, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-5

if.done-5:
	; ReturnStmt
	%93 = load %html-11.Element*, %html-11.Element** %2, align 8
	ret %html-11.Element* %93
}

define %html-11.Element* @html-11.append_css(%html-11.Document* %doc, %..string %css, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %html-11.Element*, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %..string %css, %..string* %1
	; el
	
	%3 = load %..string, %..string* %1, align 8
	%4 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$a9, i64 0, i32 0), i64 5}, %..string %3, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %4, %html-11.Element** %2
	; SelectorExpr
	%5 = load %html-11.Document*, %html-11.Document** %0, align 8
	%6 = getelementptr inbounds %html-11.Document, %html-11.Document* %5, i64 0
	%7 = getelementptr inbounds %html-11.Document, %html-11.Document* %6, i64 0, i32 3
	%8 = load %html-11.Element*, %html-11.Element** %7, align 8
	%9 = load %html-11.Element*, %html-11.Element** %2, align 8
	call void @html-11.append_to_element(%html-11.Element* %8, %html-11.Element* %9, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%10 = load %html-11.Element*, %html-11.Element** %2, align 8
	ret %html-11.Element* %10
}

define %html-11.Document* @html-11.make_document(%..string %_doctype, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %html-11.Document*, align 16
	%2 = alloca %Source_Code_Location, align 16
	
	store %..string %_doctype, %..string* %0
	; d
	
	%3 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$aa, i64 0, i32 0), i64 52}, i64 89, i64 13, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$ab, i64 0, i32 0), i64 13})
	%4 = bitcast %Source_Code_Location* %2 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %3, %Source_Code_Location* %2
	%6 = call %html-11.Document* @_preload-0.new-4958(%Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Document* %6, %html-11.Document** %1
	; AssignStmt
	%7 = load %html-11.Document*, %html-11.Document** %1, align 8
	%8 = getelementptr inbounds %html-11.Document, %html-11.Document* %7, i64 0
	%9 = getelementptr inbounds %html-11.Document, %html-11.Document* %8, i64 0, i32 0
	%10 = load %..string, %..string* %0, align 8
	store %..string %10, %..string* %9
	; AssignStmt
	%11 = load %html-11.Document*, %html-11.Document** %1, align 8
	%12 = getelementptr inbounds %html-11.Document, %html-11.Document* %11, i64 0
	%13 = getelementptr inbounds %html-11.Document, %html-11.Document* %12, i64 0, i32 3
	%14 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$ac, i64 0, i32 0), i64 4}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %14, %html-11.Element** %13
	; AssignStmt
	%15 = load %html-11.Document*, %html-11.Document** %1, align 8
	%16 = getelementptr inbounds %html-11.Document, %html-11.Document* %15, i64 0
	%17 = getelementptr inbounds %html-11.Document, %html-11.Document* %16, i64 0, i32 4
	%18 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$ad, i64 0, i32 0), i64 4}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %18, %html-11.Element** %17
	; ReturnStmt
	%19 = load %html-11.Document*, %html-11.Document** %1, align 8
	ret %html-11.Document* %19
}

define %html-11.Element* @html-11.make_element(%..string %name, %..string %body, %..string %class, %..string %id, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %..string, align 16
	%3 = alloca %..string, align 16
	%4 = alloca %html-11.Element*, align 16
	%5 = alloca %Source_Code_Location, align 16
	%6 = alloca %__Map_Header, align 16
	%7 = alloca %__Map_Key, align 16
	%8 = alloca %..string, align 16
	%9 = alloca %__Map_Header, align 16
	%10 = alloca %__Map_Key, align 16
	%11 = alloca %Source_Code_Location, align 16
	%12 = alloca %__Map_Header, align 16
	%13 = alloca %__Map_Key, align 16
	%14 = alloca %..string, align 16
	%15 = alloca %__Map_Header, align 16
	%16 = alloca %__Map_Key, align 16
	%17 = alloca %Source_Code_Location, align 16
	
	store %..string %name, %..string* %0
	
	store %..string %body, %..string* %1
	
	store %..string %class, %..string* %2
	
	store %..string %id, %..string* %3
	; el
	
	%18 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$ae, i64 0, i32 0), i64 52}, i64 99, i64 8, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$af, i64 0, i32 0), i64 12})
	%19 = bitcast %Source_Code_Location* %5 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %18, %Source_Code_Location* %5
	%21 = call %html-11.Element* @_preload-0.new-4969(%Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %21, %html-11.Element** %4
	; AssignStmt
	; SelectorExpr
	%22 = load %html-11.Element*, %html-11.Element** %4, align 8
	%23 = getelementptr inbounds %html-11.Element, %html-11.Element* %22, i64 0
	%24 = getelementptr inbounds %html-11.Element, %html-11.Element* %23, i64 0, i32 0
	%25 = load %..string, %..string* %0, align 8
	store %..string %25, %..string* %24
	; AssignStmt
	; SelectorExpr
	%26 = load %html-11.Element*, %html-11.Element** %4, align 8
	%27 = getelementptr inbounds %html-11.Element, %html-11.Element* %26, i64 0
	%28 = getelementptr inbounds %html-11.Element, %html-11.Element* %27, i64 0, i32 1
	%29 = load %..string, %..string* %1, align 8
	store %..string %29, %..string* %28
	; IfStmt
	%30 = load %..string, %..string* %2, align 8
	%31 = call i8 @__string_ne(%..string %30, %..string zeroinitializer)
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %html-11.Element*, %html-11.Element** %4, align 8
	%34 = getelementptr inbounds %html-11.Element, %html-11.Element* %33, i64 0
	%35 = getelementptr inbounds %html-11.Element, %html-11.Element* %34, i64 0, i32 2
	%36 = load %..string, %..string* %2, align 8
	%37 = bitcast %__Map_Header* %6 to %..rawptr
	%38 = call %..rawptr @__mem_zero(%..rawptr %37, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %6
	%39 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 0
	%40 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %35 to %raw-5.Map*
	store %raw-5.Map* %40, %raw-5.Map** %39
	%41 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 1
	store i8 1, i8* %41
	%42 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 2
	store i64 48, i64* %42
	%43 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 3
	store i64 8, i64* %43
	%44 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 4
	store i64 32, i64* %44
	%45 = getelementptr inbounds %__Map_Header, %__Map_Header* %6, i64 0, i32 5
	store i64 16, i64* %45
	%46 = load %__Map_Header, %__Map_Header* %6, align 8
	%47 = bitcast %__Map_Key* %7 to %..rawptr
	%48 = call %..rawptr @__mem_zero(%..rawptr %47, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %7
	%49 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 0
	store i64 -3380420371054613601, i64* %49
	%50 = getelementptr inbounds %__Map_Key, %__Map_Key* %7, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$b0, i64 0, i32 0), i64 5}, %..string* %50
	%51 = load %__Map_Key, %__Map_Key* %7, align 8
	%52 = bitcast %..string* %8 to %..rawptr
	%53 = call %..rawptr @__mem_zero(%..rawptr %52, i64 16)
	store %..string zeroinitializer, %..string* %8
	store %..string %36, %..string* %8
	%54 = bitcast %..string* %8 to %..rawptr
	%55 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$b1, i64 0, i32 0), i64 12})
	%56 = bitcast %__Map_Header* %9 to %..rawptr
	%57 = call %..rawptr @__mem_zero(%..rawptr %56, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %9
	store %__Map_Header %46, %__Map_Header* %9
	%58 = bitcast %__Map_Key* %10 to %..rawptr
	%59 = call %..rawptr @__mem_zero(%..rawptr %58, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %10
	store %__Map_Key %51, %__Map_Key* %10
	%60 = bitcast %Source_Code_Location* %11 to %..rawptr
	%61 = call %..rawptr @__mem_zero(%..rawptr %60, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %11
	store %Source_Code_Location %55, %Source_Code_Location* %11
	call void @__dynamic_map_set(%__Map_Header* %9, %__Map_Key* %10, %..rawptr %54, %Source_Code_Location* %11, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-2

if.done-2:
	; IfStmt
	%62 = load %..string, %..string* %3, align 8
	%63 = call i8 @__string_ne(%..string %62, %..string zeroinitializer)
	%64 = trunc i8 %63 to i1
	br i1 %64, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%65 = load %html-11.Element*, %html-11.Element** %4, align 8
	%66 = getelementptr inbounds %html-11.Element, %html-11.Element* %65, i64 0
	%67 = getelementptr inbounds %html-11.Element, %html-11.Element* %66, i64 0, i32 2
	%68 = load %..string, %..string* %3, align 8
	%69 = bitcast %__Map_Header* %12 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %12
	%71 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 0
	%72 = bitcast {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %67 to %raw-5.Map*
	store %raw-5.Map* %72, %raw-5.Map** %71
	%73 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 1
	store i8 1, i8* %73
	%74 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 2
	store i64 48, i64* %74
	%75 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 3
	store i64 8, i64* %75
	%76 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 4
	store i64 32, i64* %76
	%77 = getelementptr inbounds %__Map_Header, %__Map_Header* %12, i64 0, i32 5
	store i64 16, i64* %77
	%78 = load %__Map_Header, %__Map_Header* %12, align 8
	%79 = bitcast %__Map_Key* %13 to %..rawptr
	%80 = call %..rawptr @__mem_zero(%..rawptr %79, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %13
	%81 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 0
	store i64 628021283683842752, i64* %81
	%82 = getelementptr inbounds %__Map_Key, %__Map_Key* %13, i64 0, i32 1
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$b2, i64 0, i32 0), i64 2}, %..string* %82
	%83 = load %__Map_Key, %__Map_Key* %13, align 8
	%84 = bitcast %..string* %14 to %..rawptr
	%85 = call %..rawptr @__mem_zero(%..rawptr %84, i64 16)
	store %..string zeroinitializer, %..string* %14
	store %..string %68, %..string* %14
	%86 = bitcast %..string* %14 to %..rawptr
	%87 = call %Source_Code_Location @make_source_code_location(%..string zeroinitializer, i64 0, i64 0, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$b3, i64 0, i32 0), i64 12})
	%88 = bitcast %__Map_Header* %15 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 48)
	store %__Map_Header zeroinitializer, %__Map_Header* %15
	store %__Map_Header %78, %__Map_Header* %15
	%90 = bitcast %__Map_Key* %16 to %..rawptr
	%91 = call %..rawptr @__mem_zero(%..rawptr %90, i64 24)
	store %__Map_Key zeroinitializer, %__Map_Key* %16
	store %__Map_Key %83, %__Map_Key* %16
	%92 = bitcast %Source_Code_Location* %17 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %17
	store %Source_Code_Location %87, %Source_Code_Location* %17
	call void @__dynamic_map_set(%__Map_Header* %15, %__Map_Key* %16, %..rawptr %86, %Source_Code_Location* %17, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-4

if.done-4:
	; ReturnStmt
	%94 = load %html-11.Element*, %html-11.Element** %4, align 8
	ret %html-11.Element* %94
}

define %html-11.Element* @html-11.div(%Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	; ReturnStmt
	%0 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$b4, i64 0, i32 0), i64 3}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	ret %html-11.Element* %0
}

define %html-11.Element* @html-11.h(%..string %text, i64 %level, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca %html-11.Element*, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca %..any, align 16
	%5 = alloca {%..any*, i64}, align 16
	%6 = alloca [1 x %..any], align 16
	%7 = alloca {%..any*, i64}, align 16
	
	store %..string %text, %..string* %0
	
	store i64 %level, i64* %1
	; el
	
	%8 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$b5, i64 0, i32 0), i64 52}, i64 115, i64 8, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$b6, i64 0, i32 0), i64 1})
	%9 = bitcast %Source_Code_Location* %3 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %8, %Source_Code_Location* %3
	%11 = call %html-11.Element* @_preload-0.new-4969(%Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %11, %html-11.Element** %2
	; AssignStmt
	; SelectorExpr
	%12 = load %html-11.Element*, %html-11.Element** %2, align 8
	%13 = getelementptr inbounds %html-11.Element, %html-11.Element* %12, i64 0
	%14 = getelementptr inbounds %html-11.Element, %html-11.Element* %13, i64 0, i32 0
	; SelectorExpr
	%15 = load i64, i64* %1, align 8
	%16 = bitcast %..any* %4 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 16)
	store %..any zeroinitializer, %..any* %4
	%18 = bitcast i64* %1 to %..rawptr
	%19 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%20 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %..rawptr %18, %..rawptr* %20
	%21 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %19, %Type_Info** %21
	%22 = load %..any, %..any* %4, align 8
	; variadic call argument generation
	%23 = bitcast {%..any*, i64}* %5 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %5
	%25 = bitcast [1 x %..any]* %6 to %..rawptr
	%26 = call %..rawptr @__mem_zero(%..rawptr %25, i64 16)
	store [1 x %..any] zeroinitializer, [1 x %..any]* %6
	%27 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	store %..any %22, %..any* %27
	%28 = getelementptr inbounds [1 x %..any], [1 x %..any]* %6, i64 0, i32 0
	%29 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %5, i64 0, i32 0
	store %..any* %28, %..any** %29
	%30 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %5, i64 0, i32 1
	store i64 1, i64* %30
	%31 = load {%..any*, i64}, {%..any*, i64}* %5, align 8
	%32 = bitcast {%..any*, i64}* %7 to %..rawptr
	%33 = call %..rawptr @__mem_zero(%..rawptr %32, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %7
	store {%..any*, i64} %31, {%..any*, i64}* %7
	%34 = call %..string @fmt-14.aprintf(%..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$b7, i64 0, i32 0), i64 3}, {%..any*, i64}* %7, %Context* noalias nonnull %__.context_ptr)
	store %..string %34, %..string* %14
	; AssignStmt
	; SelectorExpr
	%35 = load %html-11.Element*, %html-11.Element** %2, align 8
	%36 = getelementptr inbounds %html-11.Element, %html-11.Element* %35, i64 0
	%37 = getelementptr inbounds %html-11.Element, %html-11.Element* %36, i64 0, i32 1
	%38 = load %..string, %..string* %0, align 8
	store %..string %38, %..string* %37
	; ReturnStmt
	%39 = load %html-11.Element*, %html-11.Element** %2, align 8
	ret %html-11.Element* %39
}

define %html-11.Element* @html-11.p(%..string %text, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %html-11.Element*, align 16
	%2 = alloca %Source_Code_Location, align 16
	
	store %..string %text, %..string* %0
	; el
	
	%3 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$b8, i64 0, i32 0), i64 52}, i64 124, i64 8, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$b9, i64 0, i32 0), i64 1})
	%4 = bitcast %Source_Code_Location* %2 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %3, %Source_Code_Location* %2
	%6 = call %html-11.Element* @_preload-0.new-4969(%Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	store %html-11.Element* %6, %html-11.Element** %1
	; AssignStmt
	; SelectorExpr
	%7 = load %html-11.Element*, %html-11.Element** %1, align 8
	%8 = getelementptr inbounds %html-11.Element, %html-11.Element* %7, i64 0
	%9 = getelementptr inbounds %html-11.Element, %html-11.Element* %8, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$ba, i64 0, i32 0), i64 1}, %..string* %9
	; AssignStmt
	; SelectorExpr
	%10 = load %html-11.Element*, %html-11.Element** %1, align 8
	%11 = getelementptr inbounds %html-11.Element, %html-11.Element* %10, i64 0
	%12 = getelementptr inbounds %html-11.Element, %html-11.Element* %11, i64 0, i32 1
	%13 = load %..string, %..string* %0, align 8
	store %..string %13, %..string* %12
	; ReturnStmt
	%14 = load %html-11.Element*, %html-11.Element** %1, align 8
	ret %html-11.Element* %14
}

define %html-11.Element* @html-11.hr(%Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	; ReturnStmt
	%0 = call %html-11.Element* @html-11.make_element(%..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$bb, i64 0, i32 0), i64 2}, %..string zeroinitializer, %..string zeroinitializer, %..string zeroinitializer, %Context* noalias nonnull %__.context_ptr)
	ret %html-11.Element* %0
}

define void @html-11.append_to_document(%html-11.Document* %doc, %html-11.Element* %child, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %html-11.Element*, align 16
	%2 = alloca {%html-11.Element**, i64}, align 16
	%3 = alloca [1 x %html-11.Element*], align 16
	%4 = alloca {%html-11.Element**, i64}, align 16
	%5 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	store %html-11.Element* %child, %html-11.Element** %1
	; SelectorExpr
	%6 = load %html-11.Document*, %html-11.Document** %0, align 8
	%7 = getelementptr inbounds %html-11.Document, %html-11.Document* %6, i64 0
	%8 = getelementptr inbounds %html-11.Document, %html-11.Document* %7, i64 0, i32 4
	%9 = load %html-11.Element*, %html-11.Element** %8, align 8
	%10 = getelementptr inbounds %html-11.Element, %html-11.Element* %9, i64 0
	%11 = getelementptr inbounds %html-11.Element, %html-11.Element* %10, i64 0, i32 3
	%12 = getelementptr inbounds {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %11, i64 0
	%13 = load %html-11.Element*, %html-11.Element** %1, align 8
	; variadic call argument generation
	%14 = bitcast {%html-11.Element**, i64}* %2 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 16)
	store {%html-11.Element**, i64} zeroinitializer, {%html-11.Element**, i64}* %2
	%16 = bitcast [1 x %html-11.Element*]* %3 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store [1 x %html-11.Element*] zeroinitializer, [1 x %html-11.Element*]* %3
	%18 = getelementptr inbounds [1 x %html-11.Element*], [1 x %html-11.Element*]* %3, i64 0, i32 0
	store %html-11.Element* %13, %html-11.Element** %18
	%19 = getelementptr inbounds [1 x %html-11.Element*], [1 x %html-11.Element*]* %3, i64 0, i32 0
	%20 = getelementptr inbounds {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, i64 0, i32 0
	store %html-11.Element** %19, %html-11.Element*** %20
	%21 = getelementptr inbounds {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, i64 0, i32 1
	store i64 1, i64* %21
	%22 = load {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, align 8
	%23 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$bc, i64 0, i32 0), i64 52}, i64 210, i64 2, %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$bd, i64 0, i32 0), i64 18})
	%24 = bitcast {%html-11.Element**, i64}* %4 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store {%html-11.Element**, i64} zeroinitializer, {%html-11.Element**, i64}* %4
	store {%html-11.Element**, i64} %22, {%html-11.Element**, i64}* %4
	%26 = bitcast %Source_Code_Location* %5 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %23, %Source_Code_Location* %5
	%28 = call i64 @_preload-0.append-5089({%html-11.Element**, i64, i64, %Allocator}* %12, {%html-11.Element**, i64}* %4, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @html-11.append_to_element(%html-11.Element* %parent, %html-11.Element* %child, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca %html-11.Element*, align 16
	%2 = alloca {%html-11.Element**, i64}, align 16
	%3 = alloca [1 x %html-11.Element*], align 16
	%4 = alloca {%html-11.Element**, i64}, align 16
	%5 = alloca %Source_Code_Location, align 16
	
	store %html-11.Element* %parent, %html-11.Element** %0
	
	store %html-11.Element* %child, %html-11.Element** %1
	; SelectorExpr
	%6 = load %html-11.Element*, %html-11.Element** %0, align 8
	%7 = getelementptr inbounds %html-11.Element, %html-11.Element* %6, i64 0
	%8 = getelementptr inbounds %html-11.Element, %html-11.Element* %7, i64 0, i32 3
	%9 = getelementptr inbounds {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %8, i64 0
	%10 = load %html-11.Element*, %html-11.Element** %1, align 8
	; variadic call argument generation
	%11 = bitcast {%html-11.Element**, i64}* %2 to %..rawptr
	%12 = call %..rawptr @__mem_zero(%..rawptr %11, i64 16)
	store {%html-11.Element**, i64} zeroinitializer, {%html-11.Element**, i64}* %2
	%13 = bitcast [1 x %html-11.Element*]* %3 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 8)
	store [1 x %html-11.Element*] zeroinitializer, [1 x %html-11.Element*]* %3
	%15 = getelementptr inbounds [1 x %html-11.Element*], [1 x %html-11.Element*]* %3, i64 0, i32 0
	store %html-11.Element* %10, %html-11.Element** %15
	%16 = getelementptr inbounds [1 x %html-11.Element*], [1 x %html-11.Element*]* %3, i64 0, i32 0
	%17 = getelementptr inbounds {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, i64 0, i32 0
	store %html-11.Element** %16, %html-11.Element*** %17
	%18 = getelementptr inbounds {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, i64 0, i32 1
	store i64 1, i64* %18
	%19 = load {%html-11.Element**, i64}, {%html-11.Element**, i64}* %2, align 8
	%20 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$be, i64 0, i32 0), i64 52}, i64 214, i64 2, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$bf, i64 0, i32 0), i64 17})
	%21 = bitcast {%html-11.Element**, i64}* %4 to %..rawptr
	%22 = call %..rawptr @__mem_zero(%..rawptr %21, i64 16)
	store {%html-11.Element**, i64} zeroinitializer, {%html-11.Element**, i64}* %4
	store {%html-11.Element**, i64} %19, {%html-11.Element**, i64}* %4
	%23 = bitcast %Source_Code_Location* %5 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %20, %Source_Code_Location* %5
	%25 = call i64 @_preload-0.append-5089({%html-11.Element**, i64, i64, %Allocator}* %9, {%html-11.Element**, i64}* %4, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @html-11.append_string_indented(%html-11.GenOptions* %options, %..string %text, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca {%..string*, i64}, align 16
	%5 = alloca [1 x %..string], align 16
	%6 = alloca {%..string*, i64}, align 16
	%7 = alloca %Source_Code_Location, align 16
	%8 = alloca {%..string*, i64}, align 16
	%9 = alloca [1 x %..string], align 16
	%10 = alloca {%..string*, i64}, align 16
	%11 = alloca %Source_Code_Location, align 16
	%12 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	
	store %..string %text, %..string* %0
	; IfStmt
	%13 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 2
	%14 = load i8, i8* %13, align 1
	%15 = trunc i8 %14 to i1
	br i1 %15, label %if.then-1, label %if.done-5

if.then-1:
	; RangeStmt
	; i
	%16 = bitcast i64* %1 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store i64 zeroinitializer, i64* %1
	
	%18 = bitcast i64* %2 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 8)
	store i64 zeroinitializer, i64* %2
	store i64 0, i64* %2
	%20 = bitcast i64* %3 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	br label %for.interval.loop-2

for.interval.loop-2:
	%22 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 3
	%23 = load i64, i64* %22, align 8
	%24 = load i64, i64* %2, align 8
	%25 = icmp slt i64 %24, %23
	br i1 %25, label %for.interval.body-3, label %for.interval.done-4

for.interval.body-3:
	%26 = load i64, i64* %2, align 8
	%27 = load i64, i64* %3, align 8
	%28 = load i64, i64* %2, align 8
	%29 = add i64 %28, 1
	store i64 %29, i64* %2
	%30 = load i64, i64* %3, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %3
	store i64 %26, i64* %1
	%32 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%33 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %32, align 8
	%34 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 4
	%35 = load %..string, %..string* %34, align 8
	; variadic call argument generation
	%36 = bitcast {%..string*, i64}* %4 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %4
	%38 = bitcast [1 x %..string]* %5 to %..rawptr
	%39 = call %..rawptr @__mem_zero(%..rawptr %38, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %5
	%40 = getelementptr inbounds [1 x %..string], [1 x %..string]* %5, i64 0, i32 0
	store %..string %35, %..string* %40
	%41 = getelementptr inbounds [1 x %..string], [1 x %..string]* %5, i64 0, i32 0
	%42 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %4, i64 0, i32 0
	store %..string* %41, %..string** %42
	%43 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %4, i64 0, i32 1
	store i64 1, i64* %43
	%44 = load {%..string*, i64}, {%..string*, i64}* %4, align 8
	%45 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$c0, i64 0, i32 0), i64 52}, i64 225, i64 3, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$c1, i64 0, i32 0), i64 22})
	%46 = bitcast {%..string*, i64}* %6 to %..rawptr
	%47 = call %..rawptr @__mem_zero(%..rawptr %46, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %6
	store {%..string*, i64} %44, {%..string*, i64}* %6
	%48 = bitcast %Source_Code_Location* %7 to %..rawptr
	%49 = call %..rawptr @__mem_zero(%..rawptr %48, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %45, %Source_Code_Location* %7
	%50 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %33, {%..string*, i64}* %6, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-2

for.interval.done-4:
	br label %if.done-5

if.done-5:
	%51 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%52 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %51, align 8
	%53 = load %..string, %..string* %0, align 8
	; variadic call argument generation
	%54 = bitcast {%..string*, i64}* %8 to %..rawptr
	%55 = call %..rawptr @__mem_zero(%..rawptr %54, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %8
	%56 = bitcast [1 x %..string]* %9 to %..rawptr
	%57 = call %..rawptr @__mem_zero(%..rawptr %56, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %9
	%58 = getelementptr inbounds [1 x %..string], [1 x %..string]* %9, i64 0, i32 0
	store %..string %53, %..string* %58
	%59 = getelementptr inbounds [1 x %..string], [1 x %..string]* %9, i64 0, i32 0
	%60 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %8, i64 0, i32 0
	store %..string* %59, %..string** %60
	%61 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %8, i64 0, i32 1
	store i64 1, i64* %61
	%62 = load {%..string*, i64}, {%..string*, i64}* %8, align 8
	%63 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$c2, i64 0, i32 0), i64 52}, i64 227, i64 2, %..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$c3, i64 0, i32 0), i64 22})
	%64 = bitcast {%..string*, i64}* %10 to %..rawptr
	%65 = call %..rawptr @__mem_zero(%..rawptr %64, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %10
	store {%..string*, i64} %62, {%..string*, i64}* %10
	%66 = bitcast %Source_Code_Location* %11 to %..rawptr
	%67 = call %..rawptr @__mem_zero(%..rawptr %66, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %11
	store %Source_Code_Location %63, %Source_Code_Location* %11
	%68 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %52, {%..string*, i64}* %10, %Source_Code_Location* %11, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define i8 @html-11.validate_element(%html-11.Element* %el, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca i32, align 16
	%2 = alloca i64, align 16
	%3 = alloca %..string, align 16
	%4 = alloca %..any, align 16
	%5 = alloca %..any, align 16
	%6 = alloca {%..any*, i64}, align 16
	%7 = alloca [2 x %..any], align 16
	%8 = alloca {%..any*, i64}, align 16
	
	store %html-11.Element* %el, %html-11.Element** %0
	; RangeStmt
	; r
	%9 = bitcast i32* %1 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 4)
	store i32 zeroinitializer, i32* %1
	
	%11 = load %html-11.Element*, %html-11.Element** %0, align 8
	%12 = getelementptr inbounds %html-11.Element, %html-11.Element* %11, i64 0
	%13 = getelementptr inbounds %html-11.Element, %html-11.Element* %12, i64 0, i32 0
	%14 = load %..string, %..string* %13, align 8
	%15 = extractvalue %..string %14, 1
	%16 = bitcast i64* %2 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store i64 zeroinitializer, i64* %2
	store i64 0, i64* %2
	br label %for.string.loop-1

for.string.loop-1:
	%18 = load i64, i64* %2, align 8
	%19 = icmp slt i64 %18, %15
	br i1 %19, label %for.string.body-2, label %for.string.done-12

for.string.body-2:
	%20 = extractvalue %..string %14, 0
	%21 = getelementptr inbounds i8, i8* %20, i64 %18
	%22 = sub i64 %15, %18
	%23 = bitcast %..string* %3 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 16)
	store %..string zeroinitializer, %..string* %3
	%25 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 0
	store i8* %21, i8** %25
	%26 = getelementptr inbounds %..string, %..string* %3, i64 0, i32 1
	store i64 %22, i64* %26
	%27 = load %..string, %..string* %3, align 8
	%28 = call {i32, i64} @__string_decode_rune(%..string %27)
	%29 = extractvalue {i32, i64} %28, 1
	%30 = add i64 %18, %29
	store i64 %30, i64* %2
	%31 = extractvalue {i32, i64} %28, 0
	store i32 %31, i32* %1
	; IfStmt
	%32 = load i32, i32* %1, align 4
	%33 = icmp sge i32 %32, 48
	%34 = zext i1 %33 to i8
	%35 = trunc i8 %34 to i1
	br i1 %35, label %cmp.and-3, label %if.done-5

cmp.and-3:
	%36 = load i32, i32* %1, align 4
	%37 = icmp sle i32 %36, 57
	%38 = zext i1 %37 to i8
	%39 = trunc i8 %38 to i1
	br i1 %39, label %if.then-4, label %if.done-5

if.then-4:
	; continue
	br label %for.string.loop-1

if.done-5:
	; IfStmt
	%40 = load i32, i32* %1, align 4
	%41 = icmp sge i32 %40, 97
	%42 = zext i1 %41 to i8
	%43 = trunc i8 %42 to i1
	br i1 %43, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%44 = load i32, i32* %1, align 4
	%45 = icmp sle i32 %44, 122
	%46 = zext i1 %45 to i8
	%47 = trunc i8 %46 to i1
	br i1 %47, label %if.then-7, label %if.done-8

if.then-7:
	; continue
	br label %for.string.loop-1

if.done-8:
	; IfStmt
	%48 = load i32, i32* %1, align 4
	%49 = icmp sge i32 %48, 65
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %cmp.and-9, label %if.done-11

cmp.and-9:
	%52 = load i32, i32* %1, align 4
	%53 = icmp sle i32 %52, 90
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-10, label %if.done-11

if.then-10:
	; continue
	br label %for.string.loop-1

if.done-11:
	; SelectorExpr
	%56 = load i32, i32* %1, align 4
	%57 = load %html-11.Element*, %html-11.Element** %0, align 8
	%58 = getelementptr inbounds %html-11.Element, %html-11.Element* %57, i64 0
	%59 = getelementptr inbounds %html-11.Element, %html-11.Element* %58, i64 0, i32 0
	%60 = load %..string, %..string* %59, align 8
	%61 = bitcast %..any* %4 to %..rawptr
	%62 = call %..rawptr @__mem_zero(%..rawptr %61, i64 16)
	store %..any zeroinitializer, %..any* %4
	%63 = bitcast i32* %1 to %..rawptr
	%64 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	%65 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %..rawptr %63, %..rawptr* %65
	%66 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %64, %Type_Info** %66
	%67 = load %..any, %..any* %4, align 8
	%68 = bitcast %..any* %5 to %..rawptr
	%69 = call %..rawptr @__mem_zero(%..rawptr %68, i64 16)
	store %..any zeroinitializer, %..any* %5
	%70 = bitcast %..string* %59 to %..rawptr
	%71 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%72 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	store %..rawptr %70, %..rawptr* %72
	%73 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %71, %Type_Info** %73
	%74 = load %..any, %..any* %5, align 8
	; variadic call argument generation
	%75 = bitcast {%..any*, i64}* %6 to %..rawptr
	%76 = call %..rawptr @__mem_zero(%..rawptr %75, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %6
	%77 = bitcast [2 x %..any]* %7 to %..rawptr
	%78 = call %..rawptr @__mem_zero(%..rawptr %77, i64 32)
	store [2 x %..any] zeroinitializer, [2 x %..any]* %7
	%79 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	store %..any %67, %..any* %79
	%80 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 1
	store %..any %74, %..any* %80
	%81 = getelementptr inbounds [2 x %..any], [2 x %..any]* %7, i64 0, i32 0
	%82 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %6, i64 0, i32 0
	store %..any* %81, %..any** %82
	%83 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %6, i64 0, i32 1
	store i64 2, i64* %83
	%84 = load {%..any*, i64}, {%..any*, i64}* %6, align 8
	%85 = bitcast {%..any*, i64}* %8 to %..rawptr
	%86 = call %..rawptr @__mem_zero(%..rawptr %85, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %8
	store {%..any*, i64} %84, {%..any*, i64}* %8
	%87 = call i64 @fmt-14.printf(%..string {i8* getelementptr inbounds ([78 x i8], [78 x i8]* @__str$c4, i64 0, i32 0), i64 77}, {%..any*, i64}* %8, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret i8 0

for.string.done-12:
	; ReturnStmt
	ret i8 1
}

define i8 @html-11.gen_element(%html-11.GenOptions* %options, %html-11.Element* %el, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca %html-11.GenOptions, align 16
	%2 = alloca {%..string*, i64}, align 16
	%3 = alloca [1 x %..string], align 16
	%4 = alloca {%..string*, i64}, align 16
	%5 = alloca %Source_Code_Location, align 16
	%6 = alloca %..string, align 16
	%7 = alloca %..string, align 16
	%8 = alloca i64, align 16
	%9 = alloca %..string, align 16
	%10 = alloca {%..string*, i64}, align 16
	%11 = alloca [1 x %..string], align 16
	%12 = alloca {%..string*, i64}, align 16
	%13 = alloca %Source_Code_Location, align 16
	%14 = alloca {%..string*, i64}, align 16
	%15 = alloca [1 x %..string], align 16
	%16 = alloca {%..string*, i64}, align 16
	%17 = alloca %Source_Code_Location, align 16
	%18 = alloca {%..string*, i64}, align 16
	%19 = alloca [1 x %..string], align 16
	%20 = alloca {%..string*, i64}, align 16
	%21 = alloca %Source_Code_Location, align 16
	%22 = alloca {%..string*, i64}, align 16
	%23 = alloca [1 x %..string], align 16
	%24 = alloca {%..string*, i64}, align 16
	%25 = alloca %Source_Code_Location, align 16
	%26 = alloca {%..string*, i64}, align 16
	%27 = alloca [1 x %..string], align 16
	%28 = alloca {%..string*, i64}, align 16
	%29 = alloca %Source_Code_Location, align 16
	%30 = alloca {%..string*, i64}, align 16
	%31 = alloca [1 x %..string], align 16
	%32 = alloca {%..string*, i64}, align 16
	%33 = alloca %Source_Code_Location, align 16
	%34 = alloca {%..string*, i64}, align 16
	%35 = alloca [1 x %..string], align 16
	%36 = alloca {%..string*, i64}, align 16
	%37 = alloca %Source_Code_Location, align 16
	%38 = alloca {%..string*, i64}, align 16
	%39 = alloca [1 x %..string], align 16
	%40 = alloca {%..string*, i64}, align 16
	%41 = alloca %Source_Code_Location, align 16
	%42 = alloca {%..string*, i64}, align 16
	%43 = alloca [1 x %..string], align 16
	%44 = alloca {%..string*, i64}, align 16
	%45 = alloca %Source_Code_Location, align 16
	%46 = alloca %html-11.GenOptions, align 16
	%47 = alloca {%..string*, i64}, align 16
	%48 = alloca [1 x %..string], align 16
	%49 = alloca {%..string*, i64}, align 16
	%50 = alloca %Source_Code_Location, align 16
	%51 = alloca i64, align 16
	%52 = alloca %html-11.Element*, align 16
	%53 = alloca %html-11.GenOptions, align 16
	%54 = alloca %html-11.GenOptions, align 16
	%55 = alloca {%..string*, i64}, align 16
	%56 = alloca [1 x %..string], align 16
	%57 = alloca {%..string*, i64}, align 16
	%58 = alloca %Source_Code_Location, align 16
	%59 = alloca {%..string*, i64}, align 16
	%60 = alloca [1 x %..string], align 16
	%61 = alloca {%..string*, i64}, align 16
	%62 = alloca %Source_Code_Location, align 16
	%63 = alloca {%..string*, i64}, align 16
	%64 = alloca [1 x %..string], align 16
	%65 = alloca {%..string*, i64}, align 16
	%66 = alloca %Source_Code_Location, align 16
	%67 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	
	store %html-11.Element* %el, %html-11.Element** %0
	; IfStmt
	%68 = load %html-11.Element*, %html-11.Element** %0, align 8
	%69 = call i8 @html-11.validate_element(%html-11.Element* %68, %Context* noalias nonnull %__.context_ptr)
	%70 = icmp eq i8 %69, 0
	%71 = zext i1 %70 to i8
	%72 = trunc i8 %71 to i1
	br i1 %72, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	%73 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	%74 = bitcast %html-11.GenOptions* %1 to %..rawptr
	%75 = call %..rawptr @__mem_zero(%..rawptr %74, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %1
	store %html-11.GenOptions %73, %html-11.GenOptions* %1
	call void @html-11.append_string_indented(%html-11.GenOptions* %1, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$c5, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%76 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%77 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %76, align 8
	%78 = load %html-11.Element*, %html-11.Element** %0, align 8
	%79 = getelementptr inbounds %html-11.Element, %html-11.Element* %78, i64 0
	%80 = getelementptr inbounds %html-11.Element, %html-11.Element* %79, i64 0, i32 0
	%81 = load %..string, %..string* %80, align 8
	; variadic call argument generation
	%82 = bitcast {%..string*, i64}* %2 to %..rawptr
	%83 = call %..rawptr @__mem_zero(%..rawptr %82, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %2
	%84 = bitcast [1 x %..string]* %3 to %..rawptr
	%85 = call %..rawptr @__mem_zero(%..rawptr %84, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %3
	%86 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	store %..string %81, %..string* %86
	%87 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	%88 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 0
	store %..string* %87, %..string** %88
	%89 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %89
	%90 = load {%..string*, i64}, {%..string*, i64}* %2, align 8
	%91 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$c6, i64 0, i32 0), i64 52}, i64 250, i64 2, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$c7, i64 0, i32 0), i64 11})
	%92 = bitcast {%..string*, i64}* %4 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %4
	store {%..string*, i64} %90, {%..string*, i64}* %4
	%94 = bitcast %Source_Code_Location* %5 to %..rawptr
	%95 = call %..rawptr @__mem_zero(%..rawptr %94, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %91, %Source_Code_Location* %5
	%96 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %77, {%..string*, i64}* %4, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; key
	%97 = bitcast %..string* %6 to %..rawptr
	%98 = call %..rawptr @__mem_zero(%..rawptr %97, i64 16)
	store %..string zeroinitializer, %..string* %6
	
	; value
	%99 = bitcast %..string* %7 to %..rawptr
	%100 = call %..rawptr @__mem_zero(%..rawptr %99, i64 16)
	store %..string zeroinitializer, %..string* %7
	
	%101 = load %html-11.Element*, %html-11.Element** %0, align 8
	%102 = getelementptr inbounds %html-11.Element, %html-11.Element* %101, i64 0
	%103 = getelementptr inbounds %html-11.Element, %html-11.Element* %102, i64 0, i32 2
	%104 = getelementptr inbounds {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %103, i64 0, i32 1
	%105 = getelementptr inbounds {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}* %104, i64 0, i32 1
	%106 = bitcast i64* %8 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store i64 zeroinitializer, i64* %8
	store i64 -1, i64* %8
	br label %for.index.loop-3

for.index.loop-3:
	%108 = load i64, i64* %8, align 8
	%109 = add i64 %108, 1
	store i64 %109, i64* %8
	%110 = load i64, i64* %105, align 8
	%111 = icmp slt i64 %109, %110
	br i1 %111, label %for.index.body-4, label %for.index.done-5

for.index.body-4:
	%112 = load i64, i64* %8, align 8
	%113 = bitcast %..string* %9 to %..rawptr
	%114 = call %..rawptr @__mem_zero(%..rawptr %113, i64 16)
	store %..string zeroinitializer, %..string* %9
	%115 = getelementptr inbounds {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %103, i64 0, i32 1
	%116 = getelementptr inbounds {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}* %115, i64 0, i32 0
	%117 = load {%__Map_Key, i64, %..string}*, {%__Map_Key, i64, %..string}** %116, align 8
	%118 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %117, i64 %112
	%119 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %118, i64 0, i32 2
	%120 = load %..string, %..string* %119, align 8
	%121 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %118, i64 0, i32 0
	%122 = getelementptr inbounds %__Map_Key, %__Map_Key* %121, i64 0, i32 1
	%123 = load %..string, %..string* %122, align 8
	store %..string %123, %..string* %9
	%124 = load %..string, %..string* %9, align 8
	store %..string %124, %..string* %6
	store %..string %120, %..string* %7
	%125 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%126 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %125, align 8
	; variadic call argument generation
	%127 = bitcast {%..string*, i64}* %10 to %..rawptr
	%128 = call %..rawptr @__mem_zero(%..rawptr %127, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %10
	%129 = bitcast [1 x %..string]* %11 to %..rawptr
	%130 = call %..rawptr @__mem_zero(%..rawptr %129, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %11
	%131 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$c8, i64 0, i32 0), i64 1}, %..string* %131
	%132 = getelementptr inbounds [1 x %..string], [1 x %..string]* %11, i64 0, i32 0
	%133 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %10, i64 0, i32 0
	store %..string* %132, %..string** %133
	%134 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %10, i64 0, i32 1
	store i64 1, i64* %134
	%135 = load {%..string*, i64}, {%..string*, i64}* %10, align 8
	%136 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$c9, i64 0, i32 0), i64 52}, i64 252, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$ca, i64 0, i32 0), i64 11})
	%137 = bitcast {%..string*, i64}* %12 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %12
	store {%..string*, i64} %135, {%..string*, i64}* %12
	%139 = bitcast %Source_Code_Location* %13 to %..rawptr
	%140 = call %..rawptr @__mem_zero(%..rawptr %139, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %13
	store %Source_Code_Location %136, %Source_Code_Location* %13
	%141 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %126, {%..string*, i64}* %12, %Source_Code_Location* %13, %Context* noalias nonnull %__.context_ptr)
	%142 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%143 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %142, align 8
	%144 = load %..string, %..string* %6, align 8
	; variadic call argument generation
	%145 = bitcast {%..string*, i64}* %14 to %..rawptr
	%146 = call %..rawptr @__mem_zero(%..rawptr %145, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %14
	%147 = bitcast [1 x %..string]* %15 to %..rawptr
	%148 = call %..rawptr @__mem_zero(%..rawptr %147, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %15
	%149 = getelementptr inbounds [1 x %..string], [1 x %..string]* %15, i64 0, i32 0
	store %..string %144, %..string* %149
	%150 = getelementptr inbounds [1 x %..string], [1 x %..string]* %15, i64 0, i32 0
	%151 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %14, i64 0, i32 0
	store %..string* %150, %..string** %151
	%152 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %14, i64 0, i32 1
	store i64 1, i64* %152
	%153 = load {%..string*, i64}, {%..string*, i64}* %14, align 8
	%154 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$cb, i64 0, i32 0), i64 52}, i64 253, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$cc, i64 0, i32 0), i64 11})
	%155 = bitcast {%..string*, i64}* %16 to %..rawptr
	%156 = call %..rawptr @__mem_zero(%..rawptr %155, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %16
	store {%..string*, i64} %153, {%..string*, i64}* %16
	%157 = bitcast %Source_Code_Location* %17 to %..rawptr
	%158 = call %..rawptr @__mem_zero(%..rawptr %157, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %17
	store %Source_Code_Location %154, %Source_Code_Location* %17
	%159 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %143, {%..string*, i64}* %16, %Source_Code_Location* %17, %Context* noalias nonnull %__.context_ptr)
	%160 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%161 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %160, align 8
	; variadic call argument generation
	%162 = bitcast {%..string*, i64}* %18 to %..rawptr
	%163 = call %..rawptr @__mem_zero(%..rawptr %162, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %18
	%164 = bitcast [1 x %..string]* %19 to %..rawptr
	%165 = call %..rawptr @__mem_zero(%..rawptr %164, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %19
	%166 = getelementptr inbounds [1 x %..string], [1 x %..string]* %19, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$cd, i64 0, i32 0), i64 2}, %..string* %166
	%167 = getelementptr inbounds [1 x %..string], [1 x %..string]* %19, i64 0, i32 0
	%168 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %18, i64 0, i32 0
	store %..string* %167, %..string** %168
	%169 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %18, i64 0, i32 1
	store i64 1, i64* %169
	%170 = load {%..string*, i64}, {%..string*, i64}* %18, align 8
	%171 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$ce, i64 0, i32 0), i64 52}, i64 254, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$cf, i64 0, i32 0), i64 11})
	%172 = bitcast {%..string*, i64}* %20 to %..rawptr
	%173 = call %..rawptr @__mem_zero(%..rawptr %172, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %20
	store {%..string*, i64} %170, {%..string*, i64}* %20
	%174 = bitcast %Source_Code_Location* %21 to %..rawptr
	%175 = call %..rawptr @__mem_zero(%..rawptr %174, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %21
	store %Source_Code_Location %171, %Source_Code_Location* %21
	%176 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %161, {%..string*, i64}* %20, %Source_Code_Location* %21, %Context* noalias nonnull %__.context_ptr)
	%177 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%178 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %177, align 8
	%179 = load %..string, %..string* %7, align 8
	; variadic call argument generation
	%180 = bitcast {%..string*, i64}* %22 to %..rawptr
	%181 = call %..rawptr @__mem_zero(%..rawptr %180, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %22
	%182 = bitcast [1 x %..string]* %23 to %..rawptr
	%183 = call %..rawptr @__mem_zero(%..rawptr %182, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %23
	%184 = getelementptr inbounds [1 x %..string], [1 x %..string]* %23, i64 0, i32 0
	store %..string %179, %..string* %184
	%185 = getelementptr inbounds [1 x %..string], [1 x %..string]* %23, i64 0, i32 0
	%186 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %22, i64 0, i32 0
	store %..string* %185, %..string** %186
	%187 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %22, i64 0, i32 1
	store i64 1, i64* %187
	%188 = load {%..string*, i64}, {%..string*, i64}* %22, align 8
	%189 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$d0, i64 0, i32 0), i64 52}, i64 255, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$d1, i64 0, i32 0), i64 11})
	%190 = bitcast {%..string*, i64}* %24 to %..rawptr
	%191 = call %..rawptr @__mem_zero(%..rawptr %190, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %24
	store {%..string*, i64} %188, {%..string*, i64}* %24
	%192 = bitcast %Source_Code_Location* %25 to %..rawptr
	%193 = call %..rawptr @__mem_zero(%..rawptr %192, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %25
	store %Source_Code_Location %189, %Source_Code_Location* %25
	%194 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %178, {%..string*, i64}* %24, %Source_Code_Location* %25, %Context* noalias nonnull %__.context_ptr)
	%195 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%196 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %195, align 8
	; variadic call argument generation
	%197 = bitcast {%..string*, i64}* %26 to %..rawptr
	%198 = call %..rawptr @__mem_zero(%..rawptr %197, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %26
	%199 = bitcast [1 x %..string]* %27 to %..rawptr
	%200 = call %..rawptr @__mem_zero(%..rawptr %199, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %27
	%201 = getelementptr inbounds [1 x %..string], [1 x %..string]* %27, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$d2, i64 0, i32 0), i64 1}, %..string* %201
	%202 = getelementptr inbounds [1 x %..string], [1 x %..string]* %27, i64 0, i32 0
	%203 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %26, i64 0, i32 0
	store %..string* %202, %..string** %203
	%204 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %26, i64 0, i32 1
	store i64 1, i64* %204
	%205 = load {%..string*, i64}, {%..string*, i64}* %26, align 8
	%206 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$d3, i64 0, i32 0), i64 52}, i64 256, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$d4, i64 0, i32 0), i64 11})
	%207 = bitcast {%..string*, i64}* %28 to %..rawptr
	%208 = call %..rawptr @__mem_zero(%..rawptr %207, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %28
	store {%..string*, i64} %205, {%..string*, i64}* %28
	%209 = bitcast %Source_Code_Location* %29 to %..rawptr
	%210 = call %..rawptr @__mem_zero(%..rawptr %209, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %29
	store %Source_Code_Location %206, %Source_Code_Location* %29
	%211 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %196, {%..string*, i64}* %28, %Source_Code_Location* %29, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-3

for.index.done-5:
	; IfStmt
	%212 = load %html-11.Element*, %html-11.Element** %0, align 8
	%213 = getelementptr inbounds %html-11.Element, %html-11.Element* %212, i64 0
	%214 = getelementptr inbounds %html-11.Element, %html-11.Element* %213, i64 0, i32 1
	%215 = load %..string, %..string* %214, align 8
	%216 = call i8 @__string_eq(%..string %215, %..string zeroinitializer)
	%217 = trunc i8 %216 to i1
	br i1 %217, label %cmp.and-6, label %if.else-10

cmp.and-6:
	%218 = load %html-11.Element*, %html-11.Element** %0, align 8
	%219 = getelementptr inbounds %html-11.Element, %html-11.Element* %218, i64 0
	%220 = getelementptr inbounds %html-11.Element, %html-11.Element* %219, i64 0, i32 3
	%221 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %220, align 8
	%222 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %221, 1
	%223 = icmp eq i64 %222, 0
	%224 = zext i1 %223 to i8
	%225 = trunc i8 %224 to i1
	br i1 %225, label %if.then-7, label %if.else-10

if.then-7:
	%226 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%227 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %226, align 8
	; variadic call argument generation
	%228 = bitcast {%..string*, i64}* %30 to %..rawptr
	%229 = call %..rawptr @__mem_zero(%..rawptr %228, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %30
	%230 = bitcast [1 x %..string]* %31 to %..rawptr
	%231 = call %..rawptr @__mem_zero(%..rawptr %230, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %31
	%232 = getelementptr inbounds [1 x %..string], [1 x %..string]* %31, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$d5, i64 0, i32 0), i64 2}, %..string* %232
	%233 = getelementptr inbounds [1 x %..string], [1 x %..string]* %31, i64 0, i32 0
	%234 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %30, i64 0, i32 0
	store %..string* %233, %..string** %234
	%235 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %30, i64 0, i32 1
	store i64 1, i64* %235
	%236 = load {%..string*, i64}, {%..string*, i64}* %30, align 8
	%237 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$d6, i64 0, i32 0), i64 52}, i64 260, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$d7, i64 0, i32 0), i64 11})
	%238 = bitcast {%..string*, i64}* %32 to %..rawptr
	%239 = call %..rawptr @__mem_zero(%..rawptr %238, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %32
	store {%..string*, i64} %236, {%..string*, i64}* %32
	%240 = bitcast %Source_Code_Location* %33 to %..rawptr
	%241 = call %..rawptr @__mem_zero(%..rawptr %240, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %33
	store %Source_Code_Location %237, %Source_Code_Location* %33
	%242 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %227, {%..string*, i64}* %32, %Source_Code_Location* %33, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%243 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 1
	%244 = load i8, i8* %243, align 1
	%245 = trunc i8 %244 to i1
	br i1 %245, label %if.then-8, label %if.done-9

if.then-8:
	%246 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%247 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %246, align 8
	; variadic call argument generation
	%248 = bitcast {%..string*, i64}* %34 to %..rawptr
	%249 = call %..rawptr @__mem_zero(%..rawptr %248, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %34
	%250 = bitcast [1 x %..string]* %35 to %..rawptr
	%251 = call %..rawptr @__mem_zero(%..rawptr %250, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %35
	%252 = getelementptr inbounds [1 x %..string], [1 x %..string]* %35, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$d8, i64 0, i32 0), i64 1}, %..string* %252
	%253 = getelementptr inbounds [1 x %..string], [1 x %..string]* %35, i64 0, i32 0
	%254 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %34, i64 0, i32 0
	store %..string* %253, %..string** %254
	%255 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %34, i64 0, i32 1
	store i64 1, i64* %255
	%256 = load {%..string*, i64}, {%..string*, i64}* %34, align 8
	%257 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$d9, i64 0, i32 0), i64 52}, i64 261, i64 24, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$da, i64 0, i32 0), i64 11})
	%258 = bitcast {%..string*, i64}* %36 to %..rawptr
	%259 = call %..rawptr @__mem_zero(%..rawptr %258, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %36
	store {%..string*, i64} %256, {%..string*, i64}* %36
	%260 = bitcast %Source_Code_Location* %37 to %..rawptr
	%261 = call %..rawptr @__mem_zero(%..rawptr %260, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %37
	store %Source_Code_Location %257, %Source_Code_Location* %37
	%262 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %247, {%..string*, i64}* %36, %Source_Code_Location* %37, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-9

if.done-9:
	br label %if.done-24

if.else-10:
	%263 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%264 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %263, align 8
	; variadic call argument generation
	%265 = bitcast {%..string*, i64}* %38 to %..rawptr
	%266 = call %..rawptr @__mem_zero(%..rawptr %265, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %38
	%267 = bitcast [1 x %..string]* %39 to %..rawptr
	%268 = call %..rawptr @__mem_zero(%..rawptr %267, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %39
	%269 = getelementptr inbounds [1 x %..string], [1 x %..string]* %39, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$db, i64 0, i32 0), i64 1}, %..string* %269
	%270 = getelementptr inbounds [1 x %..string], [1 x %..string]* %39, i64 0, i32 0
	%271 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %38, i64 0, i32 0
	store %..string* %270, %..string** %271
	%272 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %38, i64 0, i32 1
	store i64 1, i64* %272
	%273 = load {%..string*, i64}, {%..string*, i64}* %38, align 8
	%274 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$dc, i64 0, i32 0), i64 52}, i64 263, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$dd, i64 0, i32 0), i64 11})
	%275 = bitcast {%..string*, i64}* %40 to %..rawptr
	%276 = call %..rawptr @__mem_zero(%..rawptr %275, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %40
	store {%..string*, i64} %273, {%..string*, i64}* %40
	%277 = bitcast %Source_Code_Location* %41 to %..rawptr
	%278 = call %..rawptr @__mem_zero(%..rawptr %277, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %41
	store %Source_Code_Location %274, %Source_Code_Location* %41
	%279 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %264, {%..string*, i64}* %40, %Source_Code_Location* %41, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%280 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 1
	%281 = load i8, i8* %280, align 1
	%282 = trunc i8 %281 to i1
	br i1 %282, label %if.then-11, label %if.done-12

if.then-11:
	%283 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%284 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %283, align 8
	; variadic call argument generation
	%285 = bitcast {%..string*, i64}* %42 to %..rawptr
	%286 = call %..rawptr @__mem_zero(%..rawptr %285, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %42
	%287 = bitcast [1 x %..string]* %43 to %..rawptr
	%288 = call %..rawptr @__mem_zero(%..rawptr %287, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %43
	%289 = getelementptr inbounds [1 x %..string], [1 x %..string]* %43, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$de, i64 0, i32 0), i64 1}, %..string* %289
	%290 = getelementptr inbounds [1 x %..string], [1 x %..string]* %43, i64 0, i32 0
	%291 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %42, i64 0, i32 0
	store %..string* %290, %..string** %291
	%292 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %42, i64 0, i32 1
	store i64 1, i64* %292
	%293 = load {%..string*, i64}, {%..string*, i64}* %42, align 8
	%294 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$df, i64 0, i32 0), i64 52}, i64 264, i64 24, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$e0, i64 0, i32 0), i64 11})
	%295 = bitcast {%..string*, i64}* %44 to %..rawptr
	%296 = call %..rawptr @__mem_zero(%..rawptr %295, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %44
	store {%..string*, i64} %293, {%..string*, i64}* %44
	%297 = bitcast %Source_Code_Location* %45 to %..rawptr
	%298 = call %..rawptr @__mem_zero(%..rawptr %297, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %45
	store %Source_Code_Location %294, %Source_Code_Location* %45
	%299 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %284, {%..string*, i64}* %44, %Source_Code_Location* %45, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-12

if.done-12:
	; AssignStmt
	%300 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 3
	%301 = load i64, i64* %300, align 8
	%302 = add i64 %301, 1
	store i64 %302, i64* %300
	; IfStmt
	%303 = load %html-11.Element*, %html-11.Element** %0, align 8
	%304 = getelementptr inbounds %html-11.Element, %html-11.Element* %303, i64 0
	%305 = getelementptr inbounds %html-11.Element, %html-11.Element* %304, i64 0, i32 1
	%306 = load %..string, %..string* %305, align 8
	%307 = call i8 @__string_ne(%..string %306, %..string zeroinitializer)
	%308 = trunc i8 %307 to i1
	br i1 %308, label %if.then-13, label %if.done-16

if.then-13:
	%309 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	%310 = load %html-11.Element*, %html-11.Element** %0, align 8
	%311 = getelementptr inbounds %html-11.Element, %html-11.Element* %310, i64 0
	%312 = getelementptr inbounds %html-11.Element, %html-11.Element* %311, i64 0, i32 1
	%313 = load %..string, %..string* %312, align 8
	%314 = bitcast %html-11.GenOptions* %46 to %..rawptr
	%315 = call %..rawptr @__mem_zero(%..rawptr %314, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %46
	store %html-11.GenOptions %309, %html-11.GenOptions* %46
	call void @html-11.append_string_indented(%html-11.GenOptions* %46, %..string %313, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%316 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 1
	%317 = load i8, i8* %316, align 1
	%318 = trunc i8 %317 to i1
	br i1 %318, label %if.then-14, label %if.done-15

if.then-14:
	%319 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%320 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %319, align 8
	; variadic call argument generation
	%321 = bitcast {%..string*, i64}* %47 to %..rawptr
	%322 = call %..rawptr @__mem_zero(%..rawptr %321, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %47
	%323 = bitcast [1 x %..string]* %48 to %..rawptr
	%324 = call %..rawptr @__mem_zero(%..rawptr %323, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %48
	%325 = getelementptr inbounds [1 x %..string], [1 x %..string]* %48, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$e1, i64 0, i32 0), i64 1}, %..string* %325
	%326 = getelementptr inbounds [1 x %..string], [1 x %..string]* %48, i64 0, i32 0
	%327 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %47, i64 0, i32 0
	store %..string* %326, %..string** %327
	%328 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %47, i64 0, i32 1
	store i64 1, i64* %328
	%329 = load {%..string*, i64}, {%..string*, i64}* %47, align 8
	%330 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$e2, i64 0, i32 0), i64 52}, i64 269, i64 25, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$e3, i64 0, i32 0), i64 11})
	%331 = bitcast {%..string*, i64}* %49 to %..rawptr
	%332 = call %..rawptr @__mem_zero(%..rawptr %331, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %49
	store {%..string*, i64} %329, {%..string*, i64}* %49
	%333 = bitcast %Source_Code_Location* %50 to %..rawptr
	%334 = call %..rawptr @__mem_zero(%..rawptr %333, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %50
	store %Source_Code_Location %330, %Source_Code_Location* %50
	%335 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %320, {%..string*, i64}* %49, %Source_Code_Location* %50, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-15

if.done-15:
	br label %if.done-16

if.done-16:
	; IfStmt
	%336 = load %html-11.Element*, %html-11.Element** %0, align 8
	%337 = getelementptr inbounds %html-11.Element, %html-11.Element* %336, i64 0
	%338 = getelementptr inbounds %html-11.Element, %html-11.Element* %337, i64 0, i32 3
	%339 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %338, align 8
	%340 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %339, 1
	%341 = icmp sgt i64 %340, 0
	%342 = zext i1 %341 to i8
	%343 = trunc i8 %342 to i1
	br i1 %343, label %if.then-17, label %if.done-21

if.then-17:
	; ForStmt
	; i
	
	store i64 0, i64* %51
	br label %for.loop-18

for.loop-18:
	%344 = load i64, i64* %51, align 8
	%345 = load %html-11.Element*, %html-11.Element** %0, align 8
	%346 = getelementptr inbounds %html-11.Element, %html-11.Element* %345, i64 0
	%347 = getelementptr inbounds %html-11.Element, %html-11.Element* %346, i64 0, i32 3
	%348 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %347, align 8
	%349 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %348, 1
	%350 = icmp slt i64 %344, %349
	%351 = zext i1 %350 to i8
	%352 = trunc i8 %351 to i1
	br i1 %352, label %for.body-19, label %for.done-20

for.body-19:
	; child
	
	; IndexExpr
	%353 = load %html-11.Element*, %html-11.Element** %0, align 8
	%354 = getelementptr inbounds %html-11.Element, %html-11.Element* %353, i64 0
	%355 = getelementptr inbounds %html-11.Element, %html-11.Element* %354, i64 0, i32 3
	%356 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %355, align 8
	%357 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %356, 0
	%358 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %356, 1
	%359 = load i64, i64* %51, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$e4, i64 0, i32 0), i64 52}, i64 274, i64 23, i64 %359, i64 %358)
	%360 = getelementptr inbounds %html-11.Element*, %html-11.Element** %357, i64 %359
	%361 = load %html-11.Element*, %html-11.Element** %360, align 8
	store %html-11.Element* %361, %html-11.Element** %52
	%362 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	%363 = load %html-11.Element*, %html-11.Element** %52, align 8
	%364 = bitcast %html-11.GenOptions* %53 to %..rawptr
	%365 = call %..rawptr @__mem_zero(%..rawptr %364, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %53
	store %html-11.GenOptions %362, %html-11.GenOptions* %53
	%366 = call i8 @html-11.gen_element(%html-11.GenOptions* %53, %html-11.Element* %363, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%367 = load i64, i64* %51, align 8
	%368 = add i64 %367, 1
	store i64 %368, i64* %51
	br label %for.loop-18

for.done-20:
	br label %if.done-21

if.done-21:
	; AssignStmt
	%369 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 3
	%370 = load i64, i64* %369, align 8
	%371 = sub i64 %370, 1
	store i64 %371, i64* %369
	%372 = load %html-11.GenOptions, %html-11.GenOptions* %options, align 8
	%373 = bitcast %html-11.GenOptions* %54 to %..rawptr
	%374 = call %..rawptr @__mem_zero(%..rawptr %373, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %54
	store %html-11.GenOptions %372, %html-11.GenOptions* %54
	call void @html-11.append_string_indented(%html-11.GenOptions* %54, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$e5, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%375 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%376 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %375, align 8
	%377 = load %html-11.Element*, %html-11.Element** %0, align 8
	%378 = getelementptr inbounds %html-11.Element, %html-11.Element* %377, i64 0
	%379 = getelementptr inbounds %html-11.Element, %html-11.Element* %378, i64 0, i32 0
	%380 = load %..string, %..string* %379, align 8
	; variadic call argument generation
	%381 = bitcast {%..string*, i64}* %55 to %..rawptr
	%382 = call %..rawptr @__mem_zero(%..rawptr %381, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %55
	%383 = bitcast [1 x %..string]* %56 to %..rawptr
	%384 = call %..rawptr @__mem_zero(%..rawptr %383, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %56
	%385 = getelementptr inbounds [1 x %..string], [1 x %..string]* %56, i64 0, i32 0
	store %..string %380, %..string* %385
	%386 = getelementptr inbounds [1 x %..string], [1 x %..string]* %56, i64 0, i32 0
	%387 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %55, i64 0, i32 0
	store %..string* %386, %..string** %387
	%388 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %55, i64 0, i32 1
	store i64 1, i64* %388
	%389 = load {%..string*, i64}, {%..string*, i64}* %55, align 8
	%390 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$e6, i64 0, i32 0), i64 52}, i64 281, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$e7, i64 0, i32 0), i64 11})
	%391 = bitcast {%..string*, i64}* %57 to %..rawptr
	%392 = call %..rawptr @__mem_zero(%..rawptr %391, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %57
	store {%..string*, i64} %389, {%..string*, i64}* %57
	%393 = bitcast %Source_Code_Location* %58 to %..rawptr
	%394 = call %..rawptr @__mem_zero(%..rawptr %393, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %58
	store %Source_Code_Location %390, %Source_Code_Location* %58
	%395 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %376, {%..string*, i64}* %57, %Source_Code_Location* %58, %Context* noalias nonnull %__.context_ptr)
	%396 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%397 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %396, align 8
	; variadic call argument generation
	%398 = bitcast {%..string*, i64}* %59 to %..rawptr
	%399 = call %..rawptr @__mem_zero(%..rawptr %398, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %59
	%400 = bitcast [1 x %..string]* %60 to %..rawptr
	%401 = call %..rawptr @__mem_zero(%..rawptr %400, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %60
	%402 = getelementptr inbounds [1 x %..string], [1 x %..string]* %60, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$e8, i64 0, i32 0), i64 1}, %..string* %402
	%403 = getelementptr inbounds [1 x %..string], [1 x %..string]* %60, i64 0, i32 0
	%404 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %59, i64 0, i32 0
	store %..string* %403, %..string** %404
	%405 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %59, i64 0, i32 1
	store i64 1, i64* %405
	%406 = load {%..string*, i64}, {%..string*, i64}* %59, align 8
	%407 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$e9, i64 0, i32 0), i64 52}, i64 282, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$ea, i64 0, i32 0), i64 11})
	%408 = bitcast {%..string*, i64}* %61 to %..rawptr
	%409 = call %..rawptr @__mem_zero(%..rawptr %408, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %61
	store {%..string*, i64} %406, {%..string*, i64}* %61
	%410 = bitcast %Source_Code_Location* %62 to %..rawptr
	%411 = call %..rawptr @__mem_zero(%..rawptr %410, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %62
	store %Source_Code_Location %407, %Source_Code_Location* %62
	%412 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %397, {%..string*, i64}* %61, %Source_Code_Location* %62, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%413 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 1
	%414 = load i8, i8* %413, align 1
	%415 = trunc i8 %414 to i1
	br i1 %415, label %if.then-22, label %if.done-23

if.then-22:
	%416 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %options, i64 0, i32 0
	%417 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %416, align 8
	; variadic call argument generation
	%418 = bitcast {%..string*, i64}* %63 to %..rawptr
	%419 = call %..rawptr @__mem_zero(%..rawptr %418, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %63
	%420 = bitcast [1 x %..string]* %64 to %..rawptr
	%421 = call %..rawptr @__mem_zero(%..rawptr %420, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %64
	%422 = getelementptr inbounds [1 x %..string], [1 x %..string]* %64, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$eb, i64 0, i32 0), i64 1}, %..string* %422
	%423 = getelementptr inbounds [1 x %..string], [1 x %..string]* %64, i64 0, i32 0
	%424 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %63, i64 0, i32 0
	store %..string* %423, %..string** %424
	%425 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %63, i64 0, i32 1
	store i64 1, i64* %425
	%426 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%427 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$ec, i64 0, i32 0), i64 52}, i64 283, i64 24, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$ed, i64 0, i32 0), i64 11})
	%428 = bitcast {%..string*, i64}* %65 to %..rawptr
	%429 = call %..rawptr @__mem_zero(%..rawptr %428, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %65
	store {%..string*, i64} %426, {%..string*, i64}* %65
	%430 = bitcast %Source_Code_Location* %66 to %..rawptr
	%431 = call %..rawptr @__mem_zero(%..rawptr %430, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %66
	store %Source_Code_Location %427, %Source_Code_Location* %66
	%432 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %417, {%..string*, i64}* %65, %Source_Code_Location* %66, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-23

if.done-23:
	br label %if.done-24

if.done-24:
	; ReturnStmt
	ret i8 1
}

define {i8*, i64, i64, %Allocator} @html-11.gen(%html-11.Document* %doc, i1 %_gen_whitespace, i1 %_gen_indentation, %..string %_indent_string, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca i8, align 16
	%2 = alloca i8, align 16
	%3 = alloca %..string, align 16
	%4 = alloca {i8*, i64, i64, %Allocator}, align 16
	%5 = alloca %html-11.GenOptions, align 16
	%6 = alloca %html-11.GenOptions, align 16
	%7 = alloca {%..string*, i64}, align 16
	%8 = alloca [1 x %..string], align 16
	%9 = alloca {%..string*, i64}, align 16
	%10 = alloca %Source_Code_Location, align 16
	%11 = alloca {%..string*, i64}, align 16
	%12 = alloca [1 x %..string], align 16
	%13 = alloca {%..string*, i64}, align 16
	%14 = alloca %Source_Code_Location, align 16
	%15 = alloca {%..string*, i64}, align 16
	%16 = alloca [1 x %..string], align 16
	%17 = alloca {%..string*, i64}, align 16
	%18 = alloca %Source_Code_Location, align 16
	%19 = alloca {%..string*, i64}, align 16
	%20 = alloca [1 x %..string], align 16
	%21 = alloca {%..string*, i64}, align 16
	%22 = alloca %Source_Code_Location, align 16
	%23 = alloca {%..string*, i64}, align 16
	%24 = alloca [1 x %..string], align 16
	%25 = alloca {%..string*, i64}, align 16
	%26 = alloca %Source_Code_Location, align 16
	%27 = alloca %..string, align 16
	%28 = alloca %..string, align 16
	%29 = alloca i64, align 16
	%30 = alloca %..string, align 16
	%31 = alloca {%..string*, i64}, align 16
	%32 = alloca [1 x %..string], align 16
	%33 = alloca {%..string*, i64}, align 16
	%34 = alloca %Source_Code_Location, align 16
	%35 = alloca {%..string*, i64}, align 16
	%36 = alloca [1 x %..string], align 16
	%37 = alloca {%..string*, i64}, align 16
	%38 = alloca %Source_Code_Location, align 16
	%39 = alloca {%..string*, i64}, align 16
	%40 = alloca [1 x %..string], align 16
	%41 = alloca {%..string*, i64}, align 16
	%42 = alloca %Source_Code_Location, align 16
	%43 = alloca {%..string*, i64}, align 16
	%44 = alloca [1 x %..string], align 16
	%45 = alloca {%..string*, i64}, align 16
	%46 = alloca %Source_Code_Location, align 16
	%47 = alloca {%..string*, i64}, align 16
	%48 = alloca [1 x %..string], align 16
	%49 = alloca {%..string*, i64}, align 16
	%50 = alloca %Source_Code_Location, align 16
	%51 = alloca {%..string*, i64}, align 16
	%52 = alloca [1 x %..string], align 16
	%53 = alloca {%..string*, i64}, align 16
	%54 = alloca %Source_Code_Location, align 16
	%55 = alloca {%..string*, i64}, align 16
	%56 = alloca [1 x %..string], align 16
	%57 = alloca {%..string*, i64}, align 16
	%58 = alloca %Source_Code_Location, align 16
	%59 = alloca %html-11.GenOptions, align 16
	%60 = alloca %html-11.GenOptions, align 16
	%61 = alloca {%..string*, i64}, align 16
	%62 = alloca [1 x %..string], align 16
	%63 = alloca {%..string*, i64}, align 16
	%64 = alloca %Source_Code_Location, align 16
	
	store %html-11.Document* %doc, %html-11.Document** %0
	
	%65 = zext i1 %_gen_whitespace to i8
	store i8 %65, i8* %1
	
	%66 = zext i1 %_gen_indentation to i8
	store i8 %66, i8* %2
	
	store %..string %_indent_string, %..string* %3
	; out_buffer
	%67 = bitcast {i8*, i64, i64, %Allocator}* %4 to %..rawptr
	%68 = call %..rawptr @__mem_zero(%..rawptr %67, i64 40)
	store {i8*, i64, i64, %Allocator} zeroinitializer, {i8*, i64, i64, %Allocator}* %4
	
	; options
	
	; CompoundLit
	%69 = bitcast %html-11.GenOptions* %6 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %6
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %6
	%71 = getelementptr inbounds {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %4, i64 0
	%72 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %6, i64 0, i32 0
	store {i8*, i64, i64, %Allocator}* %71, {i8*, i64, i64, %Allocator}** %72
	%73 = load i8, i8* %1, align 1
	%74 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %6, i64 0, i32 1
	store i8 %73, i8* %74
	%75 = load i8, i8* %2, align 1
	%76 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %6, i64 0, i32 2
	store i8 %75, i8* %76
	%77 = load %..string, %..string* %3, align 8
	%78 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %6, i64 0, i32 4
	store %..string %77, %..string* %78
	%79 = load %html-11.GenOptions, %html-11.GenOptions* %6, align 8
	store %html-11.GenOptions %79, %html-11.GenOptions* %5
	%80 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%81 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %80, align 8
	; variadic call argument generation
	%82 = bitcast {%..string*, i64}* %7 to %..rawptr
	%83 = call %..rawptr @__mem_zero(%..rawptr %82, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %7
	%84 = bitcast [1 x %..string]* %8 to %..rawptr
	%85 = call %..rawptr @__mem_zero(%..rawptr %84, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %8
	%86 = getelementptr inbounds [1 x %..string], [1 x %..string]* %8, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$ee, i64 0, i32 0), i64 10}, %..string* %86
	%87 = getelementptr inbounds [1 x %..string], [1 x %..string]* %8, i64 0, i32 0
	%88 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %7, i64 0, i32 0
	store %..string* %87, %..string** %88
	%89 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %7, i64 0, i32 1
	store i64 1, i64* %89
	%90 = load {%..string*, i64}, {%..string*, i64}* %7, align 8
	%91 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$ef, i64 0, i32 0), i64 52}, i64 305, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$f0, i64 0, i32 0), i64 3})
	%92 = bitcast {%..string*, i64}* %9 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %9
	store {%..string*, i64} %90, {%..string*, i64}* %9
	%94 = bitcast %Source_Code_Location* %10 to %..rawptr
	%95 = call %..rawptr @__mem_zero(%..rawptr %94, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %10
	store %Source_Code_Location %91, %Source_Code_Location* %10
	%96 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %81, {%..string*, i64}* %9, %Source_Code_Location* %10, %Context* noalias nonnull %__.context_ptr)
	%97 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%98 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %97, align 8
	%99 = load %html-11.Document*, %html-11.Document** %0, align 8
	%100 = getelementptr inbounds %html-11.Document, %html-11.Document* %99, i64 0
	%101 = getelementptr inbounds %html-11.Document, %html-11.Document* %100, i64 0, i32 0
	%102 = load %..string, %..string* %101, align 8
	; variadic call argument generation
	%103 = bitcast {%..string*, i64}* %11 to %..rawptr
	%104 = call %..rawptr @__mem_zero(%..rawptr %103, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %11
	%105 = bitcast [1 x %..string]* %12 to %..rawptr
	%106 = call %..rawptr @__mem_zero(%..rawptr %105, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %12
	%107 = getelementptr inbounds [1 x %..string], [1 x %..string]* %12, i64 0, i32 0
	store %..string %102, %..string* %107
	%108 = getelementptr inbounds [1 x %..string], [1 x %..string]* %12, i64 0, i32 0
	%109 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %11, i64 0, i32 0
	store %..string* %108, %..string** %109
	%110 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %11, i64 0, i32 1
	store i64 1, i64* %110
	%111 = load {%..string*, i64}, {%..string*, i64}* %11, align 8
	%112 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$f1, i64 0, i32 0), i64 52}, i64 306, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$f2, i64 0, i32 0), i64 3})
	%113 = bitcast {%..string*, i64}* %13 to %..rawptr
	%114 = call %..rawptr @__mem_zero(%..rawptr %113, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %13
	store {%..string*, i64} %111, {%..string*, i64}* %13
	%115 = bitcast %Source_Code_Location* %14 to %..rawptr
	%116 = call %..rawptr @__mem_zero(%..rawptr %115, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %14
	store %Source_Code_Location %112, %Source_Code_Location* %14
	%117 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %98, {%..string*, i64}* %13, %Source_Code_Location* %14, %Context* noalias nonnull %__.context_ptr)
	%118 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%119 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %118, align 8
	; variadic call argument generation
	%120 = bitcast {%..string*, i64}* %15 to %..rawptr
	%121 = call %..rawptr @__mem_zero(%..rawptr %120, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %15
	%122 = bitcast [1 x %..string]* %16 to %..rawptr
	%123 = call %..rawptr @__mem_zero(%..rawptr %122, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %16
	%124 = getelementptr inbounds [1 x %..string], [1 x %..string]* %16, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$f3, i64 0, i32 0), i64 1}, %..string* %124
	%125 = getelementptr inbounds [1 x %..string], [1 x %..string]* %16, i64 0, i32 0
	%126 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %15, i64 0, i32 0
	store %..string* %125, %..string** %126
	%127 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %15, i64 0, i32 1
	store i64 1, i64* %127
	%128 = load {%..string*, i64}, {%..string*, i64}* %15, align 8
	%129 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$f4, i64 0, i32 0), i64 52}, i64 307, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$f5, i64 0, i32 0), i64 3})
	%130 = bitcast {%..string*, i64}* %17 to %..rawptr
	%131 = call %..rawptr @__mem_zero(%..rawptr %130, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %17
	store {%..string*, i64} %128, {%..string*, i64}* %17
	%132 = bitcast %Source_Code_Location* %18 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %18
	store %Source_Code_Location %129, %Source_Code_Location* %18
	%134 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %119, {%..string*, i64}* %17, %Source_Code_Location* %18, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%135 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 1
	%136 = load i8, i8* %135, align 1
	%137 = trunc i8 %136 to i1
	br i1 %137, label %if.then-1, label %if.done-2

if.then-1:
	%138 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%139 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %138, align 8
	; variadic call argument generation
	%140 = bitcast {%..string*, i64}* %19 to %..rawptr
	%141 = call %..rawptr @__mem_zero(%..rawptr %140, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %19
	%142 = bitcast [1 x %..string]* %20 to %..rawptr
	%143 = call %..rawptr @__mem_zero(%..rawptr %142, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %20
	%144 = getelementptr inbounds [1 x %..string], [1 x %..string]* %20, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$f6, i64 0, i32 0), i64 1}, %..string* %144
	%145 = getelementptr inbounds [1 x %..string], [1 x %..string]* %20, i64 0, i32 0
	%146 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %19, i64 0, i32 0
	store %..string* %145, %..string** %146
	%147 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %19, i64 0, i32 1
	store i64 1, i64* %147
	%148 = load {%..string*, i64}, {%..string*, i64}* %19, align 8
	%149 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$f7, i64 0, i32 0), i64 52}, i64 308, i64 23, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$f8, i64 0, i32 0), i64 3})
	%150 = bitcast {%..string*, i64}* %21 to %..rawptr
	%151 = call %..rawptr @__mem_zero(%..rawptr %150, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %21
	store {%..string*, i64} %148, {%..string*, i64}* %21
	%152 = bitcast %Source_Code_Location* %22 to %..rawptr
	%153 = call %..rawptr @__mem_zero(%..rawptr %152, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %22
	store %Source_Code_Location %149, %Source_Code_Location* %22
	%154 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %139, {%..string*, i64}* %21, %Source_Code_Location* %22, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-2

if.done-2:
	%155 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%156 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %155, align 8
	; variadic call argument generation
	%157 = bitcast {%..string*, i64}* %23 to %..rawptr
	%158 = call %..rawptr @__mem_zero(%..rawptr %157, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %23
	%159 = bitcast [1 x %..string]* %24 to %..rawptr
	%160 = call %..rawptr @__mem_zero(%..rawptr %159, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %24
	%161 = getelementptr inbounds [1 x %..string], [1 x %..string]* %24, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$f9, i64 0, i32 0), i64 5}, %..string* %161
	%162 = getelementptr inbounds [1 x %..string], [1 x %..string]* %24, i64 0, i32 0
	%163 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %23, i64 0, i32 0
	store %..string* %162, %..string** %163
	%164 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %23, i64 0, i32 1
	store i64 1, i64* %164
	%165 = load {%..string*, i64}, {%..string*, i64}* %23, align 8
	%166 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$fa, i64 0, i32 0), i64 52}, i64 310, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$fb, i64 0, i32 0), i64 3})
	%167 = bitcast {%..string*, i64}* %25 to %..rawptr
	%168 = call %..rawptr @__mem_zero(%..rawptr %167, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %25
	store {%..string*, i64} %165, {%..string*, i64}* %25
	%169 = bitcast %Source_Code_Location* %26 to %..rawptr
	%170 = call %..rawptr @__mem_zero(%..rawptr %169, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %26
	store %Source_Code_Location %166, %Source_Code_Location* %26
	%171 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %156, {%..string*, i64}* %25, %Source_Code_Location* %26, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; key
	%172 = bitcast %..string* %27 to %..rawptr
	%173 = call %..rawptr @__mem_zero(%..rawptr %172, i64 16)
	store %..string zeroinitializer, %..string* %27
	
	; value
	%174 = bitcast %..string* %28 to %..rawptr
	%175 = call %..rawptr @__mem_zero(%..rawptr %174, i64 16)
	store %..string zeroinitializer, %..string* %28
	
	%176 = load %html-11.Document*, %html-11.Document** %0, align 8
	%177 = getelementptr inbounds %html-11.Document, %html-11.Document* %176, i64 0
	%178 = getelementptr inbounds %html-11.Document, %html-11.Document* %177, i64 0, i32 1
	%179 = getelementptr inbounds {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %178, i64 0, i32 1
	%180 = getelementptr inbounds {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}* %179, i64 0, i32 1
	%181 = bitcast i64* %29 to %..rawptr
	%182 = call %..rawptr @__mem_zero(%..rawptr %181, i64 8)
	store i64 zeroinitializer, i64* %29
	store i64 -1, i64* %29
	br label %for.index.loop-3

for.index.loop-3:
	%183 = load i64, i64* %29, align 8
	%184 = add i64 %183, 1
	store i64 %184, i64* %29
	%185 = load i64, i64* %180, align 8
	%186 = icmp slt i64 %184, %185
	br i1 %186, label %for.index.body-4, label %for.index.done-5

for.index.body-4:
	%187 = load i64, i64* %29, align 8
	%188 = bitcast %..string* %30 to %..rawptr
	%189 = call %..rawptr @__mem_zero(%..rawptr %188, i64 16)
	store %..string zeroinitializer, %..string* %30
	%190 = getelementptr inbounds {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}, {{i64*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}}* %178, i64 0, i32 1
	%191 = getelementptr inbounds {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}, {{%__Map_Key, i64, %..string}*, i64, i64, %Allocator}* %190, i64 0, i32 0
	%192 = load {%__Map_Key, i64, %..string}*, {%__Map_Key, i64, %..string}** %191, align 8
	%193 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %192, i64 %187
	%194 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %193, i64 0, i32 2
	%195 = load %..string, %..string* %194, align 8
	%196 = getelementptr inbounds {%__Map_Key, i64, %..string}, {%__Map_Key, i64, %..string}* %193, i64 0, i32 0
	%197 = getelementptr inbounds %__Map_Key, %__Map_Key* %196, i64 0, i32 1
	%198 = load %..string, %..string* %197, align 8
	store %..string %198, %..string* %30
	%199 = load %..string, %..string* %30, align 8
	store %..string %199, %..string* %27
	store %..string %195, %..string* %28
	%200 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%201 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %200, align 8
	; variadic call argument generation
	%202 = bitcast {%..string*, i64}* %31 to %..rawptr
	%203 = call %..rawptr @__mem_zero(%..rawptr %202, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %31
	%204 = bitcast [1 x %..string]* %32 to %..rawptr
	%205 = call %..rawptr @__mem_zero(%..rawptr %204, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %32
	%206 = getelementptr inbounds [1 x %..string], [1 x %..string]* %32, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$fc, i64 0, i32 0), i64 1}, %..string* %206
	%207 = getelementptr inbounds [1 x %..string], [1 x %..string]* %32, i64 0, i32 0
	%208 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %31, i64 0, i32 0
	store %..string* %207, %..string** %208
	%209 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %31, i64 0, i32 1
	store i64 1, i64* %209
	%210 = load {%..string*, i64}, {%..string*, i64}* %31, align 8
	%211 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$fd, i64 0, i32 0), i64 52}, i64 312, i64 3, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$fe, i64 0, i32 0), i64 3})
	%212 = bitcast {%..string*, i64}* %33 to %..rawptr
	%213 = call %..rawptr @__mem_zero(%..rawptr %212, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %33
	store {%..string*, i64} %210, {%..string*, i64}* %33
	%214 = bitcast %Source_Code_Location* %34 to %..rawptr
	%215 = call %..rawptr @__mem_zero(%..rawptr %214, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %34
	store %Source_Code_Location %211, %Source_Code_Location* %34
	%216 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %201, {%..string*, i64}* %33, %Source_Code_Location* %34, %Context* noalias nonnull %__.context_ptr)
	%217 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%218 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %217, align 8
	%219 = load %..string, %..string* %27, align 8
	; variadic call argument generation
	%220 = bitcast {%..string*, i64}* %35 to %..rawptr
	%221 = call %..rawptr @__mem_zero(%..rawptr %220, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %35
	%222 = bitcast [1 x %..string]* %36 to %..rawptr
	%223 = call %..rawptr @__mem_zero(%..rawptr %222, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %36
	%224 = getelementptr inbounds [1 x %..string], [1 x %..string]* %36, i64 0, i32 0
	store %..string %219, %..string* %224
	%225 = getelementptr inbounds [1 x %..string], [1 x %..string]* %36, i64 0, i32 0
	%226 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %35, i64 0, i32 0
	store %..string* %225, %..string** %226
	%227 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %35, i64 0, i32 1
	store i64 1, i64* %227
	%228 = load {%..string*, i64}, {%..string*, i64}* %35, align 8
	%229 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$ff, i64 0, i32 0), i64 52}, i64 313, i64 3, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$100, i64 0, i32 0), i64 3})
	%230 = bitcast {%..string*, i64}* %37 to %..rawptr
	%231 = call %..rawptr @__mem_zero(%..rawptr %230, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %37
	store {%..string*, i64} %228, {%..string*, i64}* %37
	%232 = bitcast %Source_Code_Location* %38 to %..rawptr
	%233 = call %..rawptr @__mem_zero(%..rawptr %232, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %38
	store %Source_Code_Location %229, %Source_Code_Location* %38
	%234 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %218, {%..string*, i64}* %37, %Source_Code_Location* %38, %Context* noalias nonnull %__.context_ptr)
	%235 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%236 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %235, align 8
	; variadic call argument generation
	%237 = bitcast {%..string*, i64}* %39 to %..rawptr
	%238 = call %..rawptr @__mem_zero(%..rawptr %237, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %39
	%239 = bitcast [1 x %..string]* %40 to %..rawptr
	%240 = call %..rawptr @__mem_zero(%..rawptr %239, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %40
	%241 = getelementptr inbounds [1 x %..string], [1 x %..string]* %40, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$101, i64 0, i32 0), i64 2}, %..string* %241
	%242 = getelementptr inbounds [1 x %..string], [1 x %..string]* %40, i64 0, i32 0
	%243 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %39, i64 0, i32 0
	store %..string* %242, %..string** %243
	%244 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %39, i64 0, i32 1
	store i64 1, i64* %244
	%245 = load {%..string*, i64}, {%..string*, i64}* %39, align 8
	%246 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$102, i64 0, i32 0), i64 52}, i64 314, i64 3, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$103, i64 0, i32 0), i64 3})
	%247 = bitcast {%..string*, i64}* %41 to %..rawptr
	%248 = call %..rawptr @__mem_zero(%..rawptr %247, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %41
	store {%..string*, i64} %245, {%..string*, i64}* %41
	%249 = bitcast %Source_Code_Location* %42 to %..rawptr
	%250 = call %..rawptr @__mem_zero(%..rawptr %249, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %42
	store %Source_Code_Location %246, %Source_Code_Location* %42
	%251 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %236, {%..string*, i64}* %41, %Source_Code_Location* %42, %Context* noalias nonnull %__.context_ptr)
	%252 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%253 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %252, align 8
	%254 = load %..string, %..string* %28, align 8
	; variadic call argument generation
	%255 = bitcast {%..string*, i64}* %43 to %..rawptr
	%256 = call %..rawptr @__mem_zero(%..rawptr %255, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %43
	%257 = bitcast [1 x %..string]* %44 to %..rawptr
	%258 = call %..rawptr @__mem_zero(%..rawptr %257, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %44
	%259 = getelementptr inbounds [1 x %..string], [1 x %..string]* %44, i64 0, i32 0
	store %..string %254, %..string* %259
	%260 = getelementptr inbounds [1 x %..string], [1 x %..string]* %44, i64 0, i32 0
	%261 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %43, i64 0, i32 0
	store %..string* %260, %..string** %261
	%262 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %43, i64 0, i32 1
	store i64 1, i64* %262
	%263 = load {%..string*, i64}, {%..string*, i64}* %43, align 8
	%264 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$104, i64 0, i32 0), i64 52}, i64 315, i64 3, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$105, i64 0, i32 0), i64 3})
	%265 = bitcast {%..string*, i64}* %45 to %..rawptr
	%266 = call %..rawptr @__mem_zero(%..rawptr %265, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %45
	store {%..string*, i64} %263, {%..string*, i64}* %45
	%267 = bitcast %Source_Code_Location* %46 to %..rawptr
	%268 = call %..rawptr @__mem_zero(%..rawptr %267, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %46
	store %Source_Code_Location %264, %Source_Code_Location* %46
	%269 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %253, {%..string*, i64}* %45, %Source_Code_Location* %46, %Context* noalias nonnull %__.context_ptr)
	%270 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%271 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %270, align 8
	; variadic call argument generation
	%272 = bitcast {%..string*, i64}* %47 to %..rawptr
	%273 = call %..rawptr @__mem_zero(%..rawptr %272, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %47
	%274 = bitcast [1 x %..string]* %48 to %..rawptr
	%275 = call %..rawptr @__mem_zero(%..rawptr %274, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %48
	%276 = getelementptr inbounds [1 x %..string], [1 x %..string]* %48, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$106, i64 0, i32 0), i64 1}, %..string* %276
	%277 = getelementptr inbounds [1 x %..string], [1 x %..string]* %48, i64 0, i32 0
	%278 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %47, i64 0, i32 0
	store %..string* %277, %..string** %278
	%279 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %47, i64 0, i32 1
	store i64 1, i64* %279
	%280 = load {%..string*, i64}, {%..string*, i64}* %47, align 8
	%281 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$107, i64 0, i32 0), i64 52}, i64 316, i64 3, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$108, i64 0, i32 0), i64 3})
	%282 = bitcast {%..string*, i64}* %49 to %..rawptr
	%283 = call %..rawptr @__mem_zero(%..rawptr %282, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %49
	store {%..string*, i64} %280, {%..string*, i64}* %49
	%284 = bitcast %Source_Code_Location* %50 to %..rawptr
	%285 = call %..rawptr @__mem_zero(%..rawptr %284, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %50
	store %Source_Code_Location %281, %Source_Code_Location* %50
	%286 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %271, {%..string*, i64}* %49, %Source_Code_Location* %50, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-3

for.index.done-5:
	%287 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%288 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %287, align 8
	; variadic call argument generation
	%289 = bitcast {%..string*, i64}* %51 to %..rawptr
	%290 = call %..rawptr @__mem_zero(%..rawptr %289, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %51
	%291 = bitcast [1 x %..string]* %52 to %..rawptr
	%292 = call %..rawptr @__mem_zero(%..rawptr %291, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %52
	%293 = getelementptr inbounds [1 x %..string], [1 x %..string]* %52, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$109, i64 0, i32 0), i64 1}, %..string* %293
	%294 = getelementptr inbounds [1 x %..string], [1 x %..string]* %52, i64 0, i32 0
	%295 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %51, i64 0, i32 0
	store %..string* %294, %..string** %295
	%296 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %51, i64 0, i32 1
	store i64 1, i64* %296
	%297 = load {%..string*, i64}, {%..string*, i64}* %51, align 8
	%298 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$10a, i64 0, i32 0), i64 52}, i64 318, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$10b, i64 0, i32 0), i64 3})
	%299 = bitcast {%..string*, i64}* %53 to %..rawptr
	%300 = call %..rawptr @__mem_zero(%..rawptr %299, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %53
	store {%..string*, i64} %297, {%..string*, i64}* %53
	%301 = bitcast %Source_Code_Location* %54 to %..rawptr
	%302 = call %..rawptr @__mem_zero(%..rawptr %301, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %54
	store %Source_Code_Location %298, %Source_Code_Location* %54
	%303 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %288, {%..string*, i64}* %53, %Source_Code_Location* %54, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	%304 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 1
	%305 = load i8, i8* %304, align 1
	%306 = trunc i8 %305 to i1
	br i1 %306, label %if.then-6, label %if.done-7

if.then-6:
	%307 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%308 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %307, align 8
	; variadic call argument generation
	%309 = bitcast {%..string*, i64}* %55 to %..rawptr
	%310 = call %..rawptr @__mem_zero(%..rawptr %309, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %55
	%311 = bitcast [1 x %..string]* %56 to %..rawptr
	%312 = call %..rawptr @__mem_zero(%..rawptr %311, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %56
	%313 = getelementptr inbounds [1 x %..string], [1 x %..string]* %56, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$10c, i64 0, i32 0), i64 1}, %..string* %313
	%314 = getelementptr inbounds [1 x %..string], [1 x %..string]* %56, i64 0, i32 0
	%315 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %55, i64 0, i32 0
	store %..string* %314, %..string** %315
	%316 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %55, i64 0, i32 1
	store i64 1, i64* %316
	%317 = load {%..string*, i64}, {%..string*, i64}* %55, align 8
	%318 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$10d, i64 0, i32 0), i64 52}, i64 319, i64 23, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$10e, i64 0, i32 0), i64 3})
	%319 = bitcast {%..string*, i64}* %57 to %..rawptr
	%320 = call %..rawptr @__mem_zero(%..rawptr %319, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %57
	store {%..string*, i64} %317, {%..string*, i64}* %57
	%321 = bitcast %Source_Code_Location* %58 to %..rawptr
	%322 = call %..rawptr @__mem_zero(%..rawptr %321, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %58
	store %Source_Code_Location %318, %Source_Code_Location* %58
	%323 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %308, {%..string*, i64}* %57, %Source_Code_Location* %58, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-7

if.done-7:
	; AssignStmt
	%324 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 3
	%325 = load i64, i64* %324, align 8
	%326 = add i64 %325, 1
	store i64 %326, i64* %324
	%327 = load %html-11.GenOptions, %html-11.GenOptions* %5, align 8
	%328 = load %html-11.Document*, %html-11.Document** %0, align 8
	%329 = getelementptr inbounds %html-11.Document, %html-11.Document* %328, i64 0
	%330 = getelementptr inbounds %html-11.Document, %html-11.Document* %329, i64 0, i32 3
	%331 = load %html-11.Element*, %html-11.Element** %330, align 8
	%332 = bitcast %html-11.GenOptions* %59 to %..rawptr
	%333 = call %..rawptr @__mem_zero(%..rawptr %332, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %59
	store %html-11.GenOptions %327, %html-11.GenOptions* %59
	%334 = call i8 @html-11.gen_element(%html-11.GenOptions* %59, %html-11.Element* %331, %Context* noalias nonnull %__.context_ptr)
	%335 = load %html-11.GenOptions, %html-11.GenOptions* %5, align 8
	%336 = load %html-11.Document*, %html-11.Document** %0, align 8
	%337 = getelementptr inbounds %html-11.Document, %html-11.Document* %336, i64 0
	%338 = getelementptr inbounds %html-11.Document, %html-11.Document* %337, i64 0, i32 4
	%339 = load %html-11.Element*, %html-11.Element** %338, align 8
	%340 = bitcast %html-11.GenOptions* %60 to %..rawptr
	%341 = call %..rawptr @__mem_zero(%..rawptr %340, i64 40)
	store %html-11.GenOptions {{i8*, i64, i64, %Allocator}* zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 0, %..string zeroinitializer}, %html-11.GenOptions* %60
	store %html-11.GenOptions %335, %html-11.GenOptions* %60
	%342 = call i8 @html-11.gen_element(%html-11.GenOptions* %60, %html-11.Element* %339, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%343 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 3
	%344 = load i64, i64* %343, align 8
	%345 = sub i64 %344, 1
	store i64 %345, i64* %343
	%346 = getelementptr inbounds %html-11.GenOptions, %html-11.GenOptions* %5, i64 0, i32 0
	%347 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %346, align 8
	; variadic call argument generation
	%348 = bitcast {%..string*, i64}* %61 to %..rawptr
	%349 = call %..rawptr @__mem_zero(%..rawptr %348, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %61
	%350 = bitcast [1 x %..string]* %62 to %..rawptr
	%351 = call %..rawptr @__mem_zero(%..rawptr %350, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %62
	%352 = getelementptr inbounds [1 x %..string], [1 x %..string]* %62, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$10f, i64 0, i32 0), i64 7}, %..string* %352
	%353 = getelementptr inbounds [1 x %..string], [1 x %..string]* %62, i64 0, i32 0
	%354 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %61, i64 0, i32 0
	store %..string* %353, %..string** %354
	%355 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %61, i64 0, i32 1
	store i64 1, i64* %355
	%356 = load {%..string*, i64}, {%..string*, i64}* %61, align 8
	%357 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([53 x i8], [53 x i8]* @__str$110, i64 0, i32 0), i64 52}, i64 326, i64 2, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$111, i64 0, i32 0), i64 3})
	%358 = bitcast {%..string*, i64}* %63 to %..rawptr
	%359 = call %..rawptr @__mem_zero(%..rawptr %358, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %63
	store {%..string*, i64} %356, {%..string*, i64}* %63
	%360 = bitcast %Source_Code_Location* %64 to %..rawptr
	%361 = call %..rawptr @__mem_zero(%..rawptr %360, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %64
	store %Source_Code_Location %357, %Source_Code_Location* %64
	%362 = call i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %347, {%..string*, i64}* %63, %Source_Code_Location* %64, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%363 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %4, align 8
	ret {i8*, i64, i64, %Allocator} %363
}

define {i8*, i64, i64, %Allocator} @fmt-14.string_buffer_from_slice({i8*, i64}* %backing, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %raw-5.Slice, align 16
	%1 = alloca %raw-5.Dynamic_Array, align 16
	%2 = alloca %raw-5.Dynamic_Array, align 16
	%3 = load {i8*, i64}, {i8*, i64}* %backing, align 8
	; s
	
	%4 = load {i8*, i64}, {i8*, i64}* %backing, align 8
	%5 = bitcast {i8*, i64}* %backing to %raw-5.Slice*
	%6 = load %raw-5.Slice, %raw-5.Slice* %5, align 8
	store %raw-5.Slice %6, %raw-5.Slice* %0
	; d
	
	; CompoundLit
	%7 = bitcast %raw-5.Dynamic_Array* %2 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 40)
	store %raw-5.Dynamic_Array zeroinitializer, %raw-5.Dynamic_Array* %2
	store %raw-5.Dynamic_Array {%..rawptr zeroinitializer, i64 0, i64 zeroinitializer, %Allocator zeroinitializer}, %raw-5.Dynamic_Array* %2
	; SelectorExpr
	%9 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %0, i64 0, i32 0
	%10 = load %..rawptr, %..rawptr* %9, align 8
	%11 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %2, i64 0, i32 0
	store %..rawptr %10, %..rawptr* %11
	; SelectorExpr
	%12 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %0, i64 0, i32 1
	%13 = load i64, i64* %12, align 8
	%14 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %2, i64 0, i32 2
	store i64 %13, i64* %14
	%15 = call %Allocator @nil_allocator(%Context* noalias nonnull %__.context_ptr)
	%16 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %2, i64 0, i32 3
	store %Allocator %15, %Allocator* %16
	%17 = load %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %2, align 8
	store %raw-5.Dynamic_Array %17, %raw-5.Dynamic_Array* %1
	; ReturnStmt
	%18 = load %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %1, align 8
	%19 = bitcast %raw-5.Dynamic_Array* %1 to {i8*, i64, i64, %Allocator}*
	%20 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %19, align 8
	ret {i8*, i64, i64, %Allocator} %20
}

define %..string @fmt-14.to_string({i8*, i64, i64, %Allocator}* %buf, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64}, align 16
	%1 = alloca %..string, align 16
	%2 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %buf, align 8
	; ReturnStmt
	; SliceExpr
	%3 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %buf, align 8
	%4 = extractvalue {i8*, i64, i64, %Allocator} %3, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$112, i64 0, i32 0), i64 46}, i64 46, i64 19, i64 0, i64 %4, i64 %4)
	%5 = extractvalue {i8*, i64, i64, %Allocator} %3, 0
	%6 = getelementptr inbounds i8, i8* %5, i64 0
	%7 = sub i64 %4, 0
	%8 = bitcast {i8*, i64}* %0 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %0
	%10 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 0
	store i8* %6, i8** %10
	%11 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 1
	store i64 %7, i64* %11
	%12 = load {i8*, i64}, {i8*, i64}* %0, align 8
	%13 = extractvalue {i8*, i64} %12, 0
	%14 = extractvalue {i8*, i64} %12, 1
	%15 = bitcast %..string* %1 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 16)
	store %..string zeroinitializer, %..string* %1
	%17 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 0
	store i8* %13, i8** %17
	%18 = getelementptr inbounds %..string, %..string* %1, i64 0, i32 1
	store i64 %14, i64* %18
	%19 = load %..string, %..string* %1, align 8
	ret %..string %19
}

define void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %buf, %..string %s, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca {%..string*, i64}, align 16
	%3 = alloca [1 x %..string], align 16
	%4 = alloca {%..string*, i64}, align 16
	%5 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	
	store %..string %s, %..string* %1
	%6 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%7 = load %..string, %..string* %1, align 8
	; variadic call argument generation
	%8 = bitcast {%..string*, i64}* %2 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %2
	%10 = bitcast [1 x %..string]* %3 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 16)
	store [1 x %..string] zeroinitializer, [1 x %..string]* %3
	%12 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	store %..string %7, %..string* %12
	%13 = getelementptr inbounds [1 x %..string], [1 x %..string]* %3, i64 0, i32 0
	%14 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 0
	store %..string* %13, %..string** %14
	%15 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %15
	%16 = load {%..string*, i64}, {%..string*, i64}* %2, align 8
	%17 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$113, i64 0, i32 0), i64 46}, i64 51, i64 2, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$114, i64 0, i32 0), i64 12})
	%18 = bitcast {%..string*, i64}* %4 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 16)
	store {%..string*, i64} zeroinitializer, {%..string*, i64}* %4
	store {%..string*, i64} %16, {%..string*, i64}* %4
	%20 = bitcast %Source_Code_Location* %5 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %17, %Source_Code_Location* %5
	%22 = call i64 @_preload-0.append_string-5374({i8*, i64, i64, %Allocator}* %6, {%..string*, i64}* %4, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.write_bytes({i8*, i64, i64, %Allocator}* %buf, {i8*, i64}* %data, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca {i8*, i64}, align 16
	%2 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	%3 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%4 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%5 = load {i8*, i64}, {i8*, i64}* %data, align 8
	%6 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$115, i64 0, i32 0), i64 46}, i64 54, i64 2, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$116, i64 0, i32 0), i64 11})
	%7 = bitcast {i8*, i64}* %1 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %1
	store {i8*, i64} %5, {i8*, i64}* %1
	%9 = bitcast %Source_Code_Location* %2 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %6, %Source_Code_Location* %2
	%11 = call i64 @_preload-0.append-5382({i8*, i64, i64, %Allocator}* %4, {i8*, i64}* %1, %Source_Code_Location* %2, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %buf, i8 %data, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i8, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca [1 x i8], align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	
	store i8 %data, i8* %1
	%6 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%7 = load i8, i8* %1, align 1
	; variadic call argument generation
	%8 = bitcast {i8*, i64}* %2 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	%10 = bitcast [1 x i8]* %3 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %3
	%12 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	store i8 %7, i8* %12
	%13 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i32 0
	%14 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 0
	store i8* %13, i8** %14
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2, i64 0, i32 1
	store i64 1, i64* %15
	%16 = load {i8*, i64}, {i8*, i64}* %2, align 8
	%17 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$117, i64 0, i32 0), i64 46}, i64 57, i64 2, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$118, i64 0, i32 0), i64 10})
	%18 = bitcast {i8*, i64}* %4 to %..rawptr
	%19 = call %..rawptr @__mem_zero(%..rawptr %18, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %16, {i8*, i64}* %4
	%20 = bitcast %Source_Code_Location* %5 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %5
	store %Source_Code_Location %17, %Source_Code_Location* %5
	%22 = call i64 @_preload-0.append-5382({i8*, i64, i64, %Allocator}* %6, {i8*, i64}* %4, %Source_Code_Location* %5, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %buf, i32 %r, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i32, align 16
	%2 = alloca [4 x i8], align 16
	%3 = alloca i64, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i8*, i64}, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	
	store i32 %r, i32* %1
	; IfStmt
	%6 = load i32, i32* %1, align 4
	%7 = icmp slt i32 %6, 128
	%8 = zext i1 %7 to i8
	%9 = trunc i8 %8 to i1
	br i1 %9, label %if.then-1, label %if.done-2

if.then-1:
	%10 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%11 = load i32, i32* %1, align 4
	%12 = trunc i32 %11 to i8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %10, i8 %12, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; b
	
	; n
	
	; SelectorExpr
	%13 = load i32, i32* %1, align 4
	%14 = call {[4 x i8], i64} @utf8-4.encode_rune(i32 %13, %Context* noalias nonnull %__.context_ptr)
	%15 = extractvalue {[4 x i8], i64} %14, 0
	%16 = extractvalue {[4 x i8], i64} %14, 1
	store [4 x i8] %15, [4 x i8]* %2
	store i64 %16, i64* %3
	%17 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SliceExpr
	%18 = load i64, i64* %3, align 8
	%19 = load [4 x i8], [4 x i8]* %2, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$119, i64 0, i32 0), i64 46}, i64 66, i64 20, i64 0, i64 %18, i64 4)
	%20 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i32 0
	%21 = getelementptr inbounds i8, i8* %20, i64 0
	%22 = sub i64 %18, 0
	%23 = bitcast {i8*, i64}* %4 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	%25 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 0
	store i8* %21, i8** %25
	%26 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 1
	store i64 %22, i64* %26
	%27 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%28 = bitcast {i8*, i64}* %5 to %..rawptr
	%29 = call %..rawptr @__mem_zero(%..rawptr %28, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	store {i8*, i64} %27, {i8*, i64}* %5
	call void @fmt-14.write_bytes({i8*, i64, i64, %Allocator}* %17, {i8*, i64}* %5, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %buf, i64 %i, i64 %base, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca [129 x i8], align 16
	%4 = alloca %..string, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	
	store i64 %i, i64* %1
	
	store i64 %base, i64* %2
	; b
	%7 = bitcast [129 x i8]* %3 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 129)
	store [129 x i8] zeroinitializer, [129 x i8]* %3
	
	; s
	
	; SelectorExpr
	; SliceExpr
	%9 = load [129 x i8], [129 x i8]* %3, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$11a, i64 0, i32 0), i64 46}, i64 71, i64 28, i64 0, i64 129, i64 129)
	%10 = getelementptr inbounds [129 x i8], [129 x i8]* %3, i64 0, i32 0
	%11 = getelementptr inbounds i8, i8* %10, i64 0
	%12 = sub i64 129, 0
	%13 = bitcast {i8*, i64}* %5 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%15 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %11, i8** %15
	%16 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %12, i64* %16
	%17 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%18 = load i64, i64* %1, align 8
	%19 = bitcast i64 %18 to i64
	%20 = load i64, i64* %2, align 8
	; SelectorExpr
	%21 = load %..string, %..string* @strconv-16.digits, align 8
	%22 = bitcast {i8*, i64}* %6 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %17, {i8*, i64}* %6
	%24 = call %..string @strconv-16.append_bits({i8*, i64}* %6, i64 %19, i64 %20, i1 true, i64 64, %..string %21, i64 0, %Context* noalias nonnull %__.context_ptr)
	store %..string %24, %..string* %4
	%25 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%26 = load %..string, %..string* %4, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %25, %..string %26, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define i64 @fmt-14.fprintf(i64 %fd, %..string %fmt, {%..any*, i64}* %args, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %..string, align 16
	%2 = alloca [4096 x i8], align 16
	%3 = alloca {i8*, i64, i64, %Allocator}, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca %..string, align 16
	%7 = alloca {%..any*, i64}, align 16
	
	store i64 %fd, i64* %0
	
	store %..string %fmt, %..string* %1
	%8 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; data
	%9 = bitcast [4096 x i8]* %2 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 4096)
	store [4096 x i8] zeroinitializer, [4096 x i8]* %2
	
	; buf
	
	; SliceExpr
	%11 = load [4096 x i8], [4096 x i8]* %2, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$11b, i64 0, i32 0), i64 46}, i64 92, i64 38, i64 0, i64 4096, i64 4096)
	%12 = getelementptr inbounds [4096 x i8], [4096 x i8]* %2, i64 0, i32 0
	%13 = getelementptr inbounds i8, i8* %12, i64 0
	%14 = sub i64 4096, 0
	%15 = bitcast {i8*, i64}* %4 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	%17 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 0
	store i8* %13, i8** %17
	%18 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %4, i64 0, i32 1
	store i64 %14, i64* %18
	%19 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%20 = bitcast {i8*, i64}* %5 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	store {i8*, i64} %19, {i8*, i64}* %5
	%22 = call {i8*, i64, i64, %Allocator} @fmt-14.string_buffer_from_slice({i8*, i64}* %5, %Context* noalias nonnull %__.context_ptr)
	store {i8*, i64, i64, %Allocator} %22, {i8*, i64, i64, %Allocator}* %3
	; res
	
	%23 = getelementptr inbounds {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %3, i64 0
	%24 = load %..string, %..string* %1, align 8
	%25 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%26 = bitcast {%..any*, i64}* %7 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %7
	store {%..any*, i64} %25, {%..any*, i64}* %7
	%28 = call %..string @fmt-14.sbprintf({i8*, i64, i64, %Allocator}* %23, %..string %24, {%..any*, i64}* %7, %Context* noalias nonnull %__.context_ptr)
	store %..string %28, %..string* %6
	; SelectorExpr
	%29 = load i64, i64* %0, align 8
	%30 = load %..string, %..string* %6, align 8
	%31 = call {i64, i64} @os-3.write_string(i64 %29, %..string %30, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%32 = load %..string, %..string* %6, align 8
	%33 = extractvalue %..string %32, 1
	ret i64 %33
}

define i64 @fmt-14.printf(%..string %fmt, {%..any*, i64}* %args, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca {%..any*, i64}, align 16
	
	store %..string %fmt, %..string* %0
	%2 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; ReturnStmt
	; SelectorExpr
	%3 = load i64, i64* @windows-6.stdout, align 8
	%4 = load %..string, %..string* %0, align 8
	%5 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%6 = bitcast {%..any*, i64}* %1 to %..rawptr
	%7 = call %..rawptr @__mem_zero(%..rawptr %6, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %1
	store {%..any*, i64} %5, {%..any*, i64}* %1
	%8 = call i64 @fmt-14.fprintf(i64 %3, %..string %4, {%..any*, i64}* %1, %Context* noalias nonnull %__.context_ptr)
	ret i64 %8
}

define %..string @fmt-14.aprintf(%..string %fmt, {%..any*, i64}* %args, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca {i8*, i64, i64, %Allocator}, align 16
	%2 = alloca {i8*, i64, i64, %Allocator}, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca {%..any*, i64}, align 16
	%5 = alloca {i8*, i64, i64, %Allocator}, align 16
	
	store %..string %fmt, %..string* %0
	%6 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; buf
	
	; make
	call void @__dynamic_array_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$11c, i64 0, i32 0), i64 46}, i64 121, i64 28, i64 0, i64 0, i64 0)
	%7 = bitcast {i8*, i64, i64, %Allocator}* %2 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 40)
	store {i8*, i64, i64, %Allocator} zeroinitializer, {i8*, i64, i64, %Allocator}* %2
	%9 = bitcast {i8*, i64, i64, %Allocator}* %2 to %..rawptr
	%10 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$11d, i64 0, i32 0), i64 46}, i64 121, i64 28, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$11e, i64 0, i32 0), i64 7})
	%11 = bitcast %Source_Code_Location* %3 to %..rawptr
	%12 = call %..rawptr @__mem_zero(%..rawptr %11, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %10, %Source_Code_Location* %3
	call void @__dynamic_array_make(%..rawptr %9, i64 1, i64 1, i64 0, i64 0, %Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	%13 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %2, align 8
	%14 = bitcast {i8*, i64, i64, %Allocator}* %2 to {i8*, i64, i64, %Allocator}*
	%15 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %14, align 8
	store {i8*, i64, i64, %Allocator} %15, {i8*, i64, i64, %Allocator}* %1
	%16 = getelementptr inbounds {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %1, i64 0
	%17 = load %..string, %..string* %0, align 8
	%18 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%19 = bitcast {%..any*, i64}* %4 to %..rawptr
	%20 = call %..rawptr @__mem_zero(%..rawptr %19, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %4
	store {%..any*, i64} %18, {%..any*, i64}* %4
	%21 = call %..string @fmt-14.sbprintf({i8*, i64, i64, %Allocator}* %16, %..string %17, {%..any*, i64}* %4, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%22 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %1, align 8
	%23 = bitcast {i8*, i64, i64, %Allocator}* %5 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 40)
	store {i8*, i64, i64, %Allocator} zeroinitializer, {i8*, i64, i64, %Allocator}* %5
	store {i8*, i64, i64, %Allocator} %22, {i8*, i64, i64, %Allocator}* %5
	%25 = call %..string @fmt-14.to_string({i8*, i64, i64, %Allocator}* %5, %Context* noalias nonnull %__.context_ptr)
	ret %..string %25
}

define void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %buf, %Type_Info* %ti, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca %Type_Info*, align 16
	%2 = alloca %Type_Info_Named, align 16
	%3 = alloca %Type_Info_Integer, align 16
	%4 = alloca %..any, align 16
	%5 = alloca %..any, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca %..any, align 16
	%10 = alloca %Type_Info_Rune, align 16
	%11 = alloca %Type_Info_Float, align 16
	%12 = alloca %Type_Info_Complex, align 16
	%13 = alloca %Type_Info_String, align 16
	%14 = alloca %Type_Info_Boolean, align 16
	%15 = alloca %..any, align 16
	%16 = alloca %..any, align 16
	%17 = alloca i8, align 16
	%18 = alloca %..any, align 16
	%19 = alloca %Type_Info_Any, align 16
	%20 = alloca %Type_Info_Pointer, align 16
	%21 = alloca %Type_Info_Procedure, align 16
	%22 = alloca %Type_Info_Tuple, align 16
	%23 = alloca {%Type_Info_Tuple, i8}, align 16
	%24 = alloca %Type_Info*, align 16
	%25 = alloca i64, align 16
	%26 = alloca i64, align 16
	%27 = alloca i64, align 16
	%28 = alloca %Type_Info_Tuple, align 16
	%29 = alloca i64, align 16
	%30 = alloca %..string, align 16
	%31 = alloca i64, align 16
	%32 = alloca i64, align 16
	%33 = alloca i64, align 16
	%34 = alloca %Type_Info*, align 16
	%35 = alloca %Type_Info_Array, align 16
	%36 = alloca %Type_Info_Dynamic_Array, align 16
	%37 = alloca %Type_Info_Slice, align 16
	%38 = alloca %Type_Info_Map, align 16
	%39 = alloca %Type_Info_Struct, align 16
	%40 = alloca %..string, align 16
	%41 = alloca i64, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca %Type_Info_Union, align 16
	%45 = alloca %Type_Info*, align 16
	%46 = alloca i64, align 16
	%47 = alloca i64, align 16
	%48 = alloca i64, align 16
	%49 = alloca %Type_Info_Enum, align 16
	%50 = alloca %..string, align 16
	%51 = alloca i64, align 16
	%52 = alloca i64, align 16
	%53 = alloca i64, align 16
	%54 = alloca %Type_Info_Bit_Field, align 16
	%55 = alloca %..string, align 16
	%56 = alloca i64, align 16
	%57 = alloca i64, align 16
	%58 = alloca i64, align 16
	
	store {i8*, i64, i64, %Allocator}* %buf, {i8*, i64, i64, %Allocator}** %0
	
	store %Type_Info* %ti, %Type_Info** %1
	; IfStmt
	%59 = load %Type_Info*, %Type_Info** %1, align 8
	%60 = icmp eq %Type_Info* %59, zeroinitializer
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-1, label %if.done-2

if.then-1:
	%63 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %63, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$11f, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; TypeSwitchStmt
	; SelectorExpr
	%64 = load %Type_Info*, %Type_Info** %1, align 8
	%65 = getelementptr inbounds %Type_Info, %Type_Info* %64, i64 0
	%66 = getelementptr inbounds %Type_Info, %Type_Info* %65, i64 0, i32 2
	%67 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %66, align 8
	; get union's tag
	%68 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %66, i64 0, i32 2 ; UnionTagPtr
	%69 = load i8, i8* %68, align 1
	%70 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %66 to %..rawptr
	%71 = icmp eq i8 %69, 1
	br i1 %71, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%72 = icmp eq i8 %69, 2
	br i1 %72, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%73 = bitcast %..rawptr %70 to %Type_Info_Named*
	%74 = load %Type_Info_Named, %Type_Info_Named* %73, align 8
	store %Type_Info_Named %74, %Type_Info_Named* %2
	%75 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%76 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2, i64 0, i32 0
	%77 = load %..string, %..string* %76, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %75, %..string %77, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-5:
	%78 = icmp eq i8 %69, 3
	br i1 %78, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-6:
	%79 = bitcast %..rawptr %70 to %Type_Info_Integer*
	%80 = load %Type_Info_Integer, %Type_Info_Integer* %79, align 1
	store %Type_Info_Integer %80, %Type_Info_Integer* %3
	; a
	
	; CompoundLit
	%81 = bitcast %..any* %5 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 16)
	store %..any zeroinitializer, %..any* %5
	store %..any zeroinitializer, %..any* %5
	%83 = load %Type_Info*, %Type_Info** %1, align 8
	%84 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	store %Type_Info* %83, %Type_Info** %84
	%85 = load %..any, %..any* %5, align 8
	store %..any %85, %..any* %4
	; TypeSwitchStmt
	%86 = load %..any, %..any* %4, align 8
	%87 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%88 = load %Type_Info*, %Type_Info** %87, align 8
	%89 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%90 = icmp eq %Type_Info* %88, %89
	br i1 %90, label %typeswitch.body-8, label %typeswitch.next-7

typeswitch.next-7:
	%91 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%92 = load %Type_Info*, %Type_Info** %91, align 8
	%93 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%94 = icmp eq %Type_Info* %92, %93
	br i1 %94, label %typeswitch.body-10, label %typeswitch.next-9

typeswitch.body-8:
	%95 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%96 = load %..rawptr, %..rawptr* %95, align 8
	%97 = bitcast %..rawptr %96 to i64*
	%98 = load i64, i64* %97, align 8
	store i64 %98, i64* %6
	%99 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %99, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$120, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.next-9:
	%100 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%101 = load %Type_Info*, %Type_Info** %100, align 8
	%102 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%103 = icmp eq %Type_Info* %101, %102
	br i1 %103, label %typeswitch.body-12, label %typeswitch.next-11

typeswitch.body-10:
	%104 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%105 = load %..rawptr, %..rawptr* %104, align 8
	%106 = bitcast %..rawptr %105 to i64*
	%107 = load i64, i64* %106, align 8
	store i64 %107, i64* %7
	%108 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %108, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$121, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.next-11:
	store %..any %86, %..any* %9
	%109 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; TernaryExpr
	; SelectorExpr
	%110 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %3, i64 0, i32 0
	%111 = load i8, i8* %110, align 1
	%112 = trunc i8 %111 to i1
	br i1 %112, label %if.then-13, label %if.else-14

typeswitch.body-12:
	%113 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%114 = load %..rawptr, %..rawptr* %113, align 8
	%115 = bitcast %..rawptr %114 to i64*
	%116 = load i64, i64* %115, align 8
	store i64 %116, i64* %8
	%117 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %117, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$122, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

if.then-13:
	br label %if.done-15

if.else-14:
	br label %if.done-15

if.done-15:
	%118 = phi i32 [ 105, %if.then-13 ], [ 117, %if.else-14 ]
	%119 = trunc i32 %118 to i8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %109, i8 %119, %Context* noalias nonnull %__.context_ptr)
	%120 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%121 = load %Type_Info*, %Type_Info** %1, align 8
	%122 = getelementptr inbounds %Type_Info, %Type_Info* %121, i64 0
	%123 = getelementptr inbounds %Type_Info, %Type_Info* %122, i64 0, i32 0
	%124 = load i64, i64* %123, align 8
	%125 = mul i64 8, %124
	%126 = bitcast i64 %125 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %120, i64 %126, i64 10, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-16

typeswitch.done-16:
	br label %typeswitch.done-113

typeswitch.next-17:
	%127 = icmp eq i8 %69, 4
	br i1 %127, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%128 = bitcast %..rawptr %70 to %Type_Info_Rune*
	%129 = load %Type_Info_Rune, %Type_Info_Rune* %128, align 1
	store %Type_Info_Rune %129, %Type_Info_Rune* %10
	%130 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %130, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$123, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-19:
	%131 = icmp eq i8 %69, 5
	br i1 %131, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%132 = bitcast %..rawptr %70 to %Type_Info_Float*
	%133 = load %Type_Info_Float, %Type_Info_Float* %132, align 1
	store %Type_Info_Float %133, %Type_Info_Float* %11
	%134 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %134, i8 102, %Context* noalias nonnull %__.context_ptr)
	%135 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%136 = load %Type_Info*, %Type_Info** %1, align 8
	%137 = getelementptr inbounds %Type_Info, %Type_Info* %136, i64 0
	%138 = getelementptr inbounds %Type_Info, %Type_Info* %137, i64 0, i32 0
	%139 = load i64, i64* %138, align 8
	%140 = mul i64 8, %139
	%141 = bitcast i64 %140 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %135, i64 %141, i64 10, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-21:
	%142 = icmp eq i8 %69, 6
	br i1 %142, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%143 = bitcast %..rawptr %70 to %Type_Info_Complex*
	%144 = load %Type_Info_Complex, %Type_Info_Complex* %143, align 1
	store %Type_Info_Complex %144, %Type_Info_Complex* %12
	%145 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %145, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$124, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%146 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%147 = load %Type_Info*, %Type_Info** %1, align 8
	%148 = getelementptr inbounds %Type_Info, %Type_Info* %147, i64 0
	%149 = getelementptr inbounds %Type_Info, %Type_Info* %148, i64 0, i32 0
	%150 = load i64, i64* %149, align 8
	%151 = mul i64 8, %150
	%152 = bitcast i64 %151 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %146, i64 %152, i64 10, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-23:
	%153 = icmp eq i8 %69, 7
	br i1 %153, label %typeswitch.body-29, label %typeswitch.next-28

typeswitch.body-24:
	%154 = bitcast %..rawptr %70 to %Type_Info_String*
	%155 = load %Type_Info_String, %Type_Info_String* %154, align 1
	store %Type_Info_String %155, %Type_Info_String* %13
	; IfStmt
	; SelectorExpr
	%156 = getelementptr inbounds %Type_Info_String, %Type_Info_String* %13, i64 0, i32 0
	%157 = load i8, i8* %156, align 1
	%158 = trunc i8 %157 to i1
	br i1 %158, label %if.then-25, label %if.else-26

if.then-25:
	%159 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %159, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$125, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-27

if.else-26:
	%160 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %160, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$126, i64 0, i32 0), i64 6}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-27

if.done-27:
	br label %typeswitch.done-113

typeswitch.next-28:
	%161 = icmp eq i8 %69, 8
	br i1 %161, label %typeswitch.body-34, label %typeswitch.next-33

typeswitch.body-29:
	%162 = bitcast %..rawptr %70 to %Type_Info_Boolean*
	%163 = load %Type_Info_Boolean, %Type_Info_Boolean* %162, align 1
	store %Type_Info_Boolean %163, %Type_Info_Boolean* %14
	; a
	
	; CompoundLit
	%164 = bitcast %..any* %16 to %..rawptr
	%165 = call %..rawptr @__mem_zero(%..rawptr %164, i64 16)
	store %..any zeroinitializer, %..any* %16
	store %..any zeroinitializer, %..any* %16
	%166 = load %Type_Info*, %Type_Info** %1, align 8
	%167 = getelementptr inbounds %..any, %..any* %16, i64 0, i32 1
	store %Type_Info* %166, %Type_Info** %167
	%168 = load %..any, %..any* %16, align 8
	store %..any %168, %..any* %15
	; TypeSwitchStmt
	%169 = load %..any, %..any* %15, align 8
	%170 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 1
	%171 = load %Type_Info*, %Type_Info** %170, align 8
	%172 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%173 = icmp eq %Type_Info* %171, %172
	br i1 %173, label %typeswitch.body-31, label %typeswitch.next-30

typeswitch.next-30:
	store %..any %169, %..any* %18
	%174 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %174, i8 98, %Context* noalias nonnull %__.context_ptr)
	%175 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%176 = load %Type_Info*, %Type_Info** %1, align 8
	%177 = getelementptr inbounds %Type_Info, %Type_Info* %176, i64 0
	%178 = getelementptr inbounds %Type_Info, %Type_Info* %177, i64 0, i32 0
	%179 = load i64, i64* %178, align 8
	%180 = mul i64 8, %179
	%181 = bitcast i64 %180 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %175, i64 %181, i64 10, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-32

typeswitch.body-31:
	%182 = getelementptr inbounds %..any, %..any* %15, i64 0, i32 0
	%183 = load %..rawptr, %..rawptr* %182, align 8
	%184 = bitcast %..rawptr %183 to i8*
	%185 = load i8, i8* %184, align 1
	store i8 %185, i8* %17
	%186 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %186, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$127, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-32

typeswitch.done-32:
	br label %typeswitch.done-113

typeswitch.next-33:
	%187 = icmp eq i8 %69, 9
	br i1 %187, label %typeswitch.body-36, label %typeswitch.next-35

typeswitch.body-34:
	%188 = bitcast %..rawptr %70 to %Type_Info_Any*
	%189 = load %Type_Info_Any, %Type_Info_Any* %188, align 1
	store %Type_Info_Any %189, %Type_Info_Any* %19
	%190 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %190, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$128, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-35:
	%191 = icmp eq i8 %69, 10
	br i1 %191, label %typeswitch.body-41, label %typeswitch.next-40

typeswitch.body-36:
	%192 = bitcast %..rawptr %70 to %Type_Info_Pointer*
	%193 = load %Type_Info_Pointer, %Type_Info_Pointer* %192, align 8
	store %Type_Info_Pointer %193, %Type_Info_Pointer* %20
	; IfStmt
	; SelectorExpr
	%194 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %20, i64 0, i32 0
	%195 = load %Type_Info*, %Type_Info** %194, align 8
	%196 = icmp eq %Type_Info* %195, zeroinitializer
	%197 = zext i1 %196 to i8
	%198 = trunc i8 %197 to i1
	br i1 %198, label %if.then-37, label %if.else-38

if.then-37:
	%199 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %199, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$129, i64 0, i32 0), i64 6}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-39

if.else-38:
	%200 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %200, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$12a, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%201 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%202 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %20, i64 0, i32 0
	%203 = load %Type_Info*, %Type_Info** %202, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %201, %Type_Info* %203, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-39

if.done-39:
	br label %typeswitch.done-113

typeswitch.next-40:
	%204 = icmp eq i8 %69, 14
	br i1 %204, label %typeswitch.body-55, label %typeswitch.next-54

typeswitch.body-41:
	%205 = bitcast %..rawptr %70 to %Type_Info_Procedure*
	%206 = load %Type_Info_Procedure, %Type_Info_Procedure* %205, align 8
	store %Type_Info_Procedure %206, %Type_Info_Procedure* %21
	%207 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %207, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$12b, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%208 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 0
	%209 = load %Type_Info*, %Type_Info** %208, align 8
	%210 = icmp eq %Type_Info* %209, zeroinitializer
	%211 = zext i1 %210 to i8
	%212 = trunc i8 %211 to i1
	br i1 %212, label %if.then-42, label %if.else-43

if.then-42:
	%213 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %213, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$12c, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-51

if.else-43:
	; t
	
	; SelectorExpr
	; SelectorExpr
	%214 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 0
	%215 = load %Type_Info*, %Type_Info** %214, align 8
	%216 = getelementptr inbounds %Type_Info, %Type_Info* %215, i64 0
	%217 = getelementptr inbounds %Type_Info, %Type_Info* %216, i64 0, i32 2
	%218 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %217, align 8
	; cast - union_cast
	%219 = bitcast {%Type_Info_Tuple, i8}* %23 to %..rawptr
	%220 = call %..rawptr @__mem_zero(%..rawptr %219, i64 40)
	store {%Type_Info_Tuple, i8} zeroinitializer, {%Type_Info_Tuple, i8}* %23
	%221 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %217, i64 0, i32 2 ; UnionTagPtr
	%222 = load i8, i8* %221, align 1
	%223 = icmp eq i8 %222, 14
	br i1 %223, label %union_cast.ok-44, label %union_cast.end-45

union_cast.ok-44:
	%224 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 0
	%225 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 1
	%226 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %217 to %Type_Info_Tuple*
	%227 = load %Type_Info_Tuple, %Type_Info_Tuple* %226, align 8
	store %Type_Info_Tuple %227, %Type_Info_Tuple* %224
	store i8 1, i8* %225
	br label %union_cast.end-45

union_cast.end-45:
	%228 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 1
	%229 = load i8, i8* %228, align 1
	%230 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%231 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 33
	%232 = trunc i8 %229 to i1
	call void @__type_assertion_check(i1 %232, %..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$12d, i64 0, i32 0), i64 46}, i64 209, i64 21, %Type_Info* %230, %Type_Info* %231)
	%233 = getelementptr inbounds {%Type_Info_Tuple, i8}, {%Type_Info_Tuple, i8}* %23, i64 0, i32 0
	%234 = load %Type_Info_Tuple, %Type_Info_Tuple* %233, align 8
	store %Type_Info_Tuple %234, %Type_Info_Tuple* %22
	%235 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %235, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$12e, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; t
	%236 = bitcast %Type_Info** %24 to %..rawptr
	%237 = call %..rawptr @__mem_zero(%..rawptr %236, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %24
	
	; i
	%238 = bitcast i64* %25 to %..rawptr
	%239 = call %..rawptr @__mem_zero(%..rawptr %238, i64 8)
	store i64 zeroinitializer, i64* %25
	
	; SelectorExpr
	%240 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %22, i64 0, i32 0
	%241 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %240, align 8
	%242 = bitcast i64* %26 to %..rawptr
	%243 = call %..rawptr @__mem_zero(%..rawptr %242, i64 8)
	store i64 zeroinitializer, i64* %26
	%244 = extractvalue {%Type_Info**, i64} %241, 1
	store i64 %244, i64* %26
	%245 = bitcast i64* %27 to %..rawptr
	%246 = call %..rawptr @__mem_zero(%..rawptr %245, i64 8)
	store i64 zeroinitializer, i64* %27
	store i64 -1, i64* %27
	br label %for.index.loop-46

for.index.loop-46:
	%247 = load i64, i64* %27, align 8
	%248 = add i64 %247, 1
	store i64 %248, i64* %27
	%249 = load i64, i64* %26, align 8
	%250 = icmp slt i64 %248, %249
	br i1 %250, label %for.index.body-47, label %for.index.done-50

for.index.body-47:
	%251 = load i64, i64* %27, align 8
	%252 = extractvalue {%Type_Info**, i64} %241, 0
	%253 = getelementptr inbounds %Type_Info*, %Type_Info** %252, i64 %251
	%254 = load %Type_Info*, %Type_Info** %253, align 8
	store %Type_Info* %254, %Type_Info** %24
	store i64 %251, i64* %25
	; IfStmt
	%255 = load i64, i64* %25, align 8
	%256 = icmp sgt i64 %255, 0
	%257 = zext i1 %256 to i8
	%258 = trunc i8 %257 to i1
	br i1 %258, label %if.then-48, label %if.done-49

if.then-48:
	%259 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %259, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$12f, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-49

if.done-49:
	%260 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%261 = load %Type_Info*, %Type_Info** %24, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %260, %Type_Info* %261, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-46

for.index.done-50:
	%262 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %262, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$130, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-51

if.done-51:
	; IfStmt
	; SelectorExpr
	%263 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 1
	%264 = load %Type_Info*, %Type_Info** %263, align 8
	%265 = icmp ne %Type_Info* %264, zeroinitializer
	%266 = zext i1 %265 to i8
	%267 = trunc i8 %266 to i1
	br i1 %267, label %if.then-52, label %if.done-53

if.then-52:
	%268 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %268, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$131, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	%269 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%270 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %21, i64 0, i32 1
	%271 = load %Type_Info*, %Type_Info** %270, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %269, %Type_Info* %271, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-53

if.done-53:
	br label %typeswitch.done-113

typeswitch.next-54:
	%272 = icmp eq i8 %69, 11
	br i1 %272, label %typeswitch.body-68, label %typeswitch.next-67

typeswitch.body-55:
	%273 = bitcast %..rawptr %70 to %Type_Info_Tuple*
	%274 = load %Type_Info_Tuple, %Type_Info_Tuple* %273, align 8
	store %Type_Info_Tuple %274, %Type_Info_Tuple* %28
	; count
	
	; SelectorExpr
	%275 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 1
	%276 = load {%..string*, i64}, {%..string*, i64}* %275, align 8
	%277 = extractvalue {%..string*, i64} %276, 1
	store i64 %277, i64* %29
	; IfStmt
	%278 = load i64, i64* %29, align 8
	%279 = icmp ne i64 %278, 1
	%280 = zext i1 %279 to i8
	%281 = trunc i8 %280 to i1
	br i1 %281, label %if.then-56, label %if.done-57

if.then-56:
	%282 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %282, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$132, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-57

if.done-57:
	; RangeStmt
	; name
	%283 = bitcast %..string* %30 to %..rawptr
	%284 = call %..rawptr @__mem_zero(%..rawptr %283, i64 16)
	store %..string zeroinitializer, %..string* %30
	
	; i
	%285 = bitcast i64* %31 to %..rawptr
	%286 = call %..rawptr @__mem_zero(%..rawptr %285, i64 8)
	store i64 zeroinitializer, i64* %31
	
	; SelectorExpr
	%287 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 1
	%288 = load {%..string*, i64}, {%..string*, i64}* %287, align 8
	%289 = bitcast i64* %32 to %..rawptr
	%290 = call %..rawptr @__mem_zero(%..rawptr %289, i64 8)
	store i64 zeroinitializer, i64* %32
	%291 = extractvalue {%..string*, i64} %288, 1
	store i64 %291, i64* %32
	%292 = bitcast i64* %33 to %..rawptr
	%293 = call %..rawptr @__mem_zero(%..rawptr %292, i64 8)
	store i64 zeroinitializer, i64* %33
	store i64 -1, i64* %33
	br label %for.index.loop-58

for.index.loop-58:
	%294 = load i64, i64* %33, align 8
	%295 = add i64 %294, 1
	store i64 %295, i64* %33
	%296 = load i64, i64* %32, align 8
	%297 = icmp slt i64 %295, %296
	br i1 %297, label %for.index.body-59, label %for.index.done-64

for.index.body-59:
	%298 = load i64, i64* %33, align 8
	%299 = extractvalue {%..string*, i64} %288, 0
	%300 = getelementptr inbounds %..string, %..string* %299, i64 %298
	%301 = load %..string, %..string* %300, align 8
	store %..string %301, %..string* %30
	store i64 %298, i64* %31
	; IfStmt
	%302 = load i64, i64* %31, align 8
	%303 = icmp sgt i64 %302, 0
	%304 = zext i1 %303 to i8
	%305 = trunc i8 %304 to i1
	br i1 %305, label %if.then-60, label %if.done-61

if.then-60:
	%306 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %306, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$133, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-61

if.done-61:
	; t
	
	; IndexExpr
	; SelectorExpr
	%307 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %28, i64 0, i32 0
	%308 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %307, align 8
	%309 = extractvalue {%Type_Info**, i64} %308, 0
	%310 = load i64, i64* %31, align 8
	%311 = extractvalue {%Type_Info**, i64} %308, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$134, i64 0, i32 0), i64 46}, i64 227, i64 20, i64 %310, i64 %311)
	%312 = getelementptr inbounds %Type_Info*, %Type_Info** %309, i64 %310
	%313 = load %Type_Info*, %Type_Info** %312, align 8
	store %Type_Info* %313, %Type_Info** %34
	; IfStmt
	%314 = load %..string, %..string* %30, align 8
	%315 = extractvalue %..string %314, 1
	%316 = icmp sgt i64 %315, 0
	%317 = zext i1 %316 to i8
	%318 = trunc i8 %317 to i1
	br i1 %318, label %if.then-62, label %if.done-63

if.then-62:
	%319 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%320 = load %..string, %..string* %30, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %319, %..string %320, %Context* noalias nonnull %__.context_ptr)
	%321 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %321, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$135, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-63

if.done-63:
	%322 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%323 = load %Type_Info*, %Type_Info** %34, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %322, %Type_Info* %323, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-58

for.index.done-64:
	; IfStmt
	%324 = load i64, i64* %29, align 8
	%325 = icmp ne i64 %324, 1
	%326 = zext i1 %325 to i8
	%327 = trunc i8 %326 to i1
	br i1 %327, label %if.then-65, label %if.done-66

if.then-65:
	%328 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %328, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$136, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-66

if.done-66:
	br label %typeswitch.done-113

typeswitch.next-67:
	%329 = icmp eq i8 %69, 12
	br i1 %329, label %typeswitch.body-70, label %typeswitch.next-69

typeswitch.body-68:
	%330 = bitcast %..rawptr %70 to %Type_Info_Array*
	%331 = load %Type_Info_Array, %Type_Info_Array* %330, align 8
	store %Type_Info_Array %331, %Type_Info_Array* %35
	%332 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %332, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$137, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%333 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%334 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %35, i64 0, i32 2
	%335 = load i64, i64* %334, align 8
	%336 = bitcast i64 %335 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %333, i64 %336, i64 10, %Context* noalias nonnull %__.context_ptr)
	%337 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %337, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$138, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	%338 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%339 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %35, i64 0, i32 0
	%340 = load %Type_Info*, %Type_Info** %339, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %338, %Type_Info* %340, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-69:
	%341 = icmp eq i8 %69, 13
	br i1 %341, label %typeswitch.body-72, label %typeswitch.next-71

typeswitch.body-70:
	%342 = bitcast %..rawptr %70 to %Type_Info_Dynamic_Array*
	%343 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %342, align 8
	store %Type_Info_Dynamic_Array %343, %Type_Info_Dynamic_Array* %36
	%344 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %344, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$139, i64 0, i32 0), i64 9}, %Context* noalias nonnull %__.context_ptr)
	%345 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%346 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %36, i64 0, i32 0
	%347 = load %Type_Info*, %Type_Info** %346, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %345, %Type_Info* %347, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-71:
	%348 = icmp eq i8 %69, 18
	br i1 %348, label %typeswitch.body-74, label %typeswitch.next-73

typeswitch.body-72:
	%349 = bitcast %..rawptr %70 to %Type_Info_Slice*
	%350 = load %Type_Info_Slice, %Type_Info_Slice* %349, align 8
	store %Type_Info_Slice %350, %Type_Info_Slice* %37
	%351 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %351, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$13a, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%352 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%353 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %37, i64 0, i32 0
	%354 = load %Type_Info*, %Type_Info** %353, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %352, %Type_Info* %354, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-73:
	%355 = icmp eq i8 %69, 15
	br i1 %355, label %typeswitch.body-76, label %typeswitch.next-75

typeswitch.body-74:
	%356 = bitcast %..rawptr %70 to %Type_Info_Map*
	%357 = load %Type_Info_Map, %Type_Info_Map* %356, align 8
	store %Type_Info_Map %357, %Type_Info_Map* %38
	%358 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %358, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$13b, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	%359 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%360 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %38, i64 0, i32 0
	%361 = load %Type_Info*, %Type_Info** %360, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %359, %Type_Info* %361, %Context* noalias nonnull %__.context_ptr)
	%362 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %362, i8 93, %Context* noalias nonnull %__.context_ptr)
	%363 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%364 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %38, i64 0, i32 1
	%365 = load %Type_Info*, %Type_Info** %364, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %363, %Type_Info* %365, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-75:
	%366 = icmp eq i8 %69, 16
	br i1 %366, label %typeswitch.body-89, label %typeswitch.next-88

typeswitch.body-76:
	%367 = bitcast %..rawptr %70 to %Type_Info_Struct*
	%368 = load %Type_Info_Struct, %Type_Info_Struct* %367, align 8
	store %Type_Info_Struct %368, %Type_Info_Struct* %39
	%369 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %369, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$13c, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%370 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 4
	%371 = load i8, i8* %370, align 1
	%372 = trunc i8 %371 to i1
	br i1 %372, label %if.then-77, label %if.done-78

if.then-77:
	%373 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %373, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$13d, i64 0, i32 0), i64 8}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-78

if.done-78:
	; IfStmt
	; SelectorExpr
	%374 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 5
	%375 = load i8, i8* %374, align 1
	%376 = trunc i8 %375 to i1
	br i1 %376, label %if.then-79, label %if.done-80

if.then-79:
	%377 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %377, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$13e, i64 0, i32 0), i64 11}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-80

if.done-80:
	; IfStmt
	; SelectorExpr
	%378 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 6
	%379 = load i8, i8* %378, align 1
	%380 = trunc i8 %379 to i1
	br i1 %380, label %if.then-81, label %if.done-82

if.then-81:
	%381 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %381, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$13f, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%382 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%383 = load %Type_Info*, %Type_Info** %1, align 8
	%384 = getelementptr inbounds %Type_Info, %Type_Info* %383, i64 0
	%385 = getelementptr inbounds %Type_Info, %Type_Info* %384, i64 0, i32 1
	%386 = load i64, i64* %385, align 8
	%387 = bitcast i64 %386 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %382, i64 %387, i64 10, %Context* noalias nonnull %__.context_ptr)
	%388 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %388, i8 32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-82

if.done-82:
	%389 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %389, i8 123, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%390 = bitcast %..string* %40 to %..rawptr
	%391 = call %..rawptr @__mem_zero(%..rawptr %390, i64 16)
	store %..string zeroinitializer, %..string* %40
	
	; i
	%392 = bitcast i64* %41 to %..rawptr
	%393 = call %..rawptr @__mem_zero(%..rawptr %392, i64 8)
	store i64 zeroinitializer, i64* %41
	
	; SelectorExpr
	%394 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 1
	%395 = load {%..string*, i64}, {%..string*, i64}* %394, align 8
	%396 = bitcast i64* %42 to %..rawptr
	%397 = call %..rawptr @__mem_zero(%..rawptr %396, i64 8)
	store i64 zeroinitializer, i64* %42
	%398 = extractvalue {%..string*, i64} %395, 1
	store i64 %398, i64* %42
	%399 = bitcast i64* %43 to %..rawptr
	%400 = call %..rawptr @__mem_zero(%..rawptr %399, i64 8)
	store i64 zeroinitializer, i64* %43
	store i64 -1, i64* %43
	br label %for.index.loop-83

for.index.loop-83:
	%401 = load i64, i64* %43, align 8
	%402 = add i64 %401, 1
	store i64 %402, i64* %43
	%403 = load i64, i64* %42, align 8
	%404 = icmp slt i64 %402, %403
	br i1 %404, label %for.index.body-84, label %for.index.done-87

for.index.body-84:
	%405 = load i64, i64* %43, align 8
	%406 = extractvalue {%..string*, i64} %395, 0
	%407 = getelementptr inbounds %..string, %..string* %406, i64 %405
	%408 = load %..string, %..string* %407, align 8
	store %..string %408, %..string* %40
	store i64 %405, i64* %41
	; IfStmt
	%409 = load i64, i64* %41, align 8
	%410 = icmp sgt i64 %409, 0
	%411 = zext i1 %410 to i8
	%412 = trunc i8 %411 to i1
	br i1 %412, label %if.then-85, label %if.done-86

if.then-85:
	%413 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %413, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$140, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-86

if.done-86:
	%414 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%415 = load %..string, %..string* %40, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %414, %..string %415, %Context* noalias nonnull %__.context_ptr)
	%416 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %416, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$141, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%417 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%418 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %39, i64 0, i32 0
	%419 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %418, align 8
	%420 = extractvalue {%Type_Info**, i64} %419, 0
	%421 = load i64, i64* %41, align 8
	%422 = extractvalue {%Type_Info**, i64} %419, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$142, i64 0, i32 0), i64 46}, i64 269, i64 31, i64 %421, i64 %422)
	%423 = getelementptr inbounds %Type_Info*, %Type_Info** %420, i64 %421
	%424 = load %Type_Info*, %Type_Info** %423, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %417, %Type_Info* %424, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-83

for.index.done-87:
	%425 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %425, i8 125, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-88:
	%426 = icmp eq i8 %69, 17
	br i1 %426, label %typeswitch.body-96, label %typeswitch.next-95

typeswitch.body-89:
	%427 = bitcast %..rawptr %70 to %Type_Info_Union*
	%428 = load %Type_Info_Union, %Type_Info_Union* %427, align 8
	store %Type_Info_Union %428, %Type_Info_Union* %44
	%429 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %429, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$143, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; variant
	%430 = bitcast %Type_Info** %45 to %..rawptr
	%431 = call %..rawptr @__mem_zero(%..rawptr %430, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %45
	
	; i
	%432 = bitcast i64* %46 to %..rawptr
	%433 = call %..rawptr @__mem_zero(%..rawptr %432, i64 8)
	store i64 zeroinitializer, i64* %46
	
	; SelectorExpr
	%434 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %44, i64 0, i32 0
	%435 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %434, align 8
	%436 = bitcast i64* %47 to %..rawptr
	%437 = call %..rawptr @__mem_zero(%..rawptr %436, i64 8)
	store i64 zeroinitializer, i64* %47
	%438 = extractvalue {%Type_Info**, i64} %435, 1
	store i64 %438, i64* %47
	%439 = bitcast i64* %48 to %..rawptr
	%440 = call %..rawptr @__mem_zero(%..rawptr %439, i64 8)
	store i64 zeroinitializer, i64* %48
	store i64 -1, i64* %48
	br label %for.index.loop-90

for.index.loop-90:
	%441 = load i64, i64* %48, align 8
	%442 = add i64 %441, 1
	store i64 %442, i64* %48
	%443 = load i64, i64* %47, align 8
	%444 = icmp slt i64 %442, %443
	br i1 %444, label %for.index.body-91, label %for.index.done-94

for.index.body-91:
	%445 = load i64, i64* %48, align 8
	%446 = extractvalue {%Type_Info**, i64} %435, 0
	%447 = getelementptr inbounds %Type_Info*, %Type_Info** %446, i64 %445
	%448 = load %Type_Info*, %Type_Info** %447, align 8
	store %Type_Info* %448, %Type_Info** %45
	store i64 %445, i64* %46
	; IfStmt
	%449 = load i64, i64* %46, align 8
	%450 = icmp sgt i64 %449, 0
	%451 = zext i1 %450 to i8
	%452 = trunc i8 %451 to i1
	br i1 %452, label %if.then-92, label %if.done-93

if.then-92:
	%453 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %453, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$144, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-93

if.done-93:
	%454 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%455 = load %Type_Info*, %Type_Info** %45, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %454, %Type_Info* %455, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-90

for.index.done-94:
	%456 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %456, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$145, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-95:
	%457 = icmp eq i8 %69, 19
	br i1 %457, label %typeswitch.body-105, label %typeswitch.next-104

typeswitch.body-96:
	%458 = bitcast %..rawptr %70 to %Type_Info_Enum*
	%459 = load %Type_Info_Enum, %Type_Info_Enum* %458, align 8
	store %Type_Info_Enum %459, %Type_Info_Enum* %49
	%460 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %460, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$146, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	%461 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%462 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %49, i64 0, i32 0
	%463 = load %Type_Info*, %Type_Info** %462, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %461, %Type_Info* %463, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%464 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %49, i64 0, i32 3
	%465 = load i8, i8* %464, align 1
	%466 = trunc i8 %465 to i1
	br i1 %466, label %if.then-97, label %if.done-98

if.then-97:
	%467 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %467, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$147, i64 0, i32 0), i64 8}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-98

if.done-98:
	%468 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %468, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$148, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%469 = bitcast %..string* %50 to %..rawptr
	%470 = call %..rawptr @__mem_zero(%..rawptr %469, i64 16)
	store %..string zeroinitializer, %..string* %50
	
	; i
	%471 = bitcast i64* %51 to %..rawptr
	%472 = call %..rawptr @__mem_zero(%..rawptr %471, i64 8)
	store i64 zeroinitializer, i64* %51
	
	; SelectorExpr
	%473 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %49, i64 0, i32 1
	%474 = load {%..string*, i64}, {%..string*, i64}* %473, align 8
	%475 = bitcast i64* %52 to %..rawptr
	%476 = call %..rawptr @__mem_zero(%..rawptr %475, i64 8)
	store i64 zeroinitializer, i64* %52
	%477 = extractvalue {%..string*, i64} %474, 1
	store i64 %477, i64* %52
	%478 = bitcast i64* %53 to %..rawptr
	%479 = call %..rawptr @__mem_zero(%..rawptr %478, i64 8)
	store i64 zeroinitializer, i64* %53
	store i64 -1, i64* %53
	br label %for.index.loop-99

for.index.loop-99:
	%480 = load i64, i64* %53, align 8
	%481 = add i64 %480, 1
	store i64 %481, i64* %53
	%482 = load i64, i64* %52, align 8
	%483 = icmp slt i64 %481, %482
	br i1 %483, label %for.index.body-100, label %for.index.done-103

for.index.body-100:
	%484 = load i64, i64* %53, align 8
	%485 = extractvalue {%..string*, i64} %474, 0
	%486 = getelementptr inbounds %..string, %..string* %485, i64 %484
	%487 = load %..string, %..string* %486, align 8
	store %..string %487, %..string* %50
	store i64 %484, i64* %51
	; IfStmt
	%488 = load i64, i64* %51, align 8
	%489 = icmp sgt i64 %488, 0
	%490 = zext i1 %489 to i8
	%491 = trunc i8 %490 to i1
	br i1 %491, label %if.then-101, label %if.done-102

if.then-101:
	%492 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %492, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$149, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-102

if.done-102:
	%493 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%494 = load %..string, %..string* %50, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %493, %..string %494, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-99

for.index.done-103:
	%495 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %495, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$14a, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.next-104:
	br label %typeswitch.done-113

typeswitch.body-105:
	%496 = bitcast %..rawptr %70 to %Type_Info_Bit_Field*
	%497 = load %Type_Info_Bit_Field, %Type_Info_Bit_Field* %496, align 8
	store %Type_Info_Bit_Field %497, %Type_Info_Bit_Field* %54
	%498 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %498, %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$14b, i64 0, i32 0), i64 10}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%499 = load %Type_Info*, %Type_Info** %1, align 8
	%500 = getelementptr inbounds %Type_Info, %Type_Info* %499, i64 0
	%501 = getelementptr inbounds %Type_Info, %Type_Info* %500, i64 0, i32 1
	%502 = load i64, i64* %501, align 8
	%503 = icmp ne i64 %502, 1
	%504 = zext i1 %503 to i8
	%505 = trunc i8 %504 to i1
	br i1 %505, label %if.then-106, label %if.done-107

if.then-106:
	%506 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %506, %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$14c, i64 0, i32 0), i64 7}, %Context* noalias nonnull %__.context_ptr)
	%507 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SelectorExpr
	%508 = load %Type_Info*, %Type_Info** %1, align 8
	%509 = getelementptr inbounds %Type_Info, %Type_Info* %508, i64 0
	%510 = getelementptr inbounds %Type_Info, %Type_Info* %509, i64 0, i32 1
	%511 = load i64, i64* %510, align 8
	%512 = bitcast i64 %511 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %507, i64 %512, i64 10, %Context* noalias nonnull %__.context_ptr)
	%513 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %513, i32 32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-107

if.done-107:
	%514 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %514, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$14d, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; name
	%515 = bitcast %..string* %55 to %..rawptr
	%516 = call %..rawptr @__mem_zero(%..rawptr %515, i64 16)
	store %..string zeroinitializer, %..string* %55
	
	; i
	%517 = bitcast i64* %56 to %..rawptr
	%518 = call %..rawptr @__mem_zero(%..rawptr %517, i64 8)
	store i64 zeroinitializer, i64* %56
	
	; SelectorExpr
	%519 = getelementptr inbounds %Type_Info_Bit_Field, %Type_Info_Bit_Field* %54, i64 0, i32 0
	%520 = load {%..string*, i64}, {%..string*, i64}* %519, align 8
	%521 = bitcast i64* %57 to %..rawptr
	%522 = call %..rawptr @__mem_zero(%..rawptr %521, i64 8)
	store i64 zeroinitializer, i64* %57
	%523 = extractvalue {%..string*, i64} %520, 1
	store i64 %523, i64* %57
	%524 = bitcast i64* %58 to %..rawptr
	%525 = call %..rawptr @__mem_zero(%..rawptr %524, i64 8)
	store i64 zeroinitializer, i64* %58
	store i64 -1, i64* %58
	br label %for.index.loop-108

for.index.loop-108:
	%526 = load i64, i64* %58, align 8
	%527 = add i64 %526, 1
	store i64 %527, i64* %58
	%528 = load i64, i64* %57, align 8
	%529 = icmp slt i64 %527, %528
	br i1 %529, label %for.index.body-109, label %for.index.done-112

for.index.body-109:
	%530 = load i64, i64* %58, align 8
	%531 = extractvalue {%..string*, i64} %520, 0
	%532 = getelementptr inbounds %..string, %..string* %531, i64 %530
	%533 = load %..string, %..string* %532, align 8
	store %..string %533, %..string* %55
	store i64 %530, i64* %56
	; IfStmt
	%534 = load i64, i64* %56, align 8
	%535 = icmp sgt i64 %534, 0
	%536 = zext i1 %535 to i8
	%537 = trunc i8 %536 to i1
	br i1 %537, label %if.then-110, label %if.done-111

if.then-110:
	%538 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %538, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$14e, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-111

if.done-111:
	%539 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%540 = load %..string, %..string* %55, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %539, %..string %540, %Context* noalias nonnull %__.context_ptr)
	%541 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %541, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$14f, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%542 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; IndexExpr
	; SelectorExpr
	%543 = getelementptr inbounds %Type_Info_Bit_Field, %Type_Info_Bit_Field* %54, i64 0, i32 1
	%544 = load {i32*, i64}, {i32*, i64}* %543, align 8
	%545 = extractvalue {i32*, i64} %544, 0
	%546 = load i64, i64* %56, align 8
	%547 = extractvalue {i32*, i64} %544, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$150, i64 0, i32 0), i64 46}, i64 304, i64 33, i64 %546, i64 %547)
	%548 = getelementptr inbounds i32, i32* %545, i64 %546
	%549 = load i32, i32* %548, align 4
	%550 = sext i32 %549 to i64
	call void @fmt-14.write_i64({i8*, i64, i64, %Allocator}* %542, i64 %550, i64 10, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-108

for.index.done-112:
	%551 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %551, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$151, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-113

typeswitch.done-113:
	ret void
}

define {i64, i64, i8} @fmt-14._parse_int(%..string %s, i64 %offset, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8, align 16
	%5 = alloca i8, align 16
	%6 = alloca {i64, i64, i8}, align 16
	
	store %..string %s, %..string* %0
	
	store i64 %offset, i64* %1
	%7 = bitcast i64* %2 to %..rawptr
	%8 = call %..rawptr @__mem_zero(%..rawptr %7, i64 8)
	store i64 zeroinitializer, i64* %2
	
	%9 = bitcast i64* %3 to %..rawptr
	%10 = call %..rawptr @__mem_zero(%..rawptr %9, i64 8)
	store i64 zeroinitializer, i64* %3
	
	%11 = bitcast i8* %4 to %..rawptr
	%12 = call %..rawptr @__mem_zero(%..rawptr %11, i64 1)
	store i8 zeroinitializer, i8* %4
	
	; AssignStmt
	%13 = load i64, i64* %1, align 8
	store i64 %13, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%14 = load i64, i64* %3, align 8
	%15 = load %..string, %..string* %0, align 8
	%16 = extractvalue %..string %15, 1
	%17 = icmp sle i64 %14, %16
	%18 = zext i1 %17 to i8
	%19 = trunc i8 %18 to i1
	br i1 %19, label %for.body-2, label %for.done-5

for.body-2:
	; c
	
	; IndexExpr
	%20 = load %..string, %..string* %0, align 8
	%21 = extractvalue %..string %20, 0
	%22 = extractvalue %..string %20, 1
	%23 = load i64, i64* %3, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$152, i64 0, i32 0), i64 46}, i64 316, i64 10, i64 %23, i64 %22)
	%24 = getelementptr inbounds i8, i8* %21, i64 %23
	%25 = load i8, i8* %24, align 1
	store i8 %25, i8* %5
	; IfStmt
	%26 = load i8, i8* %5, align 1
	%27 = call i8 @fmt-14._parse_int.is_digit-0(i8 %26, %Context* noalias nonnull %__.context_ptr)
	%28 = trunc i8 %27 to i1
	br i1 %28, label %if.done-4, label %if.then-3

if.then-3:
	; break
	br label %for.done-5

if.done-4:
	; AssignStmt
	%29 = load i64, i64* %3, align 8
	%30 = add i64 %29, 1
	store i64 %30, i64* %3
	; AssignStmt
	%31 = load i64, i64* %2, align 8
	%32 = mul i64 %31, 10
	store i64 %32, i64* %2
	; AssignStmt
	%33 = load i8, i8* %5, align 1
	%34 = zext i8 %33 to i64
	%35 = sub i64 %34, 48
	%36 = load i64, i64* %2, align 8
	%37 = add i64 %36, %35
	store i64 %37, i64* %2
	br label %for.loop-1

for.done-5:
	; AssignStmt
	%38 = load i64, i64* %3, align 8
	%39 = load i64, i64* %1, align 8
	%40 = icmp sgt i64 %38, %39
	%41 = zext i1 %40 to i8
	store i8 %41, i8* %4
	; ReturnStmt
	%42 = load i64, i64* %2, align 8
	%43 = load i64, i64* %3, align 8
	%44 = load i8, i8* %4, align 1
	%45 = bitcast {i64, i64, i8}* %6 to %..rawptr
	%46 = call %..rawptr @__mem_zero(%..rawptr %45, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %6
	%47 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %6, i64 0, i32 0
	store i64 %42, i64* %47
	%48 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %6, i64 0, i32 1
	store i64 %43, i64* %48
	%49 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %6, i64 0, i32 2
	store i8 %44, i8* %49
	%50 = load {i64, i64, i8}, {i64, i64, i8}* %6, align 8
	ret {i64, i64, i8} %50
}

define i8 @fmt-14._parse_int.is_digit-0(i8 %r, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca i8, align 16
	
	store i8 %r, i8* %0
	; ReturnStmt
	%1 = load i8, i8* %0, align 1
	%2 = icmp ule i8 48, %1
	%3 = zext i1 %2 to i8
	%4 = load i8, i8* %0, align 1
	%5 = icmp ule i8 48, %4
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %logical.cmp.rhs-1, label %logical.cmp.done-2

logical.cmp.rhs-1:
	%8 = load i8, i8* %0, align 1
	%9 = icmp ule i8 %8, 57
	%10 = zext i1 %9 to i8
	br label %logical.cmp.done-2

logical.cmp.done-2:
	%11 = phi i8 [ 0, %decls-0 ], [ %10, %logical.cmp.rhs-1 ]
	ret i8 %11
}

define {i64, i64, i8} @fmt-14._arg_number(%fmt-14.Fmt_Info* %fi, i64 %arg_index, %..string %format, i64 %offset, i64 %arg_count, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %..string, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i8, align 16
	%8 = alloca {i64, i64, i8}, align 16
	%9 = alloca i64, align 16
	%10 = alloca %..string, align 16
	%11 = alloca {i64, i64, i8}, align 16
	%12 = alloca {i64, i64, i8}, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i64 %arg_index, i64* %1
	
	store %..string %format, %..string* %2
	
	store i64 %offset, i64* %3
	
	store i64 %arg_count, i64* %4
	%13 = bitcast i64* %5 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 8)
	store i64 zeroinitializer, i64* %5
	
	%15 = bitcast i64* %6 to %..rawptr
	%16 = call %..rawptr @__mem_zero(%..rawptr %15, i64 8)
	store i64 zeroinitializer, i64* %6
	
	%17 = bitcast i8* %7 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 1)
	store i8 zeroinitializer, i8* %7
	
	; IfStmt
	%19 = load %..string, %..string* %2, align 8
	%20 = extractvalue %..string %19, 1
	%21 = load i64, i64* %3, align 8
	%22 = icmp sle i64 %20, %21
	%23 = zext i1 %22 to i8
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; IndexExpr
	%25 = load %..string, %..string* %2, align 8
	%26 = extractvalue %..string %25, 0
	%27 = extractvalue %..string %25, 1
	%28 = load i64, i64* %3, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$153, i64 0, i32 0), i64 46}, i64 345, i64 37, i64 %28, i64 %27)
	%29 = getelementptr inbounds i8, i8* %26, i64 %28
	%30 = load i8, i8* %29, align 1
	%31 = icmp ne i8 %30, 91
	%32 = zext i1 %31 to i8
	%33 = trunc i8 %32 to i1
	br i1 %33, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	%34 = load i64, i64* %1, align 8
	%35 = load i64, i64* %3, align 8
	%36 = bitcast {i64, i64, i8}* %8 to %..rawptr
	%37 = call %..rawptr @__mem_zero(%..rawptr %36, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %8
	%38 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 0
	store i64 %34, i64* %38
	%39 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 1
	store i64 %35, i64* %39
	%40 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 2
	store i8 0, i8* %40
	%41 = load {i64, i64, i8}, {i64, i64, i8}* %8, align 8
	ret {i64, i64, i8} %41

if.done-3:
	; AssignStmt
	; SelectorExpr
	%42 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %43, i64 0, i32 10
	store i8 1, i8* %44
	; width
	%45 = bitcast i64* %9 to %..rawptr
	%46 = call %..rawptr @__mem_zero(%..rawptr %45, i64 8)
	store i64 zeroinitializer, i64* %9
	
	; AssignStmt
	; SliceExpr
	%47 = load i64, i64* %3, align 8
	%48 = load %..string, %..string* %2, align 8
	%49 = extractvalue %..string %48, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$154, i64 0, i32 0), i64 46}, i64 351, i64 44, i64 %47, i64 %49, i64 %49)
	%50 = extractvalue %..string %48, 0
	%51 = getelementptr inbounds i8, i8* %50, i64 %47
	%52 = sub i64 %49, %47
	%53 = bitcast %..string* %10 to %..rawptr
	%54 = call %..rawptr @__mem_zero(%..rawptr %53, i64 16)
	store %..string zeroinitializer, %..string* %10
	%55 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %51, i8** %55
	%56 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %52, i64* %56
	%57 = load %..string, %..string* %10, align 8
	%58 = call {i64, i64, i8} @fmt-14._arg_number.parse_arg_number-0(%..string %57, %Context* noalias nonnull %__.context_ptr)
	%59 = extractvalue {i64, i64, i8} %58, 0
	%60 = extractvalue {i64, i64, i8} %58, 1
	%61 = extractvalue {i64, i64, i8} %58, 2
	store i64 %59, i64* %5
	store i64 %60, i64* %9
	store i8 %61, i8* %7
	; IfStmt
	%62 = load i8, i8* %7, align 1
	%63 = trunc i8 %62 to i1
	br i1 %63, label %cmp.and-4, label %if.done-7

cmp.and-4:
	%64 = load i64, i64* %5, align 8
	%65 = icmp sle i64 0, %64
	%66 = zext i1 %65 to i8
	%67 = trunc i8 %66 to i1
	br i1 %67, label %cmp.and-5, label %if.done-7

cmp.and-5:
	%68 = load i64, i64* %5, align 8
	%69 = load i64, i64* %4, align 8
	%70 = icmp slt i64 %68, %69
	%71 = zext i1 %70 to i8
	%72 = trunc i8 %71 to i1
	br i1 %72, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	%73 = load i64, i64* %5, align 8
	%74 = load i64, i64* %3, align 8
	%75 = load i64, i64* %9, align 8
	%76 = add i64 %74, %75
	%77 = bitcast {i64, i64, i8}* %11 to %..rawptr
	%78 = call %..rawptr @__mem_zero(%..rawptr %77, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %11
	%79 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %11, i64 0, i32 0
	store i64 %73, i64* %79
	%80 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %11, i64 0, i32 1
	store i64 %76, i64* %80
	%81 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %11, i64 0, i32 2
	store i8 1, i8* %81
	%82 = load {i64, i64, i8}, {i64, i64, i8}* %11, align 8
	ret {i64, i64, i8} %82

if.done-7:
	; AssignStmt
	; SelectorExpr
	%83 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%84 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %83, i64 0
	%85 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %84, i64 0, i32 11
	store i8 0, i8* %85
	; ReturnStmt
	%86 = load i64, i64* %1, align 8
	%87 = load i64, i64* %3, align 8
	%88 = load i64, i64* %9, align 8
	%89 = add i64 %87, %88
	%90 = bitcast {i64, i64, i8}* %12 to %..rawptr
	%91 = call %..rawptr @__mem_zero(%..rawptr %90, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %12
	%92 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %12, i64 0, i32 0
	store i64 %86, i64* %92
	%93 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %12, i64 0, i32 1
	store i64 %89, i64* %93
	%94 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %12, i64 0, i32 2
	store i8 0, i8* %94
	%95 = load {i64, i64, i8}, {i64, i64, i8}* %12, align 8
	ret {i64, i64, i8} %95
}

define {i64, i64, i8} @fmt-14._arg_number.parse_arg_number-0(%..string %format, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca {i64, i64, i8}, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i8, align 16
	%8 = alloca {i64, i64, i8}, align 16
	%9 = alloca {i64, i64, i8}, align 16
	%10 = alloca {i64, i64, i8}, align 16
	
	store %..string %format, %..string* %0
	; IfStmt
	%11 = load %..string, %..string* %0, align 8
	%12 = extractvalue %..string %11, 1
	%13 = icmp slt i64 %12, 3
	%14 = zext i1 %13 to i8
	%15 = trunc i8 %14 to i1
	br i1 %15, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	%16 = bitcast {i64, i64, i8}* %1 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %1
	%18 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %1, i64 0, i32 0
	store i64 0, i64* %18
	%19 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %1, i64 0, i32 1
	store i64 1, i64* %19
	%20 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %1, i64 0, i32 2
	store i8 0, i8* %20
	%21 = load {i64, i64, i8}, {i64, i64, i8}* %1, align 8
	ret {i64, i64, i8} %21

if.done-2:
	; RangeStmt
	; i
	%22 = bitcast i64* %2 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 8)
	store i64 zeroinitializer, i64* %2
	
	%24 = bitcast i64* %3 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 1, i64* %3
	%26 = bitcast i64* %4 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-3

for.interval.loop-3:
	%28 = load %..string, %..string* %0, align 8
	%29 = extractvalue %..string %28, 1
	%30 = load i64, i64* %3, align 8
	%31 = icmp sle i64 %30, %29
	br i1 %31, label %for.interval.body-4, label %for.interval.done-10

for.interval.body-4:
	%32 = load i64, i64* %3, align 8
	%33 = load i64, i64* %4, align 8
	%34 = load i64, i64* %3, align 8
	%35 = add i64 %34, 1
	store i64 %35, i64* %3
	%36 = load i64, i64* %4, align 8
	%37 = add i64 %36, 1
	store i64 %37, i64* %4
	store i64 %32, i64* %2
	; IfStmt
	; IndexExpr
	%38 = load %..string, %..string* %0, align 8
	%39 = extractvalue %..string %38, 0
	%40 = extractvalue %..string %38, 1
	%41 = load i64, i64* %2, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$155, i64 0, i32 0), i64 46}, i64 332, i64 14, i64 %41, i64 %40)
	%42 = getelementptr inbounds i8, i8* %39, i64 %41
	%43 = load i8, i8* %42, align 1
	%44 = icmp eq i8 %43, 93
	%45 = zext i1 %44 to i8
	%46 = trunc i8 %45 to i1
	br i1 %46, label %if.then-5, label %if.done-9

if.then-5:
	; width
	
	; new_index
	
	; ok
	
	%47 = load %..string, %..string* %0, align 8
	%48 = call {i64, i64, i8} @fmt-14._parse_int(%..string %47, i64 1, %Context* noalias nonnull %__.context_ptr)
	%49 = extractvalue {i64, i64, i8} %48, 0
	%50 = extractvalue {i64, i64, i8} %48, 1
	%51 = extractvalue {i64, i64, i8} %48, 2
	store i64 %49, i64* %5
	store i64 %50, i64* %6
	store i8 %51, i8* %7
	; IfStmt
	%52 = load i8, i8* %7, align 1
	%53 = trunc i8 %52 to i1
	br i1 %53, label %cmp.or-6, label %if.then-7

cmp.or-6:
	%54 = load i64, i64* %6, align 8
	%55 = load i64, i64* %2, align 8
	%56 = icmp ne i64 %54, %55
	%57 = zext i1 %56 to i8
	%58 = trunc i8 %57 to i1
	br i1 %58, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	%59 = load i64, i64* %2, align 8
	%60 = add i64 %59, 1
	%61 = bitcast {i64, i64, i8}* %8 to %..rawptr
	%62 = call %..rawptr @__mem_zero(%..rawptr %61, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %8
	%63 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 0
	store i64 0, i64* %63
	%64 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 1
	store i64 %60, i64* %64
	%65 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %8, i64 0, i32 2
	store i8 0, i8* %65
	%66 = load {i64, i64, i8}, {i64, i64, i8}* %8, align 8
	ret {i64, i64, i8} %66

if.done-8:
	; ReturnStmt
	%67 = load i64, i64* %5, align 8
	%68 = sub i64 %67, 1
	%69 = load i64, i64* %2, align 8
	%70 = add i64 %69, 1
	%71 = bitcast {i64, i64, i8}* %9 to %..rawptr
	%72 = call %..rawptr @__mem_zero(%..rawptr %71, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %9
	%73 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %9, i64 0, i32 0
	store i64 %68, i64* %73
	%74 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %9, i64 0, i32 1
	store i64 %70, i64* %74
	%75 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %9, i64 0, i32 2
	store i8 1, i8* %75
	%76 = load {i64, i64, i8}, {i64, i64, i8}* %9, align 8
	ret {i64, i64, i8} %76

if.done-9:
	br label %for.interval.loop-3

for.interval.done-10:
	; ReturnStmt
	%77 = bitcast {i64, i64, i8}* %10 to %..rawptr
	%78 = call %..rawptr @__mem_zero(%..rawptr %77, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %10
	%79 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %10, i64 0, i32 0
	store i64 0, i64* %79
	%80 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %10, i64 0, i32 1
	store i64 1, i64* %80
	%81 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %10, i64 0, i32 2
	store i8 0, i8* %81
	%82 = load {i64, i64, i8}, {i64, i64, i8}* %10, align 8
	ret {i64, i64, i8} %82
}

define {i64, i64, i8} @fmt-14.int_from_arg({%..any*, i64}* %args, i64 %arg_index, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca %..any, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca i16, align 16
	%8 = alloca i32, align 16
	%9 = alloca i64, align 16
	%10 = alloca i8, align 16
	%11 = alloca i16, align 16
	%12 = alloca i32, align 16
	%13 = alloca i64, align 16
	%14 = alloca %..any, align 16
	%15 = alloca {i64, i64, i8}, align 16
	%16 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	
	store i64 %arg_index, i64* %0
	; num
	
	store i64 0, i64* %1
	; new_arg_index
	
	%17 = load i64, i64* %0, align 8
	store i64 %17, i64* %2
	; ok
	
	store i8 1, i8* %3
	; IfStmt
	%18 = load i64, i64* %0, align 8
	%19 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%20 = extractvalue {%..any*, i64} %19, 1
	%21 = icmp slt i64 %18, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.done-21

if.then-1:
	; arg
	
	; IndexExpr
	%24 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%25 = extractvalue {%..any*, i64} %24, 0
	%26 = load i64, i64* %0, align 8
	%27 = extractvalue {%..any*, i64} %24, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$156, i64 0, i32 0), i64 46}, i64 364, i64 15, i64 %26, i64 %27)
	%28 = getelementptr inbounds %..any, %..any* %25, i64 %26
	%29 = load %..any, %..any* %28, align 8
	store %..any %29, %..any* %4
	; AssignStmt
	; SelectorExpr
	%30 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	; SelectorExpr
	%31 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%32 = load %Type_Info*, %Type_Info** %31, align 8
	%33 = call %Type_Info* @type_info_base(%Type_Info* %32, %Context* noalias nonnull %__.context_ptr)
	store %Type_Info* %33, %Type_Info** %30
	; TypeSwitchStmt
	%34 = load %..any, %..any* %4, align 8
	%35 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%36 = load %Type_Info*, %Type_Info** %35, align 8
	%37 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%38 = icmp eq %Type_Info* %36, %37
	br i1 %38, label %typeswitch.body-3, label %typeswitch.next-2

typeswitch.next-2:
	%39 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%40 = load %Type_Info*, %Type_Info** %39, align 8
	%41 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%42 = icmp eq %Type_Info* %40, %41
	br i1 %42, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.body-3:
	%43 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%44 = load %..rawptr, %..rawptr* %43, align 8
	%45 = bitcast %..rawptr %44 to i64*
	%46 = load i64, i64* %45, align 8
	store i64 %46, i64* %5
	; AssignStmt
	%47 = load i64, i64* %5, align 8
	store i64 %47, i64* %1
	br label %typeswitch.done-20

typeswitch.next-4:
	%48 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%49 = load %Type_Info*, %Type_Info** %48, align 8
	%50 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%51 = icmp eq %Type_Info* %49, %50
	br i1 %51, label %typeswitch.body-7, label %typeswitch.next-6

typeswitch.body-5:
	%52 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%53 = load %..rawptr, %..rawptr* %52, align 8
	%54 = bitcast %..rawptr %53 to i8*
	%55 = load i8, i8* %54, align 1
	store i8 %55, i8* %6
	; AssignStmt
	%56 = load i8, i8* %6, align 1
	%57 = sext i8 %56 to i64
	store i64 %57, i64* %1
	br label %typeswitch.done-20

typeswitch.next-6:
	%58 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%59 = load %Type_Info*, %Type_Info** %58, align 8
	%60 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%61 = icmp eq %Type_Info* %59, %60
	br i1 %61, label %typeswitch.body-9, label %typeswitch.next-8

typeswitch.body-7:
	%62 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = bitcast %..rawptr %63 to i16*
	%65 = load i16, i16* %64, align 2
	store i16 %65, i16* %7
	; AssignStmt
	%66 = load i16, i16* %7, align 2
	%67 = sext i16 %66 to i64
	store i64 %67, i64* %1
	br label %typeswitch.done-20

typeswitch.next-8:
	%68 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%69 = load %Type_Info*, %Type_Info** %68, align 8
	%70 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%71 = icmp eq %Type_Info* %69, %70
	br i1 %71, label %typeswitch.body-11, label %typeswitch.next-10

typeswitch.body-9:
	%72 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%73 = load %..rawptr, %..rawptr* %72, align 8
	%74 = bitcast %..rawptr %73 to i32*
	%75 = load i32, i32* %74, align 4
	store i32 %75, i32* %8
	; AssignStmt
	%76 = load i32, i32* %8, align 4
	%77 = sext i32 %76 to i64
	store i64 %77, i64* %1
	br label %typeswitch.done-20

typeswitch.next-10:
	%78 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%79 = load %Type_Info*, %Type_Info** %78, align 8
	%80 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%81 = icmp eq %Type_Info* %79, %80
	br i1 %81, label %typeswitch.body-13, label %typeswitch.next-12

typeswitch.body-11:
	%82 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%83 = load %..rawptr, %..rawptr* %82, align 8
	%84 = bitcast %..rawptr %83 to i64*
	%85 = load i64, i64* %84, align 8
	store i64 %85, i64* %9
	; AssignStmt
	%86 = load i64, i64* %9, align 8
	%87 = bitcast i64 %86 to i64
	store i64 %87, i64* %1
	br label %typeswitch.done-20

typeswitch.next-12:
	%88 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%89 = load %Type_Info*, %Type_Info** %88, align 8
	%90 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%91 = icmp eq %Type_Info* %89, %90
	br i1 %91, label %typeswitch.body-15, label %typeswitch.next-14

typeswitch.body-13:
	%92 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%93 = load %..rawptr, %..rawptr* %92, align 8
	%94 = bitcast %..rawptr %93 to i8*
	%95 = load i8, i8* %94, align 1
	store i8 %95, i8* %10
	; AssignStmt
	%96 = load i8, i8* %10, align 1
	%97 = zext i8 %96 to i64
	store i64 %97, i64* %1
	br label %typeswitch.done-20

typeswitch.next-14:
	%98 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%99 = load %Type_Info*, %Type_Info** %98, align 8
	%100 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%101 = icmp eq %Type_Info* %99, %100
	br i1 %101, label %typeswitch.body-17, label %typeswitch.next-16

typeswitch.body-15:
	%102 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%103 = load %..rawptr, %..rawptr* %102, align 8
	%104 = bitcast %..rawptr %103 to i16*
	%105 = load i16, i16* %104, align 2
	store i16 %105, i16* %11
	; AssignStmt
	%106 = load i16, i16* %11, align 2
	%107 = zext i16 %106 to i64
	store i64 %107, i64* %1
	br label %typeswitch.done-20

typeswitch.next-16:
	%108 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	%109 = load %Type_Info*, %Type_Info** %108, align 8
	%110 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%111 = icmp eq %Type_Info* %109, %110
	br i1 %111, label %typeswitch.body-19, label %typeswitch.next-18

typeswitch.body-17:
	%112 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%113 = load %..rawptr, %..rawptr* %112, align 8
	%114 = bitcast %..rawptr %113 to i32*
	%115 = load i32, i32* %114, align 4
	store i32 %115, i32* %12
	; AssignStmt
	%116 = load i32, i32* %12, align 4
	%117 = zext i32 %116 to i64
	store i64 %117, i64* %1
	br label %typeswitch.done-20

typeswitch.next-18:
	store %..any %34, %..any* %14
	; AssignStmt
	store i8 0, i8* %3
	br label %typeswitch.done-20

typeswitch.body-19:
	%118 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	%119 = load %..rawptr, %..rawptr* %118, align 8
	%120 = bitcast %..rawptr %119 to i64*
	%121 = load i64, i64* %120, align 8
	store i64 %121, i64* %13
	; AssignStmt
	%122 = load i64, i64* %13, align 8
	%123 = bitcast i64 %122 to i64
	store i64 %123, i64* %1
	br label %typeswitch.done-20

typeswitch.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%124 = load i64, i64* %1, align 8
	%125 = load i64, i64* %2, align 8
	%126 = load i8, i8* %3, align 1
	%127 = bitcast {i64, i64, i8}* %15 to %..rawptr
	%128 = call %..rawptr @__mem_zero(%..rawptr %127, i64 24)
	store {i64, i64, i8} zeroinitializer, {i64, i64, i8}* %15
	%129 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %15, i64 0, i32 0
	store i64 %124, i64* %129
	%130 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %15, i64 0, i32 1
	store i64 %125, i64* %130
	%131 = getelementptr inbounds {i64, i64, i8}, {i64, i64, i8}* %15, i64 0, i32 2
	store i8 %126, i8* %131
	%132 = load {i64, i64, i8}, {i64, i64, i8}* %15, align 8
	ret {i64, i64, i8} %132
}

define void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %fi, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i32, align 16
	%2 = alloca %Source_Code_Location, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i32 %verb, i32* %1
	%3 = load i32, i32* %1, align 4
	%4 = icmp ne i32 %3, 118
	%5 = zext i1 %4 to i8
	%6 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$157, i64 0, i32 0), i64 46}, i64 386, i64 2, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$158, i64 0, i32 0), i64 12})
	%7 = trunc i8 %5 to i1
	%8 = bitcast %Source_Code_Location* %2 to %..rawptr
	%9 = call %..rawptr @__mem_zero(%..rawptr %8, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %2
	store %Source_Code_Location %6, %Source_Code_Location* %2
	%10 = call i8 @assert(i1 %7, %..string zeroinitializer, %Source_Code_Location* %2)
	%11 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%12 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %11, i64 0
	%13 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %12, i64 0, i32 12
	%14 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %13, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %14, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$159, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%15 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%16 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %15, i64 0
	%17 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %16, i64 0, i32 12
	%18 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %17, align 8
	%19 = load i32, i32* %1, align 4
	call void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %18, i32 %19, %Context* noalias nonnull %__.context_ptr)
	%20 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0, i32 12
	%23 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %22, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %23, i8 40, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%24 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %25, i64 0, i32 13
	%27 = getelementptr inbounds %..any, %..any* %26, i64 0, i32 1
	%28 = load %Type_Info*, %Type_Info** %27, align 8
	%29 = icmp ne %Type_Info* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-1, label %if.else-2

if.then-1:
	%32 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%33 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %32, i64 0
	%34 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %33, i64 0, i32 12
	%35 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %34, align 8
	; SelectorExpr
	%36 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%37 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %36, i64 0
	%38 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %37, i64 0, i32 13
	%39 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	%40 = load %Type_Info*, %Type_Info** %39, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %35, %Type_Info* %40, %Context* noalias nonnull %__.context_ptr)
	%41 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%42 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %41, i64 0
	%43 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %42, i64 0, i32 12
	%44 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %43, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %44, i8 61, %Context* noalias nonnull %__.context_ptr)
	%45 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%46 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%47 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %46, i64 0
	%48 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %47, i64 0, i32 13
	%49 = load %..any, %..any* %48, align 8
	call void @fmt-14.fmt_value(%fmt-14.Fmt_Info* %45, %..any %49, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-3

if.else-2:
	%50 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%51 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %50, i64 0
	%52 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %51, i64 0, i32 12
	%53 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %52, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %53, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$15a, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-3

if.done-3:
	%54 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%55 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %54, i64 0
	%56 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %55, i64 0, i32 12
	%57 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %56, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %57, i8 41, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %fi, i1 %b, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca i32, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	%3 = zext i1 %b to i8
	store i8 %3, i8* %1
	
	store i32 %verb, i32* %2
	; SwitchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 116
	br i1 %5, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%7 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %7, i32 %8, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-7

switch.case.body-3:
	%9 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %10, i64 0, i32 12
	%12 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %11, align 8
	; TernaryExpr
	%13 = load i8, i8* %1, align 1
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%15 = phi %..string [ {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$15b, i64 0, i32 0), i64 4}, %if.then-4 ], [ {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$15c, i64 0, i32 0), i64 5}, %if.else-5 ]
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %12, %..string %15, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-7

switch.done-7:
	ret void
}

define void @fmt-14.fmt_write_padding(%fmt-14.Fmt_Info* %fi, i64 %width, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i64 %width, i64* %1
	; IfStmt
	%5 = load i64, i64* %1, align 8
	%6 = icmp sle i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = trunc i8 %7 to i1
	br i1 %8, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret void

if.done-2:
	; pad_byte
	
	store i8 48, i8* %2
	; IfStmt
	; SelectorExpr
	%9 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%10 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %9, i64 0
	%11 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %10, i64 0, i32 2
	%12 = load i8, i8* %11, align 1
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-3, label %if.done-4

if.then-3:
	; AssignStmt
	store i8 32, i8* %2
	br label %if.done-4

if.done-4:
	; RangeStmt
	%14 = bitcast i64* %3 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 0, i64* %3
	%16 = bitcast i64* %4 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 0, i64* %4
	br label %for.interval.loop-5

for.interval.loop-5:
	%18 = load i64, i64* %1, align 8
	%19 = load i64, i64* %3, align 8
	%20 = icmp slt i64 %19, %18
	br i1 %20, label %for.interval.body-6, label %for.interval.done-7

for.interval.body-6:
	%21 = load i64, i64* %3, align 8
	%22 = load i64, i64* %4, align 8
	%23 = load i64, i64* %3, align 8
	%24 = add i64 %23, 1
	store i64 %24, i64* %3
	%25 = load i64, i64* %4, align 8
	%26 = add i64 %25, 1
	store i64 %26, i64* %4
	; SelectorExpr
	%27 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%28 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %27, i64 0
	%29 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %28, i64 0, i32 12
	%30 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %29, align 8
	%31 = load i8, i8* %2, align 1
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %30, i8 %31, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-5

for.interval.done-7:
	ret void
}

define void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %fi, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca i64, align 16
	%5 = alloca %..string, align 16
	%6 = alloca i8, align 16
	%7 = alloca i64, align 16
	%8 = alloca %Source_Code_Location, align 16
	%9 = alloca i64, align 16
	%10 = alloca i8, align 16
	%11 = alloca %Source_Code_Location, align 16
	%12 = alloca [256 x i8], align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca %..string, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca {i8*, i64}, align 16
	%18 = alloca i8, align 16
	%19 = alloca i8, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i64 %u, i64* %1
	
	store i64 %base, i64* %2
	
	%20 = zext i1 %is_signed to i8
	store i8 %20, i8* %3
	
	store i64 %bit_size, i64* %4
	
	store %..string %digits, %..string* %5
	; neg
	
	; SelectorExpr
	%21 = load i64, i64* %1, align 8
	%22 = load i8, i8* %3, align 1
	%23 = load i64, i64* %4, align 8
	%24 = trunc i8 %22 to i1
	%25 = call {i64, i8} @strconv-16.is_integer_negative(i64 %21, i1 %24, i64 %23, %Context* noalias nonnull %__.context_ptr)
	%26 = extractvalue {i64, i8} %25, 0
	%27 = extractvalue {i64, i8} %25, 1
	store i8 %27, i8* %6
	; IfStmt
	; SelectorExpr
	%28 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%29 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %28, i64 0
	%30 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %29, i64 0, i32 5
	%31 = load i8, i8* %30, align 1
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%33 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%34 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %33, i64 0
	%35 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %34, i64 0, i32 6
	%36 = load i8, i8* %35, align 1
	%37 = trunc i8 %36 to i1
	br i1 %37, label %if.then-2, label %if.done-5

if.then-2:
	; width
	
	; SelectorExpr
	%38 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%39 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %38, i64 0
	%40 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %39, i64 0, i32 7
	%41 = load i64, i64* %40, align 8
	; SelectorExpr
	%42 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%43 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %42, i64 0
	%44 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %43, i64 0, i32 8
	%45 = load i64, i64* %44, align 8
	%46 = add i64 %41, %45
	%47 = add i64 %46, 3
	store i64 %47, i64* %7
	; IfStmt
	%48 = load i64, i64* %7, align 8
	%49 = icmp sgt i64 %48, 256
	%50 = zext i1 %49 to i8
	%51 = trunc i8 %50 to i1
	br i1 %51, label %if.then-3, label %if.done-4

if.then-3:
	%52 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$15d, i64 0, i32 0), i64 46}, i64 429, i64 4, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$15e, i64 0, i32 0), i64 8})
	%53 = bitcast %Source_Code_Location* %8 to %..rawptr
	%54 = call %..rawptr @__mem_zero(%..rawptr %53, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %52, %Source_Code_Location* %8
	call void @panic(%..string {i8* getelementptr inbounds ([54 x i8], [54 x i8]* @__str$15f, i64 0, i32 0), i64 53}, %Source_Code_Location* %8)
	br label %if.done-4

if.done-4:
	br label %if.done-5

if.done-5:
	; prec
	
	store i64 0, i64* %9
	; IfStmt
	; SelectorExpr
	%55 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%56 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %55, i64 0
	%57 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %56, i64 0, i32 6
	%58 = load i8, i8* %57, align 1
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.then-6, label %if.else-10

if.then-6:
	; AssignStmt
	; SelectorExpr
	%60 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %61, i64 0, i32 8
	%63 = load i64, i64* %62, align 8
	store i64 %63, i64* %9
	; IfStmt
	%64 = load i64, i64* %9, align 8
	%65 = icmp eq i64 %64, 0
	%66 = zext i1 %65 to i8
	%67 = trunc i8 %66 to i1
	br i1 %67, label %cmp.and-7, label %if.done-9

cmp.and-7:
	%68 = load i64, i64* %1, align 8
	%69 = icmp eq i64 %68, 0
	%70 = zext i1 %69 to i8
	%71 = trunc i8 %70 to i1
	br i1 %71, label %if.then-8, label %if.done-9

if.then-8:
	; prev_zero
	
	; SelectorExpr
	%72 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%73 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %72, i64 0
	%74 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %73, i64 0, i32 3
	%75 = load i8, i8* %74, align 1
	store i8 %75, i8* %10
	; AssignStmt
	; SelectorExpr
	%76 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%77 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %76, i64 0
	%78 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %77, i64 0, i32 3
	store i8 0, i8* %78
	%79 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; SelectorExpr
	%80 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%81 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %80, i64 0
	%82 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %81, i64 0, i32 7
	%83 = load i64, i64* %82, align 8
	call void @fmt-14.fmt_write_padding(%fmt-14.Fmt_Info* %79, i64 %83, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; SelectorExpr
	%84 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%85 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %84, i64 0
	%86 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %85, i64 0, i32 3
	%87 = load i8, i8* %10, align 1
	store i8 %87, i8* %86
	; ReturnStmt
	ret void

if.done-9:
	br label %if.done-18

if.else-10:
	; IfStmt
	; SelectorExpr
	%88 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%89 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %88, i64 0
	%90 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %89, i64 0, i32 3
	%91 = load i8, i8* %90, align 1
	%92 = trunc i8 %91 to i1
	br i1 %92, label %cmp.and-11, label %if.done-17

cmp.and-11:
	; SelectorExpr
	%93 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%94 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %93, i64 0
	%95 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %94, i64 0, i32 5
	%96 = load i8, i8* %95, align 1
	%97 = trunc i8 %96 to i1
	br i1 %97, label %if.then-12, label %if.done-17

if.then-12:
	; AssignStmt
	; SelectorExpr
	%98 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%99 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %98, i64 0
	%100 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %99, i64 0, i32 7
	%101 = load i64, i64* %100, align 8
	store i64 %101, i64* %9
	; IfStmt
	%102 = load i8, i8* %6, align 1
	%103 = trunc i8 %102 to i1
	br i1 %103, label %if.then-15, label %cmp.or-13

cmp.or-13:
	; SelectorExpr
	%104 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%105 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %104, i64 0
	%106 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %105, i64 0, i32 1
	%107 = load i8, i8* %106, align 1
	%108 = trunc i8 %107 to i1
	br i1 %108, label %if.then-15, label %cmp.or-14

cmp.or-14:
	; SelectorExpr
	%109 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%110 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %109, i64 0
	%111 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %110, i64 0, i32 2
	%112 = load i8, i8* %111, align 1
	%113 = trunc i8 %112 to i1
	br i1 %113, label %if.then-15, label %if.done-16

if.then-15:
	; AssignStmt
	%114 = load i64, i64* %9, align 8
	%115 = sub i64 %114, 1
	store i64 %115, i64* %9
	br label %if.done-16

if.done-16:
	br label %if.done-17

if.done-17:
	br label %if.done-18

if.done-18:
	; SwitchStmt
	%116 = load i64, i64* %2, align 8
	%117 = icmp eq i64 %116, 2
	br i1 %117, label %switch.case.body-24, label %switch.case.next-19

switch.case.next-19:
	%118 = icmp eq i64 %116, 8
	br i1 %118, label %switch.case.body-24, label %switch.case.next-20

switch.case.next-20:
	%119 = icmp eq i64 %116, 10
	br i1 %119, label %switch.case.body-24, label %switch.case.next-21

switch.case.next-21:
	%120 = icmp eq i64 %116, 12
	br i1 %120, label %switch.case.body-24, label %switch.case.next-22

switch.case.next-22:
	%121 = icmp eq i64 %116, 16
	br i1 %121, label %switch.case.body-24, label %switch.case.next-23

switch.case.next-23:
	%122 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$160, i64 0, i32 0), i64 46}, i64 455, i64 3, %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$161, i64 0, i32 0), i64 8})
	%123 = bitcast %Source_Code_Location* %11 to %..rawptr
	%124 = call %..rawptr @__mem_zero(%..rawptr %123, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %11
	store %Source_Code_Location %122, %Source_Code_Location* %11
	call void @panic(%..string {i8* getelementptr inbounds ([31 x i8], [31 x i8]* @__str$162, i64 0, i32 0), i64 30}, %Source_Code_Location* %11)
	br label %switch.done-25

switch.case.body-24:
	; break
	br label %switch.done-25

switch.done-25:
	; buf
	%125 = bitcast [256 x i8]* %12 to %..rawptr
	%126 = call %..rawptr @__mem_zero(%..rawptr %125, i64 256)
	store [256 x i8] zeroinitializer, [256 x i8]* %12
	
	; start
	
	store i64 0, i64* %13
	; flags
	%127 = bitcast i64* %14 to %..rawptr
	%128 = call %..rawptr @__mem_zero(%..rawptr %127, i64 8)
	store i64 zeroinitializer, i64* %14
	
	; IfStmt
	; SelectorExpr
	%129 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%130 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %129, i64 0
	%131 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %130, i64 0, i32 4
	%132 = load i8, i8* %131, align 1
	%133 = trunc i8 %132 to i1
	br i1 %133, label %cmp.and-26, label %if.done-28

cmp.and-26:
	; SelectorExpr
	%134 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%135 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %134, i64 0
	%136 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %135, i64 0, i32 3
	%137 = load i8, i8* %136, align 1
	%138 = trunc i8 %137 to i1
	br i1 %138, label %if.done-28, label %if.then-27

if.then-27:
	; AssignStmt
	%139 = load i64, i64* %14, align 8
	%140 = or i64 %139, 1
	store i64 %140, i64* %14
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%141 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%142 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %141, i64 0
	%143 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %142, i64 0, i32 1
	%144 = load i8, i8* %143, align 1
	%145 = trunc i8 %144 to i1
	br i1 %145, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	%146 = load i64, i64* %14, align 8
	%147 = or i64 %146, 2
	store i64 %147, i64* %14
	br label %if.done-30

if.done-30:
	; IfStmt
	; SelectorExpr
	%148 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%149 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %148, i64 0
	%150 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %149, i64 0, i32 2
	%151 = load i8, i8* %150, align 1
	%152 = trunc i8 %151 to i1
	br i1 %152, label %if.then-31, label %if.done-32

if.then-31:
	; AssignStmt
	%153 = load i64, i64* %14, align 8
	%154 = or i64 %153, 4
	store i64 %154, i64* %14
	br label %if.done-32

if.done-32:
	; s
	
	; SelectorExpr
	; SliceExpr
	%155 = load i64, i64* %13, align 8
	%156 = load [256 x i8], [256 x i8]* %12, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$163, i64 0, i32 0), i64 46}, i64 465, i64 30, i64 %155, i64 256, i64 256)
	%157 = getelementptr inbounds [256 x i8], [256 x i8]* %12, i64 0, i32 0
	%158 = getelementptr inbounds i8, i8* %157, i64 %155
	%159 = sub i64 256, %155
	%160 = bitcast {i8*, i64}* %16 to %..rawptr
	%161 = call %..rawptr @__mem_zero(%..rawptr %160, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%162 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %158, i8** %162
	%163 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %159, i64* %163
	%164 = load {i8*, i64}, {i8*, i64}* %16, align 8
	%165 = load i64, i64* %1, align 8
	%166 = load i64, i64* %2, align 8
	%167 = load i8, i8* %3, align 1
	%168 = load i64, i64* %4, align 8
	%169 = load %..string, %..string* %5, align 8
	%170 = load i64, i64* %14, align 8
	%171 = bitcast {i8*, i64}* %17 to %..rawptr
	%172 = call %..rawptr @__mem_zero(%..rawptr %171, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %17
	store {i8*, i64} %164, {i8*, i64}* %17
	%173 = trunc i8 %167 to i1
	%174 = call %..string @strconv-16.append_bits({i8*, i64}* %17, i64 %165, i64 %166, i1 %173, i64 %168, %..string %169, i64 %170, %Context* noalias nonnull %__.context_ptr)
	store %..string %174, %..string* %15
	; IfStmt
	; SelectorExpr
	%175 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%176 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %175, i64 0
	%177 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %176, i64 0, i32 4
	%178 = load i8, i8* %177, align 1
	%179 = trunc i8 %178 to i1
	br i1 %179, label %cmp.and-33, label %if.done-46

cmp.and-33:
	; SelectorExpr
	%180 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%181 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %180, i64 0
	%182 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %181, i64 0, i32 3
	%183 = load i8, i8* %182, align 1
	%184 = trunc i8 %183 to i1
	br i1 %184, label %if.then-34, label %if.done-46

if.then-34:
	; c
	
	store i8 0, i8* %18
	; SwitchStmt
	%185 = load i64, i64* %2, align 8
	%186 = icmp eq i64 %185, 2
	br i1 %186, label %switch.case.body-36, label %switch.case.next-35

switch.case.next-35:
	%187 = icmp eq i64 %185, 8
	br i1 %187, label %switch.fall.body-38, label %switch.case.next-37

switch.case.body-36:
	; AssignStmt
	store i8 98, i8* %18
	br label %switch.done-43

switch.case.next-37:
	%188 = icmp eq i64 %185, 12
	br i1 %188, label %switch.fall.body-40, label %switch.case.next-39

switch.fall.body-38:
	; AssignStmt
	store i8 111, i8* %18
	br label %switch.done-43

switch.case.next-39:
	%189 = icmp eq i64 %185, 16
	br i1 %189, label %switch.fall.body-42, label %switch.case.next-41

switch.fall.body-40:
	; AssignStmt
	store i8 122, i8* %18
	br label %switch.done-43

switch.case.next-41:
	br label %switch.done-43

switch.fall.body-42:
	; AssignStmt
	store i8 120, i8* %18
	br label %switch.done-43

switch.done-43:
	; IfStmt
	%190 = load i8, i8* %18, align 1
	%191 = icmp ne i8 %190, 0
	%192 = zext i1 %191 to i8
	%193 = trunc i8 %192 to i1
	br i1 %193, label %if.then-44, label %if.done-45

if.then-44:
	; SelectorExpr
	%194 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%195 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %194, i64 0
	%196 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %195, i64 0, i32 12
	%197 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %196, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %197, i8 48, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%198 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%199 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %198, i64 0
	%200 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %199, i64 0, i32 12
	%201 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %200, align 8
	%202 = load i8, i8* %18, align 1
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %201, i8 %202, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-45

if.done-45:
	br label %if.done-46

if.done-46:
	; prev_zero
	
	; SelectorExpr
	%203 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%204 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %203, i64 0
	%205 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %204, i64 0, i32 3
	%206 = load i8, i8* %205, align 1
	store i8 %206, i8* %19
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%207 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%208 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %207, i64 0
	%209 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %208, i64 0, i32 3
	store i8 0, i8* %209
	%210 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%211 = load %..string, %..string* %15, align 8
	call void @fmt-14._pad(%fmt-14.Fmt_Info* %210, %..string %211, %Context* noalias nonnull %__.context_ptr)
	; defer
	; AssignStmt
	; SelectorExpr
	%212 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%213 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %212, i64 0
	%214 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %213, i64 0, i32 3
	%215 = load i8, i8* %19, align 1
	store i8 %215, i8* %214
	ret void
}

define void @fmt-14.fmt_rune(%fmt-14.Fmt_Info* %fi, i32 %r, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i32, align 16
	%2 = alloca i32, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i32 %r, i32* %1
	
	store i32 %verb, i32* %2
	; SwitchStmt
	%3 = load i32, i32* %2, align 4
	%4 = icmp eq i32 %3, 99
	br i1 %4, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%5 = icmp eq i32 %3, 114
	br i1 %5, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%6 = icmp eq i32 %3, 118
	br i1 %6, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%7 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%8 = load i32, i32* %1, align 4
	%9 = sext i32 %8 to i64
	%10 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %7, i64 %9, i1 false, i64 32, i32 %10, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-5

switch.case.body-4:
	; SelectorExpr
	%11 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%12 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %11, i64 0
	%13 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %12, i64 0, i32 12
	%14 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %13, align 8
	%15 = load i32, i32* %1, align 4
	call void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %14, i32 %15, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-5

switch.done-5:
	ret void
}

define void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %fi, i64 %u, i1 %is_signed, i64 %bit_size, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca i32, align 16
	%5 = alloca i32, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i64 %u, i64* %1
	
	%6 = zext i1 %is_signed to i8
	store i8 %6, i8* %2
	
	store i64 %bit_size, i64* %3
	
	store i32 %verb, i32* %4
	; SwitchStmt
	%7 = load i32, i32* %4, align 4
	%8 = icmp eq i32 %7, 118
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = icmp eq i32 %7, 98
	br i1 %9, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	%10 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%11 = load i64, i64* %1, align 8
	%12 = load i8, i8* %2, align 1
	%13 = load i64, i64* %3, align 8
	%14 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%15 = trunc i8 %12 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %10, i64 %11, i64 10, i1 %15, i64 %13, %..string %14, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-3:
	%16 = icmp eq i32 %7, 111
	br i1 %16, label %switch.fall.body-6, label %switch.case.next-5

switch.fall.body-4:
	%17 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%18 = load i64, i64* %1, align 8
	%19 = load i8, i8* %2, align 1
	%20 = load i64, i64* %3, align 8
	%21 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%22 = trunc i8 %19 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %17, i64 %18, i64 2, i1 %22, i64 %20, %..string %21, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-5:
	%23 = icmp eq i32 %7, 100
	br i1 %23, label %switch.fall.body-8, label %switch.case.next-7

switch.fall.body-6:
	%24 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%25 = load i64, i64* %1, align 8
	%26 = load i8, i8* %2, align 1
	%27 = load i64, i64* %3, align 8
	%28 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%29 = trunc i8 %26 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %24, i64 %25, i64 8, i1 %29, i64 %27, %..string %28, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-7:
	%30 = icmp eq i32 %7, 122
	br i1 %30, label %switch.fall.body-10, label %switch.case.next-9

switch.fall.body-8:
	%31 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%32 = load i64, i64* %1, align 8
	%33 = load i8, i8* %2, align 1
	%34 = load i64, i64* %3, align 8
	%35 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%36 = trunc i8 %33 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %31, i64 %32, i64 10, i1 %36, i64 %34, %..string %35, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-9:
	%37 = icmp eq i32 %7, 120
	br i1 %37, label %switch.fall.body-12, label %switch.case.next-11

switch.fall.body-10:
	%38 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%39 = load i64, i64* %1, align 8
	%40 = load i8, i8* %2, align 1
	%41 = load i64, i64* %3, align 8
	%42 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%43 = trunc i8 %40 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %38, i64 %39, i64 12, i1 %43, i64 %41, %..string %42, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-11:
	%44 = icmp eq i32 %7, 88
	br i1 %44, label %switch.fall.body-14, label %switch.case.next-13

switch.fall.body-12:
	%45 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%46 = load i64, i64* %1, align 8
	%47 = load i8, i8* %2, align 1
	%48 = load i64, i64* %3, align 8
	%49 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	%50 = trunc i8 %47 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %45, i64 %46, i64 16, i1 %50, i64 %48, %..string %49, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-13:
	%51 = icmp eq i32 %7, 99
	br i1 %51, label %switch.fall.body-17, label %switch.case.next-15

switch.fall.body-14:
	%52 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%53 = load i64, i64* %1, align 8
	%54 = load i8, i8* %2, align 1
	%55 = load i64, i64* %3, align 8
	%56 = load %..string, %..string* @fmt-14.__DIGITS_UPPER, align 8
	%57 = trunc i8 %54 to i1
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %52, i64 %53, i64 16, i1 %57, i64 %55, %..string %56, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-15:
	%58 = icmp eq i32 %7, 114
	br i1 %58, label %switch.fall.body-17, label %switch.case.next-16

switch.case.next-16:
	%59 = icmp eq i32 %7, 85
	br i1 %59, label %switch.fall.body-19, label %switch.case.next-18

switch.fall.body-17:
	%60 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%61 = load i64, i64* %1, align 8
	%62 = trunc i64 %61 to i32
	%63 = load i32, i32* %4, align 4
	call void @fmt-14.fmt_rune(%fmt-14.Fmt_Info* %60, i32 %62, i32 %63, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.case.next-18:
	%64 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%65 = load i32, i32* %4, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %64, i32 %65, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-24

switch.fall.body-19:
	; r
	
	%66 = load i64, i64* %1, align 8
	%67 = trunc i64 %66 to i32
	store i32 %67, i32* %5
	; IfStmt
	%68 = load i32, i32* %5, align 4
	%69 = icmp slt i32 %68, 0
	%70 = zext i1 %69 to i8
	%71 = trunc i8 %70 to i1
	br i1 %71, label %if.then-21, label %cmp.or-20

cmp.or-20:
	%72 = load i32, i32* %5, align 4
	%73 = icmp sgt i32 %72, 1114111
	%74 = zext i1 %73 to i8
	%75 = trunc i8 %74 to i1
	br i1 %75, label %if.then-21, label %if.else-22

if.then-21:
	%76 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%77 = load i32, i32* %4, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %76, i32 %77, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-23

if.else-22:
	; SelectorExpr
	%78 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%79 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %78, i64 0
	%80 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %79, i64 0, i32 12
	%81 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %80, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %81, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$164, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	%82 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%83 = load i64, i64* %1, align 8
	%84 = load i64, i64* %3, align 8
	%85 = load %..string, %..string* @fmt-14.__DIGITS_UPPER, align 8
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %82, i64 %83, i64 16, i1 false, i64 %84, %..string %85, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-23

if.done-23:
	br label %switch.done-24

switch.done-24:
	ret void
}

define void @fmt-14._pad(%fmt-14.Fmt_Info* %fi, %..string %s, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..string %s, %..string* %1
	; IfStmt
	; SelectorExpr
	%3 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%4 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %3, i64 0
	%5 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %4, i64 0, i32 5
	%6 = load i8, i8* %5, align 1
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.done-2, label %if.then-1

if.then-1:
	; SelectorExpr
	%8 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%9 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %8, i64 0
	%10 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %9, i64 0, i32 12
	%11 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %10, align 8
	%12 = load %..string, %..string* %1, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %11, %..string %12, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; width
	
	; SelectorExpr
	%13 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%14 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %13, i64 0
	%15 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %14, i64 0, i32 7
	%16 = load i64, i64* %15, align 8
	; SelectorExpr
	%17 = load %..string, %..string* %1, align 8
	%18 = call i64 @utf8-4.rune_count_from_string(%..string %17, %Context* noalias nonnull %__.context_ptr)
	%19 = sub i64 %16, %18
	store i64 %19, i64* %2
	; IfStmt
	; SelectorExpr
	%20 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0, i32 0
	%23 = load i8, i8* %22, align 1
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-3, label %if.else-4

if.then-3:
	; SelectorExpr
	%25 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %26, i64 0, i32 12
	%28 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %27, align 8
	%29 = load %..string, %..string* %1, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %28, %..string %29, %Context* noalias nonnull %__.context_ptr)
	%30 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%31 = load i64, i64* %2, align 8
	call void @fmt-14.fmt_write_padding(%fmt-14.Fmt_Info* %30, i64 %31, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-5

if.else-4:
	%32 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%33 = load i64, i64* %2, align 8
	call void @fmt-14.fmt_write_padding(%fmt-14.Fmt_Info* %32, i64 %33, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%34 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%35 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %34, i64 0
	%36 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %35, i64 0, i32 12
	%37 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %36, align 8
	%38 = load %..string, %..string* %1, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %37, %..string %38, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-5

if.done-5:
	ret void
}

define void @fmt-14.fmt_float(%fmt-14.Fmt_Info* %fi, double %v, i64 %bit_size, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca double, align 16
	%2 = alloca i64, align 16
	%3 = alloca i32, align 16
	%4 = alloca i64, align 16
	%5 = alloca [386 x i8], align 16
	%6 = alloca %..string, align 16
	%7 = alloca {i8*, i64}, align 16
	%8 = alloca {i8*, i64}, align 16
	%9 = alloca {i8*, i64}, align 16
	%10 = alloca %..string, align 16
	%11 = alloca %..string, align 16
	%12 = alloca %..string, align 16
	%13 = alloca %..string, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store double %v, double* %1
	
	store i64 %bit_size, i64* %2
	
	store i32 %verb, i32* %3
	; SwitchStmt
	%14 = load i32, i32* %3, align 4
	%15 = icmp eq i32 %14, 102
	br i1 %15, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%16 = icmp eq i32 %14, 70
	br i1 %16, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%17 = icmp eq i32 %14, 118
	br i1 %17, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%18 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%19 = load i32, i32* %3, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %18, i32 %19, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-28

switch.case.body-4:
	; prec
	
	store i64 3, i64* %4
	; IfStmt
	; SelectorExpr
	%20 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0, i32 6
	%23 = load i8, i8* %22, align 1
	%24 = trunc i8 %23 to i1
	br i1 %24, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%25 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%26 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %25, i64 0
	%27 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %26, i64 0, i32 8
	%28 = load i64, i64* %27, align 8
	store i64 %28, i64* %4
	br label %if.done-6

if.done-6:
	; buf
	%29 = bitcast [386 x i8]* %5 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 386)
	store [386 x i8] zeroinitializer, [386 x i8]* %5
	
	; str
	
	; SelectorExpr
	; SliceExpr
	%31 = load [386 x i8], [386 x i8]* %5, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$165, i64 0, i32 0), i64 46}, i64 552, i64 34, i64 1, i64 386, i64 386)
	%32 = getelementptr inbounds [386 x i8], [386 x i8]* %5, i64 0, i32 0
	%33 = getelementptr inbounds i8, i8* %32, i64 1
	%34 = sub i64 386, 1
	%35 = bitcast {i8*, i64}* %7 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %7
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 0
	store i8* %33, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %7, i64 0, i32 1
	store i64 %34, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %7, align 8
	%40 = load double, double* %1, align 8
	%41 = load i64, i64* %4, align 8
	%42 = load i64, i64* %2, align 8
	%43 = bitcast {i8*, i64}* %8 to %..rawptr
	%44 = call %..rawptr @__mem_zero(%..rawptr %43, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %8
	store {i8*, i64} %39, {i8*, i64}* %8
	%45 = call %..string @strconv-16.append_float({i8*, i64}* %8, double %40, i8 102, i64 %41, i64 %42, %Context* noalias nonnull %__.context_ptr)
	store %..string %45, %..string* %6
	; AssignStmt
	; SliceExpr
	%46 = load %..string, %..string* %6, align 8
	%47 = extractvalue %..string %46, 1
	%48 = add i64 %47, 1
	%49 = load [386 x i8], [386 x i8]* %5, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$166, i64 0, i32 0), i64 46}, i64 553, i64 19, i64 0, i64 %48, i64 386)
	%50 = getelementptr inbounds [386 x i8], [386 x i8]* %5, i64 0, i32 0
	%51 = getelementptr inbounds i8, i8* %50, i64 0
	%52 = sub i64 %48, 0
	%53 = bitcast {i8*, i64}* %9 to %..rawptr
	%54 = call %..rawptr @__mem_zero(%..rawptr %53, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %9
	%55 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %9, i64 0, i32 0
	store i8* %51, i8** %55
	%56 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %9, i64 0, i32 1
	store i64 %52, i64* %56
	%57 = load {i8*, i64}, {i8*, i64}* %9, align 8
	%58 = extractvalue {i8*, i64} %57, 0
	%59 = extractvalue {i8*, i64} %57, 1
	%60 = bitcast %..string* %10 to %..rawptr
	%61 = call %..rawptr @__mem_zero(%..rawptr %60, i64 16)
	store %..string zeroinitializer, %..string* %10
	%62 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 0
	store i8* %58, i8** %62
	%63 = getelementptr inbounds %..string, %..string* %10, i64 0, i32 1
	store i64 %59, i64* %63
	%64 = load %..string, %..string* %10, align 8
	store %..string %64, %..string* %6
	; IfStmt
	; IndexExpr
	%65 = load %..string, %..string* %6, align 8
	%66 = extractvalue %..string %65, 0
	%67 = extractvalue %..string %65, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$167, i64 0, i32 0), i64 46}, i64 554, i64 10, i64 1, i64 %67)
	%68 = getelementptr inbounds i8, i8* %66, i64 1
	%69 = load i8, i8* %68, align 1
	%70 = icmp eq i8 %69, 43
	%71 = zext i1 %70 to i8
	%72 = trunc i8 %71 to i1
	br i1 %72, label %if.then-8, label %cmp.or-7

cmp.or-7:
	; IndexExpr
	%73 = load %..string, %..string* %6, align 8
	%74 = extractvalue %..string %73, 0
	%75 = extractvalue %..string %73, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$168, i64 0, i32 0), i64 46}, i64 554, i64 27, i64 1, i64 %75)
	%76 = getelementptr inbounds i8, i8* %74, i64 1
	%77 = load i8, i8* %76, align 1
	%78 = icmp eq i8 %77, 45
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	; SliceExpr
	%81 = load %..string, %..string* %6, align 8
	%82 = extractvalue %..string %81, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$169, i64 0, i32 0), i64 46}, i64 555, i64 13, i64 1, i64 %82, i64 %82)
	%83 = extractvalue %..string %81, 0
	%84 = getelementptr inbounds i8, i8* %83, i64 1
	%85 = sub i64 %82, 1
	%86 = bitcast %..string* %11 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %..string zeroinitializer, %..string* %11
	%88 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 0
	store i8* %84, i8** %88
	%89 = getelementptr inbounds %..string, %..string* %11, i64 0, i32 1
	store i64 %85, i64* %89
	%90 = load %..string, %..string* %11, align 8
	store %..string %90, %..string* %6
	br label %if.done-10

if.else-9:
	; AssignStmt
	; IndexExpr
	%91 = load %..string, %..string* %6, align 8
	%92 = extractvalue %..string %91, 0
	%93 = extractvalue %..string %91, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16a, i64 0, i32 0), i64 46}, i64 557, i64 8, i64 0, i64 %93)
	%94 = getelementptr inbounds i8, i8* %92, i64 0
	store i8 43, i8* %94
	br label %if.done-10

if.done-10:
	; IfStmt
	; SelectorExpr
	%95 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%96 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %95, i64 0
	%97 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %96, i64 0, i32 2
	%98 = load i8, i8* %97, align 1
	%99 = trunc i8 %98 to i1
	br i1 %99, label %cmp.and-11, label %if.done-14

cmp.and-11:
	; SelectorExpr
	%100 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%101 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %100, i64 0
	%102 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %101, i64 0, i32 1
	%103 = load i8, i8* %102, align 1
	%104 = trunc i8 %103 to i1
	br i1 %104, label %if.done-14, label %cmp.and-12

cmp.and-12:
	; IndexExpr
	%105 = load %..string, %..string* %6, align 8
	%106 = extractvalue %..string %105, 0
	%107 = extractvalue %..string %105, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16b, i64 0, i32 0), i64 46}, i64 560, i64 34, i64 0, i64 %107)
	%108 = getelementptr inbounds i8, i8* %106, i64 0
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 43
	%111 = zext i1 %110 to i8
	%112 = trunc i8 %111 to i1
	br i1 %112, label %if.then-13, label %if.done-14

if.then-13:
	; AssignStmt
	; IndexExpr
	%113 = load %..string, %..string* %6, align 8
	%114 = extractvalue %..string %113, 0
	%115 = extractvalue %..string %113, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16c, i64 0, i32 0), i64 46}, i64 561, i64 8, i64 0, i64 %115)
	%116 = getelementptr inbounds i8, i8* %114, i64 0
	store i8 32, i8* %116
	br label %if.done-14

if.done-14:
	; IfStmt
	%117 = load %..string, %..string* %6, align 8
	%118 = extractvalue %..string %117, 1
	%119 = icmp sgt i64 %118, 1
	%120 = zext i1 %119 to i8
	%121 = trunc i8 %120 to i1
	br i1 %121, label %cmp.and-15, label %if.done-18

cmp.and-15:
	; IndexExpr
	%122 = load %..string, %..string* %6, align 8
	%123 = extractvalue %..string %122, 0
	%124 = extractvalue %..string %122, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16d, i64 0, i32 0), i64 46}, i64 564, i64 26, i64 1, i64 %124)
	%125 = getelementptr inbounds i8, i8* %123, i64 1
	%126 = load i8, i8* %125, align 1
	%127 = icmp eq i8 %126, 78
	%128 = zext i1 %127 to i8
	%129 = trunc i8 %128 to i1
	br i1 %129, label %cmp.and-16, label %if.done-18

cmp.and-16:
	; IndexExpr
	%130 = load %..string, %..string* %6, align 8
	%131 = extractvalue %..string %130, 0
	%132 = extractvalue %..string %130, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16e, i64 0, i32 0), i64 46}, i64 564, i64 43, i64 1, i64 %132)
	%133 = getelementptr inbounds i8, i8* %131, i64 1
	%134 = load i8, i8* %133, align 1
	%135 = icmp eq i8 %134, 73
	%136 = zext i1 %135 to i8
	%137 = trunc i8 %136 to i1
	br i1 %137, label %if.then-17, label %if.done-18

if.then-17:
	; SelectorExpr
	%138 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%139 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %138, i64 0
	%140 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %139, i64 0, i32 12
	%141 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %140, align 8
	%142 = load %..string, %..string* %6, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %141, %..string %142, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-18:
	; IfStmt
	; SelectorExpr
	%143 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%144 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %143, i64 0
	%145 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %144, i64 0, i32 1
	%146 = load i8, i8* %145, align 1
	%147 = trunc i8 %146 to i1
	br i1 %147, label %if.then-20, label %cmp.or-19

cmp.or-19:
	; IndexExpr
	%148 = load %..string, %..string* %6, align 8
	%149 = extractvalue %..string %148, 0
	%150 = extractvalue %..string %148, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$16f, i64 0, i32 0), i64 46}, i64 569, i64 21, i64 0, i64 %150)
	%151 = getelementptr inbounds i8, i8* %149, i64 0
	%152 = load i8, i8* %151, align 1
	%153 = icmp ne i8 %152, 43
	%154 = zext i1 %153 to i8
	%155 = trunc i8 %154 to i1
	br i1 %155, label %if.then-20, label %if.else-26

if.then-20:
	; IfStmt
	; SelectorExpr
	%156 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%157 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %156, i64 0
	%158 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %157, i64 0, i32 3
	%159 = load i8, i8* %158, align 1
	%160 = trunc i8 %159 to i1
	br i1 %160, label %cmp.and-21, label %if.else-24

cmp.and-21:
	; SelectorExpr
	%161 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%162 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %161, i64 0
	%163 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %162, i64 0, i32 5
	%164 = load i8, i8* %163, align 1
	%165 = trunc i8 %164 to i1
	br i1 %165, label %cmp.and-22, label %if.else-24

cmp.and-22:
	; SelectorExpr
	%166 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%167 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %166, i64 0
	%168 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %167, i64 0, i32 7
	%169 = load i64, i64* %168, align 8
	%170 = load %..string, %..string* %6, align 8
	%171 = extractvalue %..string %170, 1
	%172 = icmp sgt i64 %169, %171
	%173 = zext i1 %172 to i8
	%174 = trunc i8 %173 to i1
	br i1 %174, label %if.then-23, label %if.else-24

if.then-23:
	; SelectorExpr
	%175 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%176 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %175, i64 0
	%177 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %176, i64 0, i32 12
	%178 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %177, align 8
	; IndexExpr
	%179 = load %..string, %..string* %6, align 8
	%180 = extractvalue %..string %179, 0
	%181 = extractvalue %..string %179, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$170, i64 0, i32 0), i64 46}, i64 571, i64 28, i64 0, i64 %181)
	%182 = getelementptr inbounds i8, i8* %180, i64 0
	%183 = load i8, i8* %182, align 1
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %178, i8 %183, %Context* noalias nonnull %__.context_ptr)
	%184 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; SelectorExpr
	%185 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%186 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %185, i64 0
	%187 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %186, i64 0, i32 7
	%188 = load i64, i64* %187, align 8
	%189 = load %..string, %..string* %6, align 8
	%190 = extractvalue %..string %189, 1
	%191 = sub i64 %188, %190
	call void @fmt-14.fmt_write_padding(%fmt-14.Fmt_Info* %184, i64 %191, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%192 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%193 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %192, i64 0
	%194 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %193, i64 0, i32 12
	%195 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %194, align 8
	; SliceExpr
	%196 = load %..string, %..string* %6, align 8
	%197 = extractvalue %..string %196, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$171, i64 0, i32 0), i64 46}, i64 573, i64 29, i64 1, i64 %197, i64 %197)
	%198 = extractvalue %..string %196, 0
	%199 = getelementptr inbounds i8, i8* %198, i64 1
	%200 = sub i64 %197, 1
	%201 = bitcast %..string* %12 to %..rawptr
	%202 = call %..rawptr @__mem_zero(%..rawptr %201, i64 16)
	store %..string zeroinitializer, %..string* %12
	%203 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 0
	store i8* %199, i8** %203
	%204 = getelementptr inbounds %..string, %..string* %12, i64 0, i32 1
	store i64 %200, i64* %204
	%205 = load %..string, %..string* %12, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %195, %..string %205, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-25

if.else-24:
	%206 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%207 = load %..string, %..string* %6, align 8
	call void @fmt-14._pad(%fmt-14.Fmt_Info* %206, %..string %207, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-25

if.done-25:
	br label %if.done-27

if.else-26:
	%208 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; SliceExpr
	%209 = load %..string, %..string* %6, align 8
	%210 = extractvalue %..string %209, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$172, i64 0, i32 0), i64 46}, i64 578, i64 16, i64 1, i64 %210, i64 %210)
	%211 = extractvalue %..string %209, 0
	%212 = getelementptr inbounds i8, i8* %211, i64 1
	%213 = sub i64 %210, 1
	%214 = bitcast %..string* %13 to %..rawptr
	%215 = call %..rawptr @__mem_zero(%..rawptr %214, i64 16)
	store %..string zeroinitializer, %..string* %13
	%216 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 0
	store i8* %212, i8** %216
	%217 = getelementptr inbounds %..string, %..string* %13, i64 0, i32 1
	store i64 %213, i64* %217
	%218 = load %..string, %..string* %13, align 8
	call void @fmt-14._pad(%fmt-14.Fmt_Info* %208, %..string %218, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-27

if.done-27:
	br label %switch.done-28

switch.done-28:
	ret void
}

define void @fmt-14.fmt_string(%fmt-14.Fmt_Info* %fi, %..string %s, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i32, align 16
	%3 = alloca i8, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca %..string, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..string %s, %..string* %1
	
	store i32 %verb, i32* %2
	; SwitchStmt
	%8 = load i32, i32* %2, align 4
	%9 = icmp eq i32 %8, 115
	br i1 %9, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%10 = icmp eq i32 %8, 118
	br i1 %10, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%11 = icmp eq i32 %8, 120
	br i1 %11, label %switch.fall.body-6, label %switch.case.next-4

switch.case.body-3:
	; SelectorExpr
	%12 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %13, i64 0, i32 12
	%15 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %14, align 8
	%16 = load %..string, %..string* %1, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %15, %..string %16, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-15

switch.case.next-4:
	%17 = icmp eq i32 %8, 88
	br i1 %17, label %switch.fall.body-6, label %switch.case.next-5

switch.case.next-5:
	%18 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%19 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %18, i32 %19, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-15

switch.fall.body-6:
	; space
	
	; SelectorExpr
	%20 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%21 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %20, i64 0
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0, i32 2
	%23 = load i8, i8* %22, align 1
	store i8 %23, i8* %3
	; AssignStmt
	; SelectorExpr
	%24 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%25 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %24, i64 0
	%26 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %25, i64 0, i32 2
	store i8 0, i8* %26
	; DeferStmt
	; RangeStmt
	; i
	%27 = bitcast i64* %4 to %..rawptr
	%28 = call %..rawptr @__mem_zero(%..rawptr %27, i64 8)
	store i64 zeroinitializer, i64* %4
	
	%29 = bitcast i64* %5 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 8)
	store i64 zeroinitializer, i64* %5
	store i64 0, i64* %5
	%31 = bitcast i64* %6 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 8)
	store i64 zeroinitializer, i64* %6
	store i64 0, i64* %6
	br label %for.interval.loop-7

for.interval.loop-7:
	%33 = load %..string, %..string* %1, align 8
	%34 = extractvalue %..string %33, 1
	%35 = load i64, i64* %5, align 8
	%36 = icmp slt i64 %35, %34
	br i1 %36, label %for.interval.body-8, label %for.interval.done-14

for.interval.body-8:
	%37 = load i64, i64* %5, align 8
	%38 = load i64, i64* %6, align 8
	%39 = load i64, i64* %5, align 8
	%40 = add i64 %39, 1
	store i64 %40, i64* %5
	%41 = load i64, i64* %6, align 8
	%42 = add i64 %41, 1
	store i64 %42, i64* %6
	store i64 %37, i64* %4
	; IfStmt
	%43 = load i64, i64* %4, align 8
	%44 = icmp sgt i64 %43, 0
	%45 = zext i1 %44 to i8
	%46 = trunc i8 %45 to i1
	br i1 %46, label %cmp.and-9, label %if.done-11

cmp.and-9:
	%47 = load i8, i8* %3, align 1
	%48 = trunc i8 %47 to i1
	br i1 %48, label %if.then-10, label %if.done-11

if.then-10:
	; SelectorExpr
	%49 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%50 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %49, i64 0
	%51 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %50, i64 0, i32 12
	%52 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %51, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %52, i8 32, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-11

if.done-11:
	; char_set
	
	%53 = load %..string, %..string* @fmt-14.__DIGITS_UPPER, align 8
	store %..string %53, %..string* %7
	; IfStmt
	%54 = load i32, i32* %2, align 4
	%55 = icmp eq i32 %54, 120
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	%58 = load %..string, %..string* @fmt-14.__DIGITS_LOWER, align 8
	store %..string %58, %..string* %7
	br label %if.done-13

if.done-13:
	%59 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; IndexExpr
	%60 = load %..string, %..string* %1, align 8
	%61 = extractvalue %..string %60, 0
	%62 = extractvalue %..string %60, 1
	%63 = load i64, i64* %4, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$173, i64 0, i32 0), i64 46}, i64 599, i64 23, i64 %63, i64 %62)
	%64 = getelementptr inbounds i8, i8* %61, i64 %63
	%65 = load i8, i8* %64, align 1
	%66 = zext i8 %65 to i64
	%67 = load %..string, %..string* %7, align 8
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %59, i64 %66, i64 16, i1 false, i64 8, %..string %67, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-7

for.interval.done-14:
	; defer
	; AssignStmt
	; SelectorExpr
	%68 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%69 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %68, i64 0
	%70 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %69, i64 0, i32 2
	%71 = load i8, i8* %3, align 1
	store i8 %71, i8* %70
	br label %switch.done-15

switch.done-15:
	ret void
}

define void @fmt-14.fmt_cstring(%fmt-14.Fmt_Info* %fi, i8* %s, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i8*, align 16
	%2 = alloca i32, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store i8* %s, i8** %1
	
	store i32 %verb, i32* %2
	%3 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%4 = load i8*, i8** %1, align 8
	%5 = call %..string @__cstring_to_string(i8* %4)
	%6 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_string(%fmt-14.Fmt_Info* %3, %..string %5, i32 %6, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.fmt_pointer(%fmt-14.Fmt_Info* %fi, %..rawptr %p, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..rawptr, align 16
	%2 = alloca i32, align 16
	%3 = alloca i64, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..rawptr %p, %..rawptr* %1
	
	store i32 %verb, i32* %2
	; SwitchStmt
	%4 = load i32, i32* %2, align 4
	%5 = icmp eq i32 %4, 112
	br i1 %5, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%6 = icmp eq i32 %4, 118
	br i1 %6, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%7 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%8 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %7, i32 %8, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-7

switch.case.body-3:
	; u
	
	%9 = load %..rawptr, %..rawptr* %1, align 8
	%10 = ptrtoint %..rawptr %9 to i64
	%11 = bitcast i64 %10 to i64
	store i64 %11, i64* %3
	; IfStmt
	; SelectorExpr
	%12 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%13 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %12, i64 0
	%14 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %13, i64 0, i32 4
	%15 = load i8, i8* %14, align 1
	%16 = trunc i8 %15 to i1
	br i1 %16, label %cmp.or-4, label %if.then-5

cmp.or-4:
	%17 = load i32, i32* %2, align 4
	%18 = icmp eq i32 %17, 118
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %if.then-5, label %if.done-6

if.then-5:
	; SelectorExpr
	%21 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %22, i64 0, i32 12
	%24 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %23, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %24, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$174, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.done-6:
	%25 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%26 = load i64, i64* %3, align 8
	%27 = load %..string, %..string* @fmt-14.__DIGITS_UPPER, align 8
	call void @fmt-14._fmt_int(%fmt-14.Fmt_Info* %25, i64 %26, i64 16, i1 false, i64 64, %..string %27, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-7

switch.done-7:
	ret void
}

define {%..string, i8} @fmt-14.enum_value_to_string(%..any %v, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %..any, align 16
	%1 = alloca %Type_Info_Enum, align 16
	%2 = alloca %..any, align 16
	%3 = alloca %..any, align 16
	%4 = alloca i32, align 16
	%5 = alloca %Type_Info_Enum, align 16
	%6 = alloca {%..string, i8}, align 16
	%7 = alloca i8, align 16
	%8 = alloca %Type_Info_Enum, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca i16, align 16
	%11 = alloca %Type_Info_Enum, align 16
	%12 = alloca {%..string, i8}, align 16
	%13 = alloca i32, align 16
	%14 = alloca %Type_Info_Enum, align 16
	%15 = alloca {%..string, i8}, align 16
	%16 = alloca i64, align 16
	%17 = alloca %Type_Info_Enum, align 16
	%18 = alloca {%..string, i8}, align 16
	%19 = alloca i64, align 16
	%20 = alloca %Type_Info_Enum, align 16
	%21 = alloca {%..string, i8}, align 16
	%22 = alloca i8, align 16
	%23 = alloca %Type_Info_Enum, align 16
	%24 = alloca {%..string, i8}, align 16
	%25 = alloca i16, align 16
	%26 = alloca %Type_Info_Enum, align 16
	%27 = alloca {%..string, i8}, align 16
	%28 = alloca i32, align 16
	%29 = alloca %Type_Info_Enum, align 16
	%30 = alloca {%..string, i8}, align 16
	%31 = alloca i64, align 16
	%32 = alloca %Type_Info_Enum, align 16
	%33 = alloca {%..string, i8}, align 16
	%34 = alloca i64, align 16
	%35 = alloca %Type_Info_Enum, align 16
	%36 = alloca {%..string, i8}, align 16
	%37 = alloca i64, align 16
	%38 = alloca %Type_Info_Enum, align 16
	%39 = alloca {%..string, i8}, align 16
	%40 = alloca float, align 16
	%41 = alloca %Type_Info_Enum, align 16
	%42 = alloca {%..string, i8}, align 16
	%43 = alloca double, align 16
	%44 = alloca %Type_Info_Enum, align 16
	%45 = alloca {%..string, i8}, align 16
	%46 = alloca {[0 x <8 x i8>], [72 x i8], i8}, align 16
	%47 = alloca {%..string, i8}, align 16
	%48 = alloca {%..string, i8}, align 16
	
	store %..any %v, %..any* %0
	; AssignStmt
	; SelectorExpr
	%49 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	; SelectorExpr
	%50 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	%51 = load %Type_Info*, %Type_Info** %50, align 8
	%52 = call %Type_Info* @type_info_base(%Type_Info* %51, %Context* noalias nonnull %__.context_ptr)
	store %Type_Info* %52, %Type_Info** %49
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%53 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 1
	%54 = load %Type_Info*, %Type_Info** %53, align 8
	%55 = getelementptr inbounds %Type_Info, %Type_Info* %54, i64 0
	%56 = getelementptr inbounds %Type_Info, %Type_Info* %55, i64 0, i32 2
	%57 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %56, align 8
	; get union's tag
	%58 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %56, i64 0, i32 2 ; UnionTagPtr
	%59 = load i8, i8* %58, align 1
	%60 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %56 to %..rawptr
	%61 = icmp eq i8 %59, 17
	br i1 %61, label %typeswitch.body-2, label %typeswitch.next-1

typeswitch.next-1:
	store {[0 x <8 x i8>], [72 x i8], i8} %57, {[0 x <8 x i8>], [72 x i8], i8}* %46
	; ReturnStmt
	%62 = bitcast {%..string, i8}* %47 to %..rawptr
	%63 = call %..rawptr @__mem_zero(%..rawptr %62, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %47
	%64 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %47, i64 0, i32 0
	store %..string zeroinitializer, %..string* %64
	%65 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %47, i64 0, i32 1
	store i8 0, i8* %65
	%66 = load {%..string, i8}, {%..string, i8}* %47, align 8
	ret {%..string, i8} %66

typeswitch.body-2:
	%67 = bitcast %..rawptr %60 to %Type_Info_Enum*
	%68 = load %Type_Info_Enum, %Type_Info_Enum* %67, align 8
	store %Type_Info_Enum %68, %Type_Info_Enum* %1
	; a
	
	; CompoundLit
	%69 = bitcast %..any* %3 to %..rawptr
	%70 = call %..rawptr @__mem_zero(%..rawptr %69, i64 16)
	store %..any zeroinitializer, %..any* %3
	store %..any zeroinitializer, %..any* %3
	; SelectorExpr
	%71 = getelementptr inbounds %..any, %..any* %0, i64 0, i32 0
	%72 = load %..rawptr, %..rawptr* %71, align 8
	%73 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 0
	store %..rawptr %72, %..rawptr* %73
	; SelectorExpr
	%74 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1, i64 0, i32 0
	%75 = load %Type_Info*, %Type_Info** %74, align 8
	%76 = call %Type_Info* @type_info_base(%Type_Info* %75, %Context* noalias nonnull %__.context_ptr)
	%77 = getelementptr inbounds %..any, %..any* %3, i64 0, i32 1
	store %Type_Info* %76, %Type_Info** %77
	%78 = load %..any, %..any* %3, align 8
	store %..any %78, %..any* %2
	; TypeSwitchStmt
	%79 = load %..any, %..any* %2, align 8
	%80 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%81 = load %Type_Info*, %Type_Info** %80, align 8
	%82 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	%83 = icmp eq %Type_Info* %81, %82
	br i1 %83, label %typeswitch.body-4, label %typeswitch.next-3

typeswitch.next-3:
	%84 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%85 = load %Type_Info*, %Type_Info** %84, align 8
	%86 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%87 = icmp eq %Type_Info* %85, %86
	br i1 %87, label %typeswitch.body-6, label %typeswitch.next-5

typeswitch.body-4:
	%88 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%89 = load %..rawptr, %..rawptr* %88, align 8
	%90 = bitcast %..rawptr %89 to i32*
	%91 = load i32, i32* %90, align 4
	store i32 %91, i32* %4
	; ReturnStmt
	%92 = load i32, i32* %4, align 4
	%93 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%94 = bitcast %Type_Info_Enum* %5 to %..rawptr
	%95 = call %..rawptr @__mem_zero(%..rawptr %94, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %5
	store %Type_Info_Enum %93, %Type_Info_Enum* %5
	%96 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-0(i32 %92, %Type_Info_Enum* %5, %Context* noalias nonnull %__.context_ptr)
	%97 = extractvalue {%..string, i8} %96, 0
	%98 = extractvalue {%..string, i8} %96, 1
	%99 = bitcast {%..string, i8}* %6 to %..rawptr
	%100 = call %..rawptr @__mem_zero(%..rawptr %99, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %6
	%101 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %6, i64 0, i32 0
	store %..string %97, %..string* %101
	%102 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %6, i64 0, i32 1
	store i8 %98, i8* %102
	%103 = load {%..string, i8}, {%..string, i8}* %6, align 8
	ret {%..string, i8} %103

typeswitch.next-5:
	%104 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%105 = load %Type_Info*, %Type_Info** %104, align 8
	%106 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%107 = icmp eq %Type_Info* %105, %106
	br i1 %107, label %typeswitch.body-8, label %typeswitch.next-7

typeswitch.body-6:
	%108 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%109 = load %..rawptr, %..rawptr* %108, align 8
	%110 = bitcast %..rawptr %109 to i8*
	%111 = load i8, i8* %110, align 1
	store i8 %111, i8* %7
	; ReturnStmt
	%112 = load i8, i8* %7, align 1
	%113 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%114 = bitcast %Type_Info_Enum* %8 to %..rawptr
	%115 = call %..rawptr @__mem_zero(%..rawptr %114, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %8
	store %Type_Info_Enum %113, %Type_Info_Enum* %8
	%116 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-1(i8 %112, %Type_Info_Enum* %8, %Context* noalias nonnull %__.context_ptr)
	%117 = extractvalue {%..string, i8} %116, 0
	%118 = extractvalue {%..string, i8} %116, 1
	%119 = bitcast {%..string, i8}* %9 to %..rawptr
	%120 = call %..rawptr @__mem_zero(%..rawptr %119, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%121 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string %117, %..string* %121
	%122 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 %118, i8* %122
	%123 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %123

typeswitch.next-7:
	%124 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%125 = load %Type_Info*, %Type_Info** %124, align 8
	%126 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%127 = icmp eq %Type_Info* %125, %126
	br i1 %127, label %typeswitch.body-10, label %typeswitch.next-9

typeswitch.body-8:
	%128 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%129 = load %..rawptr, %..rawptr* %128, align 8
	%130 = bitcast %..rawptr %129 to i16*
	%131 = load i16, i16* %130, align 2
	store i16 %131, i16* %10
	; ReturnStmt
	%132 = load i16, i16* %10, align 2
	%133 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%134 = bitcast %Type_Info_Enum* %11 to %..rawptr
	%135 = call %..rawptr @__mem_zero(%..rawptr %134, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %11
	store %Type_Info_Enum %133, %Type_Info_Enum* %11
	%136 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-2(i16 %132, %Type_Info_Enum* %11, %Context* noalias nonnull %__.context_ptr)
	%137 = extractvalue {%..string, i8} %136, 0
	%138 = extractvalue {%..string, i8} %136, 1
	%139 = bitcast {%..string, i8}* %12 to %..rawptr
	%140 = call %..rawptr @__mem_zero(%..rawptr %139, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %12
	%141 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %12, i64 0, i32 0
	store %..string %137, %..string* %141
	%142 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %12, i64 0, i32 1
	store i8 %138, i8* %142
	%143 = load {%..string, i8}, {%..string, i8}* %12, align 8
	ret {%..string, i8} %143

typeswitch.next-9:
	%144 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%145 = load %Type_Info*, %Type_Info** %144, align 8
	%146 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%147 = icmp eq %Type_Info* %145, %146
	br i1 %147, label %typeswitch.body-12, label %typeswitch.next-11

typeswitch.body-10:
	%148 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%149 = load %..rawptr, %..rawptr* %148, align 8
	%150 = bitcast %..rawptr %149 to i32*
	%151 = load i32, i32* %150, align 4
	store i32 %151, i32* %13
	; ReturnStmt
	%152 = load i32, i32* %13, align 4
	%153 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%154 = bitcast %Type_Info_Enum* %14 to %..rawptr
	%155 = call %..rawptr @__mem_zero(%..rawptr %154, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %14
	store %Type_Info_Enum %153, %Type_Info_Enum* %14
	%156 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-3(i32 %152, %Type_Info_Enum* %14, %Context* noalias nonnull %__.context_ptr)
	%157 = extractvalue {%..string, i8} %156, 0
	%158 = extractvalue {%..string, i8} %156, 1
	%159 = bitcast {%..string, i8}* %15 to %..rawptr
	%160 = call %..rawptr @__mem_zero(%..rawptr %159, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %15
	%161 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %15, i64 0, i32 0
	store %..string %157, %..string* %161
	%162 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %15, i64 0, i32 1
	store i8 %158, i8* %162
	%163 = load {%..string, i8}, {%..string, i8}* %15, align 8
	ret {%..string, i8} %163

typeswitch.next-11:
	%164 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%165 = load %Type_Info*, %Type_Info** %164, align 8
	%166 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%167 = icmp eq %Type_Info* %165, %166
	br i1 %167, label %typeswitch.body-14, label %typeswitch.next-13

typeswitch.body-12:
	%168 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%169 = load %..rawptr, %..rawptr* %168, align 8
	%170 = bitcast %..rawptr %169 to i64*
	%171 = load i64, i64* %170, align 8
	store i64 %171, i64* %16
	; ReturnStmt
	%172 = load i64, i64* %16, align 8
	%173 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%174 = bitcast %Type_Info_Enum* %17 to %..rawptr
	%175 = call %..rawptr @__mem_zero(%..rawptr %174, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %17
	store %Type_Info_Enum %173, %Type_Info_Enum* %17
	%176 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-4(i64 %172, %Type_Info_Enum* %17, %Context* noalias nonnull %__.context_ptr)
	%177 = extractvalue {%..string, i8} %176, 0
	%178 = extractvalue {%..string, i8} %176, 1
	%179 = bitcast {%..string, i8}* %18 to %..rawptr
	%180 = call %..rawptr @__mem_zero(%..rawptr %179, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%181 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string %177, %..string* %181
	%182 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 %178, i8* %182
	%183 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %183

typeswitch.next-13:
	%184 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%185 = load %Type_Info*, %Type_Info** %184, align 8
	%186 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%187 = icmp eq %Type_Info* %185, %186
	br i1 %187, label %typeswitch.body-16, label %typeswitch.next-15

typeswitch.body-14:
	%188 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%189 = load %..rawptr, %..rawptr* %188, align 8
	%190 = bitcast %..rawptr %189 to i64*
	%191 = load i64, i64* %190, align 8
	store i64 %191, i64* %19
	; ReturnStmt
	%192 = load i64, i64* %19, align 8
	%193 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%194 = bitcast %Type_Info_Enum* %20 to %..rawptr
	%195 = call %..rawptr @__mem_zero(%..rawptr %194, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %20
	store %Type_Info_Enum %193, %Type_Info_Enum* %20
	%196 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-5(i64 %192, %Type_Info_Enum* %20, %Context* noalias nonnull %__.context_ptr)
	%197 = extractvalue {%..string, i8} %196, 0
	%198 = extractvalue {%..string, i8} %196, 1
	%199 = bitcast {%..string, i8}* %21 to %..rawptr
	%200 = call %..rawptr @__mem_zero(%..rawptr %199, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %21
	%201 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %21, i64 0, i32 0
	store %..string %197, %..string* %201
	%202 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %21, i64 0, i32 1
	store i8 %198, i8* %202
	%203 = load {%..string, i8}, {%..string, i8}* %21, align 8
	ret {%..string, i8} %203

typeswitch.next-15:
	%204 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%205 = load %Type_Info*, %Type_Info** %204, align 8
	%206 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%207 = icmp eq %Type_Info* %205, %206
	br i1 %207, label %typeswitch.body-18, label %typeswitch.next-17

typeswitch.body-16:
	%208 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%209 = load %..rawptr, %..rawptr* %208, align 8
	%210 = bitcast %..rawptr %209 to i8*
	%211 = load i8, i8* %210, align 1
	store i8 %211, i8* %22
	; ReturnStmt
	%212 = load i8, i8* %22, align 1
	%213 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%214 = bitcast %Type_Info_Enum* %23 to %..rawptr
	%215 = call %..rawptr @__mem_zero(%..rawptr %214, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %23
	store %Type_Info_Enum %213, %Type_Info_Enum* %23
	%216 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-6(i8 %212, %Type_Info_Enum* %23, %Context* noalias nonnull %__.context_ptr)
	%217 = extractvalue {%..string, i8} %216, 0
	%218 = extractvalue {%..string, i8} %216, 1
	%219 = bitcast {%..string, i8}* %24 to %..rawptr
	%220 = call %..rawptr @__mem_zero(%..rawptr %219, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %24
	%221 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %24, i64 0, i32 0
	store %..string %217, %..string* %221
	%222 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %24, i64 0, i32 1
	store i8 %218, i8* %222
	%223 = load {%..string, i8}, {%..string, i8}* %24, align 8
	ret {%..string, i8} %223

typeswitch.next-17:
	%224 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%225 = load %Type_Info*, %Type_Info** %224, align 8
	%226 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%227 = icmp eq %Type_Info* %225, %226
	br i1 %227, label %typeswitch.body-20, label %typeswitch.next-19

typeswitch.body-18:
	%228 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%229 = load %..rawptr, %..rawptr* %228, align 8
	%230 = bitcast %..rawptr %229 to i16*
	%231 = load i16, i16* %230, align 2
	store i16 %231, i16* %25
	; ReturnStmt
	%232 = load i16, i16* %25, align 2
	%233 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%234 = bitcast %Type_Info_Enum* %26 to %..rawptr
	%235 = call %..rawptr @__mem_zero(%..rawptr %234, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %26
	store %Type_Info_Enum %233, %Type_Info_Enum* %26
	%236 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-7(i16 %232, %Type_Info_Enum* %26, %Context* noalias nonnull %__.context_ptr)
	%237 = extractvalue {%..string, i8} %236, 0
	%238 = extractvalue {%..string, i8} %236, 1
	%239 = bitcast {%..string, i8}* %27 to %..rawptr
	%240 = call %..rawptr @__mem_zero(%..rawptr %239, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %27
	%241 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %27, i64 0, i32 0
	store %..string %237, %..string* %241
	%242 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %27, i64 0, i32 1
	store i8 %238, i8* %242
	%243 = load {%..string, i8}, {%..string, i8}* %27, align 8
	ret {%..string, i8} %243

typeswitch.next-19:
	%244 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%245 = load %Type_Info*, %Type_Info** %244, align 8
	%246 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%247 = icmp eq %Type_Info* %245, %246
	br i1 %247, label %typeswitch.body-22, label %typeswitch.next-21

typeswitch.body-20:
	%248 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%249 = load %..rawptr, %..rawptr* %248, align 8
	%250 = bitcast %..rawptr %249 to i32*
	%251 = load i32, i32* %250, align 4
	store i32 %251, i32* %28
	; ReturnStmt
	%252 = load i32, i32* %28, align 4
	%253 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%254 = bitcast %Type_Info_Enum* %29 to %..rawptr
	%255 = call %..rawptr @__mem_zero(%..rawptr %254, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %29
	store %Type_Info_Enum %253, %Type_Info_Enum* %29
	%256 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-8(i32 %252, %Type_Info_Enum* %29, %Context* noalias nonnull %__.context_ptr)
	%257 = extractvalue {%..string, i8} %256, 0
	%258 = extractvalue {%..string, i8} %256, 1
	%259 = bitcast {%..string, i8}* %30 to %..rawptr
	%260 = call %..rawptr @__mem_zero(%..rawptr %259, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %30
	%261 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %30, i64 0, i32 0
	store %..string %257, %..string* %261
	%262 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %30, i64 0, i32 1
	store i8 %258, i8* %262
	%263 = load {%..string, i8}, {%..string, i8}* %30, align 8
	ret {%..string, i8} %263

typeswitch.next-21:
	%264 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%265 = load %Type_Info*, %Type_Info** %264, align 8
	%266 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%267 = icmp eq %Type_Info* %265, %266
	br i1 %267, label %typeswitch.body-24, label %typeswitch.next-23

typeswitch.body-22:
	%268 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%269 = load %..rawptr, %..rawptr* %268, align 8
	%270 = bitcast %..rawptr %269 to i64*
	%271 = load i64, i64* %270, align 8
	store i64 %271, i64* %31
	; ReturnStmt
	%272 = load i64, i64* %31, align 8
	%273 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%274 = bitcast %Type_Info_Enum* %32 to %..rawptr
	%275 = call %..rawptr @__mem_zero(%..rawptr %274, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %32
	store %Type_Info_Enum %273, %Type_Info_Enum* %32
	%276 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-9(i64 %272, %Type_Info_Enum* %32, %Context* noalias nonnull %__.context_ptr)
	%277 = extractvalue {%..string, i8} %276, 0
	%278 = extractvalue {%..string, i8} %276, 1
	%279 = bitcast {%..string, i8}* %33 to %..rawptr
	%280 = call %..rawptr @__mem_zero(%..rawptr %279, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %33
	%281 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %33, i64 0, i32 0
	store %..string %277, %..string* %281
	%282 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %33, i64 0, i32 1
	store i8 %278, i8* %282
	%283 = load {%..string, i8}, {%..string, i8}* %33, align 8
	ret {%..string, i8} %283

typeswitch.next-23:
	%284 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%285 = load %Type_Info*, %Type_Info** %284, align 8
	%286 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%287 = icmp eq %Type_Info* %285, %286
	br i1 %287, label %typeswitch.body-26, label %typeswitch.next-25

typeswitch.body-24:
	%288 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%289 = load %..rawptr, %..rawptr* %288, align 8
	%290 = bitcast %..rawptr %289 to i64*
	%291 = load i64, i64* %290, align 8
	store i64 %291, i64* %34
	; ReturnStmt
	%292 = load i64, i64* %34, align 8
	%293 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%294 = bitcast %Type_Info_Enum* %35 to %..rawptr
	%295 = call %..rawptr @__mem_zero(%..rawptr %294, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %35
	store %Type_Info_Enum %293, %Type_Info_Enum* %35
	%296 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-10(i64 %292, %Type_Info_Enum* %35, %Context* noalias nonnull %__.context_ptr)
	%297 = extractvalue {%..string, i8} %296, 0
	%298 = extractvalue {%..string, i8} %296, 1
	%299 = bitcast {%..string, i8}* %36 to %..rawptr
	%300 = call %..rawptr @__mem_zero(%..rawptr %299, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %36
	%301 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %36, i64 0, i32 0
	store %..string %297, %..string* %301
	%302 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %36, i64 0, i32 1
	store i8 %298, i8* %302
	%303 = load {%..string, i8}, {%..string, i8}* %36, align 8
	ret {%..string, i8} %303

typeswitch.next-25:
	%304 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%305 = load %Type_Info*, %Type_Info** %304, align 8
	%306 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 62
	%307 = icmp eq %Type_Info* %305, %306
	br i1 %307, label %typeswitch.body-28, label %typeswitch.next-27

typeswitch.body-26:
	%308 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%309 = load %..rawptr, %..rawptr* %308, align 8
	%310 = bitcast %..rawptr %309 to i64*
	%311 = load i64, i64* %310, align 8
	store i64 %311, i64* %37
	; ReturnStmt
	%312 = load i64, i64* %37, align 8
	%313 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%314 = bitcast %Type_Info_Enum* %38 to %..rawptr
	%315 = call %..rawptr @__mem_zero(%..rawptr %314, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %38
	store %Type_Info_Enum %313, %Type_Info_Enum* %38
	%316 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-11(i64 %312, %Type_Info_Enum* %38, %Context* noalias nonnull %__.context_ptr)
	%317 = extractvalue {%..string, i8} %316, 0
	%318 = extractvalue {%..string, i8} %316, 1
	%319 = bitcast {%..string, i8}* %39 to %..rawptr
	%320 = call %..rawptr @__mem_zero(%..rawptr %319, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %39
	%321 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %39, i64 0, i32 0
	store %..string %317, %..string* %321
	%322 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %39, i64 0, i32 1
	store i8 %318, i8* %322
	%323 = load {%..string, i8}, {%..string, i8}* %39, align 8
	ret {%..string, i8} %323

typeswitch.next-27:
	%324 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 1
	%325 = load %Type_Info*, %Type_Info** %324, align 8
	%326 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 63
	%327 = icmp eq %Type_Info* %325, %326
	br i1 %327, label %typeswitch.body-30, label %typeswitch.next-29

typeswitch.body-28:
	%328 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%329 = load %..rawptr, %..rawptr* %328, align 8
	%330 = bitcast %..rawptr %329 to float*
	%331 = load float, float* %330, align 4
	store float %331, float* %40
	; ReturnStmt
	%332 = load float, float* %40, align 4
	%333 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%334 = bitcast %Type_Info_Enum* %41 to %..rawptr
	%335 = call %..rawptr @__mem_zero(%..rawptr %334, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %41
	store %Type_Info_Enum %333, %Type_Info_Enum* %41
	%336 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-12(float %332, %Type_Info_Enum* %41, %Context* noalias nonnull %__.context_ptr)
	%337 = extractvalue {%..string, i8} %336, 0
	%338 = extractvalue {%..string, i8} %336, 1
	%339 = bitcast {%..string, i8}* %42 to %..rawptr
	%340 = call %..rawptr @__mem_zero(%..rawptr %339, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %42
	%341 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %42, i64 0, i32 0
	store %..string %337, %..string* %341
	%342 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %42, i64 0, i32 1
	store i8 %338, i8* %342
	%343 = load {%..string, i8}, {%..string, i8}* %42, align 8
	ret {%..string, i8} %343

typeswitch.next-29:
	; ReturnStmt
	%344 = bitcast {%..string, i8}* %48 to %..rawptr
	%345 = call %..rawptr @__mem_zero(%..rawptr %344, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %48
	%346 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %48, i64 0, i32 0
	store %..string zeroinitializer, %..string* %346
	%347 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %48, i64 0, i32 1
	store i8 0, i8* %347
	%348 = load {%..string, i8}, {%..string, i8}* %48, align 8
	ret {%..string, i8} %348

typeswitch.body-30:
	%349 = getelementptr inbounds %..any, %..any* %2, i64 0, i32 0
	%350 = load %..rawptr, %..rawptr* %349, align 8
	%351 = bitcast %..rawptr %350 to double*
	%352 = load double, double* %351, align 8
	store double %352, double* %43
	; ReturnStmt
	%353 = load double, double* %43, align 8
	%354 = load %Type_Info_Enum, %Type_Info_Enum* %1, align 8
	%355 = bitcast %Type_Info_Enum* %44 to %..rawptr
	%356 = call %..rawptr @__mem_zero(%..rawptr %355, i64 48)
	store %Type_Info_Enum zeroinitializer, %Type_Info_Enum* %44
	store %Type_Info_Enum %354, %Type_Info_Enum* %44
	%357 = call {%..string, i8} @fmt-14.enum_value_to_string.get_str-13(double %353, %Type_Info_Enum* %44, %Context* noalias nonnull %__.context_ptr)
	%358 = extractvalue {%..string, i8} %357, 0
	%359 = extractvalue {%..string, i8} %357, 1
	%360 = bitcast {%..string, i8}* %45 to %..rawptr
	%361 = call %..rawptr @__mem_zero(%..rawptr %360, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %45
	%362 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %45, i64 0, i32 0
	store %..string %358, %..string* %362
	%363 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %45, i64 0, i32 1
	store i8 %359, i8* %363
	%364 = load {%..string, i8}, {%..string, i8}* %45, align 8
	ret {%..string, i8} %364
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-0(i32 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i32 %i, i32* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 1
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$175, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 1
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$176, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-1(i8 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i8, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i8, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i8, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i8, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i8 %i, i8* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i8, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 2)
	store {i8, i8} zeroinitializer, {i8, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 2
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i8*
	%52 = load i8, i8* %51, align 1
	store i8 %52, i8* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i8, i8}, {i8, i8}* %7, align 1
	%54 = extractvalue {i8, i8} %53, 0
	%55 = extractvalue {i8, i8} %53, 1
	store i8 %54, i8* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i8, i8* %5, align 1
	%59 = load i8, i8* %0, align 1
	%60 = icmp eq i8 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$177, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i8, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 2)
	store {i8, i8} zeroinitializer, {i8, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 2
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i8*
	%114 = load i8, i8* %113, align 1
	store i8 %114, i8* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i8, i8}, {i8, i8}* %16, align 1
	%116 = extractvalue {i8, i8} %115, 0
	%117 = extractvalue {i8, i8} %115, 1
	store i8 %116, i8* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i8, i8* %14, align 1
	%121 = load i8, i8* %0, align 1
	%122 = icmp eq i8 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$178, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-2(i16 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i16, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i16, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i16, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i16, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i16, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i16 %i, i16* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i16, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 4)
	store {i16, i8} zeroinitializer, {i16, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 3
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i16*
	%52 = load i16, i16* %51, align 2
	store i16 %52, i16* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i16, i8}, {i16, i8}* %7, align 2
	%54 = extractvalue {i16, i8} %53, 0
	%55 = extractvalue {i16, i8} %53, 1
	store i16 %54, i16* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i16, i16* %5, align 2
	%59 = load i16, i16* %0, align 2
	%60 = icmp eq i16 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$179, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i16, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 4)
	store {i16, i8} zeroinitializer, {i16, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 3
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i16*
	%114 = load i16, i16* %113, align 2
	store i16 %114, i16* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i16, i8}, {i16, i8}* %16, align 2
	%116 = extractvalue {i16, i8} %115, 0
	%117 = extractvalue {i16, i8} %115, 1
	store i16 %116, i16* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i16, i16* %14, align 2
	%121 = load i16, i16* %0, align 2
	%122 = icmp eq i16 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17a, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-3(i32 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i32 %i, i32* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 4
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17b, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 4
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17c, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-4(i64 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i64 %i, i64* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 5
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17d, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 5
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17e, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-5(i64 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i64 %i, i64* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 6
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$17f, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 6
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$180, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-6(i8 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i8, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i8, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i8, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i8, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i8 %i, i8* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i8, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 2)
	store {i8, i8} zeroinitializer, {i8, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 7
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i8, i8}, {i8, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i8*
	%52 = load i8, i8* %51, align 1
	store i8 %52, i8* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i8, i8}, {i8, i8}* %7, align 1
	%54 = extractvalue {i8, i8} %53, 0
	%55 = extractvalue {i8, i8} %53, 1
	store i8 %54, i8* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i8, i8* %5, align 1
	%59 = load i8, i8* %0, align 1
	%60 = icmp eq i8 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$181, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i8, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 2)
	store {i8, i8} zeroinitializer, {i8, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 7
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i8, i8}, {i8, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i8*
	%114 = load i8, i8* %113, align 1
	store i8 %114, i8* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i8, i8}, {i8, i8}* %16, align 1
	%116 = extractvalue {i8, i8} %115, 0
	%117 = extractvalue {i8, i8} %115, 1
	store i8 %116, i8* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i8, i8* %14, align 1
	%121 = load i8, i8* %0, align 1
	%122 = icmp eq i8 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$182, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-7(i16 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i16, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i16, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i16, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i16, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i16, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i16 %i, i16* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i16, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 4)
	store {i16, i8} zeroinitializer, {i16, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 8
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i16, i8}, {i16, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i16*
	%52 = load i16, i16* %51, align 2
	store i16 %52, i16* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i16, i8}, {i16, i8}* %7, align 2
	%54 = extractvalue {i16, i8} %53, 0
	%55 = extractvalue {i16, i8} %53, 1
	store i16 %54, i16* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i16, i16* %5, align 2
	%59 = load i16, i16* %0, align 2
	%60 = icmp eq i16 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$183, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i16, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 4)
	store {i16, i8} zeroinitializer, {i16, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 8
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i16, i8}, {i16, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i16*
	%114 = load i16, i16* %113, align 2
	store i16 %114, i16* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i16, i8}, {i16, i8}* %16, align 2
	%116 = extractvalue {i16, i8} %115, 0
	%117 = extractvalue {i16, i8} %115, 1
	store i16 %116, i16* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i16, i16* %14, align 2
	%121 = load i16, i16* %0, align 2
	%122 = icmp eq i16 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$184, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-8(i32 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i32, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i32, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i32, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i32, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i32 %i, i32* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i32, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 9
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i32, i8}, {i32, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i32*
	%52 = load i32, i32* %51, align 4
	store i32 %52, i32* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i32, i8}, {i32, i8}* %7, align 4
	%54 = extractvalue {i32, i8} %53, 0
	%55 = extractvalue {i32, i8} %53, 1
	store i32 %54, i32* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i32, i32* %5, align 4
	%59 = load i32, i32* %0, align 4
	%60 = icmp eq i32 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$185, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i32, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store {i32, i8} zeroinitializer, {i32, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 9
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i32, i8}, {i32, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i32*
	%114 = load i32, i32* %113, align 4
	store i32 %114, i32* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i32, i8}, {i32, i8}* %16, align 4
	%116 = extractvalue {i32, i8} %115, 0
	%117 = extractvalue {i32, i8} %115, 1
	store i32 %116, i32* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i32, i32* %14, align 4
	%121 = load i32, i32* %0, align 4
	%122 = icmp eq i32 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$186, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-9(i64 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i64 %i, i64* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 10
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$187, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 10
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$188, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-10(i64 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i64 %i, i64* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 11
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$189, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 11
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18a, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-11(i64 %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i8, align 16
	%7 = alloca {i64, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca {i64, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store i64 %i, i64* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {i64, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 12
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {i64, i8}, {i64, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to i64*
	%52 = load i64, i64* %51, align 8
	store i64 %52, i64* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {i64, i8}, {i64, i8}* %7, align 8
	%54 = extractvalue {i64, i8} %53, 0
	%55 = extractvalue {i64, i8} %53, 1
	store i64 %54, i64* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load i64, i64* %5, align 8
	%59 = load i64, i64* %0, align 8
	%60 = icmp eq i64 %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18b, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {i64, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 12
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {i64, i8}, {i64, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to i64*
	%114 = load i64, i64* %113, align 8
	store i64 %114, i64* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {i64, i8}, {i64, i8}* %16, align 8
	%116 = extractvalue {i64, i8} %115, 0
	%117 = extractvalue {i64, i8} %115, 1
	store i64 %116, i64* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load i64, i64* %14, align 8
	%121 = load i64, i64* %0, align 8
	%122 = icmp eq i64 %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18c, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-12(float %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca float, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca float, align 16
	%6 = alloca i8, align 16
	%7 = alloca {float, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca float, align 16
	%15 = alloca i8, align 16
	%16 = alloca {float, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store float %i, float* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {float, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 8)
	store {float, i8} zeroinitializer, {float, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 13
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {float, i8}, {float, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {float, i8}, {float, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to float*
	%52 = load float, float* %51, align 4
	store float %52, float* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {float, i8}, {float, i8}* %7, align 4
	%54 = extractvalue {float, i8} %53, 0
	%55 = extractvalue {float, i8} %53, 1
	store float %54, float* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load float, float* %5, align 4
	%59 = load float, float* %0, align 4
	%60 = fcmp oeq float %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18d, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {float, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store {float, i8} zeroinitializer, {float, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 13
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {float, i8}, {float, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {float, i8}, {float, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to float*
	%114 = load float, float* %113, align 4
	store float %114, float* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {float, i8}, {float, i8}* %16, align 4
	%116 = extractvalue {float, i8} %115, 0
	%117 = extractvalue {float, i8} %115, 1
	store float %116, float* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load float, float* %14, align 4
	%121 = load float, float* %0, align 4
	%122 = fcmp oeq float %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18e, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define {%..string, i8} @fmt-14.enum_value_to_string.get_str-13(double %i, %Type_Info_Enum* %e, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca %Type_Info_Enum_Value, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca double, align 16
	%6 = alloca i8, align 16
	%7 = alloca {double, i8}, align 16
	%8 = alloca {%..string, i8}, align 16
	%9 = alloca {%..string, i8}, align 16
	%10 = alloca %Type_Info_Enum_Value, align 16
	%11 = alloca i64, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca double, align 16
	%15 = alloca i8, align 16
	%16 = alloca {double, i8}, align 16
	%17 = alloca {%..string, i8}, align 16
	%18 = alloca {%..string, i8}, align 16
	
	store double %i, double* %0
	%19 = load %Type_Info_Enum, %Type_Info_Enum* %e, align 8
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%20 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 0
	%21 = load %Type_Info*, %Type_Info** %20, align 8
	%22 = call i8 @types-15.is_string(%Type_Info* %21, %Context* noalias nonnull %__.context_ptr)
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.else-10

if.then-1:
	; RangeStmt
	; val
	%24 = bitcast %Type_Info_Enum_Value* %1 to %..rawptr
	%25 = call %..rawptr @__mem_zero(%..rawptr %24, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %1
	
	; idx
	%26 = bitcast i64* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 8)
	store i64 zeroinitializer, i64* %2
	
	; SelectorExpr
	%28 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%29 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %28, align 8
	%30 = bitcast i64* %3 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store i64 zeroinitializer, i64* %3
	%32 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 1
	store i64 %32, i64* %3
	%33 = bitcast i64* %4 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 8)
	store i64 zeroinitializer, i64* %4
	store i64 -1, i64* %4
	br label %for.index.loop-2

for.index.loop-2:
	%35 = load i64, i64* %4, align 8
	%36 = add i64 %35, 1
	store i64 %36, i64* %4
	%37 = load i64, i64* %3, align 8
	%38 = icmp slt i64 %36, %37
	br i1 %38, label %for.index.body-3, label %for.index.done-9

for.index.body-3:
	%39 = load i64, i64* %4, align 8
	%40 = extractvalue {%Type_Info_Enum_Value*, i64} %29, 0
	%41 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %40, i64 %39
	%42 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %41, align 8
	store %Type_Info_Enum_Value %42, %Type_Info_Enum_Value* %1
	store i64 %39, i64* %2
	; IfStmt
	; v
	
	; ok
	
	%43 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, align 8
	; cast - union_cast
	%44 = bitcast {double, i8}* %7 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 16)
	store {double, i8} zeroinitializer, {double, i8}* %7
	%46 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1, i64 0, i32 2 ; UnionTagPtr
	%47 = load i8, i8* %46, align 1
	%48 = icmp eq i8 %47, 14
	br i1 %48, label %union_cast.ok-4, label %union_cast.end-5

union_cast.ok-4:
	%49 = getelementptr inbounds {double, i8}, {double, i8}* %7, i64 0, i32 0
	%50 = getelementptr inbounds {double, i8}, {double, i8}* %7, i64 0, i32 1
	%51 = bitcast %Type_Info_Enum_Value* %1 to double*
	%52 = load double, double* %51, align 8
	store double %52, double* %49
	store i8 1, i8* %50
	br label %union_cast.end-5

union_cast.end-5:
	%53 = load {double, i8}, {double, i8}* %7, align 8
	%54 = extractvalue {double, i8} %53, 0
	%55 = extractvalue {double, i8} %53, 1
	store double %54, double* %5
	store i8 %55, i8* %6
	%56 = load i8, i8* %6, align 1
	%57 = trunc i8 %56 to i1
	br i1 %57, label %cmp.and-6, label %if.done-8

cmp.and-6:
	%58 = load double, double* %5, align 8
	%59 = load double, double* %0, align 8
	%60 = fcmp oeq double %58, %59
	%61 = zext i1 %60 to i8
	%62 = trunc i8 %61 to i1
	br i1 %62, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%63 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%64 = load {%..string*, i64}, {%..string*, i64}* %63, align 8
	%65 = extractvalue {%..string*, i64} %64, 0
	%66 = load i64, i64* %2, align 8
	%67 = extractvalue {%..string*, i64} %64, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$18f, i64 0, i32 0), i64 46}, i64 633, i64 22, i64 %66, i64 %67)
	%68 = getelementptr inbounds %..string, %..string* %65, i64 %66
	%69 = load %..string, %..string* %68, align 8
	%70 = bitcast {%..string, i8}* %8 to %..rawptr
	%71 = call %..rawptr @__mem_zero(%..rawptr %70, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %8
	%72 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 0
	store %..string %69, %..string* %72
	%73 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %8, i64 0, i32 1
	store i8 1, i8* %73
	%74 = load {%..string, i8}, {%..string, i8}* %8, align 8
	ret {%..string, i8} %74

if.done-8:
	br label %for.index.loop-2

for.index.done-9:
	br label %if.done-21

if.else-10:
	; IfStmt
	; SelectorExpr
	%75 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%76 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %75, align 8
	%77 = extractvalue {%Type_Info_Enum_Value*, i64} %76, 1
	%78 = icmp eq i64 %77, 0
	%79 = zext i1 %78 to i8
	%80 = trunc i8 %79 to i1
	br i1 %80, label %if.then-11, label %if.else-12

if.then-11:
	; ReturnStmt
	%81 = bitcast {%..string, i8}* %9 to %..rawptr
	%82 = call %..rawptr @__mem_zero(%..rawptr %81, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %9
	%83 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 0
	store %..string zeroinitializer, %..string* %83
	%84 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %9, i64 0, i32 1
	store i8 1, i8* %84
	%85 = load {%..string, i8}, {%..string, i8}* %9, align 8
	ret {%..string, i8} %85

if.else-12:
	; RangeStmt
	; val
	%86 = bitcast %Type_Info_Enum_Value* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store %Type_Info_Enum_Value zeroinitializer, %Type_Info_Enum_Value* %10
	
	; idx
	%88 = bitcast i64* %11 to %..rawptr
	%89 = call %..rawptr @__mem_zero(%..rawptr %88, i64 8)
	store i64 zeroinitializer, i64* %11
	
	; SelectorExpr
	%90 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 2
	%91 = load {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %90, align 8
	%92 = bitcast i64* %12 to %..rawptr
	%93 = call %..rawptr @__mem_zero(%..rawptr %92, i64 8)
	store i64 zeroinitializer, i64* %12
	%94 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 1
	store i64 %94, i64* %12
	%95 = bitcast i64* %13 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 -1, i64* %13
	br label %for.index.loop-13

for.index.loop-13:
	%97 = load i64, i64* %13, align 8
	%98 = add i64 %97, 1
	store i64 %98, i64* %13
	%99 = load i64, i64* %12, align 8
	%100 = icmp slt i64 %98, %99
	br i1 %100, label %for.index.body-14, label %for.index.done-20

for.index.body-14:
	%101 = load i64, i64* %13, align 8
	%102 = extractvalue {%Type_Info_Enum_Value*, i64} %91, 0
	%103 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %102, i64 %101
	%104 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %103, align 8
	store %Type_Info_Enum_Value %104, %Type_Info_Enum_Value* %10
	store i64 %101, i64* %11
	; IfStmt
	; v
	
	; ok
	
	%105 = load %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, align 8
	; cast - union_cast
	%106 = bitcast {double, i8}* %16 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 16)
	store {double, i8} zeroinitializer, {double, i8}* %16
	%108 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %10, i64 0, i32 2 ; UnionTagPtr
	%109 = load i8, i8* %108, align 1
	%110 = icmp eq i8 %109, 14
	br i1 %110, label %union_cast.ok-15, label %union_cast.end-16

union_cast.ok-15:
	%111 = getelementptr inbounds {double, i8}, {double, i8}* %16, i64 0, i32 0
	%112 = getelementptr inbounds {double, i8}, {double, i8}* %16, i64 0, i32 1
	%113 = bitcast %Type_Info_Enum_Value* %10 to double*
	%114 = load double, double* %113, align 8
	store double %114, double* %111
	store i8 1, i8* %112
	br label %union_cast.end-16

union_cast.end-16:
	%115 = load {double, i8}, {double, i8}* %16, align 8
	%116 = extractvalue {double, i8} %115, 0
	%117 = extractvalue {double, i8} %115, 1
	store double %116, double* %14
	store i8 %117, i8* %15
	%118 = load i8, i8* %15, align 1
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-17, label %if.done-19

cmp.and-17:
	%120 = load double, double* %14, align 8
	%121 = load double, double* %0, align 8
	%122 = fcmp oeq double %120, %121
	%123 = zext i1 %122 to i8
	%124 = trunc i8 %123 to i1
	br i1 %124, label %if.then-18, label %if.done-19

if.then-18:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %e, i64 0, i32 1
	%126 = load {%..string*, i64}, {%..string*, i64}* %125, align 8
	%127 = extractvalue {%..string*, i64} %126, 0
	%128 = load i64, i64* %11, align 8
	%129 = extractvalue {%..string*, i64} %126, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$190, i64 0, i32 0), i64 46}, i64 641, i64 22, i64 %128, i64 %129)
	%130 = getelementptr inbounds %..string, %..string* %127, i64 %128
	%131 = load %..string, %..string* %130, align 8
	%132 = bitcast {%..string, i8}* %17 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %17
	%134 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 0
	store %..string %131, %..string* %134
	%135 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %17, i64 0, i32 1
	store i8 1, i8* %135
	%136 = load {%..string, i8}, {%..string, i8}* %17, align 8
	ret {%..string, i8} %136

if.done-19:
	br label %for.index.loop-13

for.index.done-20:
	br label %if.done-21

if.done-21:
	; ReturnStmt
	%137 = bitcast {%..string, i8}* %18 to %..rawptr
	%138 = call %..rawptr @__mem_zero(%..rawptr %137, i64 24)
	store {%..string, i8} zeroinitializer, {%..string, i8}* %18
	%139 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 0
	store %..string zeroinitializer, %..string* %139
	%140 = getelementptr inbounds {%..string, i8}, {%..string, i8}* %18, i64 0, i32 1
	store i8 0, i8* %140
	%141 = load {%..string, i8}, {%..string, i8}* %18, align 8
	ret {%..string, i8} %141
}

define void @fmt-14.fmt_enum(%fmt-14.Fmt_Info* %fi, %..any %v, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %Type_Info_Enum, align 16
	%4 = alloca %..any, align 16
	%5 = alloca %..string, align 16
	%6 = alloca i8, align 16
	%7 = alloca {[0 x <8 x i8>], [72 x i8], i8}, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..any %v, %..any* %1
	
	store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%8 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%9 = load %Type_Info*, %Type_Info** %8, align 8
	%10 = icmp eq %Type_Info* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%13 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%14 = load %..rawptr, %..rawptr* %13, align 8
	%15 = icmp eq %..rawptr %14, zeroinitializer
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%18 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%19 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %18, i64 0
	%20 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %19, i64 0, i32 12
	%21 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %20, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %21, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$191, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-3:
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%22 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%23 = load %Type_Info*, %Type_Info** %22, align 8
	%24 = getelementptr inbounds %Type_Info, %Type_Info* %23, i64 0
	%25 = getelementptr inbounds %Type_Info, %Type_Info* %24, i64 0, i32 2
	%26 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %25, align 8
	; get union's tag
	%27 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %25, i64 0, i32 2 ; UnionTagPtr
	%28 = load i8, i8* %27, align 1
	%29 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %25 to %..rawptr
	%30 = icmp eq i8 %28, 17
	br i1 %30, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	store {[0 x <8 x i8>], [72 x i8], i8} %26, {[0 x <8 x i8>], [72 x i8], i8}* %7
	%31 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%32 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %31, i32 %32, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-15

typeswitch.body-5:
	%33 = bitcast %..rawptr %29 to %Type_Info_Enum*
	%34 = load %Type_Info_Enum, %Type_Info_Enum* %33, align 8
	store %Type_Info_Enum %34, %Type_Info_Enum* %3
	; SwitchStmt
	%35 = load i32, i32* %2, align 4
	%36 = icmp eq i32 %35, 100
	br i1 %36, label %switch.fall.body-8, label %switch.case.next-6

switch.case.next-6:
	%37 = icmp eq i32 %35, 102
	br i1 %37, label %switch.fall.body-8, label %switch.case.next-7

switch.case.next-7:
	%38 = icmp eq i32 %35, 115
	br i1 %38, label %switch.fall.body-11, label %switch.case.next-9

switch.fall.body-8:
	%39 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%40 = bitcast %..any* %4 to %..rawptr
	%41 = call %..rawptr @__mem_zero(%..rawptr %40, i64 16)
	store %..any zeroinitializer, %..any* %4
	store %..any zeroinitializer, %..any* %4
	; SelectorExpr
	%42 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%43 = load %..rawptr, %..rawptr* %42, align 8
	%44 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 0
	store %..rawptr %43, %..rawptr* %44
	; SelectorExpr
	%45 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %3, i64 0, i32 0
	%46 = load %Type_Info*, %Type_Info** %45, align 8
	%47 = call %Type_Info* @type_info_base(%Type_Info* %46, %Context* noalias nonnull %__.context_ptr)
	%48 = getelementptr inbounds %..any, %..any* %4, i64 0, i32 1
	store %Type_Info* %47, %Type_Info** %48
	%49 = load %..any, %..any* %4, align 8
	%50 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %39, %..any %49, i32 %50, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-14

switch.case.next-9:
	%51 = icmp eq i32 %35, 118
	br i1 %51, label %switch.fall.body-11, label %switch.case.next-10

switch.case.next-10:
	%52 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%53 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %52, i32 %53, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-14

switch.fall.body-11:
	; str
	
	; ok
	
	%54 = load %..any, %..any* %1, align 8
	%55 = call {%..string, i8} @fmt-14.enum_value_to_string(%..any %54, %Context* noalias nonnull %__.context_ptr)
	%56 = extractvalue {%..string, i8} %55, 0
	%57 = extractvalue {%..string, i8} %55, 1
	store %..string %56, %..string* %5
	store i8 %57, i8* %6
	; IfStmt
	%58 = load i8, i8* %6, align 1
	%59 = trunc i8 %58 to i1
	br i1 %59, label %if.done-13, label %if.then-12

if.then-12:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$192, i64 0, i32 0), i64 18}, %..string* %5
	br label %if.done-13

if.done-13:
	; SelectorExpr
	%60 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%61 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %60, i64 0
	%62 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %61, i64 0, i32 12
	%63 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %62, align 8
	%64 = load %..string, %..string* %5, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %63, %..string %64, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-14

switch.done-14:
	br label %typeswitch.done-15

typeswitch.done-15:
	ret void
}

define void @fmt-14.fmt_value(%fmt-14.Fmt_Info* %fi, %..any %v, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %Type_Info_Named, align 16
	%4 = alloca %Type_Info_Struct, align 16
	%5 = alloca i8, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i64, align 16
	%12 = alloca %Type_Info*, align 16
	%13 = alloca i64, align 16
	%14 = alloca %..any, align 16
	%15 = alloca i64, align 16
	%16 = alloca i64, align 16
	%17 = alloca {[0 x <8 x i8>], [72 x i8], i8}, align 16
	%18 = alloca %..any, align 16
	%19 = alloca %Type_Info_Boolean, align 16
	%20 = alloca %Type_Info_Integer, align 16
	%21 = alloca %Type_Info_Rune, align 16
	%22 = alloca %Type_Info_Float, align 16
	%23 = alloca %Type_Info_Complex, align 16
	%24 = alloca %Type_Info_String, align 16
	%25 = alloca %Type_Info_Pointer, align 16
	%26 = alloca %Type_Info_Array, align 16
	%27 = alloca i64, align 16
	%28 = alloca i64, align 16
	%29 = alloca i64, align 16
	%30 = alloca i64, align 16
	%31 = alloca %..any, align 16
	%32 = alloca %Type_Info_Dynamic_Array, align 16
	%33 = alloca %raw-5.Dynamic_Array*, align 16
	%34 = alloca i64, align 16
	%35 = alloca i64, align 16
	%36 = alloca i64, align 16
	%37 = alloca i64, align 16
	%38 = alloca %..any, align 16
	%39 = alloca %Type_Info_Slice, align 16
	%40 = alloca %raw-5.Slice*, align 16
	%41 = alloca i64, align 16
	%42 = alloca i64, align 16
	%43 = alloca i64, align 16
	%44 = alloca i64, align 16
	%45 = alloca %..any, align 16
	%46 = alloca %Type_Info_Map, align 16
	%47 = alloca %raw-5.Map*, align 16
	%48 = alloca %Source_Code_Location, align 16
	%49 = alloca %raw-5.Dynamic_Array*, align 16
	%50 = alloca %Type_Info_Struct, align 16
	%51 = alloca %Type_Info*, align 16
	%52 = alloca {%Type_Info_Struct, i8}, align 16
	%53 = alloca %Type_Info_Dynamic_Array, align 16
	%54 = alloca %Type_Info*, align 16
	%55 = alloca {%Type_Info_Dynamic_Array, i8}, align 16
	%56 = alloca %Type_Info_Struct, align 16
	%57 = alloca {%Type_Info_Struct, i8}, align 16
	%58 = alloca i64, align 16
	%59 = alloca i64, align 16
	%60 = alloca i64, align 16
	%61 = alloca i64, align 16
	%62 = alloca i64, align 16
	%63 = alloca %__Map_Entry_Header*, align 16
	%64 = alloca %fmt-14.Fmt_Info, align 16
	%65 = alloca %fmt-14.Fmt_Info, align 16
	%66 = alloca %..any, align 16
	%67 = alloca i64, align 16
	%68 = alloca %..any, align 16
	%69 = alloca %Type_Info_Struct, align 16
	%70 = alloca i8, align 16
	%71 = alloca i64, align 16
	%72 = alloca i64, align 16
	%73 = alloca i64, align 16
	%74 = alloca i64, align 16
	%75 = alloca i64, align 16
	%76 = alloca %Type_Info*, align 16
	%77 = alloca i64, align 16
	%78 = alloca %..any, align 16
	%79 = alloca %Type_Info_Union, align 16
	%80 = alloca i64, align 16
	%81 = alloca %..any, align 16
	%82 = alloca %..any, align 16
	%83 = alloca i64, align 16
	%84 = alloca i8, align 16
	%85 = alloca i8, align 16
	%86 = alloca i16, align 16
	%87 = alloca i16, align 16
	%88 = alloca i32, align 16
	%89 = alloca i32, align 16
	%90 = alloca i64, align 16
	%91 = alloca i64, align 16
	%92 = alloca %..any, align 16
	%93 = alloca %Source_Code_Location, align 16
	%94 = alloca %Type_Info*, align 16
	%95 = alloca %..any, align 16
	%96 = alloca %Type_Info_Enum, align 16
	%97 = alloca %Type_Info_Procedure, align 16
	%98 = alloca %..rawptr, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..any %v, %..any* %1
	
	store i32 %verb, i32* %2
	; IfStmt
	; SelectorExpr
	%99 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%100 = load %..rawptr, %..rawptr* %99, align 8
	%101 = icmp eq %..rawptr %100, zeroinitializer
	%102 = zext i1 %101 to i8
	%103 = trunc i8 %102 to i1
	br i1 %103, label %if.then-2, label %cmp.or-1

cmp.or-1:
	; SelectorExpr
	%104 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%105 = load %Type_Info*, %Type_Info** %104, align 8
	%106 = icmp eq %Type_Info* %105, zeroinitializer
	%107 = zext i1 %106 to i8
	%108 = trunc i8 %107 to i1
	br i1 %108, label %if.then-2, label %if.done-3

if.then-2:
	; SelectorExpr
	%109 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%110 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %109, i64 0
	%111 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %110, i64 0, i32 12
	%112 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %111, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %112, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$193, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-3:
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%113 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%114 = load %Type_Info*, %Type_Info** %113, align 8
	%115 = getelementptr inbounds %Type_Info, %Type_Info* %114, i64 0
	%116 = getelementptr inbounds %Type_Info, %Type_Info* %115, i64 0, i32 2
	%117 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %116, align 8
	; get union's tag
	%118 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %116, i64 0, i32 2 ; UnionTagPtr
	%119 = load i8, i8* %118, align 1
	%120 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %116 to %..rawptr
	%121 = icmp eq i8 %119, 1
	br i1 %121, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	%122 = icmp eq i8 %119, 7
	br i1 %122, label %typeswitch.body-37, label %typeswitch.next-36

typeswitch.body-5:
	%123 = bitcast %..rawptr %120 to %Type_Info_Named*
	%124 = load %Type_Info_Named, %Type_Info_Named* %123, align 8
	store %Type_Info_Named %124, %Type_Info_Named* %3
	; TypeSwitchStmt
	; SelectorExpr
	; SelectorExpr
	%125 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3, i64 0, i32 1
	%126 = load %Type_Info*, %Type_Info** %125, align 8
	%127 = getelementptr inbounds %Type_Info, %Type_Info* %126, i64 0
	%128 = getelementptr inbounds %Type_Info, %Type_Info* %127, i64 0, i32 2
	%129 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %128, align 8
	; get union's tag
	%130 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %128, i64 0, i32 2 ; UnionTagPtr
	%131 = load i8, i8* %130, align 1
	%132 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %128 to %..rawptr
	%133 = icmp eq i8 %131, 15
	br i1 %133, label %typeswitch.body-7, label %typeswitch.next-6

typeswitch.next-6:
	store {[0 x <8 x i8>], [72 x i8], i8} %129, {[0 x <8 x i8>], [72 x i8], i8}* %17
	%134 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%135 = bitcast %..any* %18 to %..rawptr
	%136 = call %..rawptr @__mem_zero(%..rawptr %135, i64 16)
	store %..any zeroinitializer, %..any* %18
	store %..any zeroinitializer, %..any* %18
	; SelectorExpr
	%137 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%138 = load %..rawptr, %..rawptr* %137, align 8
	%139 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 0
	store %..rawptr %138, %..rawptr* %139
	; SelectorExpr
	%140 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3, i64 0, i32 1
	%141 = load %Type_Info*, %Type_Info** %140, align 8
	%142 = getelementptr inbounds %..any, %..any* %18, i64 0, i32 1
	store %Type_Info* %141, %Type_Info** %142
	%143 = load %..any, %..any* %18, align 8
	%144 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_value(%fmt-14.Fmt_Info* %134, %..any %143, i32 %144, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-35

typeswitch.body-7:
	%145 = bitcast %..rawptr %132 to %Type_Info_Struct*
	%146 = load %Type_Info_Struct, %Type_Info_Struct* %145, align 8
	store %Type_Info_Struct %146, %Type_Info_Struct* %4
	; IfStmt
	%147 = load i32, i32* %2, align 4
	%148 = icmp ne i32 %147, 118
	%149 = zext i1 %148 to i8
	%150 = trunc i8 %149 to i1
	br i1 %150, label %if.then-8, label %if.done-9

if.then-8:
	%151 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%152 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %151, i32 %152, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-9:
	; IfStmt
	; SelectorExpr
	%153 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %4, i64 0, i32 5
	%154 = load i8, i8* %153, align 1
	%155 = trunc i8 %154 to i1
	br i1 %155, label %if.then-10, label %if.done-11

if.then-10:
	; SelectorExpr
	%156 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%157 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %156, i64 0
	%158 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %157, i64 0, i32 12
	%159 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %158, align 8
	; SelectorExpr
	%160 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3, i64 0, i32 0
	%161 = load %..string, %..string* %160, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %159, %..string %161, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%162 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%163 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %162, i64 0
	%164 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %163, i64 0, i32 12
	%165 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %164, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %165, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$194, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-11:
	; SelectorExpr
	%166 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%167 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %166, i64 0
	%168 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %167, i64 0, i32 12
	%169 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %168, align 8
	; SelectorExpr
	%170 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3, i64 0, i32 0
	%171 = load %..string, %..string* %170, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %169, %..string %171, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%172 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%173 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %172, i64 0
	%174 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %173, i64 0, i32 12
	%175 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %174, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %175, i8 123, %Context* noalias nonnull %__.context_ptr)
	; hash
	
	; SelectorExpr
	%176 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%177 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %176, i64 0
	%178 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %177, i64 0, i32 4
	%179 = load i8, i8* %178, align 1
	store i8 %179, i8* %5
	; DeferStmt
	; indent
	
	; SelectorExpr
	%180 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%181 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %180, i64 0
	%182 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %181, i64 0, i32 9
	%183 = load i64, i64* %182, align 8
	store i64 %183, i64* %6
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%184 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%185 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %184, i64 0
	%186 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %185, i64 0, i32 4
	store i8 0, i8* %186
	; AssignStmt
	; SelectorExpr
	%187 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%188 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %187, i64 0
	%189 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %188, i64 0, i32 9
	%190 = load i64, i64* %189, align 8
	%191 = add i64 %190, 1
	store i64 %191, i64* %189
	; IfStmt
	%192 = load i8, i8* %5, align 1
	%193 = trunc i8 %192 to i1
	br i1 %193, label %if.then-12, label %if.done-13

if.then-12:
	; SelectorExpr
	%194 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%195 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %194, i64 0
	%196 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %195, i64 0, i32 12
	%197 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %196, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %197, i8 10, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-13

if.done-13:
	; RangeStmt
	; i
	%198 = bitcast i64* %7 to %..rawptr
	%199 = call %..rawptr @__mem_zero(%..rawptr %198, i64 8)
	store i64 zeroinitializer, i64* %7
	
	; SelectorExpr
	%200 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %4, i64 0, i32 1
	%201 = load {%..string*, i64}, {%..string*, i64}* %200, align 8
	%202 = bitcast i64* %8 to %..rawptr
	%203 = call %..rawptr @__mem_zero(%..rawptr %202, i64 8)
	store i64 zeroinitializer, i64* %8
	%204 = extractvalue {%..string*, i64} %201, 1
	store i64 %204, i64* %8
	%205 = bitcast i64* %9 to %..rawptr
	%206 = call %..rawptr @__mem_zero(%..rawptr %205, i64 8)
	store i64 zeroinitializer, i64* %9
	store i64 -1, i64* %9
	br label %for.index.loop-14

for.index.loop-14:
	%207 = load i64, i64* %9, align 8
	%208 = add i64 %207, 1
	store i64 %208, i64* %9
	%209 = load i64, i64* %8, align 8
	%210 = icmp slt i64 %208, %209
	br i1 %210, label %for.index.body-15, label %for.index.done-29

for.index.body-15:
	%211 = load i64, i64* %9, align 8
	store i64 %211, i64* %7
	; IfStmt
	%212 = load i8, i8* %5, align 1
	%213 = trunc i8 %212 to i1
	br i1 %213, label %if.done-18, label %cmp.and-16

cmp.and-16:
	%214 = load i64, i64* %7, align 8
	%215 = icmp sgt i64 %214, 0
	%216 = zext i1 %215 to i8
	%217 = trunc i8 %216 to i1
	br i1 %217, label %if.then-17, label %if.done-18

if.then-17:
	; SelectorExpr
	%218 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%219 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %218, i64 0
	%220 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %219, i64 0, i32 12
	%221 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %220, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %221, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$195, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-18

if.done-18:
	; IfStmt
	%222 = load i8, i8* %5, align 1
	%223 = trunc i8 %222 to i1
	br i1 %223, label %if.then-19, label %if.done-23

if.then-19:
	; RangeStmt
	%224 = bitcast i64* %10 to %..rawptr
	%225 = call %..rawptr @__mem_zero(%..rawptr %224, i64 8)
	store i64 zeroinitializer, i64* %10
	store i64 0, i64* %10
	%226 = bitcast i64* %11 to %..rawptr
	%227 = call %..rawptr @__mem_zero(%..rawptr %226, i64 8)
	store i64 zeroinitializer, i64* %11
	store i64 0, i64* %11
	br label %for.interval.loop-20

for.interval.loop-20:
	; SelectorExpr
	%228 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%229 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %228, i64 0
	%230 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %229, i64 0, i32 9
	%231 = load i64, i64* %230, align 8
	%232 = load i64, i64* %10, align 8
	%233 = icmp slt i64 %232, %231
	br i1 %233, label %for.interval.body-21, label %for.interval.done-22

for.interval.body-21:
	%234 = load i64, i64* %10, align 8
	%235 = load i64, i64* %11, align 8
	%236 = load i64, i64* %10, align 8
	%237 = add i64 %236, 1
	store i64 %237, i64* %10
	%238 = load i64, i64* %11, align 8
	%239 = add i64 %238, 1
	store i64 %239, i64* %11
	; SelectorExpr
	%240 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%241 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %240, i64 0
	%242 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %241, i64 0, i32 12
	%243 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %242, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %243, i8 9, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-20

for.interval.done-22:
	br label %if.done-23

if.done-23:
	; SelectorExpr
	%244 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%245 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %244, i64 0
	%246 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %245, i64 0, i32 12
	%247 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %246, align 8
	; IndexExpr
	; SelectorExpr
	%248 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %4, i64 0, i32 1
	%249 = load {%..string*, i64}, {%..string*, i64}* %248, align 8
	%250 = extractvalue {%..string*, i64} %249, 0
	%251 = load i64, i64* %7, align 8
	%252 = extractvalue {%..string*, i64} %249, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$196, i64 0, i32 0), i64 46}, i64 741, i64 34, i64 %251, i64 %252)
	%253 = getelementptr inbounds %..string, %..string* %250, i64 %251
	%254 = load %..string, %..string* %253, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %247, %..string %254, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%255 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%256 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %255, i64 0
	%257 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %256, i64 0, i32 12
	%258 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %257, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %258, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$197, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; t
	
	; IndexExpr
	; SelectorExpr
	%259 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %4, i64 0, i32 0
	%260 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %259, align 8
	%261 = extractvalue {%Type_Info**, i64} %260, 0
	%262 = load i64, i64* %7, align 8
	%263 = extractvalue {%Type_Info**, i64} %260, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$198, i64 0, i32 0), i64 46}, i64 744, i64 21, i64 %262, i64 %263)
	%264 = getelementptr inbounds %Type_Info*, %Type_Info** %261, i64 %262
	%265 = load %Type_Info*, %Type_Info** %264, align 8
	store %Type_Info* %265, %Type_Info** %12
	; SelectorExpr
	%266 = load %Type_Info*, %Type_Info** %12, align 8
	%267 = call i8 @types-15.is_any(%Type_Info* %266, %Context* noalias nonnull %__.context_ptr)
	%268 = trunc i8 %267 to i1
	br i1 %268, label %if.then-24, label %if.else-25

if.then-24:
	; SelectorExpr
	%269 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%270 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %269, i64 0
	%271 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %270, i64 0, i32 12
	%272 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %271, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %272, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$199, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-26

if.else-25:
	; data
	
	; SelectorExpr
	%273 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%274 = load %..rawptr, %..rawptr* %273, align 8
	%275 = ptrtoint %..rawptr %274 to i64
	; IndexExpr
	; SelectorExpr
	%276 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %4, i64 0, i32 2
	%277 = load {i64*, i64}, {i64*, i64}* %276, align 8
	%278 = extractvalue {i64*, i64} %277, 0
	%279 = load i64, i64* %7, align 8
	%280 = extractvalue {i64*, i64} %277, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$19a, i64 0, i32 0), i64 46}, i64 747, i64 42, i64 %279, i64 %280)
	%281 = getelementptr inbounds i64, i64* %278, i64 %279
	%282 = load i64, i64* %281, align 8
	%283 = add i64 %275, %282
	store i64 %283, i64* %13
	%284 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%285 = bitcast %..any* %14 to %..rawptr
	%286 = call %..rawptr @__mem_zero(%..rawptr %285, i64 16)
	store %..any zeroinitializer, %..any* %14
	store %..any zeroinitializer, %..any* %14
	%287 = load i64, i64* %13, align 8
	%288 = inttoptr i64 %287 to %..rawptr
	%289 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 0
	store %..rawptr %288, %..rawptr* %289
	%290 = load %Type_Info*, %Type_Info** %12, align 8
	%291 = getelementptr inbounds %..any, %..any* %14, i64 0, i32 1
	store %Type_Info* %290, %Type_Info** %291
	%292 = load %..any, %..any* %14, align 8
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %284, %..any %292, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-26

if.done-26:
	; IfStmt
	%293 = load i8, i8* %5, align 1
	%294 = trunc i8 %293 to i1
	br i1 %294, label %if.then-27, label %if.done-28

if.then-27:
	; SelectorExpr
	%295 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%296 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %295, i64 0
	%297 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %296, i64 0, i32 12
	%298 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %297, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %298, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$19b, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-28

if.done-28:
	br label %for.index.loop-14

for.index.done-29:
	; IfStmt
	%299 = load i8, i8* %5, align 1
	%300 = trunc i8 %299 to i1
	br i1 %300, label %if.then-30, label %if.done-34

if.then-30:
	; RangeStmt
	%301 = bitcast i64* %15 to %..rawptr
	%302 = call %..rawptr @__mem_zero(%..rawptr %301, i64 8)
	store i64 zeroinitializer, i64* %15
	store i64 0, i64* %15
	%303 = bitcast i64* %16 to %..rawptr
	%304 = call %..rawptr @__mem_zero(%..rawptr %303, i64 8)
	store i64 zeroinitializer, i64* %16
	store i64 0, i64* %16
	br label %for.interval.loop-31

for.interval.loop-31:
	%305 = load i64, i64* %6, align 8
	%306 = load i64, i64* %15, align 8
	%307 = icmp slt i64 %306, %305
	br i1 %307, label %for.interval.body-32, label %for.interval.done-33

for.interval.body-32:
	%308 = load i64, i64* %15, align 8
	%309 = load i64, i64* %16, align 8
	%310 = load i64, i64* %15, align 8
	%311 = add i64 %310, 1
	store i64 %311, i64* %15
	%312 = load i64, i64* %16, align 8
	%313 = add i64 %312, 1
	store i64 %313, i64* %16
	; SelectorExpr
	%314 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%315 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %314, i64 0
	%316 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %315, i64 0, i32 12
	%317 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %316, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %317, i8 9, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-31

for.interval.done-33:
	br label %if.done-34

if.done-34:
	; SelectorExpr
	%318 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%319 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %318, i64 0
	%320 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %319, i64 0, i32 12
	%321 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %320, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %321, i8 125, %Context* noalias nonnull %__.context_ptr)
	; defer
	; AssignStmt
	; SelectorExpr
	%322 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%323 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %322, i64 0
	%324 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %323, i64 0, i32 9
	%325 = load i64, i64* %324, align 8
	%326 = sub i64 %325, 1
	store i64 %326, i64* %324
	; defer
	; AssignStmt
	; SelectorExpr
	%327 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%328 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %327, i64 0
	%329 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %328, i64 0, i32 4
	%330 = load i8, i8* %5, align 1
	store i8 %330, i8* %329
	br label %typeswitch.done-35

typeswitch.done-35:
	br label %typeswitch.done-146

typeswitch.next-36:
	%331 = icmp eq i8 %119, 2
	br i1 %331, label %typeswitch.body-39, label %typeswitch.next-38

typeswitch.body-37:
	%332 = bitcast %..rawptr %120 to %Type_Info_Boolean*
	%333 = load %Type_Info_Boolean, %Type_Info_Boolean* %332, align 1
	store %Type_Info_Boolean %333, %Type_Info_Boolean* %19
	%334 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%335 = load %..any, %..any* %1, align 8
	%336 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %334, %..any %335, i32 %336, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-38:
	%337 = icmp eq i8 %119, 3
	br i1 %337, label %typeswitch.body-41, label %typeswitch.next-40

typeswitch.body-39:
	%338 = bitcast %..rawptr %120 to %Type_Info_Integer*
	%339 = load %Type_Info_Integer, %Type_Info_Integer* %338, align 1
	store %Type_Info_Integer %339, %Type_Info_Integer* %20
	%340 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%341 = load %..any, %..any* %1, align 8
	%342 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %340, %..any %341, i32 %342, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-40:
	%343 = icmp eq i8 %119, 4
	br i1 %343, label %typeswitch.body-43, label %typeswitch.next-42

typeswitch.body-41:
	%344 = bitcast %..rawptr %120 to %Type_Info_Rune*
	%345 = load %Type_Info_Rune, %Type_Info_Rune* %344, align 1
	store %Type_Info_Rune %345, %Type_Info_Rune* %21
	%346 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%347 = load %..any, %..any* %1, align 8
	%348 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %346, %..any %347, i32 %348, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-42:
	%349 = icmp eq i8 %119, 5
	br i1 %349, label %typeswitch.body-45, label %typeswitch.next-44

typeswitch.body-43:
	%350 = bitcast %..rawptr %120 to %Type_Info_Float*
	%351 = load %Type_Info_Float, %Type_Info_Float* %350, align 1
	store %Type_Info_Float %351, %Type_Info_Float* %22
	%352 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%353 = load %..any, %..any* %1, align 8
	%354 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %352, %..any %353, i32 %354, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-44:
	%355 = icmp eq i8 %119, 6
	br i1 %355, label %typeswitch.body-47, label %typeswitch.next-46

typeswitch.body-45:
	%356 = bitcast %..rawptr %120 to %Type_Info_Complex*
	%357 = load %Type_Info_Complex, %Type_Info_Complex* %356, align 1
	store %Type_Info_Complex %357, %Type_Info_Complex* %23
	%358 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%359 = load %..any, %..any* %1, align 8
	%360 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %358, %..any %359, i32 %360, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-46:
	%361 = icmp eq i8 %119, 9
	br i1 %361, label %typeswitch.body-49, label %typeswitch.next-48

typeswitch.body-47:
	%362 = bitcast %..rawptr %120 to %Type_Info_String*
	%363 = load %Type_Info_String, %Type_Info_String* %362, align 1
	store %Type_Info_String %363, %Type_Info_String* %24
	%364 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%365 = load %..any, %..any* %1, align 8
	%366 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %364, %..any %365, i32 %366, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-48:
	%367 = icmp eq i8 %119, 11
	br i1 %367, label %typeswitch.body-54, label %typeswitch.next-53

typeswitch.body-49:
	%368 = bitcast %..rawptr %120 to %Type_Info_Pointer*
	%369 = load %Type_Info_Pointer, %Type_Info_Pointer* %368, align 8
	store %Type_Info_Pointer %369, %Type_Info_Pointer* %25
	; IfStmt
	; SelectorExpr
	%370 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%371 = load %Type_Info*, %Type_Info** %370, align 8
	%372 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%373 = icmp eq %Type_Info* %371, %372
	%374 = zext i1 %373 to i8
	%375 = trunc i8 %374 to i1
	br i1 %375, label %if.then-50, label %if.else-51

if.then-50:
	; SelectorExpr
	%376 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%377 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %376, i64 0
	%378 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %377, i64 0, i32 12
	%379 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %378, align 8
	; SelectorExpr
	%380 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%381 = load %..rawptr, %..rawptr* %380, align 8
	%382 = bitcast %..rawptr %381 to %Type_Info**
	%383 = getelementptr inbounds %Type_Info*, %Type_Info** %382, i64 0
	%384 = load %Type_Info*, %Type_Info** %383, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %379, %Type_Info* %384, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-52

if.else-51:
	%385 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; SelectorExpr
	%386 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%387 = load %..rawptr, %..rawptr* %386, align 8
	%388 = bitcast %..rawptr %387 to %..rawptr*
	%389 = getelementptr inbounds %..rawptr, %..rawptr* %388, i64 0
	%390 = load %..rawptr, %..rawptr* %389, align 8
	%391 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_pointer(%fmt-14.Fmt_Info* %385, %..rawptr %390, i32 %391, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-52

if.done-52:
	br label %typeswitch.done-146

typeswitch.next-53:
	%392 = icmp eq i8 %119, 12
	br i1 %392, label %typeswitch.body-61, label %typeswitch.next-60

typeswitch.body-54:
	%393 = bitcast %..rawptr %120 to %Type_Info_Array*
	%394 = load %Type_Info_Array, %Type_Info_Array* %393, align 8
	store %Type_Info_Array %394, %Type_Info_Array* %26
	; SelectorExpr
	%395 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%396 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %395, i64 0
	%397 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %396, i64 0, i32 12
	%398 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %397, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %398, i8 91, %Context* noalias nonnull %__.context_ptr)
	; DeferStmt
	; RangeStmt
	; i
	%399 = bitcast i64* %27 to %..rawptr
	%400 = call %..rawptr @__mem_zero(%..rawptr %399, i64 8)
	store i64 zeroinitializer, i64* %27
	
	%401 = bitcast i64* %28 to %..rawptr
	%402 = call %..rawptr @__mem_zero(%..rawptr %401, i64 8)
	store i64 zeroinitializer, i64* %28
	store i64 0, i64* %28
	%403 = bitcast i64* %29 to %..rawptr
	%404 = call %..rawptr @__mem_zero(%..rawptr %403, i64 8)
	store i64 zeroinitializer, i64* %29
	store i64 0, i64* %29
	br label %for.interval.loop-55

for.interval.loop-55:
	; SelectorExpr
	%405 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %26, i64 0, i32 2
	%406 = load i64, i64* %405, align 8
	%407 = load i64, i64* %28, align 8
	%408 = icmp slt i64 %407, %406
	br i1 %408, label %for.interval.body-56, label %for.interval.done-59

for.interval.body-56:
	%409 = load i64, i64* %28, align 8
	%410 = load i64, i64* %29, align 8
	%411 = load i64, i64* %28, align 8
	%412 = add i64 %411, 1
	store i64 %412, i64* %28
	%413 = load i64, i64* %29, align 8
	%414 = add i64 %413, 1
	store i64 %414, i64* %29
	store i64 %409, i64* %27
	; IfStmt
	%415 = load i64, i64* %27, align 8
	%416 = icmp sgt i64 %415, 0
	%417 = zext i1 %416 to i8
	%418 = trunc i8 %417 to i1
	br i1 %418, label %if.then-57, label %if.done-58

if.then-57:
	; SelectorExpr
	%419 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%420 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %419, i64 0
	%421 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %420, i64 0, i32 12
	%422 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %421, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %422, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$19c, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-58

if.done-58:
	; data
	
	; SelectorExpr
	%423 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%424 = load %..rawptr, %..rawptr* %423, align 8
	%425 = ptrtoint %..rawptr %424 to i64
	%426 = load i64, i64* %27, align 8
	; SelectorExpr
	%427 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %26, i64 0, i32 1
	%428 = load i64, i64* %427, align 8
	%429 = mul i64 %426, %428
	%430 = bitcast i64 %429 to i64
	%431 = add i64 %425, %430
	store i64 %431, i64* %30
	%432 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%433 = bitcast %..any* %31 to %..rawptr
	%434 = call %..rawptr @__mem_zero(%..rawptr %433, i64 16)
	store %..any zeroinitializer, %..any* %31
	store %..any zeroinitializer, %..any* %31
	%435 = load i64, i64* %30, align 8
	%436 = inttoptr i64 %435 to %..rawptr
	%437 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 0
	store %..rawptr %436, %..rawptr* %437
	; SelectorExpr
	%438 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %26, i64 0, i32 0
	%439 = load %Type_Info*, %Type_Info** %438, align 8
	%440 = getelementptr inbounds %..any, %..any* %31, i64 0, i32 1
	store %Type_Info* %439, %Type_Info** %440
	%441 = load %..any, %..any* %31, align 8
	%442 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %432, %..any %441, i32 %442, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-55

for.interval.done-59:
	; defer
	; SelectorExpr
	%443 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%444 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %443, i64 0
	%445 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %444, i64 0, i32 12
	%446 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %445, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %446, i8 93, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-60:
	%447 = icmp eq i8 %119, 13
	br i1 %447, label %typeswitch.body-68, label %typeswitch.next-67

typeswitch.body-61:
	%448 = bitcast %..rawptr %120 to %Type_Info_Dynamic_Array*
	%449 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %448, align 8
	store %Type_Info_Dynamic_Array %449, %Type_Info_Dynamic_Array* %32
	; SelectorExpr
	%450 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%451 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %450, i64 0
	%452 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %451, i64 0, i32 12
	%453 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %452, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %453, i8 91, %Context* noalias nonnull %__.context_ptr)
	; DeferStmt
	; array
	
	; SelectorExpr
	%454 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%455 = load %..rawptr, %..rawptr* %454, align 8
	%456 = bitcast %..rawptr %455 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %456, %raw-5.Dynamic_Array** %33
	; RangeStmt
	; i
	%457 = bitcast i64* %34 to %..rawptr
	%458 = call %..rawptr @__mem_zero(%..rawptr %457, i64 8)
	store i64 zeroinitializer, i64* %34
	
	%459 = bitcast i64* %35 to %..rawptr
	%460 = call %..rawptr @__mem_zero(%..rawptr %459, i64 8)
	store i64 zeroinitializer, i64* %35
	store i64 0, i64* %35
	%461 = bitcast i64* %36 to %..rawptr
	%462 = call %..rawptr @__mem_zero(%..rawptr %461, i64 8)
	store i64 zeroinitializer, i64* %36
	store i64 0, i64* %36
	br label %for.interval.loop-62

for.interval.loop-62:
	; SelectorExpr
	%463 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %33, align 8
	%464 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %463, i64 0
	%465 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %464, i64 0, i32 1
	%466 = load i64, i64* %465, align 8
	%467 = load i64, i64* %35, align 8
	%468 = icmp slt i64 %467, %466
	br i1 %468, label %for.interval.body-63, label %for.interval.done-66

for.interval.body-63:
	%469 = load i64, i64* %35, align 8
	%470 = load i64, i64* %36, align 8
	%471 = load i64, i64* %35, align 8
	%472 = add i64 %471, 1
	store i64 %472, i64* %35
	%473 = load i64, i64* %36, align 8
	%474 = add i64 %473, 1
	store i64 %474, i64* %36
	store i64 %469, i64* %34
	; IfStmt
	%475 = load i64, i64* %34, align 8
	%476 = icmp sgt i64 %475, 0
	%477 = zext i1 %476 to i8
	%478 = trunc i8 %477 to i1
	br i1 %478, label %if.then-64, label %if.done-65

if.then-64:
	; SelectorExpr
	%479 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%480 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %479, i64 0
	%481 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %480, i64 0, i32 12
	%482 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %481, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %482, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$19d, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-65

if.done-65:
	; data
	
	; SelectorExpr
	%483 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %33, align 8
	%484 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %483, i64 0
	%485 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %484, i64 0, i32 0
	%486 = load %..rawptr, %..rawptr* %485, align 8
	%487 = ptrtoint %..rawptr %486 to i64
	%488 = load i64, i64* %34, align 8
	; SelectorExpr
	%489 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %32, i64 0, i32 1
	%490 = load i64, i64* %489, align 8
	%491 = mul i64 %488, %490
	%492 = bitcast i64 %491 to i64
	%493 = add i64 %487, %492
	store i64 %493, i64* %37
	%494 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%495 = bitcast %..any* %38 to %..rawptr
	%496 = call %..rawptr @__mem_zero(%..rawptr %495, i64 16)
	store %..any zeroinitializer, %..any* %38
	store %..any zeroinitializer, %..any* %38
	%497 = load i64, i64* %37, align 8
	%498 = inttoptr i64 %497 to %..rawptr
	%499 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 0
	store %..rawptr %498, %..rawptr* %499
	; SelectorExpr
	%500 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %32, i64 0, i32 0
	%501 = load %Type_Info*, %Type_Info** %500, align 8
	%502 = getelementptr inbounds %..any, %..any* %38, i64 0, i32 1
	store %Type_Info* %501, %Type_Info** %502
	%503 = load %..any, %..any* %38, align 8
	%504 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %494, %..any %503, i32 %504, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-62

for.interval.done-66:
	; defer
	; SelectorExpr
	%505 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%506 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %505, i64 0
	%507 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %506, i64 0, i32 12
	%508 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %507, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %508, i8 93, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-67:
	%509 = icmp eq i8 %119, 18
	br i1 %509, label %typeswitch.body-75, label %typeswitch.next-74

typeswitch.body-68:
	%510 = bitcast %..rawptr %120 to %Type_Info_Slice*
	%511 = load %Type_Info_Slice, %Type_Info_Slice* %510, align 8
	store %Type_Info_Slice %511, %Type_Info_Slice* %39
	; SelectorExpr
	%512 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%513 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %512, i64 0
	%514 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %513, i64 0, i32 12
	%515 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %514, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %515, i8 91, %Context* noalias nonnull %__.context_ptr)
	; DeferStmt
	; slice
	
	; SelectorExpr
	%516 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%517 = load %..rawptr, %..rawptr* %516, align 8
	%518 = bitcast %..rawptr %517 to %raw-5.Slice*
	store %raw-5.Slice* %518, %raw-5.Slice** %40
	; RangeStmt
	; i
	%519 = bitcast i64* %41 to %..rawptr
	%520 = call %..rawptr @__mem_zero(%..rawptr %519, i64 8)
	store i64 zeroinitializer, i64* %41
	
	%521 = bitcast i64* %42 to %..rawptr
	%522 = call %..rawptr @__mem_zero(%..rawptr %521, i64 8)
	store i64 zeroinitializer, i64* %42
	store i64 0, i64* %42
	%523 = bitcast i64* %43 to %..rawptr
	%524 = call %..rawptr @__mem_zero(%..rawptr %523, i64 8)
	store i64 zeroinitializer, i64* %43
	store i64 0, i64* %43
	br label %for.interval.loop-69

for.interval.loop-69:
	; SelectorExpr
	%525 = load %raw-5.Slice*, %raw-5.Slice** %40, align 8
	%526 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %525, i64 0
	%527 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %526, i64 0, i32 1
	%528 = load i64, i64* %527, align 8
	%529 = load i64, i64* %42, align 8
	%530 = icmp slt i64 %529, %528
	br i1 %530, label %for.interval.body-70, label %for.interval.done-73

for.interval.body-70:
	%531 = load i64, i64* %42, align 8
	%532 = load i64, i64* %43, align 8
	%533 = load i64, i64* %42, align 8
	%534 = add i64 %533, 1
	store i64 %534, i64* %42
	%535 = load i64, i64* %43, align 8
	%536 = add i64 %535, 1
	store i64 %536, i64* %43
	store i64 %531, i64* %41
	; IfStmt
	%537 = load i64, i64* %41, align 8
	%538 = icmp sgt i64 %537, 0
	%539 = zext i1 %538 to i8
	%540 = trunc i8 %539 to i1
	br i1 %540, label %if.then-71, label %if.done-72

if.then-71:
	; SelectorExpr
	%541 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%542 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %541, i64 0
	%543 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %542, i64 0, i32 12
	%544 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %543, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %544, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$19e, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-72

if.done-72:
	; data
	
	; SelectorExpr
	%545 = load %raw-5.Slice*, %raw-5.Slice** %40, align 8
	%546 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %545, i64 0
	%547 = getelementptr inbounds %raw-5.Slice, %raw-5.Slice* %546, i64 0, i32 0
	%548 = load %..rawptr, %..rawptr* %547, align 8
	%549 = ptrtoint %..rawptr %548 to i64
	%550 = load i64, i64* %41, align 8
	; SelectorExpr
	%551 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %39, i64 0, i32 1
	%552 = load i64, i64* %551, align 8
	%553 = mul i64 %550, %552
	%554 = bitcast i64 %553 to i64
	%555 = add i64 %549, %554
	store i64 %555, i64* %44
	%556 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%557 = bitcast %..any* %45 to %..rawptr
	%558 = call %..rawptr @__mem_zero(%..rawptr %557, i64 16)
	store %..any zeroinitializer, %..any* %45
	store %..any zeroinitializer, %..any* %45
	%559 = load i64, i64* %44, align 8
	%560 = inttoptr i64 %559 to %..rawptr
	%561 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 0
	store %..rawptr %560, %..rawptr* %561
	; SelectorExpr
	%562 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %39, i64 0, i32 0
	%563 = load %Type_Info*, %Type_Info** %562, align 8
	%564 = getelementptr inbounds %..any, %..any* %45, i64 0, i32 1
	store %Type_Info* %563, %Type_Info** %564
	%565 = load %..any, %..any* %45, align 8
	%566 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %556, %..any %565, i32 %566, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-69

for.interval.done-73:
	; defer
	; SelectorExpr
	%567 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%568 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %567, i64 0
	%569 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %568, i64 0, i32 12
	%570 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %569, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %570, i8 93, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-74:
	%571 = icmp eq i8 %119, 15
	br i1 %571, label %typeswitch.body-95, label %typeswitch.next-94

typeswitch.body-75:
	%572 = bitcast %..rawptr %120 to %Type_Info_Map*
	%573 = load %Type_Info_Map, %Type_Info_Map* %572, align 8
	store %Type_Info_Map %573, %Type_Info_Map* %46
	; IfStmt
	%574 = load i32, i32* %2, align 4
	%575 = icmp ne i32 %574, 118
	%576 = zext i1 %575 to i8
	%577 = trunc i8 %576 to i1
	br i1 %577, label %if.then-76, label %if.done-77

if.then-76:
	%578 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%579 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %578, i32 %579, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-77:
	; SelectorExpr
	%580 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%581 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %580, i64 0
	%582 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %581, i64 0, i32 12
	%583 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %582, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %583, %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$19f, i64 0, i32 0), i64 4}, %Context* noalias nonnull %__.context_ptr)
	; DeferStmt
	; m
	
	; SelectorExpr
	%584 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%585 = load %..rawptr, %..rawptr* %584, align 8
	%586 = bitcast %..rawptr %585 to %raw-5.Map*
	store %raw-5.Map* %586, %raw-5.Map** %47
	; IfStmt
	%587 = load %raw-5.Map*, %raw-5.Map** %47, align 8
	%588 = icmp ne %raw-5.Map* %587, zeroinitializer
	%589 = zext i1 %588 to i8
	%590 = trunc i8 %589 to i1
	br i1 %590, label %if.then-78, label %if.done-93

if.then-78:
	; SelectorExpr
	%591 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %46, i64 0, i32 2
	%592 = load %Type_Info*, %Type_Info** %591, align 8
	%593 = icmp ne %Type_Info* %592, zeroinitializer
	%594 = zext i1 %593 to i8
	%595 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a0, i64 0, i32 0), i64 46}, i64 818, i64 4, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$1a1, i64 0, i32 0), i64 9})
	%596 = trunc i8 %594 to i1
	%597 = bitcast %Source_Code_Location* %48 to %..rawptr
	%598 = call %..rawptr @__mem_zero(%..rawptr %597, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %48
	store %Source_Code_Location %595, %Source_Code_Location* %48
	%599 = call i8 @assert(i1 %596, %..string zeroinitializer, %Source_Code_Location* %48)
	; entries
	
	; SelectorExpr
	%600 = load %raw-5.Map*, %raw-5.Map** %47, align 8
	%601 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %600, i64 0
	%602 = getelementptr inbounds %raw-5.Map, %raw-5.Map* %601, i64 0, i32 1
	%603 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %602, i64 0
	store %raw-5.Dynamic_Array* %603, %raw-5.Dynamic_Array** %49
	; gs
	
	; SelectorExpr
	; SelectorExpr
	%604 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %46, i64 0, i32 2
	%605 = load %Type_Info*, %Type_Info** %604, align 8
	%606 = call %Type_Info* @type_info_base(%Type_Info* %605, %Context* noalias nonnull %__.context_ptr)
	%607 = bitcast %Type_Info** %51 to %..rawptr
	%608 = call %..rawptr @__mem_zero(%..rawptr %607, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %51
	store %Type_Info* %606, %Type_Info** %51
	%609 = load %Type_Info*, %Type_Info** %51, align 8
	%610 = getelementptr inbounds %Type_Info, %Type_Info* %609, i64 0
	%611 = getelementptr inbounds %Type_Info, %Type_Info* %610, i64 0, i32 2
	%612 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %611, align 8
	; cast - union_cast
	%613 = bitcast {%Type_Info_Struct, i8}* %52 to %..rawptr
	%614 = call %..rawptr @__mem_zero(%..rawptr %613, i64 80)
	store {%Type_Info_Struct, i8} zeroinitializer, {%Type_Info_Struct, i8}* %52
	%615 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %611, i64 0, i32 2 ; UnionTagPtr
	%616 = load i8, i8* %615, align 1
	%617 = icmp eq i8 %616, 15
	br i1 %617, label %union_cast.ok-79, label %union_cast.end-80

union_cast.ok-79:
	%618 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %52, i64 0, i32 0
	%619 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %52, i64 0, i32 1
	%620 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %611 to %Type_Info_Struct*
	%621 = load %Type_Info_Struct, %Type_Info_Struct* %620, align 8
	store %Type_Info_Struct %621, %Type_Info_Struct* %618
	store i8 1, i8* %619
	br label %union_cast.end-80

union_cast.end-80:
	%622 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %52, i64 0, i32 1
	%623 = load i8, i8* %622, align 1
	%624 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%625 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 39
	%626 = trunc i8 %623 to i1
	call void @__type_assertion_check(i1 %626, %..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a2, i64 0, i32 0), i64 46}, i64 820, i64 56, %Type_Info* %624, %Type_Info* %625)
	%627 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %52, i64 0, i32 0
	%628 = load %Type_Info_Struct, %Type_Info_Struct* %627, align 8
	store %Type_Info_Struct %628, %Type_Info_Struct* %50
	; ed
	
	; SelectorExpr
	; IndexExpr
	; SelectorExpr
	%629 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %50, i64 0, i32 0
	%630 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %629, align 8
	%631 = extractvalue {%Type_Info**, i64} %630, 0
	%632 = extractvalue {%Type_Info**, i64} %630, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a3, i64 0, i32 0), i64 46}, i64 821, i64 42, i64 1, i64 %632)
	%633 = getelementptr inbounds %Type_Info*, %Type_Info** %631, i64 1
	%634 = load %Type_Info*, %Type_Info** %633, align 8
	%635 = call %Type_Info* @type_info_base(%Type_Info* %634, %Context* noalias nonnull %__.context_ptr)
	%636 = bitcast %Type_Info** %54 to %..rawptr
	%637 = call %..rawptr @__mem_zero(%..rawptr %636, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %54
	store %Type_Info* %635, %Type_Info** %54
	%638 = load %Type_Info*, %Type_Info** %54, align 8
	%639 = getelementptr inbounds %Type_Info, %Type_Info* %638, i64 0
	%640 = getelementptr inbounds %Type_Info, %Type_Info* %639, i64 0, i32 2
	%641 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %640, align 8
	; cast - union_cast
	%642 = bitcast {%Type_Info_Dynamic_Array, i8}* %55 to %..rawptr
	%643 = call %..rawptr @__mem_zero(%..rawptr %642, i64 24)
	store {%Type_Info_Dynamic_Array, i8} zeroinitializer, {%Type_Info_Dynamic_Array, i8}* %55
	%644 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %640, i64 0, i32 2 ; UnionTagPtr
	%645 = load i8, i8* %644, align 1
	%646 = icmp eq i8 %645, 12
	br i1 %646, label %union_cast.ok-81, label %union_cast.end-82

union_cast.ok-81:
	%647 = getelementptr inbounds {%Type_Info_Dynamic_Array, i8}, {%Type_Info_Dynamic_Array, i8}* %55, i64 0, i32 0
	%648 = getelementptr inbounds {%Type_Info_Dynamic_Array, i8}, {%Type_Info_Dynamic_Array, i8}* %55, i64 0, i32 1
	%649 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %640 to %Type_Info_Dynamic_Array*
	%650 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %649, align 8
	store %Type_Info_Dynamic_Array %650, %Type_Info_Dynamic_Array* %647
	store i8 1, i8* %648
	br label %union_cast.end-82

union_cast.end-82:
	%651 = getelementptr inbounds {%Type_Info_Dynamic_Array, i8}, {%Type_Info_Dynamic_Array, i8}* %55, i64 0, i32 1
	%652 = load i8, i8* %651, align 1
	%653 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%654 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 30
	%655 = trunc i8 %652 to i1
	call void @__type_assertion_check(i1 %655, %..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a4, i64 0, i32 0), i64 46}, i64 821, i64 46, %Type_Info* %653, %Type_Info* %654)
	%656 = getelementptr inbounds {%Type_Info_Dynamic_Array, i8}, {%Type_Info_Dynamic_Array, i8}* %55, i64 0, i32 0
	%657 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %656, align 8
	store %Type_Info_Dynamic_Array %657, %Type_Info_Dynamic_Array* %53
	; entry_type
	
	; SelectorExpr
	; SelectorExpr
	%658 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %53, i64 0, i32 0
	%659 = load %Type_Info*, %Type_Info** %658, align 8
	%660 = getelementptr inbounds %Type_Info, %Type_Info* %659, i64 0
	%661 = getelementptr inbounds %Type_Info, %Type_Info* %660, i64 0, i32 2
	%662 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %661, align 8
	; cast - union_cast
	%663 = bitcast {%Type_Info_Struct, i8}* %57 to %..rawptr
	%664 = call %..rawptr @__mem_zero(%..rawptr %663, i64 80)
	store {%Type_Info_Struct, i8} zeroinitializer, {%Type_Info_Struct, i8}* %57
	%665 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %661, i64 0, i32 2 ; UnionTagPtr
	%666 = load i8, i8* %665, align 1
	%667 = icmp eq i8 %666, 15
	br i1 %667, label %union_cast.ok-83, label %union_cast.end-84

union_cast.ok-83:
	%668 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %57, i64 0, i32 0
	%669 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %57, i64 0, i32 1
	%670 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %661 to %Type_Info_Struct*
	%671 = load %Type_Info_Struct, %Type_Info_Struct* %670, align 8
	store %Type_Info_Struct %671, %Type_Info_Struct* %668
	store i8 1, i8* %669
	br label %union_cast.end-84

union_cast.end-84:
	%672 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %57, i64 0, i32 1
	%673 = load i8, i8* %672, align 1
	%674 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%675 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 39
	%676 = trunc i8 %673 to i1
	call void @__type_assertion_check(i1 %676, %..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a5, i64 0, i32 0), i64 46}, i64 822, i64 26, %Type_Info* %674, %Type_Info* %675)
	%677 = getelementptr inbounds {%Type_Info_Struct, i8}, {%Type_Info_Struct, i8}* %57, i64 0, i32 0
	%678 = load %Type_Info_Struct, %Type_Info_Struct* %677, align 8
	store %Type_Info_Struct %678, %Type_Info_Struct* %56
	; entry_size
	
	; SelectorExpr
	%679 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %53, i64 0, i32 1
	%680 = load i64, i64* %679, align 8
	store i64 %680, i64* %58
	; RangeStmt
	; i
	%681 = bitcast i64* %59 to %..rawptr
	%682 = call %..rawptr @__mem_zero(%..rawptr %681, i64 8)
	store i64 zeroinitializer, i64* %59
	
	%683 = bitcast i64* %60 to %..rawptr
	%684 = call %..rawptr @__mem_zero(%..rawptr %683, i64 8)
	store i64 zeroinitializer, i64* %60
	store i64 0, i64* %60
	%685 = bitcast i64* %61 to %..rawptr
	%686 = call %..rawptr @__mem_zero(%..rawptr %685, i64 8)
	store i64 zeroinitializer, i64* %61
	store i64 0, i64* %61
	br label %for.interval.loop-85

for.interval.loop-85:
	; SelectorExpr
	%687 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %49, align 8
	%688 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %687, i64 0
	%689 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %688, i64 0, i32 1
	%690 = load i64, i64* %689, align 8
	%691 = load i64, i64* %60, align 8
	%692 = icmp slt i64 %691, %690
	br i1 %692, label %for.interval.body-86, label %for.interval.done-92

for.interval.body-86:
	%693 = load i64, i64* %60, align 8
	%694 = load i64, i64* %61, align 8
	%695 = load i64, i64* %60, align 8
	%696 = add i64 %695, 1
	store i64 %696, i64* %60
	%697 = load i64, i64* %61, align 8
	%698 = add i64 %697, 1
	store i64 %698, i64* %61
	store i64 %693, i64* %59
	; IfStmt
	%699 = load i64, i64* %59, align 8
	%700 = icmp sgt i64 %699, 0
	%701 = zext i1 %700 to i8
	%702 = trunc i8 %701 to i1
	br i1 %702, label %if.then-87, label %if.done-88

if.then-87:
	; SelectorExpr
	%703 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%704 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %703, i64 0
	%705 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %704, i64 0, i32 12
	%706 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %705, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %706, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$1a6, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-88

if.done-88:
	; data
	
	; SelectorExpr
	%707 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %49, align 8
	%708 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %707, i64 0
	%709 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %708, i64 0, i32 0
	%710 = load %..rawptr, %..rawptr* %709, align 8
	%711 = ptrtoint %..rawptr %710 to i64
	%712 = load i64, i64* %59, align 8
	%713 = load i64, i64* %58, align 8
	%714 = mul i64 %712, %713
	%715 = bitcast i64 %714 to i64
	%716 = add i64 %711, %715
	store i64 %716, i64* %62
	; header
	
	%717 = load i64, i64* %62, align 8
	%718 = inttoptr i64 %717 to %__Map_Entry_Header*
	store %__Map_Entry_Header* %718, %__Map_Entry_Header** %63
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%719 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %46, i64 0, i32 0
	%720 = load %Type_Info*, %Type_Info** %719, align 8
	%721 = call i8 @types-15.is_string(%Type_Info* %720, %Context* noalias nonnull %__.context_ptr)
	%722 = trunc i8 %721 to i1
	br i1 %722, label %if.then-89, label %if.else-90

if.then-89:
	; SelectorExpr
	%723 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%724 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %723, i64 0
	%725 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %724, i64 0, i32 12
	%726 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %725, align 8
	; SelectorExpr
	; SelectorExpr
	%727 = load %__Map_Entry_Header*, %__Map_Entry_Header** %63, align 8
	%728 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %727, i64 0
	%729 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %728, i64 0, i32 0
	%730 = getelementptr inbounds %__Map_Key, %__Map_Key* %729, i64 0, i32 1
	%731 = load %..string, %..string* %730, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %726, %..string %731, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-91

if.else-90:
	; fi
	
	; CompoundLit
	%732 = bitcast %fmt-14.Fmt_Info* %65 to %..rawptr
	%733 = call %..rawptr @__mem_zero(%..rawptr %732, i64 64)
	store %fmt-14.Fmt_Info zeroinitializer, %fmt-14.Fmt_Info* %65
	store %fmt-14.Fmt_Info {i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, {i8*, i64, i64, %Allocator}* zeroinitializer, %..any zeroinitializer}, %fmt-14.Fmt_Info* %65
	; SelectorExpr
	%734 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%735 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %734, i64 0
	%736 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %735, i64 0, i32 12
	%737 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %736, align 8
	%738 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %65, i64 0, i32 12
	store {i8*, i64, i64, %Allocator}* %737, {i8*, i64, i64, %Allocator}** %738
	%739 = load %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %65, align 8
	store %fmt-14.Fmt_Info %739, %fmt-14.Fmt_Info* %64
	%740 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %64, i64 0
	; CompoundLit
	%741 = bitcast %..any* %66 to %..rawptr
	%742 = call %..rawptr @__mem_zero(%..rawptr %741, i64 16)
	store %..any zeroinitializer, %..any* %66
	store %..any zeroinitializer, %..any* %66
	; SelectorExpr
	; SelectorExpr
	%743 = load %__Map_Entry_Header*, %__Map_Entry_Header** %63, align 8
	%744 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %743, i64 0
	%745 = getelementptr inbounds %__Map_Entry_Header, %__Map_Entry_Header* %744, i64 0, i32 0
	%746 = getelementptr inbounds %__Map_Key, %__Map_Key* %745, i64 0, i32 0
	%747 = getelementptr inbounds i64, i64* %746, i64 0
	%748 = bitcast i64* %747 to %..rawptr
	%749 = getelementptr inbounds %..any, %..any* %66, i64 0, i32 0
	store %..rawptr %748, %..rawptr* %749
	; SelectorExpr
	%750 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %46, i64 0, i32 0
	%751 = load %Type_Info*, %Type_Info** %750, align 8
	%752 = getelementptr inbounds %..any, %..any* %66, i64 0, i32 1
	store %Type_Info* %751, %Type_Info** %752
	%753 = load %..any, %..any* %66, align 8
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %740, %..any %753, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-91

if.done-91:
	; SelectorExpr
	%754 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%755 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %754, i64 0
	%756 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %755, i64 0, i32 12
	%757 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %756, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %757, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$1a7, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	; value
	
	%758 = load i64, i64* %62, align 8
	; IndexExpr
	; SelectorExpr
	%759 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %56, i64 0, i32 2
	%760 = load {i64*, i64}, {i64*, i64}* %759, align 8
	%761 = extractvalue {i64*, i64} %760, 0
	%762 = extractvalue {i64*, i64} %760, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1a8, i64 0, i32 0), i64 46}, i64 840, i64 40, i64 2, i64 %762)
	%763 = getelementptr inbounds i64, i64* %761, i64 2
	%764 = load i64, i64* %763, align 8
	%765 = add i64 %758, %764
	store i64 %765, i64* %67
	%766 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%767 = bitcast %..any* %68 to %..rawptr
	%768 = call %..rawptr @__mem_zero(%..rawptr %767, i64 16)
	store %..any zeroinitializer, %..any* %68
	store %..any zeroinitializer, %..any* %68
	%769 = load i64, i64* %67, align 8
	%770 = inttoptr i64 %769 to %..rawptr
	%771 = getelementptr inbounds %..any, %..any* %68, i64 0, i32 0
	store %..rawptr %770, %..rawptr* %771
	; SelectorExpr
	%772 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %46, i64 0, i32 1
	%773 = load %Type_Info*, %Type_Info** %772, align 8
	%774 = getelementptr inbounds %..any, %..any* %68, i64 0, i32 1
	store %Type_Info* %773, %Type_Info** %774
	%775 = load %..any, %..any* %68, align 8
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %766, %..any %775, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-85

for.interval.done-92:
	br label %if.done-93

if.done-93:
	; defer
	; SelectorExpr
	%776 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%777 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %776, i64 0
	%778 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %777, i64 0, i32 12
	%779 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %778, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %779, i8 93, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-94:
	%780 = icmp eq i8 %119, 16
	br i1 %780, label %typeswitch.body-117, label %typeswitch.next-116

typeswitch.body-95:
	%781 = bitcast %..rawptr %120 to %Type_Info_Struct*
	%782 = load %Type_Info_Struct, %Type_Info_Struct* %781, align 8
	store %Type_Info_Struct %782, %Type_Info_Struct* %69
	; IfStmt
	; SelectorExpr
	%783 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %69, i64 0, i32 5
	%784 = load i8, i8* %783, align 1
	%785 = trunc i8 %784 to i1
	br i1 %785, label %if.then-96, label %if.done-97

if.then-96:
	; SelectorExpr
	%786 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%787 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %786, i64 0
	%788 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %787, i64 0, i32 12
	%789 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %788, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %789, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$1a9, i64 0, i32 0), i64 11}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-97:
	; SelectorExpr
	%790 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%791 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %790, i64 0
	%792 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %791, i64 0, i32 12
	%793 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %792, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %793, i8 123, %Context* noalias nonnull %__.context_ptr)
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%794 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%795 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %794, i64 0
	%796 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %795, i64 0, i32 9
	%797 = load i64, i64* %796, align 8
	%798 = add i64 %797, 1
	store i64 %798, i64* %796
	; DeferStmt
	; hash
	
	; SelectorExpr
	%799 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%800 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %799, i64 0
	%801 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %800, i64 0, i32 4
	%802 = load i8, i8* %801, align 1
	store i8 %802, i8* %70
	; DeferStmt
	; AssignStmt
	; SelectorExpr
	%803 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%804 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %803, i64 0
	%805 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %804, i64 0, i32 4
	store i8 0, i8* %805
	; IfStmt
	%806 = load i8, i8* %70, align 1
	%807 = trunc i8 %806 to i1
	br i1 %807, label %if.then-98, label %if.done-99

if.then-98:
	; SelectorExpr
	%808 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%809 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %808, i64 0
	%810 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %809, i64 0, i32 12
	%811 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %810, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %811, i8 10, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-99

if.done-99:
	; RangeStmt
	; i
	%812 = bitcast i64* %71 to %..rawptr
	%813 = call %..rawptr @__mem_zero(%..rawptr %812, i64 8)
	store i64 zeroinitializer, i64* %71
	
	; SelectorExpr
	%814 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %69, i64 0, i32 1
	%815 = load {%..string*, i64}, {%..string*, i64}* %814, align 8
	%816 = bitcast i64* %72 to %..rawptr
	%817 = call %..rawptr @__mem_zero(%..rawptr %816, i64 8)
	store i64 zeroinitializer, i64* %72
	%818 = extractvalue {%..string*, i64} %815, 1
	store i64 %818, i64* %72
	%819 = bitcast i64* %73 to %..rawptr
	%820 = call %..rawptr @__mem_zero(%..rawptr %819, i64 8)
	store i64 zeroinitializer, i64* %73
	store i64 -1, i64* %73
	br label %for.index.loop-100

for.index.loop-100:
	%821 = load i64, i64* %73, align 8
	%822 = add i64 %821, 1
	store i64 %822, i64* %73
	%823 = load i64, i64* %72, align 8
	%824 = icmp slt i64 %822, %823
	br i1 %824, label %for.index.body-101, label %for.index.done-115

for.index.body-101:
	%825 = load i64, i64* %73, align 8
	store i64 %825, i64* %71
	; IfStmt
	%826 = load i8, i8* %70, align 1
	%827 = trunc i8 %826 to i1
	br i1 %827, label %if.done-104, label %cmp.and-102

cmp.and-102:
	%828 = load i64, i64* %71, align 8
	%829 = icmp sgt i64 %828, 0
	%830 = zext i1 %829 to i8
	%831 = trunc i8 %830 to i1
	br i1 %831, label %if.then-103, label %if.done-104

if.then-103:
	; SelectorExpr
	%832 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%833 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %832, i64 0
	%834 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %833, i64 0, i32 12
	%835 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %834, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %835, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$1aa, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-104

if.done-104:
	; IfStmt
	%836 = load i8, i8* %70, align 1
	%837 = trunc i8 %836 to i1
	br i1 %837, label %if.then-105, label %if.done-109

if.then-105:
	; RangeStmt
	%838 = bitcast i64* %74 to %..rawptr
	%839 = call %..rawptr @__mem_zero(%..rawptr %838, i64 8)
	store i64 zeroinitializer, i64* %74
	store i64 0, i64* %74
	%840 = bitcast i64* %75 to %..rawptr
	%841 = call %..rawptr @__mem_zero(%..rawptr %840, i64 8)
	store i64 zeroinitializer, i64* %75
	store i64 0, i64* %75
	br label %for.interval.loop-106

for.interval.loop-106:
	; SelectorExpr
	%842 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%843 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %842, i64 0
	%844 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %843, i64 0, i32 9
	%845 = load i64, i64* %844, align 8
	%846 = load i64, i64* %74, align 8
	%847 = icmp slt i64 %846, %845
	br i1 %847, label %for.interval.body-107, label %for.interval.done-108

for.interval.body-107:
	%848 = load i64, i64* %74, align 8
	%849 = load i64, i64* %75, align 8
	%850 = load i64, i64* %74, align 8
	%851 = add i64 %850, 1
	store i64 %851, i64* %74
	%852 = load i64, i64* %75, align 8
	%853 = add i64 %852, 1
	store i64 %853, i64* %75
	; SelectorExpr
	%854 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%855 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %854, i64 0
	%856 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %855, i64 0, i32 12
	%857 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %856, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %857, i8 9, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-106

for.interval.done-108:
	br label %if.done-109

if.done-109:
	; SelectorExpr
	%858 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%859 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %858, i64 0
	%860 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %859, i64 0, i32 12
	%861 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %860, align 8
	; IndexExpr
	; SelectorExpr
	%862 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %69, i64 0, i32 1
	%863 = load {%..string*, i64}, {%..string*, i64}* %862, align 8
	%864 = extractvalue {%..string*, i64} %863, 0
	%865 = load i64, i64* %71, align 8
	%866 = extractvalue {%..string*, i64} %863, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1ab, i64 0, i32 0), i64 46}, i64 869, i64 36, i64 %865, i64 %866)
	%867 = getelementptr inbounds %..string, %..string* %864, i64 %865
	%868 = load %..string, %..string* %867, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %861, %..string %868, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%869 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%870 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %869, i64 0
	%871 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %870, i64 0, i32 12
	%872 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %871, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %872, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$1ac, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; t
	
	; IndexExpr
	; SelectorExpr
	%873 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %69, i64 0, i32 0
	%874 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %873, align 8
	%875 = extractvalue {%Type_Info**, i64} %874, 0
	%876 = load i64, i64* %71, align 8
	%877 = extractvalue {%Type_Info**, i64} %874, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1ad, i64 0, i32 0), i64 46}, i64 872, i64 23, i64 %876, i64 %877)
	%878 = getelementptr inbounds %Type_Info*, %Type_Info** %875, i64 %876
	%879 = load %Type_Info*, %Type_Info** %878, align 8
	store %Type_Info* %879, %Type_Info** %76
	; SelectorExpr
	%880 = load %Type_Info*, %Type_Info** %76, align 8
	%881 = call i8 @types-15.is_any(%Type_Info* %880, %Context* noalias nonnull %__.context_ptr)
	%882 = trunc i8 %881 to i1
	br i1 %882, label %if.then-110, label %if.else-111

if.then-110:
	; SelectorExpr
	%883 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%884 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %883, i64 0
	%885 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %884, i64 0, i32 12
	%886 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %885, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %886, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$1ae, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-112

if.else-111:
	; data
	
	; SelectorExpr
	%887 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%888 = load %..rawptr, %..rawptr* %887, align 8
	%889 = ptrtoint %..rawptr %888 to i64
	; IndexExpr
	; SelectorExpr
	%890 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %69, i64 0, i32 2
	%891 = load {i64*, i64}, {i64*, i64}* %890, align 8
	%892 = extractvalue {i64*, i64} %891, 0
	%893 = load i64, i64* %71, align 8
	%894 = extractvalue {i64*, i64} %891, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1af, i64 0, i32 0), i64 46}, i64 875, i64 44, i64 %893, i64 %894)
	%895 = getelementptr inbounds i64, i64* %892, i64 %893
	%896 = load i64, i64* %895, align 8
	%897 = add i64 %889, %896
	store i64 %897, i64* %77
	%898 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%899 = bitcast %..any* %78 to %..rawptr
	%900 = call %..rawptr @__mem_zero(%..rawptr %899, i64 16)
	store %..any zeroinitializer, %..any* %78
	store %..any zeroinitializer, %..any* %78
	%901 = load i64, i64* %77, align 8
	%902 = inttoptr i64 %901 to %..rawptr
	%903 = getelementptr inbounds %..any, %..any* %78, i64 0, i32 0
	store %..rawptr %902, %..rawptr* %903
	%904 = load %Type_Info*, %Type_Info** %76, align 8
	%905 = getelementptr inbounds %..any, %..any* %78, i64 0, i32 1
	store %Type_Info* %904, %Type_Info** %905
	%906 = load %..any, %..any* %78, align 8
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %898, %..any %906, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-112

if.done-112:
	; IfStmt
	%907 = load i8, i8* %70, align 1
	%908 = trunc i8 %907 to i1
	br i1 %908, label %if.then-113, label %if.done-114

if.then-113:
	; SelectorExpr
	%909 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%910 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %909, i64 0
	%911 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %910, i64 0, i32 12
	%912 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %911, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %912, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$1b0, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-114

if.done-114:
	br label %for.index.loop-100

for.index.done-115:
	; defer
	; AssignStmt
	; SelectorExpr
	%913 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%914 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %913, i64 0
	%915 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %914, i64 0, i32 4
	%916 = load i8, i8* %70, align 1
	store i8 %916, i8* %915
	; defer
	; AssignStmt
	; SelectorExpr
	%917 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%918 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %917, i64 0
	%919 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %918, i64 0, i32 9
	%920 = load i64, i64* %919, align 8
	%921 = sub i64 %920, 1
	store i64 %921, i64* %919
	; defer
	; SelectorExpr
	%922 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%923 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %922, i64 0
	%924 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %923, i64 0, i32 12
	%925 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %924, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %925, i8 125, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-116:
	%926 = icmp eq i8 %119, 17
	br i1 %926, label %typeswitch.body-140, label %typeswitch.next-139

typeswitch.body-117:
	%927 = bitcast %..rawptr %120 to %Type_Info_Union*
	%928 = load %Type_Info_Union, %Type_Info_Union* %927, align 8
	store %Type_Info_Union %928, %Type_Info_Union* %79
	; tag_ptr
	
	; SelectorExpr
	%929 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%930 = load %..rawptr, %..rawptr* %929, align 8
	%931 = ptrtoint %..rawptr %930 to i64
	; SelectorExpr
	%932 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %79, i64 0, i32 1
	%933 = load i64, i64* %932, align 8
	%934 = add i64 %931, %933
	store i64 %934, i64* %80
	; tag_any
	
	; CompoundLit
	%935 = bitcast %..any* %82 to %..rawptr
	%936 = call %..rawptr @__mem_zero(%..rawptr %935, i64 16)
	store %..any zeroinitializer, %..any* %82
	store %..any zeroinitializer, %..any* %82
	%937 = load i64, i64* %80, align 8
	%938 = inttoptr i64 %937 to %..rawptr
	%939 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 0
	store %..rawptr %938, %..rawptr* %939
	; SelectorExpr
	%940 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %79, i64 0, i32 2
	%941 = load %Type_Info*, %Type_Info** %940, align 8
	%942 = getelementptr inbounds %..any, %..any* %82, i64 0, i32 1
	store %Type_Info* %941, %Type_Info** %942
	%943 = load %..any, %..any* %82, align 8
	store %..any %943, %..any* %81
	; tag
	
	store i64 -1, i64* %83
	; TypeSwitchStmt
	%944 = load %..any, %..any* %81, align 8
	%945 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%946 = load %Type_Info*, %Type_Info** %945, align 8
	%947 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%948 = icmp eq %Type_Info* %946, %947
	br i1 %948, label %typeswitch.body-119, label %typeswitch.next-118

typeswitch.next-118:
	%949 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%950 = load %Type_Info*, %Type_Info** %949, align 8
	%951 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%952 = icmp eq %Type_Info* %950, %951
	br i1 %952, label %typeswitch.body-121, label %typeswitch.next-120

typeswitch.body-119:
	%953 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%954 = load %..rawptr, %..rawptr* %953, align 8
	%955 = bitcast %..rawptr %954 to i8*
	%956 = load i8, i8* %955, align 1
	store i8 %956, i8* %84
	; AssignStmt
	%957 = load i8, i8* %84, align 1
	%958 = zext i8 %957 to i64
	store i64 %958, i64* %83
	br label %typeswitch.done-134

typeswitch.next-120:
	%959 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%960 = load %Type_Info*, %Type_Info** %959, align 8
	%961 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%962 = icmp eq %Type_Info* %960, %961
	br i1 %962, label %typeswitch.body-123, label %typeswitch.next-122

typeswitch.body-121:
	%963 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%964 = load %..rawptr, %..rawptr* %963, align 8
	%965 = bitcast %..rawptr %964 to i8*
	%966 = load i8, i8* %965, align 1
	store i8 %966, i8* %85
	; AssignStmt
	%967 = load i8, i8* %85, align 1
	%968 = sext i8 %967 to i64
	store i64 %968, i64* %83
	br label %typeswitch.done-134

typeswitch.next-122:
	%969 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%970 = load %Type_Info*, %Type_Info** %969, align 8
	%971 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%972 = icmp eq %Type_Info* %970, %971
	br i1 %972, label %typeswitch.body-125, label %typeswitch.next-124

typeswitch.body-123:
	%973 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%974 = load %..rawptr, %..rawptr* %973, align 8
	%975 = bitcast %..rawptr %974 to i16*
	%976 = load i16, i16* %975, align 2
	store i16 %976, i16* %86
	; AssignStmt
	%977 = load i16, i16* %86, align 2
	%978 = zext i16 %977 to i64
	store i64 %978, i64* %83
	br label %typeswitch.done-134

typeswitch.next-124:
	%979 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%980 = load %Type_Info*, %Type_Info** %979, align 8
	%981 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%982 = icmp eq %Type_Info* %980, %981
	br i1 %982, label %typeswitch.body-127, label %typeswitch.next-126

typeswitch.body-125:
	%983 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%984 = load %..rawptr, %..rawptr* %983, align 8
	%985 = bitcast %..rawptr %984 to i16*
	%986 = load i16, i16* %985, align 2
	store i16 %986, i16* %87
	; AssignStmt
	%987 = load i16, i16* %87, align 2
	%988 = sext i16 %987 to i64
	store i64 %988, i64* %83
	br label %typeswitch.done-134

typeswitch.next-126:
	%989 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%990 = load %Type_Info*, %Type_Info** %989, align 8
	%991 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%992 = icmp eq %Type_Info* %990, %991
	br i1 %992, label %typeswitch.body-129, label %typeswitch.next-128

typeswitch.body-127:
	%993 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%994 = load %..rawptr, %..rawptr* %993, align 8
	%995 = bitcast %..rawptr %994 to i32*
	%996 = load i32, i32* %995, align 4
	store i32 %996, i32* %88
	; AssignStmt
	%997 = load i32, i32* %88, align 4
	%998 = zext i32 %997 to i64
	store i64 %998, i64* %83
	br label %typeswitch.done-134

typeswitch.next-128:
	%999 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%1000 = load %Type_Info*, %Type_Info** %999, align 8
	%1001 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%1002 = icmp eq %Type_Info* %1000, %1001
	br i1 %1002, label %typeswitch.body-131, label %typeswitch.next-130

typeswitch.body-129:
	%1003 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%1004 = load %..rawptr, %..rawptr* %1003, align 8
	%1005 = bitcast %..rawptr %1004 to i32*
	%1006 = load i32, i32* %1005, align 4
	store i32 %1006, i32* %89
	; AssignStmt
	%1007 = load i32, i32* %89, align 4
	%1008 = sext i32 %1007 to i64
	store i64 %1008, i64* %83
	br label %typeswitch.done-134

typeswitch.next-130:
	%1009 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 1
	%1010 = load %Type_Info*, %Type_Info** %1009, align 8
	%1011 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%1012 = icmp eq %Type_Info* %1010, %1011
	br i1 %1012, label %typeswitch.body-133, label %typeswitch.next-132

typeswitch.body-131:
	%1013 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%1014 = load %..rawptr, %..rawptr* %1013, align 8
	%1015 = bitcast %..rawptr %1014 to i64*
	%1016 = load i64, i64* %1015, align 8
	store i64 %1016, i64* %90
	; AssignStmt
	%1017 = load i64, i64* %90, align 8
	%1018 = bitcast i64 %1017 to i64
	store i64 %1018, i64* %83
	br label %typeswitch.done-134

typeswitch.next-132:
	store %..any %944, %..any* %92
	%1019 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1b1, i64 0, i32 0), i64 46}, i64 895, i64 9, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$1b2, i64 0, i32 0), i64 9})
	%1020 = bitcast %Source_Code_Location* %93 to %..rawptr
	%1021 = call %..rawptr @__mem_zero(%..rawptr %1020, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %93
	store %Source_Code_Location %1019, %Source_Code_Location* %93
	call void @panic(%..string {i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__str$1b3, i64 0, i32 0), i64 22}, %Source_Code_Location* %93)
	br label %typeswitch.done-134

typeswitch.body-133:
	%1022 = getelementptr inbounds %..any, %..any* %81, i64 0, i32 0
	%1023 = load %..rawptr, %..rawptr* %1022, align 8
	%1024 = bitcast %..rawptr %1023 to i64*
	%1025 = load i64, i64* %1024, align 8
	store i64 %1025, i64* %91
	; AssignStmt
	%1026 = load i64, i64* %91, align 8
	store i64 %1026, i64* %83
	br label %typeswitch.done-134

typeswitch.done-134:
	; IfStmt
	; SelectorExpr
	%1027 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1028 = load %..rawptr, %..rawptr* %1027, align 8
	%1029 = icmp eq %..rawptr %1028, zeroinitializer
	%1030 = zext i1 %1029 to i8
	%1031 = trunc i8 %1030 to i1
	br i1 %1031, label %if.then-136, label %cmp.or-135

cmp.or-135:
	%1032 = load i64, i64* %83, align 8
	%1033 = icmp eq i64 %1032, 0
	%1034 = zext i1 %1033 to i8
	%1035 = trunc i8 %1034 to i1
	br i1 %1035, label %if.then-136, label %if.else-137

if.then-136:
	; SelectorExpr
	%1036 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1037 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1036, i64 0
	%1038 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1037, i64 0, i32 12
	%1039 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %1038, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %1039, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$1b4, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-138

if.else-137:
	; ti
	
	; IndexExpr
	; SelectorExpr
	%1040 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %79, i64 0, i32 0
	%1041 = load {%Type_Info**, i64}, {%Type_Info**, i64}* %1040, align 8
	%1042 = extractvalue {%Type_Info**, i64} %1041, 0
	%1043 = load i64, i64* %83, align 8
	%1044 = sub i64 %1043, 1
	%1045 = bitcast i64 %1044 to i64
	%1046 = extractvalue {%Type_Info**, i64} %1041, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1b5, i64 0, i32 0), i64 46}, i64 901, i64 24, i64 %1045, i64 %1046)
	%1047 = getelementptr inbounds %Type_Info*, %Type_Info** %1042, i64 %1045
	%1048 = load %Type_Info*, %Type_Info** %1047, align 8
	store %Type_Info* %1048, %Type_Info** %94
	%1049 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	; CompoundLit
	%1050 = bitcast %..any* %95 to %..rawptr
	%1051 = call %..rawptr @__mem_zero(%..rawptr %1050, i64 16)
	store %..any zeroinitializer, %..any* %95
	store %..any zeroinitializer, %..any* %95
	; SelectorExpr
	%1052 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1053 = load %..rawptr, %..rawptr* %1052, align 8
	%1054 = getelementptr inbounds %..any, %..any* %95, i64 0, i32 0
	store %..rawptr %1053, %..rawptr* %1054
	%1055 = load %Type_Info*, %Type_Info** %94, align 8
	%1056 = getelementptr inbounds %..any, %..any* %95, i64 0, i32 1
	store %Type_Info* %1055, %Type_Info** %1056
	%1057 = load %..any, %..any* %95, align 8
	%1058 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %1049, %..any %1057, i32 %1058, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-138

if.done-138:
	br label %typeswitch.done-146

typeswitch.next-139:
	%1059 = icmp eq i8 %119, 10
	br i1 %1059, label %typeswitch.body-142, label %typeswitch.next-141

typeswitch.body-140:
	%1060 = bitcast %..rawptr %120 to %Type_Info_Enum*
	%1061 = load %Type_Info_Enum, %Type_Info_Enum* %1060, align 8
	store %Type_Info_Enum %1061, %Type_Info_Enum* %96
	%1062 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1063 = load %..any, %..any* %1, align 8
	%1064 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_enum(%fmt-14.Fmt_Info* %1062, %..any %1063, i32 %1064, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-146

typeswitch.next-141:
	br label %typeswitch.done-146

typeswitch.body-142:
	%1065 = bitcast %..rawptr %120 to %Type_Info_Procedure*
	%1066 = load %Type_Info_Procedure, %Type_Info_Procedure* %1065, align 8
	store %Type_Info_Procedure %1066, %Type_Info_Procedure* %97
	; ptr
	
	; SelectorExpr
	%1067 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%1068 = load %..rawptr, %..rawptr* %1067, align 8
	%1069 = bitcast %..rawptr %1068 to %..rawptr*
	%1070 = getelementptr inbounds %..rawptr, %..rawptr* %1069, i64 0
	%1071 = load %..rawptr, %..rawptr* %1070, align 8
	store %..rawptr %1071, %..rawptr* %98
	; IfStmt
	%1072 = load %..rawptr, %..rawptr* %98, align 8
	%1073 = icmp eq %..rawptr %1072, zeroinitializer
	%1074 = zext i1 %1073 to i8
	%1075 = trunc i8 %1074 to i1
	br i1 %1075, label %if.then-143, label %if.else-144

if.then-143:
	; SelectorExpr
	%1076 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1077 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1076, i64 0
	%1078 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1077, i64 0, i32 12
	%1079 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %1078, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %1079, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$1b6, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-145

if.else-144:
	; SelectorExpr
	%1080 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1081 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1080, i64 0
	%1082 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1081, i64 0, i32 12
	%1083 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %1082, align 8
	; SelectorExpr
	%1084 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%1085 = load %Type_Info*, %Type_Info** %1084, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %1083, %Type_Info* %1085, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%1086 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1087 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1086, i64 0
	%1088 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %1087, i64 0, i32 12
	%1089 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %1088, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %1089, %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$1b7, i64 0, i32 0), i64 3}, %Context* noalias nonnull %__.context_ptr)
	%1090 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%1091 = load %..rawptr, %..rawptr* %98, align 8
	call void @fmt-14.fmt_pointer(%fmt-14.Fmt_Info* %1090, %..rawptr %1091, i32 112, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-145

if.done-145:
	br label %typeswitch.done-146

typeswitch.done-146:
	ret void
}

define void @fmt-14.fmt_complex(%fmt-14.Fmt_Info* %fi, %..complex128* %c, i64 %bits, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i32, align 16
	%3 = alloca double, align 16
	%4 = alloca double, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	%5 = load %..complex128, %..complex128* %c, align 8
	
	store i64 %bits, i64* %1
	
	store i32 %verb, i32* %2
	; SwitchStmt
	%6 = load i32, i32* %2, align 4
	%7 = icmp eq i32 %6, 102
	br i1 %7, label %switch.case.body-4, label %switch.case.next-1

switch.case.next-1:
	%8 = icmp eq i32 %6, 70
	br i1 %8, label %switch.case.body-4, label %switch.case.next-2

switch.case.next-2:
	%9 = icmp eq i32 %6, 118
	br i1 %9, label %switch.case.body-4, label %switch.case.next-3

switch.case.next-3:
	%10 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%11 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_bad_verb(%fmt-14.Fmt_Info* %10, i32 %11, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

switch.case.body-4:
	; r
	
	; i
	
	; real
	%12 = load %..complex128, %..complex128* %c, align 8
	%13 = extractvalue %..complex128 %12, 0
	; imag
	%14 = load %..complex128, %..complex128* %c, align 8
	%15 = extractvalue %..complex128 %14, 1
	store double %13, double* %3
	store double %15, double* %4
	%16 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%17 = load double, double* %3, align 8
	%18 = load i64, i64* %1, align 8
	%19 = sdiv i64 %18, 2
	%20 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_float(%fmt-14.Fmt_Info* %16, double %17, i64 %19, i32 %20, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%21 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%22 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %21, i64 0
	%23 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %22, i64 0, i32 1
	%24 = load i8, i8* %23, align 1
	%25 = trunc i8 %24 to i1
	br i1 %25, label %if.done-7, label %cmp.and-5

cmp.and-5:
	%26 = load double, double* %4, align 8
	%27 = fcmp oge double %26, 0x0000000000000000
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-6, label %if.done-7

if.then-6:
	; SelectorExpr
	%30 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%31 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %30, i64 0
	%32 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %31, i64 0, i32 12
	%33 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %32, align 8
	call void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %33, i32 43, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-7

if.done-7:
	%34 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%35 = load double, double* %4, align 8
	%36 = load i64, i64* %1, align 8
	%37 = sdiv i64 %36, 2
	%38 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_float(%fmt-14.Fmt_Info* %34, double %35, i64 %37, i32 %38, %Context* noalias nonnull %__.context_ptr)
	; SelectorExpr
	%39 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%40 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %39, i64 0
	%41 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %40, i64 0, i32 12
	%42 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %41, align 8
	call void @fmt-14.write_rune({i8*, i64, i64, %Allocator}* %42, i32 105, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %fi, %..any %arg, i32 %verb, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %fmt-14.Fmt_Info*, align 16
	%1 = alloca %..any, align 16
	%2 = alloca i32, align 16
	%3 = alloca %Type_Info*, align 16
	%4 = alloca %Type_Info*, align 16
	%5 = alloca %..any, align 16
	%6 = alloca i8, align 16
	%7 = alloca i8, align 16
	%8 = alloca i16, align 16
	%9 = alloca i32, align 16
	%10 = alloca i64, align 16
	%11 = alloca %..any, align 16
	%12 = alloca i32, align 16
	%13 = alloca float, align 16
	%14 = alloca double, align 16
	%15 = alloca %..complex64, align 16
	%16 = alloca %..complex128, align 16
	%17 = alloca %..complex128, align 16
	%18 = alloca %..complex128, align 16
	%19 = alloca %..complex128, align 16
	%20 = alloca i8, align 16
	%21 = alloca i8, align 16
	%22 = alloca i16, align 16
	%23 = alloca i16, align 16
	%24 = alloca i32, align 16
	%25 = alloca i32, align 16
	%26 = alloca i64, align 16
	%27 = alloca i64, align 16
	%28 = alloca i64, align 16
	%29 = alloca i64, align 16
	%30 = alloca i64, align 16
	%31 = alloca %..string, align 16
	%32 = alloca i8*, align 16
	%33 = alloca %..any, align 16
	
	store %fmt-14.Fmt_Info* %fi, %fmt-14.Fmt_Info** %0
	
	store %..any %arg, %..any* %1
	
	store i32 %verb, i32* %2
	; IfStmt
	%34 = load %..any, %..any* %1, align 8
	%35 = extractvalue %..any %34, 0
	%36 = extractvalue %..any %34, 1
	%37 = icmp eq %..rawptr %35, null
	%38 = bitcast %..rawptr null to %Type_Info*
	%39 = icmp eq %Type_Info* %36, %38
	%40 = zext i1 %37 to i8
	%41 = zext i1 %39 to i8
	%42 = or i8 %40, %41
	%43 = trunc i8 %42 to i1
	br i1 %43, label %if.then-1, label %if.done-2

if.then-1:
	; SelectorExpr
	%44 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%45 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %44, i64 0
	%46 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %45, i64 0, i32 12
	%47 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %46, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %47, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$1b8, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-2:
	; AssignStmt
	; SelectorExpr
	%48 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%49 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %48, i64 0
	%50 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %49, i64 0, i32 13
	%51 = load %..any, %..any* %1, align 8
	store %..any %51, %..any* %50
	; IfStmt
	%52 = load i32, i32* %2, align 4
	%53 = icmp eq i32 %52, 84
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-3, label %if.done-7

if.then-3:
	; ti
	
	; SelectorExpr
	%56 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%57 = load %Type_Info*, %Type_Info** %56, align 8
	store %Type_Info* %57, %Type_Info** %3
	; TypeSwitchStmt
	%58 = load %..any, %..any* %1, align 8
	%59 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 1
	%60 = load %Type_Info*, %Type_Info** %59, align 8
	%61 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%62 = icmp eq %Type_Info* %60, %61
	br i1 %62, label %typeswitch.body-5, label %typeswitch.next-4

typeswitch.next-4:
	br label %typeswitch.done-6

typeswitch.body-5:
	%63 = getelementptr inbounds %..any, %..any* %1, i64 0, i32 0
	%64 = load %..rawptr, %..rawptr* %63, align 8
	%65 = bitcast %..rawptr %64 to %Type_Info**
	%66 = load %Type_Info*, %Type_Info** %65, align 8
	store %Type_Info* %66, %Type_Info** %4
	; AssignStmt
	%67 = load %Type_Info*, %Type_Info** %4, align 8
	store %Type_Info* %67, %Type_Info** %3
	br label %typeswitch.done-6

typeswitch.done-6:
	; SelectorExpr
	%68 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%69 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %68, i64 0
	%70 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %69, i64 0, i32 12
	%71 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %70, align 8
	%72 = load %Type_Info*, %Type_Info** %3, align 8
	call void @fmt-14.write_type({i8*, i64, i64, %Allocator}* %71, %Type_Info* %72, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-7:
	; base_arg
	
	%73 = load %..any, %..any* %1, align 8
	store %..any %73, %..any* %5
	; AssignStmt
	; SelectorExpr
	%74 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	; SelectorExpr
	%75 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%76 = load %Type_Info*, %Type_Info** %75, align 8
	%77 = call %Type_Info* @type_info_base(%Type_Info* %76, %Context* noalias nonnull %__.context_ptr)
	store %Type_Info* %77, %Type_Info** %74
	; TypeSwitchStmt
	%78 = load %..any, %..any* %5, align 8
	%79 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%80 = load %Type_Info*, %Type_Info** %79, align 8
	%81 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%82 = icmp eq %Type_Info* %80, %81
	br i1 %82, label %typeswitch.body-9, label %typeswitch.next-8

typeswitch.next-8:
	%83 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%84 = load %Type_Info*, %Type_Info** %83, align 8
	%85 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 77
	%86 = icmp eq %Type_Info* %84, %85
	br i1 %86, label %typeswitch.body-11, label %typeswitch.next-10

typeswitch.body-9:
	%87 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%88 = load %..rawptr, %..rawptr* %87, align 8
	%89 = bitcast %..rawptr %88 to i8*
	%90 = load i8, i8* %89, align 1
	store i8 %90, i8* %6
	%91 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%92 = load i8, i8* %6, align 1
	%93 = load i32, i32* %2, align 4
	%94 = trunc i8 %92 to i1
	call void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %91, i1 %94, i32 %93, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-10:
	%95 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%96 = load %Type_Info*, %Type_Info** %95, align 8
	%97 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 78
	%98 = icmp eq %Type_Info* %96, %97
	br i1 %98, label %typeswitch.body-13, label %typeswitch.next-12

typeswitch.body-11:
	%99 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%100 = load %..rawptr, %..rawptr* %99, align 8
	%101 = bitcast %..rawptr %100 to i8*
	%102 = load i8, i8* %101, align 1
	store i8 %102, i8* %7
	%103 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%104 = load i8, i8* %7, align 1
	%105 = icmp ne i8 %104, 0
	%106 = zext i1 %105 to i8
	%107 = load i32, i32* %2, align 4
	%108 = trunc i8 %106 to i1
	call void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %103, i1 %108, i32 %107, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-12:
	%109 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%110 = load %Type_Info*, %Type_Info** %109, align 8
	%111 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 79
	%112 = icmp eq %Type_Info* %110, %111
	br i1 %112, label %typeswitch.body-15, label %typeswitch.next-14

typeswitch.body-13:
	%113 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%114 = load %..rawptr, %..rawptr* %113, align 8
	%115 = bitcast %..rawptr %114 to i16*
	%116 = load i16, i16* %115, align 2
	store i16 %116, i16* %8
	%117 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%118 = load i16, i16* %8, align 2
	%119 = icmp ne i16 %118, 0
	%120 = zext i1 %119 to i8
	%121 = load i32, i32* %2, align 4
	%122 = trunc i8 %120 to i1
	call void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %117, i1 %122, i32 %121, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-14:
	%123 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%124 = load %Type_Info*, %Type_Info** %123, align 8
	%125 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 80
	%126 = icmp eq %Type_Info* %124, %125
	br i1 %126, label %typeswitch.body-17, label %typeswitch.next-16

typeswitch.body-15:
	%127 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%128 = load %..rawptr, %..rawptr* %127, align 8
	%129 = bitcast %..rawptr %128 to i32*
	%130 = load i32, i32* %129, align 4
	store i32 %130, i32* %9
	%131 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%132 = load i32, i32* %9, align 4
	%133 = icmp ne i32 %132, 0
	%134 = zext i1 %133 to i8
	%135 = load i32, i32* %2, align 4
	%136 = trunc i8 %134 to i1
	call void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %131, i1 %136, i32 %135, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-16:
	%137 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%138 = load %Type_Info*, %Type_Info** %137, align 8
	%139 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	%140 = icmp eq %Type_Info* %138, %139
	br i1 %140, label %typeswitch.body-19, label %typeswitch.next-18

typeswitch.body-17:
	%141 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%142 = load %..rawptr, %..rawptr* %141, align 8
	%143 = bitcast %..rawptr %142 to i64*
	%144 = load i64, i64* %143, align 8
	store i64 %144, i64* %10
	%145 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%146 = load i64, i64* %10, align 8
	%147 = icmp ne i64 %146, 0
	%148 = zext i1 %147 to i8
	%149 = load i32, i32* %2, align 4
	%150 = trunc i8 %148 to i1
	call void @fmt-14.fmt_bool(%fmt-14.Fmt_Info* %145, i1 %150, i32 %149, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-18:
	%151 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%152 = load %Type_Info*, %Type_Info** %151, align 8
	%153 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	%154 = icmp eq %Type_Info* %152, %153
	br i1 %154, label %typeswitch.body-21, label %typeswitch.next-20

typeswitch.body-19:
	%155 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%156 = load %..rawptr, %..rawptr* %155, align 8
	%157 = bitcast %..rawptr %156 to %..any*
	%158 = load %..any, %..any* %157, align 8
	store %..any %158, %..any* %11
	%159 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%160 = load %..any, %..any* %11, align 8
	%161 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %159, %..any %160, i32 %161, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-20:
	%162 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%163 = load %Type_Info*, %Type_Info** %162, align 8
	%164 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 62
	%165 = icmp eq %Type_Info* %163, %164
	br i1 %165, label %typeswitch.body-23, label %typeswitch.next-22

typeswitch.body-21:
	%166 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%167 = load %..rawptr, %..rawptr* %166, align 8
	%168 = bitcast %..rawptr %167 to i32*
	%169 = load i32, i32* %168, align 4
	store i32 %169, i32* %12
	%170 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%171 = load i32, i32* %12, align 4
	%172 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_rune(%fmt-14.Fmt_Info* %170, i32 %171, i32 %172, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-22:
	%173 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%174 = load %Type_Info*, %Type_Info** %173, align 8
	%175 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 63
	%176 = icmp eq %Type_Info* %174, %175
	br i1 %176, label %typeswitch.body-25, label %typeswitch.next-24

typeswitch.body-23:
	%177 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%178 = load %..rawptr, %..rawptr* %177, align 8
	%179 = bitcast %..rawptr %178 to float*
	%180 = load float, float* %179, align 4
	store float %180, float* %13
	%181 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%182 = load float, float* %13, align 4
	%183 = fpext float %182 to double
	%184 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_float(%fmt-14.Fmt_Info* %181, double %183, i64 32, i32 %184, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-24:
	%185 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%186 = load %Type_Info*, %Type_Info** %185, align 8
	%187 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 81
	%188 = icmp eq %Type_Info* %186, %187
	br i1 %188, label %typeswitch.body-27, label %typeswitch.next-26

typeswitch.body-25:
	%189 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%190 = load %..rawptr, %..rawptr* %189, align 8
	%191 = bitcast %..rawptr %190 to double*
	%192 = load double, double* %191, align 8
	store double %192, double* %14
	%193 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%194 = load double, double* %14, align 8
	%195 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_float(%fmt-14.Fmt_Info* %193, double %194, i64 64, i32 %195, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-26:
	%196 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%197 = load %Type_Info*, %Type_Info** %196, align 8
	%198 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 82
	%199 = icmp eq %Type_Info* %197, %198
	br i1 %199, label %typeswitch.body-29, label %typeswitch.next-28

typeswitch.body-27:
	%200 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%201 = load %..rawptr, %..rawptr* %200, align 8
	%202 = bitcast %..rawptr %201 to %..complex64*
	%203 = load %..complex64, %..complex64* %202, align 4
	store %..complex64 %203, %..complex64* %15
	%204 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%205 = load %..complex64, %..complex64* %15, align 4
	%206 = bitcast %..complex128* %16 to %..rawptr
	%207 = call %..rawptr @__mem_zero(%..rawptr %206, i64 16)
	store %..complex128 zeroinitializer, %..complex128* %16
	%208 = extractvalue %..complex64 %205, 0
	%209 = fpext float %208 to double
	%210 = extractvalue %..complex64 %205, 1
	%211 = fpext float %210 to double
	%212 = getelementptr inbounds %..complex128, %..complex128* %16, i64 0, i32 0
	store double %209, double* %212
	%213 = getelementptr inbounds %..complex128, %..complex128* %16, i64 0, i32 1
	store double %211, double* %213
	%214 = load %..complex128, %..complex128* %16, align 8
	%215 = load i32, i32* %2, align 4
	%216 = bitcast %..complex128* %17 to %..rawptr
	%217 = call %..rawptr @__mem_zero(%..rawptr %216, i64 16)
	store %..complex128 zeroinitializer, %..complex128* %17
	store %..complex128 %214, %..complex128* %17
	call void @fmt-14.fmt_complex(%fmt-14.Fmt_Info* %204, %..complex128* %17, i64 64, i32 %215, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-28:
	%218 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%219 = load %Type_Info*, %Type_Info** %218, align 8
	%220 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%221 = icmp eq %Type_Info* %219, %220
	br i1 %221, label %typeswitch.body-31, label %typeswitch.next-30

typeswitch.body-29:
	%222 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%223 = load %..rawptr, %..rawptr* %222, align 8
	%224 = bitcast %..rawptr %223 to %..complex128*
	%225 = load %..complex128, %..complex128* %224, align 8
	store %..complex128 %225, %..complex128* %18
	%226 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%227 = load %..complex128, %..complex128* %18, align 8
	%228 = load i32, i32* %2, align 4
	%229 = bitcast %..complex128* %19 to %..rawptr
	%230 = call %..rawptr @__mem_zero(%..rawptr %229, i64 16)
	store %..complex128 zeroinitializer, %..complex128* %19
	store %..complex128 %227, %..complex128* %19
	call void @fmt-14.fmt_complex(%fmt-14.Fmt_Info* %226, %..complex128* %19, i64 128, i32 %228, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-30:
	%231 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%232 = load %Type_Info*, %Type_Info** %231, align 8
	%233 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%234 = icmp eq %Type_Info* %232, %233
	br i1 %234, label %typeswitch.body-33, label %typeswitch.next-32

typeswitch.body-31:
	%235 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%236 = load %..rawptr, %..rawptr* %235, align 8
	%237 = bitcast %..rawptr %236 to i8*
	%238 = load i8, i8* %237, align 1
	store i8 %238, i8* %20
	%239 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%240 = load i8, i8* %20, align 1
	%241 = sext i8 %240 to i64
	%242 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %239, i64 %241, i1 true, i64 8, i32 %242, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-32:
	%243 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%244 = load %Type_Info*, %Type_Info** %243, align 8
	%245 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%246 = icmp eq %Type_Info* %244, %245
	br i1 %246, label %typeswitch.body-35, label %typeswitch.next-34

typeswitch.body-33:
	%247 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%248 = load %..rawptr, %..rawptr* %247, align 8
	%249 = bitcast %..rawptr %248 to i8*
	%250 = load i8, i8* %249, align 1
	store i8 %250, i8* %21
	%251 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%252 = load i8, i8* %21, align 1
	%253 = zext i8 %252 to i64
	%254 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %251, i64 %253, i1 false, i64 8, i32 %254, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-34:
	%255 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%256 = load %Type_Info*, %Type_Info** %255, align 8
	%257 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%258 = icmp eq %Type_Info* %256, %257
	br i1 %258, label %typeswitch.body-37, label %typeswitch.next-36

typeswitch.body-35:
	%259 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%260 = load %..rawptr, %..rawptr* %259, align 8
	%261 = bitcast %..rawptr %260 to i16*
	%262 = load i16, i16* %261, align 2
	store i16 %262, i16* %22
	%263 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%264 = load i16, i16* %22, align 2
	%265 = sext i16 %264 to i64
	%266 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %263, i64 %265, i1 true, i64 16, i32 %266, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-36:
	%267 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%268 = load %Type_Info*, %Type_Info** %267, align 8
	%269 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%270 = icmp eq %Type_Info* %268, %269
	br i1 %270, label %typeswitch.body-39, label %typeswitch.next-38

typeswitch.body-37:
	%271 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%272 = load %..rawptr, %..rawptr* %271, align 8
	%273 = bitcast %..rawptr %272 to i16*
	%274 = load i16, i16* %273, align 2
	store i16 %274, i16* %23
	%275 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%276 = load i16, i16* %23, align 2
	%277 = zext i16 %276 to i64
	%278 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %275, i64 %277, i1 false, i64 16, i32 %278, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-38:
	%279 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%280 = load %Type_Info*, %Type_Info** %279, align 8
	%281 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%282 = icmp eq %Type_Info* %280, %281
	br i1 %282, label %typeswitch.body-41, label %typeswitch.next-40

typeswitch.body-39:
	%283 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%284 = load %..rawptr, %..rawptr* %283, align 8
	%285 = bitcast %..rawptr %284 to i32*
	%286 = load i32, i32* %285, align 4
	store i32 %286, i32* %24
	%287 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%288 = load i32, i32* %24, align 4
	%289 = sext i32 %288 to i64
	%290 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %287, i64 %289, i1 true, i64 32, i32 %290, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-40:
	%291 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%292 = load %Type_Info*, %Type_Info** %291, align 8
	%293 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%294 = icmp eq %Type_Info* %292, %293
	br i1 %294, label %typeswitch.body-43, label %typeswitch.next-42

typeswitch.body-41:
	%295 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%296 = load %..rawptr, %..rawptr* %295, align 8
	%297 = bitcast %..rawptr %296 to i32*
	%298 = load i32, i32* %297, align 4
	store i32 %298, i32* %25
	%299 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%300 = load i32, i32* %25, align 4
	%301 = zext i32 %300 to i64
	%302 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %299, i64 %301, i1 false, i64 32, i32 %302, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-42:
	%303 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%304 = load %Type_Info*, %Type_Info** %303, align 8
	%305 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%306 = icmp eq %Type_Info* %304, %305
	br i1 %306, label %typeswitch.body-45, label %typeswitch.next-44

typeswitch.body-43:
	%307 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%308 = load %..rawptr, %..rawptr* %307, align 8
	%309 = bitcast %..rawptr %308 to i64*
	%310 = load i64, i64* %309, align 8
	store i64 %310, i64* %26
	%311 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%312 = load i64, i64* %26, align 8
	%313 = bitcast i64 %312 to i64
	%314 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %311, i64 %313, i1 true, i64 64, i32 %314, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-44:
	%315 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%316 = load %Type_Info*, %Type_Info** %315, align 8
	%317 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%318 = icmp eq %Type_Info* %316, %317
	br i1 %318, label %typeswitch.body-47, label %typeswitch.next-46

typeswitch.body-45:
	%319 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%320 = load %..rawptr, %..rawptr* %319, align 8
	%321 = bitcast %..rawptr %320 to i64*
	%322 = load i64, i64* %321, align 8
	store i64 %322, i64* %27
	%323 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%324 = load i64, i64* %27, align 8
	%325 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %323, i64 %324, i1 false, i64 64, i32 %325, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-46:
	%326 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%327 = load %Type_Info*, %Type_Info** %326, align 8
	%328 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%329 = icmp eq %Type_Info* %327, %328
	br i1 %329, label %typeswitch.body-49, label %typeswitch.next-48

typeswitch.body-47:
	%330 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%331 = load %..rawptr, %..rawptr* %330, align 8
	%332 = bitcast %..rawptr %331 to i64*
	%333 = load i64, i64* %332, align 8
	store i64 %333, i64* %28
	%334 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%335 = load i64, i64* %28, align 8
	%336 = bitcast i64 %335 to i64
	%337 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %334, i64 %336, i1 true, i64 64, i32 %337, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-48:
	%338 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%339 = load %Type_Info*, %Type_Info** %338, align 8
	%340 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%341 = icmp eq %Type_Info* %339, %340
	br i1 %341, label %typeswitch.body-51, label %typeswitch.next-50

typeswitch.body-49:
	%342 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%343 = load %..rawptr, %..rawptr* %342, align 8
	%344 = bitcast %..rawptr %343 to i64*
	%345 = load i64, i64* %344, align 8
	store i64 %345, i64* %29
	%346 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%347 = load i64, i64* %29, align 8
	%348 = bitcast i64 %347 to i64
	%349 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %346, i64 %348, i1 false, i64 64, i32 %349, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-50:
	%350 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%351 = load %Type_Info*, %Type_Info** %350, align 8
	%352 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%353 = icmp eq %Type_Info* %351, %352
	br i1 %353, label %typeswitch.body-53, label %typeswitch.next-52

typeswitch.body-51:
	%354 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%355 = load %..rawptr, %..rawptr* %354, align 8
	%356 = bitcast %..rawptr %355 to i64*
	%357 = load i64, i64* %356, align 8
	store i64 %357, i64* %30
	%358 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%359 = load i64, i64* %30, align 8
	%360 = bitcast i64 %359 to i64
	%361 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_int(%fmt-14.Fmt_Info* %358, i64 %360, i1 false, i64 64, i32 %361, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-52:
	%362 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 1
	%363 = load %Type_Info*, %Type_Info** %362, align 8
	%364 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 83
	%365 = icmp eq %Type_Info* %363, %364
	br i1 %365, label %typeswitch.body-55, label %typeswitch.next-54

typeswitch.body-53:
	%366 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%367 = load %..rawptr, %..rawptr* %366, align 8
	%368 = bitcast %..rawptr %367 to %..string*
	%369 = load %..string, %..string* %368, align 8
	store %..string %369, %..string* %31
	%370 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%371 = load %..string, %..string* %31, align 8
	%372 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_string(%fmt-14.Fmt_Info* %370, %..string %371, i32 %372, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.next-54:
	store %..any %78, %..any* %33
	%373 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%374 = load %..any, %..any* %1, align 8
	%375 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_value(%fmt-14.Fmt_Info* %373, %..any %374, i32 %375, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.body-55:
	%376 = getelementptr inbounds %..any, %..any* %5, i64 0, i32 0
	%377 = load %..rawptr, %..rawptr* %376, align 8
	%378 = bitcast %..rawptr %377 to i8**
	%379 = load i8*, i8** %378, align 8
	store i8* %379, i8** %32
	%380 = load %fmt-14.Fmt_Info*, %fmt-14.Fmt_Info** %0, align 8
	%381 = load i8*, i8** %32, align 8
	%382 = load i32, i32* %2, align 4
	call void @fmt-14.fmt_cstring(%fmt-14.Fmt_Info* %380, i8* %381, i32 %382, %Context* noalias nonnull %__.context_ptr)
	br label %typeswitch.done-56

typeswitch.done-56:
	ret void
}

define %..string @fmt-14.sbprintf({i8*, i64, i64, %Allocator}* %b, %..string %fmt, {%..any*, i64}* %args, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca %fmt-14.Fmt_Info, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i8, align 16
	%6 = alloca i64, align 16
	%7 = alloca %fmt-14.Fmt_Info, align 16
	%8 = alloca i64, align 16
	%9 = alloca %..string, align 16
	%10 = alloca {%..any*, i64}, align 16
	%11 = alloca {%..any*, i64}, align 16
	%12 = alloca i32, align 16
	%13 = alloca i64, align 16
	%14 = alloca %..string, align 16
	%15 = alloca %..any, align 16
	%16 = alloca i64, align 16
	%17 = alloca {%..any*, i64}, align 16
	%18 = alloca i64, align 16
	%19 = alloca i64, align 16
	%20 = alloca {i8*, i64, i64, %Allocator}, align 16
	
	store {i8*, i64, i64, %Allocator}* %b, {i8*, i64, i64, %Allocator}** %0
	
	store %..string %fmt, %..string* %1
	%21 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	; fi
	%22 = bitcast %fmt-14.Fmt_Info* %2 to %..rawptr
	%23 = call %..rawptr @__mem_zero(%..rawptr %22, i64 64)
	store %fmt-14.Fmt_Info zeroinitializer, %fmt-14.Fmt_Info* %2
	
	; arg_index
	
	store i64 0, i64* %3
	; end
	
	%24 = load %..string, %..string* %1, align 8
	%25 = extractvalue %..string %24, 1
	store i64 %25, i64* %4
	; was_prev_index
	
	store i8 0, i8* %5
	; ForStmt
	; i
	
	store i64 0, i64* %6
	br label %for.loop-1

for.loop-1:
	%26 = load i64, i64* %6, align 8
	%27 = load i64, i64* %4, align 8
	%28 = icmp slt i64 %26, %27
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	br i1 %30, label %for.body-2, label %for.done-62

for.body-2:
	; AssignStmt
	; CompoundLit
	%31 = bitcast %fmt-14.Fmt_Info* %7 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 64)
	store %fmt-14.Fmt_Info zeroinitializer, %fmt-14.Fmt_Info* %7
	store %fmt-14.Fmt_Info {i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i8 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer, i8 1, {i8*, i64, i64, %Allocator}* zeroinitializer, %..any zeroinitializer}, %fmt-14.Fmt_Info* %7
	%33 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%34 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %7, i64 0, i32 12
	store {i8*, i64, i64, %Allocator}* %33, {i8*, i64, i64, %Allocator}** %34
	%35 = load %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %7, align 8
	store %fmt-14.Fmt_Info %35, %fmt-14.Fmt_Info* %2
	; prev_i
	
	%36 = load i64, i64* %6, align 8
	store i64 %36, i64* %8
	; ForStmt
	br label %for.loop-3

for.loop-3:
	%37 = load i64, i64* %6, align 8
	%38 = load i64, i64* %4, align 8
	%39 = icmp slt i64 %37, %38
	%40 = zext i1 %39 to i8
	%41 = trunc i8 %40 to i1
	br i1 %41, label %cmp.and-4, label %for.done-6

cmp.and-4:
	; IndexExpr
	%42 = load %..string, %..string* %1, align 8
	%43 = extractvalue %..string %42, 0
	%44 = extractvalue %..string %42, 1
	%45 = load i64, i64* %6, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1b9, i64 0, i32 0), i64 46}, i64 1034, i64 22, i64 %45, i64 %44)
	%46 = getelementptr inbounds i8, i8* %43, i64 %45
	%47 = load i8, i8* %46, align 1
	%48 = icmp ne i8 %47, 37
	%49 = zext i1 %48 to i8
	%50 = trunc i8 %49 to i1
	br i1 %50, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	%51 = load i64, i64* %6, align 8
	%52 = add i64 %51, 1
	store i64 %52, i64* %6
	br label %for.loop-3

for.done-6:
	; IfStmt
	%53 = load i64, i64* %6, align 8
	%54 = load i64, i64* %8, align 8
	%55 = icmp sgt i64 %53, %54
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-7, label %if.done-8

if.then-7:
	%58 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	; SliceExpr
	%59 = load i64, i64* %8, align 8
	%60 = load i64, i64* %6, align 8
	%61 = load %..string, %..string* %1, align 8
	%62 = extractvalue %..string %61, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1ba, i64 0, i32 0), i64 46}, i64 1038, i64 23, i64 %59, i64 %60, i64 %62)
	%63 = extractvalue %..string %61, 0
	%64 = getelementptr inbounds i8, i8* %63, i64 %59
	%65 = sub i64 %60, %59
	%66 = bitcast %..string* %9 to %..rawptr
	%67 = call %..rawptr @__mem_zero(%..rawptr %66, i64 16)
	store %..string zeroinitializer, %..string* %9
	%68 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 0
	store i8* %64, i8** %68
	%69 = getelementptr inbounds %..string, %..string* %9, i64 0, i32 1
	store i64 %65, i64* %69
	%70 = load %..string, %..string* %9, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %58, %..string %70, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-8

if.done-8:
	; IfStmt
	%71 = load i64, i64* %6, align 8
	%72 = load i64, i64* %4, align 8
	%73 = icmp sge i64 %71, %72
	%74 = zext i1 %73 to i8
	%75 = trunc i8 %74 to i1
	br i1 %75, label %if.then-9, label %if.done-10

if.then-9:
	; break
	br label %for.done-62

if.done-10:
	; AssignStmt
	%76 = load i64, i64* %6, align 8
	%77 = add i64 %76, 1
	store i64 %77, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%78 = load i64, i64* %6, align 8
	%79 = load i64, i64* %4, align 8
	%80 = icmp slt i64 %78, %79
	%81 = zext i1 %80 to i8
	%82 = trunc i8 %81 to i1
	br i1 %82, label %for.body-12, label %for.done-24

for.body-12:
	; SwitchStmt
	; IndexExpr
	%83 = load %..string, %..string* %1, align 8
	%84 = extractvalue %..string %83, 0
	%85 = extractvalue %..string %83, 1
	%86 = load i64, i64* %6, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1bb, i64 0, i32 0), i64 46}, i64 1048, i64 15, i64 %86, i64 %85)
	%87 = getelementptr inbounds i8, i8* %84, i64 %86
	%88 = load i8, i8* %87, align 1
	%89 = icmp eq i8 %88, 43
	br i1 %89, label %switch.case.body-14, label %switch.case.next-13

switch.case.next-13:
	%90 = icmp eq i8 %88, 45
	br i1 %90, label %switch.fall.body-16, label %switch.case.next-15

switch.case.body-14:
	; AssignStmt
	; SelectorExpr
	%91 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 1
	store i8 1, i8* %91
	br label %switch.done-23

switch.case.next-15:
	%92 = icmp eq i8 %88, 32
	br i1 %92, label %switch.fall.body-18, label %switch.case.next-17

switch.fall.body-16:
	; AssignStmt
	; SelectorExpr
	%93 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 0
	store i8 1, i8* %93
	; AssignStmt
	; SelectorExpr
	%94 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 3
	store i8 0, i8* %94
	br label %switch.done-23

switch.case.next-17:
	%95 = icmp eq i8 %88, 35
	br i1 %95, label %switch.fall.body-20, label %switch.case.next-19

switch.fall.body-18:
	; AssignStmt
	; SelectorExpr
	%96 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 2
	store i8 1, i8* %96
	br label %switch.done-23

switch.case.next-19:
	%97 = icmp eq i8 %88, 48
	br i1 %97, label %switch.fall.body-22, label %switch.case.next-21

switch.fall.body-20:
	; AssignStmt
	; SelectorExpr
	%98 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 4
	store i8 1, i8* %98
	br label %switch.done-23

switch.case.next-21:
	; break
	br label %for.done-24

switch.fall.body-22:
	; AssignStmt
	; SelectorExpr
	%99 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 3
	; SelectorExpr
	%100 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 0
	%101 = load i8, i8* %100, align 1
	%102 = xor i8 -1, %101
	store i8 %102, i8* %99
	br label %switch.done-23

switch.done-23:
	; AssignStmt
	%103 = load i64, i64* %6, align 8
	%104 = add i64 %103, 1
	store i64 %104, i64* %6
	br label %for.loop-11

for.done-24:
	; AssignStmt
	%105 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0
	%106 = load i64, i64* %3, align 8
	%107 = load %..string, %..string* %1, align 8
	%108 = load i64, i64* %6, align 8
	%109 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%110 = extractvalue {%..any*, i64} %109, 1
	%111 = call {i64, i64, i8} @fmt-14._arg_number(%fmt-14.Fmt_Info* %105, i64 %106, %..string %107, i64 %108, i64 %110, %Context* noalias nonnull %__.context_ptr)
	%112 = extractvalue {i64, i64, i8} %111, 0
	%113 = extractvalue {i64, i64, i8} %111, 1
	%114 = extractvalue {i64, i64, i8} %111, 2
	store i64 %112, i64* %3
	store i64 %113, i64* %6
	store i8 %114, i8* %5
	; IfStmt
	%115 = load i64, i64* %6, align 8
	%116 = load i64, i64* %4, align 8
	%117 = icmp slt i64 %115, %116
	%118 = zext i1 %117 to i8
	%119 = trunc i8 %118 to i1
	br i1 %119, label %cmp.and-25, label %if.else-31

cmp.and-25:
	; IndexExpr
	%120 = load %..string, %..string* %1, align 8
	%121 = extractvalue %..string %120, 0
	%122 = extractvalue %..string %120, 1
	%123 = load i64, i64* %6, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1bc, i64 0, i32 0), i64 46}, i64 1068, i64 21, i64 %123, i64 %122)
	%124 = getelementptr inbounds i8, i8* %121, i64 %123
	%125 = load i8, i8* %124, align 1
	%126 = icmp eq i8 %125, 42
	%127 = zext i1 %126 to i8
	%128 = trunc i8 %127 to i1
	br i1 %128, label %if.then-26, label %if.else-31

if.then-26:
	; AssignStmt
	%129 = load i64, i64* %6, align 8
	%130 = add i64 %129, 1
	store i64 %130, i64* %6
	; AssignStmt
	; SelectorExpr
	%131 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 7
	; SelectorExpr
	%132 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 5
	%133 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%134 = load i64, i64* %3, align 8
	%135 = bitcast {%..any*, i64}* %10 to %..rawptr
	%136 = call %..rawptr @__mem_zero(%..rawptr %135, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %10
	store {%..any*, i64} %133, {%..any*, i64}* %10
	%137 = call {i64, i64, i8} @fmt-14.int_from_arg({%..any*, i64}* %10, i64 %134, %Context* noalias nonnull %__.context_ptr)
	%138 = extractvalue {i64, i64, i8} %137, 0
	%139 = extractvalue {i64, i64, i8} %137, 1
	%140 = extractvalue {i64, i64, i8} %137, 2
	store i64 %138, i64* %131
	store i64 %139, i64* %3
	store i8 %140, i8* %132
	; IfStmt
	; SelectorExpr
	%141 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 5
	%142 = load i8, i8* %141, align 1
	%143 = trunc i8 %142 to i1
	br i1 %143, label %if.done-28, label %if.then-27

if.then-27:
	%144 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %144, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$1bd, i64 0, i32 0), i64 13}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-28

if.done-28:
	; IfStmt
	; SelectorExpr
	%145 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 7
	%146 = load i64, i64* %145, align 8
	%147 = icmp slt i64 %146, 0
	%148 = zext i1 %147 to i8
	%149 = trunc i8 %148 to i1
	br i1 %149, label %if.then-29, label %if.done-30

if.then-29:
	; AssignStmt
	; SelectorExpr
	%150 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 7
	; SelectorExpr
	%151 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 7
	%152 = load i64, i64* %151, align 8
	%153 = sub i64 0, %152
	store i64 %153, i64* %150
	; AssignStmt
	; SelectorExpr
	%154 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 0
	store i8 1, i8* %154
	; AssignStmt
	; SelectorExpr
	%155 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 3
	store i8 0, i8* %155
	br label %if.done-30

if.done-30:
	; AssignStmt
	store i8 0, i8* %5
	br label %if.done-35

if.else-31:
	; AssignStmt
	; SelectorExpr
	%156 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 7
	; SelectorExpr
	%157 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 5
	%158 = load %..string, %..string* %1, align 8
	%159 = load i64, i64* %6, align 8
	%160 = call {i64, i64, i8} @fmt-14._parse_int(%..string %158, i64 %159, %Context* noalias nonnull %__.context_ptr)
	%161 = extractvalue {i64, i64, i8} %160, 0
	%162 = extractvalue {i64, i64, i8} %160, 1
	%163 = extractvalue {i64, i64, i8} %160, 2
	store i64 %161, i64* %156
	store i64 %162, i64* %6
	store i8 %163, i8* %157
	; IfStmt
	%164 = load i8, i8* %5, align 1
	%165 = trunc i8 %164 to i1
	br i1 %165, label %cmp.and-32, label %if.done-34

cmp.and-32:
	; SelectorExpr
	%166 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 5
	%167 = load i8, i8* %166, align 1
	%168 = trunc i8 %167 to i1
	br i1 %168, label %if.then-33, label %if.done-34

if.then-33:
	; AssignStmt
	; SelectorExpr
	%169 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 11
	store i8 0, i8* %169
	br label %if.done-34

if.done-34:
	br label %if.done-35

if.done-35:
	; IfStmt
	%170 = load i64, i64* %6, align 8
	%171 = load i64, i64* %4, align 8
	%172 = icmp slt i64 %170, %171
	%173 = zext i1 %172 to i8
	%174 = trunc i8 %173 to i1
	br i1 %174, label %cmp.and-36, label %if.done-50

cmp.and-36:
	; IndexExpr
	%175 = load %..string, %..string* %1, align 8
	%176 = extractvalue %..string %175, 0
	%177 = extractvalue %..string %175, 1
	%178 = load i64, i64* %6, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1be, i64 0, i32 0), i64 46}, i64 1089, i64 21, i64 %178, i64 %177)
	%179 = getelementptr inbounds i8, i8* %176, i64 %178
	%180 = load i8, i8* %179, align 1
	%181 = icmp eq i8 %180, 46
	%182 = zext i1 %181 to i8
	%183 = trunc i8 %182 to i1
	br i1 %183, label %if.then-37, label %if.done-50

if.then-37:
	; AssignStmt
	%184 = load i64, i64* %6, align 8
	%185 = add i64 %184, 1
	store i64 %185, i64* %6
	; IfStmt
	%186 = load i8, i8* %5, align 1
	%187 = trunc i8 %186 to i1
	br i1 %187, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	; SelectorExpr
	%188 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 11
	store i8 0, i8* %188
	br label %if.done-39

if.done-39:
	; IfStmt
	%189 = load i64, i64* %6, align 8
	%190 = load i64, i64* %4, align 8
	%191 = icmp slt i64 %189, %190
	%192 = zext i1 %191 to i8
	%193 = trunc i8 %192 to i1
	br i1 %193, label %cmp.and-40, label %if.else-46

cmp.and-40:
	; IndexExpr
	%194 = load %..string, %..string* %1, align 8
	%195 = extractvalue %..string %194, 0
	%196 = extractvalue %..string %194, 1
	%197 = load i64, i64* %6, align 8
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1bf, i64 0, i32 0), i64 46}, i64 1094, i64 22, i64 %197, i64 %196)
	%198 = getelementptr inbounds i8, i8* %195, i64 %197
	%199 = load i8, i8* %198, align 1
	%200 = icmp eq i8 %199, 42
	%201 = zext i1 %200 to i8
	%202 = trunc i8 %201 to i1
	br i1 %202, label %if.then-41, label %if.else-46

if.then-41:
	; AssignStmt
	%203 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0
	%204 = load i64, i64* %3, align 8
	%205 = load %..string, %..string* %1, align 8
	%206 = load i64, i64* %6, align 8
	%207 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%208 = extractvalue {%..any*, i64} %207, 1
	%209 = call {i64, i64, i8} @fmt-14._arg_number(%fmt-14.Fmt_Info* %203, i64 %204, %..string %205, i64 %206, i64 %208, %Context* noalias nonnull %__.context_ptr)
	%210 = extractvalue {i64, i64, i8} %209, 0
	%211 = extractvalue {i64, i64, i8} %209, 1
	%212 = extractvalue {i64, i64, i8} %209, 2
	store i64 %210, i64* %3
	store i64 %211, i64* %6
	store i8 %212, i8* %5
	; AssignStmt
	%213 = load i64, i64* %6, align 8
	%214 = add i64 %213, 1
	store i64 %214, i64* %6
	; AssignStmt
	; SelectorExpr
	%215 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 8
	; SelectorExpr
	%216 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 6
	%217 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%218 = load i64, i64* %3, align 8
	%219 = bitcast {%..any*, i64}* %11 to %..rawptr
	%220 = call %..rawptr @__mem_zero(%..rawptr %219, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %11
	store {%..any*, i64} %217, {%..any*, i64}* %11
	%221 = call {i64, i64, i8} @fmt-14.int_from_arg({%..any*, i64}* %11, i64 %218, %Context* noalias nonnull %__.context_ptr)
	%222 = extractvalue {i64, i64, i8} %221, 0
	%223 = extractvalue {i64, i64, i8} %221, 1
	%224 = extractvalue {i64, i64, i8} %221, 2
	store i64 %222, i64* %215
	store i64 %223, i64* %3
	store i8 %224, i8* %216
	; IfStmt
	; SelectorExpr
	%225 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 8
	%226 = load i64, i64* %225, align 8
	%227 = icmp slt i64 %226, 0
	%228 = zext i1 %227 to i8
	%229 = trunc i8 %228 to i1
	br i1 %229, label %if.then-42, label %if.done-43

if.then-42:
	; AssignStmt
	; SelectorExpr
	%230 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 8
	store i64 0, i64* %230
	; AssignStmt
	; SelectorExpr
	%231 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 6
	store i8 0, i8* %231
	br label %if.done-43

if.done-43:
	; IfStmt
	; SelectorExpr
	%232 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 6
	%233 = load i8, i8* %232, align 1
	%234 = trunc i8 %233 to i1
	br i1 %234, label %if.done-45, label %if.then-44

if.then-44:
	; SelectorExpr
	%235 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 12
	%236 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %235, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %236, %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$1c0, i64 0, i32 0), i64 17}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-45

if.done-45:
	; AssignStmt
	store i8 0, i8* %5
	br label %if.done-49

if.else-46:
	; AssignStmt
	; SelectorExpr
	%237 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 8
	; SelectorExpr
	%238 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 6
	%239 = load %..string, %..string* %1, align 8
	%240 = load i64, i64* %6, align 8
	%241 = call {i64, i64, i8} @fmt-14._parse_int(%..string %239, i64 %240, %Context* noalias nonnull %__.context_ptr)
	%242 = extractvalue {i64, i64, i8} %241, 0
	%243 = extractvalue {i64, i64, i8} %241, 1
	%244 = extractvalue {i64, i64, i8} %241, 2
	store i64 %242, i64* %237
	store i64 %243, i64* %6
	store i8 %244, i8* %238
	; IfStmt
	; SelectorExpr
	%245 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 6
	%246 = load i8, i8* %245, align 1
	%247 = trunc i8 %246 to i1
	br i1 %247, label %if.done-48, label %if.then-47

if.then-47:
	br label %if.done-48

if.done-48:
	br label %if.done-49

if.done-49:
	br label %if.done-50

if.done-50:
	; IfStmt
	%248 = load i8, i8* %5, align 1
	%249 = trunc i8 %248 to i1
	br i1 %249, label %if.done-52, label %if.then-51

if.then-51:
	; AssignStmt
	%250 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0
	%251 = load i64, i64* %3, align 8
	%252 = load %..string, %..string* %1, align 8
	%253 = load i64, i64* %6, align 8
	%254 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%255 = extractvalue {%..any*, i64} %254, 1
	%256 = call {i64, i64, i8} @fmt-14._arg_number(%fmt-14.Fmt_Info* %250, i64 %251, %..string %252, i64 %253, i64 %255, %Context* noalias nonnull %__.context_ptr)
	%257 = extractvalue {i64, i64, i8} %256, 0
	%258 = extractvalue {i64, i64, i8} %256, 1
	%259 = extractvalue {i64, i64, i8} %256, 2
	store i64 %257, i64* %3
	store i64 %258, i64* %6
	store i8 %259, i8* %5
	br label %if.done-52

if.done-52:
	; IfStmt
	%260 = load i64, i64* %6, align 8
	%261 = load i64, i64* %4, align 8
	%262 = icmp sge i64 %260, %261
	%263 = zext i1 %262 to i8
	%264 = trunc i8 %263 to i1
	br i1 %264, label %if.then-53, label %if.done-54

if.then-53:
	%265 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %265, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$1c1, i64 0, i32 0), i64 11}, %Context* noalias nonnull %__.context_ptr)
	; break
	br label %for.done-62

if.done-54:
	; verb
	
	; w
	
	; SelectorExpr
	; SliceExpr
	%266 = load i64, i64* %6, align 8
	%267 = load %..string, %..string* %1, align 8
	%268 = extractvalue %..string %267, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1c2, i64 0, i32 0), i64 46}, i64 1124, i64 46, i64 %266, i64 %268, i64 %268)
	%269 = extractvalue %..string %267, 0
	%270 = getelementptr inbounds i8, i8* %269, i64 %266
	%271 = sub i64 %268, %266
	%272 = bitcast %..string* %14 to %..rawptr
	%273 = call %..rawptr @__mem_zero(%..rawptr %272, i64 16)
	store %..string zeroinitializer, %..string* %14
	%274 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 0
	store i8* %270, i8** %274
	%275 = getelementptr inbounds %..string, %..string* %14, i64 0, i32 1
	store i64 %271, i64* %275
	%276 = load %..string, %..string* %14, align 8
	%277 = call {i32, i64} @utf8-4.decode_rune_from_string(%..string %276, %Context* noalias nonnull %__.context_ptr)
	%278 = extractvalue {i32, i64} %277, 0
	%279 = extractvalue {i32, i64} %277, 1
	store i32 %278, i32* %12
	store i64 %279, i64* %13
	; AssignStmt
	%280 = load i64, i64* %13, align 8
	%281 = load i64, i64* %6, align 8
	%282 = add i64 %281, %280
	store i64 %282, i64* %6
	; SwitchStmt
	%283 = load i32, i32* %12, align 4
	%284 = icmp eq i32 %283, 37
	%285 = zext i1 %284 to i8
	%286 = icmp eq i8 1, %285
	br i1 %286, label %switch.case.body-56, label %switch.case.next-55

switch.case.next-55:
	; SelectorExpr
	%287 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 11
	%288 = load i8, i8* %287, align 1
	%289 = xor i8 -1, %288
	%290 = icmp eq i8 1, %289
	br i1 %290, label %switch.fall.body-58, label %switch.case.next-57

switch.case.body-56:
	%291 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_byte({i8*, i64, i64, %Allocator}* %291, i8 37, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-61

switch.case.next-57:
	%292 = load i64, i64* %3, align 8
	%293 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%294 = extractvalue {%..any*, i64} %293, 1
	%295 = icmp sge i64 %292, %294
	%296 = zext i1 %295 to i8
	%297 = icmp eq i8 1, %296
	br i1 %297, label %switch.fall.body-60, label %switch.case.next-59

switch.fall.body-58:
	%298 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %298, %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__str$1c3, i64 0, i32 0), i64 23}, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-61

switch.case.next-59:
	%299 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0
	; IndexExpr
	%300 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%301 = extractvalue {%..any*, i64} %300, 0
	%302 = load i64, i64* %3, align 8
	%303 = extractvalue {%..any*, i64} %300, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1c4, i64 0, i32 0), i64 46}, i64 1135, i64 22, i64 %302, i64 %303)
	%304 = getelementptr inbounds %..any, %..any* %301, i64 %302
	%305 = load %..any, %..any* %304, align 8
	%306 = load i32, i32* %12, align 4
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %299, %..any %305, i32 %306, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%307 = load i64, i64* %3, align 8
	%308 = add i64 %307, 1
	store i64 %308, i64* %3
	br label %switch.done-61

switch.fall.body-60:
	%309 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %309, %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$1c5, i64 0, i32 0), i64 20}, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-61

switch.done-61:
	br label %for.loop-1

for.done-62:
	; IfStmt
	; SelectorExpr
	%310 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0, i32 10
	%311 = load i8, i8* %310, align 1
	%312 = trunc i8 %311 to i1
	br i1 %312, label %if.done-73, label %cmp.and-63

cmp.and-63:
	%313 = load i64, i64* %3, align 8
	%314 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%315 = extractvalue {%..any*, i64} %314, 1
	%316 = icmp slt i64 %313, %315
	%317 = zext i1 %316 to i8
	%318 = trunc i8 %317 to i1
	br i1 %318, label %if.then-64, label %if.done-73

if.then-64:
	%319 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %319, %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$1c6, i64 0, i32 0), i64 9}, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; arg
	%320 = bitcast %..any* %15 to %..rawptr
	%321 = call %..rawptr @__mem_zero(%..rawptr %320, i64 16)
	store %..any zeroinitializer, %..any* %15
	
	; index
	%322 = bitcast i64* %16 to %..rawptr
	%323 = call %..rawptr @__mem_zero(%..rawptr %322, i64 8)
	store i64 zeroinitializer, i64* %16
	
	; SliceExpr
	%324 = load i64, i64* %3, align 8
	%325 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%326 = extractvalue {%..any*, i64} %325, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1c7, i64 0, i32 0), i64 46}, i64 1142, i64 25, i64 %324, i64 %326, i64 %326)
	%327 = extractvalue {%..any*, i64} %325, 0
	%328 = getelementptr inbounds %..any, %..any* %327, i64 %324
	%329 = sub i64 %326, %324
	%330 = bitcast {%..any*, i64}* %17 to %..rawptr
	%331 = call %..rawptr @__mem_zero(%..rawptr %330, i64 16)
	store {%..any*, i64} zeroinitializer, {%..any*, i64}* %17
	%332 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %17, i64 0, i32 0
	store %..any* %328, %..any** %332
	%333 = getelementptr inbounds {%..any*, i64}, {%..any*, i64}* %17, i64 0, i32 1
	store i64 %329, i64* %333
	%334 = load {%..any*, i64}, {%..any*, i64}* %17, align 8
	%335 = bitcast i64* %18 to %..rawptr
	%336 = call %..rawptr @__mem_zero(%..rawptr %335, i64 8)
	store i64 zeroinitializer, i64* %18
	%337 = extractvalue {%..any*, i64} %334, 1
	store i64 %337, i64* %18
	%338 = bitcast i64* %19 to %..rawptr
	%339 = call %..rawptr @__mem_zero(%..rawptr %338, i64 8)
	store i64 zeroinitializer, i64* %19
	store i64 -1, i64* %19
	br label %for.index.loop-65

for.index.loop-65:
	%340 = load i64, i64* %19, align 8
	%341 = add i64 %340, 1
	store i64 %341, i64* %19
	%342 = load i64, i64* %18, align 8
	%343 = icmp slt i64 %341, %342
	br i1 %343, label %for.index.body-66, label %for.index.done-72

for.index.body-66:
	%344 = load i64, i64* %19, align 8
	%345 = extractvalue {%..any*, i64} %334, 0
	%346 = getelementptr inbounds %..any, %..any* %345, i64 %344
	%347 = load %..any, %..any* %346, align 8
	store %..any %347, %..any* %15
	store i64 %344, i64* %16
	; IfStmt
	%348 = load i64, i64* %16, align 8
	%349 = icmp sgt i64 %348, 0
	%350 = zext i1 %349 to i8
	%351 = trunc i8 %350 to i1
	br i1 %351, label %if.then-67, label %if.done-68

if.then-67:
	%352 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %352, %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$1c8, i64 0, i32 0), i64 2}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-68

if.done-68:
	; IfStmt
	%353 = load %..any, %..any* %15, align 8
	%354 = extractvalue %..any %353, 0
	%355 = extractvalue %..any %353, 1
	%356 = icmp eq %..rawptr %354, null
	%357 = bitcast %..rawptr null to %Type_Info*
	%358 = icmp eq %Type_Info* %355, %357
	%359 = zext i1 %356 to i8
	%360 = zext i1 %358 to i8
	%361 = or i8 %359, %360
	%362 = trunc i8 %361 to i1
	br i1 %362, label %if.then-69, label %if.else-70

if.then-69:
	%363 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %363, %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$1c9, i64 0, i32 0), i64 5}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-71

if.else-70:
	%364 = getelementptr inbounds %fmt-14.Fmt_Info, %fmt-14.Fmt_Info* %2, i64 0
	; IndexExpr
	%365 = load {%..any*, i64}, {%..any*, i64}* %args, align 8
	%366 = extractvalue {%..any*, i64} %365, 0
	%367 = load i64, i64* %16, align 8
	%368 = extractvalue {%..any*, i64} %365, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([47 x i8], [47 x i8]* @__str$1ca, i64 0, i32 0), i64 46}, i64 1146, i64 39, i64 %367, i64 %368)
	%369 = getelementptr inbounds %..any, %..any* %366, i64 %367
	%370 = load %..any, %..any* %369, align 8
	call void @fmt-14.fmt_arg(%fmt-14.Fmt_Info* %364, %..any %370, i32 118, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-71

if.done-71:
	br label %for.index.loop-65

for.index.done-72:
	%371 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	call void @fmt-14.write_string({i8*, i64, i64, %Allocator}* %371, %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$1cb, i64 0, i32 0), i64 1}, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-73

if.done-73:
	; ReturnStmt
	%372 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%373 = getelementptr inbounds {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %372, i64 0
	%374 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %373, align 8
	%375 = bitcast {i8*, i64, i64, %Allocator}* %20 to %..rawptr
	%376 = call %..rawptr @__mem_zero(%..rawptr %375, i64 40)
	store {i8*, i64, i64, %Allocator} zeroinitializer, {i8*, i64, i64, %Allocator}* %20
	store {i8*, i64, i64, %Allocator} %374, {i8*, i64, i64, %Allocator}* %20
	%377 = call %..string @fmt-14.to_string({i8*, i64, i64, %Allocator}* %20, %Context* noalias nonnull %__.context_ptr)
	ret %..string %377
}

define i8 @types-15.is_any(%Type_Info* %info, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %Type_Info*, align 16
	%3 = alloca {%Type_Info_Any, i8}, align 16
	
	store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	
	; SelectorExpr
	%8 = load %Type_Info*, %Type_Info** %0, align 8
	%9 = call %Type_Info* @type_info_base(%Type_Info* %8, %Context* noalias nonnull %__.context_ptr)
	%10 = bitcast %Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %2
	store %Type_Info* %9, %Type_Info** %2
	%12 = load %Type_Info*, %Type_Info** %2, align 8
	%13 = getelementptr inbounds %Type_Info, %Type_Info* %12, i64 0
	%14 = getelementptr inbounds %Type_Info, %Type_Info* %13, i64 0, i32 2
	%15 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%Type_Info_Any, i8}* %3 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 1)
	store {%Type_Info_Any, i8} zeroinitializer, {%Type_Info_Any, i8}* %3
	%18 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i8, i8* %18, align 1
	%20 = icmp eq i8 %19, 8
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%Type_Info_Any, i8}, {%Type_Info_Any, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%Type_Info_Any, i8}, {%Type_Info_Any, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %14 to %Type_Info_Any*
	%24 = load %Type_Info_Any, %Type_Info_Any* %23, align 1
	store %Type_Info_Any %24, %Type_Info_Any* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%Type_Info_Any, i8}, {%Type_Info_Any, i8}* %3, align 1
	%26 = extractvalue {%Type_Info_Any, i8} %25, 0
	%27 = extractvalue {%Type_Info_Any, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define i8 @types-15.is_string(%Type_Info* %info, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %Type_Info*, align 16
	%1 = alloca i8, align 16
	%2 = alloca %Type_Info*, align 16
	%3 = alloca {%Type_Info_String, i8}, align 16
	
	store %Type_Info* %info, %Type_Info** %0
	; IfStmt
	%4 = load %Type_Info*, %Type_Info** %0, align 8
	%5 = icmp eq %Type_Info* %4, zeroinitializer
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; ok
	
	; SelectorExpr
	%8 = load %Type_Info*, %Type_Info** %0, align 8
	%9 = call %Type_Info* @type_info_base(%Type_Info* %8, %Context* noalias nonnull %__.context_ptr)
	%10 = bitcast %Type_Info** %2 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 8)
	store %Type_Info* zeroinitializer, %Type_Info** %2
	store %Type_Info* %9, %Type_Info** %2
	%12 = load %Type_Info*, %Type_Info** %2, align 8
	%13 = getelementptr inbounds %Type_Info, %Type_Info* %12, i64 0
	%14 = getelementptr inbounds %Type_Info, %Type_Info* %13, i64 0, i32 2
	%15 = load {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %14, align 8
	; cast - union_cast
	%16 = bitcast {%Type_Info_String, i8}* %3 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 2)
	store {%Type_Info_String, i8} zeroinitializer, {%Type_Info_String, i8}* %3
	%18 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %14, i64 0, i32 2 ; UnionTagPtr
	%19 = load i8, i8* %18, align 1
	%20 = icmp eq i8 %19, 6
	br i1 %20, label %union_cast.ok-3, label %union_cast.end-4

union_cast.ok-3:
	%21 = getelementptr inbounds {%Type_Info_String, i8}, {%Type_Info_String, i8}* %3, i64 0, i32 0
	%22 = getelementptr inbounds {%Type_Info_String, i8}, {%Type_Info_String, i8}* %3, i64 0, i32 1
	%23 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %14 to %Type_Info_String*
	%24 = load %Type_Info_String, %Type_Info_String* %23, align 1
	store %Type_Info_String %24, %Type_Info_String* %21
	store i8 1, i8* %22
	br label %union_cast.end-4

union_cast.end-4:
	%25 = load {%Type_Info_String, i8}, {%Type_Info_String, i8}* %3, align 1
	%26 = extractvalue {%Type_Info_String, i8} %25, 0
	%27 = extractvalue {%Type_Info_String, i8} %25, 1
	store i8 %27, i8* %1
	; ReturnStmt
	%28 = load i8, i8* %1, align 1
	ret i8 %28
}

define %..string @strconv-16.append_float({i8*, i64}* %buf, double %f, i8 %fmt, i64 %prec, i64 %bit_size, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca {i8*, i64}, align 16
	%5 = alloca %..string, align 16
	%6 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	
	store double %f, double* %0
	
	store i8 %fmt, i8* %1
	
	store i64 %prec, i64* %2
	
	store i64 %bit_size, i64* %3
	; ReturnStmt
	%7 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%8 = load double, double* %0, align 8
	%9 = load i8, i8* %1, align 1
	%10 = load i64, i64* %2, align 8
	%11 = load i64, i64* %3, align 8
	%12 = bitcast {i8*, i64}* %4 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %4
	store {i8*, i64} %7, {i8*, i64}* %4
	%14 = call {i8*, i64} @strconv-16.generic_ftoa({i8*, i64}* %4, double %8, i8 %9, i64 %10, i64 %11, %Context* noalias nonnull %__.context_ptr)
	%15 = extractvalue {i8*, i64} %14, 0
	%16 = extractvalue {i8*, i64} %14, 1
	%17 = bitcast %..string* %5 to %..rawptr
	%18 = call %..rawptr @__mem_zero(%..rawptr %17, i64 16)
	store %..string zeroinitializer, %..string* %5
	%19 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 0
	store i8* %15, i8** %19
	%20 = getelementptr inbounds %..string, %..string* %5, i64 0, i32 1
	store i64 %16, i64* %20
	%21 = load %..string, %..string* %5, align 8
	ret %..string %21
}

define {i8*, i64} @strconv-16.generic_ftoa({i8*, i64}* %buf, double %val, i8 %fmt, i64 %prec, i64 %bit_size, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca double, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca %strconv-16.FloatInfo*, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca i8, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	%10 = alloca %..string, align 16
	%11 = alloca i64, align 16
	%12 = alloca i8*, align 16
	%13 = alloca {i8*, i64}, align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca %decimal-17.Decimal, align 16
	%18 = alloca %decimal-17.Decimal*, align 16
	%19 = alloca %strconv-16.DecimalSlice, align 16
	%20 = alloca i8, align 16
	%21 = alloca %strconv-16.DecimalSlice, align 16
	%22 = alloca {i8*, i64}, align 16
	%23 = alloca %strconv-16.DecimalSlice, align 16
	%24 = alloca {i8*, i64}, align 16
	%25 = alloca {i8*, i64}, align 16
	%26 = alloca %strconv-16.DecimalSlice, align 16
	%27 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	
	store double %val, double* %0
	
	store i8 %fmt, i8* %1
	
	store i64 %prec, i64* %2
	
	store i64 %bit_size, i64* %3
	; bits
	%28 = bitcast i64* %4 to %..rawptr
	%29 = call %..rawptr @__mem_zero(%..rawptr %28, i64 8)
	store i64 zeroinitializer, i64* %4
	
	; flt
	%30 = bitcast %strconv-16.FloatInfo** %5 to %..rawptr
	%31 = call %..rawptr @__mem_zero(%..rawptr %30, i64 8)
	store %strconv-16.FloatInfo* zeroinitializer, %strconv-16.FloatInfo** %5
	
	; SwitchStmt
	%32 = load i64, i64* %3, align 8
	%33 = icmp eq i64 %32, 32
	br i1 %33, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%34 = icmp eq i64 %32, 64
	br i1 %34, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	; AssignStmt
	%35 = load double, double* %0, align 8
	%36 = fptrunc double %35 to float
	%37 = bitcast float %36 to i32
	%38 = zext i32 %37 to i64
	store i64 %38, i64* %4
	; AssignStmt
	%39 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* @strconv-16._f32_info, i64 0
	store %strconv-16.FloatInfo* %39, %strconv-16.FloatInfo** %5
	br label %switch.done-5

switch.case.next-3:
	%40 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1cc, i64 0, i32 0), i64 50}, i64 243, i64 3, %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$1cd, i64 0, i32 0), i64 12})
	%41 = bitcast %Source_Code_Location* %6 to %..rawptr
	%42 = call %..rawptr @__mem_zero(%..rawptr %41, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %40, %Source_Code_Location* %6
	call void @panic(%..string {i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__str$1ce, i64 0, i32 0), i64 25}, %Source_Code_Location* %6)
	br label %switch.done-5

switch.fall.body-4:
	; AssignStmt
	%43 = load double, double* %0, align 8
	%44 = bitcast double %43 to i64
	store i64 %44, i64* %4
	; AssignStmt
	%45 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* @strconv-16._f64_info, i64 0
	store %strconv-16.FloatInfo* %45, %strconv-16.FloatInfo** %5
	br label %switch.done-5

switch.done-5:
	; neg
	
	%46 = load i64, i64* %4, align 8
	; SelectorExpr
	%47 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%48 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %47, i64 0
	%49 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %48, i64 0, i32 1
	%50 = load i64, i64* %49, align 8
	; SelectorExpr
	%51 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%52 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %51, i64 0
	%53 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %52, i64 0, i32 0
	%54 = load i64, i64* %53, align 8
	%55 = add i64 %50, %54
	%56 = bitcast i64 %55 to i64
	%57 = lshr i64 %46, %56
	%58 = icmp ne i64 %57, 0
	%59 = zext i1 %58 to i8
	store i8 %59, i8* %7
	; exp
	
	%60 = load i64, i64* %4, align 8
	; SelectorExpr
	%61 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%62 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %61, i64 0
	%63 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %62, i64 0, i32 0
	%64 = load i64, i64* %63, align 8
	%65 = bitcast i64 %64 to i64
	%66 = lshr i64 %60, %65
	%67 = bitcast i64 %66 to i64
	; SelectorExpr
	%68 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%69 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %68, i64 0
	%70 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %69, i64 0, i32 1
	%71 = load i64, i64* %70, align 8
	%72 = bitcast i64 %71 to i64
	%73 = shl i64 1, %72
	%74 = sub i64 %73, 1
	%75 = and i64 %67, %74
	store i64 %75, i64* %8
	; mant
	
	%76 = load i64, i64* %4, align 8
	; SelectorExpr
	%77 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%78 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %77, i64 0
	%79 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %78, i64 0, i32 0
	%80 = load i64, i64* %79, align 8
	%81 = bitcast i64 %80 to i64
	%82 = shl i64 1, %81
	%83 = sub i64 %82, 1
	%84 = and i64 %76, %83
	store i64 %84, i64* %9
	; SwitchStmt
	%85 = load i64, i64* %8, align 8
	; SelectorExpr
	%86 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%87 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %86, i64 0
	%88 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %87, i64 0, i32 1
	%89 = load i64, i64* %88, align 8
	%90 = bitcast i64 %89 to i64
	%91 = shl i64 1, %90
	%92 = sub i64 %91, 1
	%93 = icmp eq i64 %85, %92
	br i1 %93, label %switch.case.body-7, label %switch.case.next-6

switch.case.next-6:
	%94 = icmp eq i64 %85, 0
	br i1 %94, label %switch.fall.body-15, label %switch.case.next-14

switch.case.body-7:
	; s
	%95 = bitcast %..string* %10 to %..rawptr
	%96 = call %..rawptr @__mem_zero(%..rawptr %95, i64 16)
	store %..string zeroinitializer, %..string* %10
	
	; IfStmt
	%97 = load i64, i64* %9, align 8
	%98 = icmp ne i64 %97, 0
	%99 = zext i1 %98 to i8
	%100 = trunc i8 %99 to i1
	br i1 %100, label %if.then-8, label %if.else-9

if.then-8:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$1cf, i64 0, i32 0), i64 3}, %..string* %10
	br label %if.done-13

if.else-9:
	; IfStmt
	%101 = load i8, i8* %7, align 1
	%102 = trunc i8 %101 to i1
	br i1 %102, label %if.then-10, label %if.else-11

if.then-10:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$1d0, i64 0, i32 0), i64 4}, %..string* %10
	br label %if.done-12

if.else-11:
	; AssignStmt
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$1d1, i64 0, i32 0), i64 4}, %..string* %10
	br label %if.done-12

if.done-12:
	br label %if.done-13

if.done-13:
	; n
	
	%103 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%104 = load %..string, %..string* %10, align 8
	%105 = extractvalue %..string %104, 0
	%106 = bitcast i8** %12 to %..rawptr
	%107 = call %..rawptr @__mem_zero(%..rawptr %106, i64 8)
	store i8* zeroinitializer, i8** %12
	store i8* %105, i8** %12
	%108 = extractvalue %..string %104, 1
	%109 = sub i64 %108, 0
	%110 = load i8*, i8** %12, align 8
	%111 = getelementptr inbounds i8, i8* %110, i64 0
	%112 = bitcast {i8*, i64}* %13 to %..rawptr
	%113 = call %..rawptr @__mem_zero(%..rawptr %112, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %13
	%114 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 0
	store i8* %111, i8** %114
	%115 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 1
	store i64 %109, i64* %115
	%116 = load {i8*, i64}, {i8*, i64}* %13, align 8
	%117 = bitcast {i8*, i64}* %14 to %..rawptr
	%118 = call %..rawptr @__mem_zero(%..rawptr %117, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %103, {i8*, i64}* %14
	%119 = bitcast {i8*, i64}* %15 to %..rawptr
	%120 = call %..rawptr @__mem_zero(%..rawptr %119, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	store {i8*, i64} %116, {i8*, i64}* %15
	%121 = call i64 @_preload-0.copy-4790({i8*, i64}* %14, {i8*, i64}* %15)
	store i64 %121, i64* %11
	; ReturnStmt
	; SliceExpr
	%122 = load i64, i64* %11, align 8
	%123 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%124 = extractvalue {i8*, i64} %123, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d2, i64 0, i32 0), i64 50}, i64 261, i64 13, i64 0, i64 %122, i64 %124)
	%125 = extractvalue {i8*, i64} %123, 0
	%126 = getelementptr inbounds i8, i8* %125, i64 0
	%127 = sub i64 %122, 0
	%128 = bitcast {i8*, i64}* %16 to %..rawptr
	%129 = call %..rawptr @__mem_zero(%..rawptr %128, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%130 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %126, i8** %130
	%131 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %127, i64* %131
	%132 = load {i8*, i64}, {i8*, i64}* %16, align 8
	ret {i8*, i64} %132

switch.case.next-14:
	; AssignStmt
	; SelectorExpr
	%133 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%134 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %133, i64 0
	%135 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %134, i64 0, i32 0
	%136 = load i64, i64* %135, align 8
	%137 = bitcast i64 %136 to i64
	%138 = shl i64 1, %137
	%139 = load i64, i64* %9, align 8
	%140 = or i64 %139, %138
	store i64 %140, i64* %9
	br label %switch.done-16

switch.fall.body-15:
	; AssignStmt
	%141 = load i64, i64* %8, align 8
	%142 = add i64 %141, 1
	store i64 %142, i64* %8
	br label %switch.done-16

switch.done-16:
	; AssignStmt
	; SelectorExpr
	%143 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%144 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %143, i64 0
	%145 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %144, i64 0, i32 2
	%146 = load i64, i64* %145, align 8
	%147 = load i64, i64* %8, align 8
	%148 = add i64 %147, %146
	store i64 %148, i64* %8
	; d_
	%149 = bitcast %decimal-17.Decimal* %17 to %..rawptr
	%150 = call %..rawptr @__mem_zero(%..rawptr %149, i64 408)
	store %decimal-17.Decimal zeroinitializer, %decimal-17.Decimal* %17
	
	; d
	
	%151 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %17, i64 0
	store %decimal-17.Decimal* %151, %decimal-17.Decimal** %18
	%152 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%153 = load i64, i64* %9, align 8
	call void @decimal-17.assign(%decimal-17.Decimal* %152, i64 %153, %Context* noalias nonnull %__.context_ptr)
	%154 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%155 = load i64, i64* %8, align 8
	; SelectorExpr
	%156 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	%157 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %156, i64 0
	%158 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %157, i64 0, i32 0
	%159 = load i64, i64* %158, align 8
	%160 = bitcast i64 %159 to i64
	%161 = sub i64 %155, %160
	call void @decimal-17.shift(%decimal-17.Decimal* %154, i64 %161, %Context* noalias nonnull %__.context_ptr)
	; digs
	%162 = bitcast %strconv-16.DecimalSlice* %19 to %..rawptr
	%163 = call %..rawptr @__mem_zero(%..rawptr %162, i64 40)
	store %strconv-16.DecimalSlice zeroinitializer, %strconv-16.DecimalSlice* %19
	
	; shortest
	
	%164 = load i64, i64* %2, align 8
	%165 = icmp slt i64 %164, 0
	%166 = zext i1 %165 to i8
	store i8 %166, i8* %20
	; IfStmt
	%167 = load i8, i8* %20, align 1
	%168 = trunc i8 %167 to i1
	br i1 %168, label %if.then-17, label %if.else-28

if.then-17:
	%169 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%170 = load i64, i64* %9, align 8
	%171 = load i64, i64* %8, align 8
	%172 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %5, align 8
	call void @strconv-16.round_shortest(%decimal-17.Decimal* %169, i64 %170, i64 %171, %strconv-16.FloatInfo* %172, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	; CompoundLit
	%173 = bitcast %strconv-16.DecimalSlice* %21 to %..rawptr
	%174 = call %..rawptr @__mem_zero(%..rawptr %173, i64 40)
	store %strconv-16.DecimalSlice zeroinitializer, %strconv-16.DecimalSlice* %21
	store %strconv-16.DecimalSlice {{i8*, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer}, %strconv-16.DecimalSlice* %21
	; SliceExpr
	; SelectorExpr
	%175 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%176 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %175, i64 0
	%177 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %176, i64 0, i32 0
	%178 = load [384 x i8], [384 x i8]* %177, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d3, i64 0, i32 0), i64 50}, i64 280, i64 40, i64 0, i64 384, i64 384)
	%179 = getelementptr inbounds [384 x i8], [384 x i8]* %177, i64 0, i32 0
	%180 = getelementptr inbounds i8, i8* %179, i64 0
	%181 = sub i64 384, 0
	%182 = bitcast {i8*, i64}* %22 to %..rawptr
	%183 = call %..rawptr @__mem_zero(%..rawptr %182, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %22
	%184 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %22, i64 0, i32 0
	store i8* %180, i8** %184
	%185 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %22, i64 0, i32 1
	store i64 %181, i64* %185
	%186 = load {i8*, i64}, {i8*, i64}* %22, align 8
	%187 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %21, i64 0, i32 0
	store {i8*, i64} %186, {i8*, i64}* %187
	; SelectorExpr
	%188 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%189 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %188, i64 0
	%190 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %189, i64 0, i32 1
	%191 = load i64, i64* %190, align 8
	%192 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %21, i64 0, i32 1
	store i64 %191, i64* %192
	; SelectorExpr
	%193 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%194 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %193, i64 0
	%195 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %194, i64 0, i32 2
	%196 = load i64, i64* %195, align 8
	%197 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %21, i64 0, i32 2
	store i64 %196, i64* %197
	%198 = load %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %21, align 8
	store %strconv-16.DecimalSlice %198, %strconv-16.DecimalSlice* %19
	; SwitchStmt
	%199 = load i8, i8* %1, align 1
	%200 = icmp eq i8 %199, 101
	br i1 %200, label %switch.case.body-20, label %switch.case.next-18

switch.case.next-18:
	%201 = icmp eq i8 %199, 69
	br i1 %201, label %switch.case.body-20, label %switch.case.next-19

switch.case.next-19:
	%202 = icmp eq i8 %199, 102
	br i1 %202, label %switch.fall.body-23, label %switch.case.next-21

switch.case.body-20:
	; AssignStmt
	; SelectorExpr
	%203 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %19, i64 0, i32 1
	%204 = load i64, i64* %203, align 8
	%205 = sub i64 %204, 1
	store i64 %205, i64* %2
	br label %switch.done-27

switch.case.next-21:
	%206 = icmp eq i8 %199, 70
	br i1 %206, label %switch.fall.body-23, label %switch.case.next-22

switch.case.next-22:
	%207 = icmp eq i8 %199, 103
	br i1 %207, label %switch.fall.body-26, label %switch.case.next-24

switch.fall.body-23:
	; AssignStmt
	; max
	; SelectorExpr
	%208 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %19, i64 0, i32 1
	%209 = load i64, i64* %208, align 8
	; SelectorExpr
	%210 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %19, i64 0, i32 2
	%211 = load i64, i64* %210, align 8
	%212 = sub i64 %209, %211
	%213 = icmp sgt i64 %212, 0
	%214 = select i1 %213, i64 %212, i64 0
	store i64 %214, i64* %2
	br label %switch.done-27

switch.case.next-24:
	%215 = icmp eq i8 %199, 71
	br i1 %215, label %switch.fall.body-26, label %switch.case.next-25

switch.case.next-25:
	br label %switch.done-27

switch.fall.body-26:
	; AssignStmt
	; SelectorExpr
	%216 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %19, i64 0, i32 1
	%217 = load i64, i64* %216, align 8
	store i64 %217, i64* %2
	br label %switch.done-27

switch.done-27:
	br label %if.done-41

if.else-28:
	; SwitchStmt
	%218 = load i8, i8* %1, align 1
	%219 = icmp eq i8 %218, 101
	br i1 %219, label %switch.case.body-31, label %switch.case.next-29

switch.case.next-29:
	%220 = icmp eq i8 %218, 69
	br i1 %220, label %switch.case.body-31, label %switch.case.next-30

switch.case.next-30:
	%221 = icmp eq i8 %218, 102
	br i1 %221, label %switch.fall.body-34, label %switch.case.next-32

switch.case.body-31:
	%222 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%223 = load i64, i64* %2, align 8
	%224 = add i64 %223, 1
	call void @decimal-17.round(%decimal-17.Decimal* %222, i64 %224, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-40

switch.case.next-32:
	%225 = icmp eq i8 %218, 70
	br i1 %225, label %switch.fall.body-34, label %switch.case.next-33

switch.case.next-33:
	%226 = icmp eq i8 %218, 103
	br i1 %226, label %switch.fall.body-37, label %switch.case.next-35

switch.fall.body-34:
	%227 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	; SelectorExpr
	%228 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%229 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %228, i64 0
	%230 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %229, i64 0, i32 2
	%231 = load i64, i64* %230, align 8
	%232 = load i64, i64* %2, align 8
	%233 = add i64 %231, %232
	call void @decimal-17.round(%decimal-17.Decimal* %227, i64 %233, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-40

switch.case.next-35:
	%234 = icmp eq i8 %218, 71
	br i1 %234, label %switch.fall.body-37, label %switch.case.next-36

switch.case.next-36:
	br label %switch.done-40

switch.fall.body-37:
	; IfStmt
	%235 = load i64, i64* %2, align 8
	%236 = icmp eq i64 %235, 0
	%237 = zext i1 %236 to i8
	%238 = trunc i8 %237 to i1
	br i1 %238, label %if.then-38, label %if.done-39

if.then-38:
	; AssignStmt
	store i64 1, i64* %2
	br label %if.done-39

if.done-39:
	%239 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%240 = load i64, i64* %2, align 8
	call void @decimal-17.round(%decimal-17.Decimal* %239, i64 %240, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-40

switch.done-40:
	; AssignStmt
	; CompoundLit
	%241 = bitcast %strconv-16.DecimalSlice* %23 to %..rawptr
	%242 = call %..rawptr @__mem_zero(%..rawptr %241, i64 40)
	store %strconv-16.DecimalSlice zeroinitializer, %strconv-16.DecimalSlice* %23
	store %strconv-16.DecimalSlice {{i8*, i64} zeroinitializer, i64 zeroinitializer, i64 zeroinitializer, i8 zeroinitializer}, %strconv-16.DecimalSlice* %23
	; SliceExpr
	; SelectorExpr
	%243 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%244 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %243, i64 0
	%245 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %244, i64 0, i32 0
	%246 = load [384 x i8], [384 x i8]* %245, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d4, i64 0, i32 0), i64 50}, i64 297, i64 40, i64 0, i64 384, i64 384)
	%247 = getelementptr inbounds [384 x i8], [384 x i8]* %245, i64 0, i32 0
	%248 = getelementptr inbounds i8, i8* %247, i64 0
	%249 = sub i64 384, 0
	%250 = bitcast {i8*, i64}* %24 to %..rawptr
	%251 = call %..rawptr @__mem_zero(%..rawptr %250, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %24
	%252 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %24, i64 0, i32 0
	store i8* %248, i8** %252
	%253 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %24, i64 0, i32 1
	store i64 %249, i64* %253
	%254 = load {i8*, i64}, {i8*, i64}* %24, align 8
	%255 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %23, i64 0, i32 0
	store {i8*, i64} %254, {i8*, i64}* %255
	; SelectorExpr
	%256 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%257 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %256, i64 0
	%258 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %257, i64 0, i32 1
	%259 = load i64, i64* %258, align 8
	%260 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %23, i64 0, i32 1
	store i64 %259, i64* %260
	; SelectorExpr
	%261 = load %decimal-17.Decimal*, %decimal-17.Decimal** %18, align 8
	%262 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %261, i64 0
	%263 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %262, i64 0, i32 2
	%264 = load i64, i64* %263, align 8
	%265 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %23, i64 0, i32 2
	store i64 %264, i64* %265
	%266 = load %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %23, align 8
	store %strconv-16.DecimalSlice %266, %strconv-16.DecimalSlice* %19
	br label %if.done-41

if.done-41:
	; ReturnStmt
	%267 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%268 = load i8, i8* %20, align 1
	%269 = load i8, i8* %7, align 1
	%270 = load %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %19, align 8
	%271 = load i64, i64* %2, align 8
	%272 = load i8, i8* %1, align 1
	%273 = bitcast {i8*, i64}* %25 to %..rawptr
	%274 = call %..rawptr @__mem_zero(%..rawptr %273, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %25
	store {i8*, i64} %267, {i8*, i64}* %25
	%275 = trunc i8 %268 to i1
	%276 = trunc i8 %269 to i1
	%277 = bitcast %strconv-16.DecimalSlice* %26 to %..rawptr
	%278 = call %..rawptr @__mem_zero(%..rawptr %277, i64 40)
	store %strconv-16.DecimalSlice zeroinitializer, %strconv-16.DecimalSlice* %26
	store %strconv-16.DecimalSlice %270, %strconv-16.DecimalSlice* %26
	%279 = call {i8*, i64} @strconv-16.format_digits({i8*, i64}* %25, i1 %275, i1 %276, %strconv-16.DecimalSlice* %26, i64 %271, i8 %272, %Context* noalias nonnull %__.context_ptr)
	ret {i8*, i64} %279
}

define {i8*, i64} @strconv-16.format_digits({i8*, i64}* %buf, i1 %shortest, i1 %neg, %strconv-16.DecimalSlice* %digs, i64 %prec, i8 %fmt, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i8, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	%4 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%5 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca [1 x i8], align 16
	%8 = alloca {i8*, i64}, align 16
	%9 = alloca i64, align 16
	%10 = alloca {i8*, i64}, align 16
	%11 = alloca {i8*, i64}, align 16
	%12 = alloca {i8*, i64}, align 16
	%13 = alloca [1 x i8], align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca [1 x i8], align 16
	%17 = alloca {i8*, i64}, align 16
	%18 = alloca {i8*, i64}, align 16
	%19 = alloca [1 x i8], align 16
	%20 = alloca {i8*, i64}, align 16
	%21 = alloca i64, align 16
	%22 = alloca i64, align 16
	%23 = alloca i64, align 16
	%24 = alloca i8, align 16
	%25 = alloca i64, align 16
	%26 = alloca {i8*, i64}, align 16
	%27 = alloca [1 x i8], align 16
	%28 = alloca {i8*, i64}, align 16
	%29 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%30 = alloca %Source_Code_Location, align 16
	%31 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%32 = alloca %Source_Code_Location, align 16
	%33 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%34 = alloca {i8*, i64}, align 16
	%35 = alloca [2 x i8], align 16
	%36 = alloca {i8*, i64}, align 16
	%37 = alloca %strconv-16.format_digits.Buffer-275, align 16
	%38 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	
	%39 = zext i1 %shortest to i8
	store i8 %39, i8* %0
	
	%40 = zext i1 %neg to i8
	store i8 %40, i8* %1
	%41 = load %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, align 8
	
	store i64 %prec, i64* %2
	
	store i8 %fmt, i8* %3
	; b
	
	; CompoundLit
	%42 = bitcast %strconv-16.format_digits.Buffer-275* %5 to %..rawptr
	%43 = call %..rawptr @__mem_zero(%..rawptr %42, i64 24)
	store %strconv-16.format_digits.Buffer-275 zeroinitializer, %strconv-16.format_digits.Buffer-275* %5
	store %strconv-16.format_digits.Buffer-275 {{i8*, i64} zeroinitializer, i64 zeroinitializer}, %strconv-16.format_digits.Buffer-275* %5
	%44 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%45 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %5, i64 0, i32 0
	store {i8*, i64} %44, {i8*, i64}* %45
	%46 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %5, align 8
	store %strconv-16.format_digits.Buffer-275 %46, %strconv-16.format_digits.Buffer-275* %4
	; SwitchStmt
	%47 = load i8, i8* %3, align 1
	%48 = icmp eq i8 %47, 102
	br i1 %48, label %switch.case.body-3, label %switch.case.next-1

switch.case.next-1:
	%49 = icmp eq i8 %47, 70
	br i1 %49, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%50 = icmp eq i8 %47, 101
	br i1 %50, label %switch.fall.body-23, label %switch.case.next-21

switch.case.body-3:
	%51 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	; TernaryExpr
	%52 = load i8, i8* %1, align 1
	%53 = trunc i8 %52 to i1
	br i1 %53, label %if.then-4, label %if.else-5

if.then-4:
	br label %if.done-6

if.else-5:
	br label %if.done-6

if.done-6:
	%54 = phi i32 [ 45, %if.then-4 ], [ 43, %if.else-5 ]
	%55 = trunc i32 %54 to i8
	; variadic call argument generation
	%56 = bitcast {i8*, i64}* %6 to %..rawptr
	%57 = call %..rawptr @__mem_zero(%..rawptr %56, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	%58 = bitcast [1 x i8]* %7 to %..rawptr
	%59 = call %..rawptr @__mem_zero(%..rawptr %58, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %7
	%60 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	store i8 %55, i8* %60
	%61 = getelementptr inbounds [1 x i8], [1 x i8]* %7, i64 0, i32 0
	%62 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 0
	store i8* %61, i8** %62
	%63 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %6, i64 0, i32 1
	store i64 1, i64* %63
	%64 = load {i8*, i64}, {i8*, i64}* %6, align 8
	%65 = bitcast {i8*, i64}* %8 to %..rawptr
	%66 = call %..rawptr @__mem_zero(%..rawptr %65, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %8
	store {i8*, i64} %64, {i8*, i64}* %8
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %51, {i8*, i64}* %8, %Context* noalias nonnull %__.context_ptr)
	; IfStmt
	; SelectorExpr
	%67 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 2
	%68 = load i64, i64* %67, align 8
	%69 = icmp sgt i64 %68, 0
	%70 = zext i1 %69 to i8
	%71 = trunc i8 %70 to i1
	br i1 %71, label %if.then-7, label %if.else-11

if.then-7:
	; m
	
	; min
	; SelectorExpr
	%72 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 2
	%73 = load i64, i64* %72, align 8
	; SelectorExpr
	%74 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 1
	%75 = load i64, i64* %74, align 8
	%76 = icmp slt i64 %75, %73
	%77 = select i1 %76, i64 %75, i64 %73
	store i64 %77, i64* %9
	%78 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	; SliceExpr
	%79 = load i64, i64* %9, align 8
	; SelectorExpr
	%80 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 0
	%81 = load {i8*, i64}, {i8*, i64}* %80, align 8
	%82 = extractvalue {i8*, i64} %81, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d5, i64 0, i32 0), i64 50}, i64 324, i64 32, i64 0, i64 %79, i64 %82)
	%83 = extractvalue {i8*, i64} %81, 0
	%84 = getelementptr inbounds i8, i8* %83, i64 0
	%85 = sub i64 %79, 0
	%86 = bitcast {i8*, i64}* %10 to %..rawptr
	%87 = call %..rawptr @__mem_zero(%..rawptr %86, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %10
	%88 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 0
	store i8* %84, i8** %88
	%89 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %10, i64 0, i32 1
	store i64 %85, i64* %89
	%90 = load {i8*, i64}, {i8*, i64}* %10, align 8
	%91 = bitcast {i8*, i64}* %11 to %..rawptr
	%92 = call %..rawptr @__mem_zero(%..rawptr %91, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %11
	store {i8*, i64} %90, {i8*, i64}* %11
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %78, {i8*, i64}* %11, %Context* noalias nonnull %__.context_ptr)
	; ForStmt
	br label %for.loop-8

for.loop-8:
	%93 = load i64, i64* %9, align 8
	; SelectorExpr
	%94 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 2
	%95 = load i64, i64* %94, align 8
	%96 = icmp slt i64 %93, %95
	%97 = zext i1 %96 to i8
	%98 = trunc i8 %97 to i1
	br i1 %98, label %for.body-9, label %for.done-10

for.body-9:
	%99 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	; variadic call argument generation
	%100 = bitcast {i8*, i64}* %12 to %..rawptr
	%101 = call %..rawptr @__mem_zero(%..rawptr %100, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %12
	%102 = bitcast [1 x i8]* %13 to %..rawptr
	%103 = call %..rawptr @__mem_zero(%..rawptr %102, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %13
	%104 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	store i8 48, i8* %104
	%105 = getelementptr inbounds [1 x i8], [1 x i8]* %13, i64 0, i32 0
	%106 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 0
	store i8* %105, i8** %106
	%107 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %12, i64 0, i32 1
	store i64 1, i64* %107
	%108 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%109 = bitcast {i8*, i64}* %14 to %..rawptr
	%110 = call %..rawptr @__mem_zero(%..rawptr %109, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %108, {i8*, i64}* %14
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %99, {i8*, i64}* %14, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%111 = load i64, i64* %9, align 8
	%112 = add i64 %111, 1
	store i64 %112, i64* %9
	br label %for.loop-8

for.done-10:
	br label %if.done-12

if.else-11:
	%113 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	; variadic call argument generation
	%114 = bitcast {i8*, i64}* %15 to %..rawptr
	%115 = call %..rawptr @__mem_zero(%..rawptr %114, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	%116 = bitcast [1 x i8]* %16 to %..rawptr
	%117 = call %..rawptr @__mem_zero(%..rawptr %116, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %16
	%118 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	store i8 48, i8* %118
	%119 = getelementptr inbounds [1 x i8], [1 x i8]* %16, i64 0, i32 0
	%120 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %15, i64 0, i32 0
	store i8* %119, i8** %120
	%121 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %15, i64 0, i32 1
	store i64 1, i64* %121
	%122 = load {i8*, i64}, {i8*, i64}* %15, align 8
	%123 = bitcast {i8*, i64}* %17 to %..rawptr
	%124 = call %..rawptr @__mem_zero(%..rawptr %123, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %17
	store {i8*, i64} %122, {i8*, i64}* %17
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %113, {i8*, i64}* %17, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-12

if.done-12:
	; IfStmt
	%125 = load i64, i64* %2, align 8
	%126 = icmp sgt i64 %125, 0
	%127 = zext i1 %126 to i8
	%128 = trunc i8 %127 to i1
	br i1 %128, label %if.then-13, label %if.done-20

if.then-13:
	%129 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	; variadic call argument generation
	%130 = bitcast {i8*, i64}* %18 to %..rawptr
	%131 = call %..rawptr @__mem_zero(%..rawptr %130, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %18
	%132 = bitcast [1 x i8]* %19 to %..rawptr
	%133 = call %..rawptr @__mem_zero(%..rawptr %132, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %19
	%134 = getelementptr inbounds [1 x i8], [1 x i8]* %19, i64 0, i32 0
	store i8 46, i8* %134
	%135 = getelementptr inbounds [1 x i8], [1 x i8]* %19, i64 0, i32 0
	%136 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 0
	store i8* %135, i8** %136
	%137 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %18, i64 0, i32 1
	store i64 1, i64* %137
	%138 = load {i8*, i64}, {i8*, i64}* %18, align 8
	%139 = bitcast {i8*, i64}* %20 to %..rawptr
	%140 = call %..rawptr @__mem_zero(%..rawptr %139, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %20
	store {i8*, i64} %138, {i8*, i64}* %20
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %129, {i8*, i64}* %20, %Context* noalias nonnull %__.context_ptr)
	; RangeStmt
	; i
	%141 = bitcast i64* %21 to %..rawptr
	%142 = call %..rawptr @__mem_zero(%..rawptr %141, i64 8)
	store i64 zeroinitializer, i64* %21
	
	%143 = bitcast i64* %22 to %..rawptr
	%144 = call %..rawptr @__mem_zero(%..rawptr %143, i64 8)
	store i64 zeroinitializer, i64* %22
	store i64 0, i64* %22
	%145 = bitcast i64* %23 to %..rawptr
	%146 = call %..rawptr @__mem_zero(%..rawptr %145, i64 8)
	store i64 zeroinitializer, i64* %23
	store i64 0, i64* %23
	br label %for.interval.loop-14

for.interval.loop-14:
	%147 = load i64, i64* %2, align 8
	%148 = load i64, i64* %22, align 8
	%149 = icmp slt i64 %148, %147
	br i1 %149, label %for.interval.body-15, label %for.interval.done-19

for.interval.body-15:
	%150 = load i64, i64* %22, align 8
	%151 = load i64, i64* %23, align 8
	%152 = load i64, i64* %22, align 8
	%153 = add i64 %152, 1
	store i64 %153, i64* %22
	%154 = load i64, i64* %23, align 8
	%155 = add i64 %154, 1
	store i64 %155, i64* %23
	store i64 %150, i64* %21
	; c
	
	store i8 48, i8* %24
	; IfStmt
	; j
	
	; SelectorExpr
	%156 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 2
	%157 = load i64, i64* %156, align 8
	%158 = load i64, i64* %21, align 8
	%159 = add i64 %157, %158
	store i64 %159, i64* %25
	%160 = load i64, i64* %25, align 8
	%161 = icmp sle i64 0, %160
	%162 = zext i1 %161 to i8
	%163 = trunc i8 %162 to i1
	br i1 %163, label %cmp.and-16, label %if.done-18

cmp.and-16:
	%164 = load i64, i64* %25, align 8
	; SelectorExpr
	%165 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 1
	%166 = load i64, i64* %165, align 8
	%167 = icmp slt i64 %164, %166
	%168 = zext i1 %167 to i8
	%169 = trunc i8 %168 to i1
	br i1 %169, label %if.then-17, label %if.done-18

if.then-17:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%170 = getelementptr inbounds %strconv-16.DecimalSlice, %strconv-16.DecimalSlice* %digs, i64 0, i32 0
	%171 = load {i8*, i64}, {i8*, i64}* %170, align 8
	%172 = extractvalue {i8*, i64} %171, 0
	%173 = load i64, i64* %25, align 8
	%174 = extractvalue {i8*, i64} %171, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d6, i64 0, i32 0), i64 50}, i64 339, i64 22, i64 %173, i64 %174)
	%175 = getelementptr inbounds i8, i8* %172, i64 %173
	%176 = load i8, i8* %175, align 1
	store i8 %176, i8* %24
	br label %if.done-18

if.done-18:
	%177 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	%178 = load i8, i8* %24, align 1
	; variadic call argument generation
	%179 = bitcast {i8*, i64}* %26 to %..rawptr
	%180 = call %..rawptr @__mem_zero(%..rawptr %179, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %26
	%181 = bitcast [1 x i8]* %27 to %..rawptr
	%182 = call %..rawptr @__mem_zero(%..rawptr %181, i64 1)
	store [1 x i8] zeroinitializer, [1 x i8]* %27
	%183 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	store i8 %178, i8* %183
	%184 = getelementptr inbounds [1 x i8], [1 x i8]* %27, i64 0, i32 0
	%185 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %26, i64 0, i32 0
	store i8* %184, i8** %185
	%186 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %26, i64 0, i32 1
	store i64 1, i64* %186
	%187 = load {i8*, i64}, {i8*, i64}* %26, align 8
	%188 = bitcast {i8*, i64}* %28 to %..rawptr
	%189 = call %..rawptr @__mem_zero(%..rawptr %188, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %28
	store {i8*, i64} %187, {i8*, i64}* %28
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %177, {i8*, i64}* %28, %Context* noalias nonnull %__.context_ptr)
	br label %for.interval.loop-14

for.interval.done-19:
	br label %if.done-20

if.done-20:
	; ReturnStmt
	%190 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, align 8
	%191 = bitcast %strconv-16.format_digits.Buffer-275* %29 to %..rawptr
	%192 = call %..rawptr @__mem_zero(%..rawptr %191, i64 24)
	store %strconv-16.format_digits.Buffer-275 zeroinitializer, %strconv-16.format_digits.Buffer-275* %29
	store %strconv-16.format_digits.Buffer-275 %190, %strconv-16.format_digits.Buffer-275* %29
	%193 = call {i8*, i64} @strconv-16.format_digits.to_bytes-0(%strconv-16.format_digits.Buffer-275* %29, %Context* noalias nonnull %__.context_ptr)
	ret {i8*, i64} %193

switch.case.next-21:
	%194 = icmp eq i8 %47, 69
	br i1 %194, label %switch.fall.body-23, label %switch.case.next-22

switch.case.next-22:
	%195 = icmp eq i8 %47, 103
	br i1 %195, label %switch.fall.body-26, label %switch.case.next-24

switch.fall.body-23:
	%196 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1d7, i64 0, i32 0), i64 50}, i64 347, i64 3, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$1d8, i64 0, i32 0), i64 13})
	%197 = bitcast %Source_Code_Location* %30 to %..rawptr
	%198 = call %..rawptr @__mem_zero(%..rawptr %197, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %30
	store %Source_Code_Location %196, %Source_Code_Location* %30
	call void @panic(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__str$1d9, i64 0, i32 0), i64 48}, %Source_Code_Location* %30)
	; ReturnStmt
	%199 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, align 8
	%200 = bitcast %strconv-16.format_digits.Buffer-275* %31 to %..rawptr
	%201 = call %..rawptr @__mem_zero(%..rawptr %200, i64 24)
	store %strconv-16.format_digits.Buffer-275 zeroinitializer, %strconv-16.format_digits.Buffer-275* %31
	store %strconv-16.format_digits.Buffer-275 %199, %strconv-16.format_digits.Buffer-275* %31
	%202 = call {i8*, i64} @strconv-16.format_digits.to_bytes-0(%strconv-16.format_digits.Buffer-275* %31, %Context* noalias nonnull %__.context_ptr)
	ret {i8*, i64} %202

switch.case.next-24:
	%203 = icmp eq i8 %47, 71
	br i1 %203, label %switch.fall.body-26, label %switch.case.next-25

switch.case.next-25:
	%204 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, i64 0
	%205 = load i8, i8* %3, align 1
	; variadic call argument generation
	%206 = bitcast {i8*, i64}* %34 to %..rawptr
	%207 = call %..rawptr @__mem_zero(%..rawptr %206, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %34
	%208 = bitcast [2 x i8]* %35 to %..rawptr
	%209 = call %..rawptr @__mem_zero(%..rawptr %208, i64 2)
	store [2 x i8] zeroinitializer, [2 x i8]* %35
	%210 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 0
	store i8 37, i8* %210
	%211 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 1
	store i8 %205, i8* %211
	%212 = getelementptr inbounds [2 x i8], [2 x i8]* %35, i64 0, i32 0
	%213 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %34, i64 0, i32 0
	store i8* %212, i8** %213
	%214 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %34, i64 0, i32 1
	store i64 2, i64* %214
	%215 = load {i8*, i64}, {i8*, i64}* %34, align 8
	%216 = bitcast {i8*, i64}* %36 to %..rawptr
	%217 = call %..rawptr @__mem_zero(%..rawptr %216, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %36
	store {i8*, i64} %215, {i8*, i64}* %36
	call void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %204, {i8*, i64}* %36, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	%218 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, align 8
	%219 = bitcast %strconv-16.format_digits.Buffer-275* %37 to %..rawptr
	%220 = call %..rawptr @__mem_zero(%..rawptr %219, i64 24)
	store %strconv-16.format_digits.Buffer-275 zeroinitializer, %strconv-16.format_digits.Buffer-275* %37
	store %strconv-16.format_digits.Buffer-275 %218, %strconv-16.format_digits.Buffer-275* %37
	%221 = call {i8*, i64} @strconv-16.format_digits.to_bytes-0(%strconv-16.format_digits.Buffer-275* %37, %Context* noalias nonnull %__.context_ptr)
	ret {i8*, i64} %221

switch.fall.body-26:
	%222 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1da, i64 0, i32 0), i64 50}, i64 351, i64 3, %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$1db, i64 0, i32 0), i64 13})
	%223 = bitcast %Source_Code_Location* %32 to %..rawptr
	%224 = call %..rawptr @__mem_zero(%..rawptr %223, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %32
	store %Source_Code_Location %222, %Source_Code_Location* %32
	call void @panic(%..string {i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__str$1dc, i64 0, i32 0), i64 48}, %Source_Code_Location* %32)
	; ReturnStmt
	%225 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %4, align 8
	%226 = bitcast %strconv-16.format_digits.Buffer-275* %33 to %..rawptr
	%227 = call %..rawptr @__mem_zero(%..rawptr %226, i64 24)
	store %strconv-16.format_digits.Buffer-275 zeroinitializer, %strconv-16.format_digits.Buffer-275* %33
	store %strconv-16.format_digits.Buffer-275 %225, %strconv-16.format_digits.Buffer-275* %33
	%228 = call {i8*, i64} @strconv-16.format_digits.to_bytes-0(%strconv-16.format_digits.Buffer-275* %33, %Context* noalias nonnull %__.context_ptr)
	ret {i8*, i64} %228
}

define {i8*, i64} @strconv-16.format_digits.to_bytes-0(%strconv-16.format_digits.Buffer-275* %b, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64}, align 16
	%1 = load %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %b, align 8
	; ReturnStmt
	; SliceExpr
	; SelectorExpr
	%2 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %b, i64 0, i32 1
	%3 = load i64, i64* %2, align 8
	; SelectorExpr
	%4 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %b, i64 0, i32 0
	%5 = load {i8*, i64}, {i8*, i64}* %4, align 8
	%6 = extractvalue {i8*, i64} %5, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1dd, i64 0, i32 0), i64 50}, i64 310, i64 53, i64 0, i64 %3, i64 %6)
	%7 = extractvalue {i8*, i64} %5, 0
	%8 = getelementptr inbounds i8, i8* %7, i64 0
	%9 = sub i64 %3, 0
	%10 = bitcast {i8*, i64}* %0 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %0
	%12 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 0
	store i8* %8, i8** %12
	%13 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %0, i64 0, i32 1
	store i64 %9, i64* %13
	%14 = load {i8*, i64}, {i8*, i64}* %0, align 8
	ret {i8*, i64} %14
}

define void @strconv-16.format_digits.add_bytes-1(%strconv-16.format_digits.Buffer-275* %buf, {i8*, i64}* %bytes, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %strconv-16.format_digits.Buffer-275*, align 16
	%1 = alloca {i8*, i64}, align 16
	%2 = alloca {i8*, i64}, align 16
	%3 = alloca {i8*, i64}, align 16
	
	store %strconv-16.format_digits.Buffer-275* %buf, %strconv-16.format_digits.Buffer-275** %0
	%4 = load {i8*, i64}, {i8*, i64}* %bytes, align 8
	; AssignStmt
	; SelectorExpr
	%5 = load %strconv-16.format_digits.Buffer-275*, %strconv-16.format_digits.Buffer-275** %0, align 8
	%6 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %5, i64 0
	%7 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %6, i64 0, i32 1
	; SliceExpr
	; SelectorExpr
	%8 = load %strconv-16.format_digits.Buffer-275*, %strconv-16.format_digits.Buffer-275** %0, align 8
	%9 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %8, i64 0
	%10 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %9, i64 0, i32 1
	%11 = load i64, i64* %10, align 8
	; SelectorExpr
	%12 = load %strconv-16.format_digits.Buffer-275*, %strconv-16.format_digits.Buffer-275** %0, align 8
	%13 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %12, i64 0
	%14 = getelementptr inbounds %strconv-16.format_digits.Buffer-275, %strconv-16.format_digits.Buffer-275* %13, i64 0, i32 0
	%15 = load {i8*, i64}, {i8*, i64}* %14, align 8
	%16 = extractvalue {i8*, i64} %15, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1de, i64 0, i32 0), i64 50}, i64 312, i64 22, i64 %11, i64 %16, i64 %16)
	%17 = extractvalue {i8*, i64} %15, 0
	%18 = getelementptr inbounds i8, i8* %17, i64 %11
	%19 = sub i64 %16, %11
	%20 = bitcast {i8*, i64}* %1 to %..rawptr
	%21 = call %..rawptr @__mem_zero(%..rawptr %20, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %1
	%22 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1, i64 0, i32 0
	store i8* %18, i8** %22
	%23 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1, i64 0, i32 1
	store i64 %19, i64* %23
	%24 = load {i8*, i64}, {i8*, i64}* %1, align 8
	%25 = load {i8*, i64}, {i8*, i64}* %bytes, align 8
	%26 = bitcast {i8*, i64}* %2 to %..rawptr
	%27 = call %..rawptr @__mem_zero(%..rawptr %26, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %2
	store {i8*, i64} %24, {i8*, i64}* %2
	%28 = bitcast {i8*, i64}* %3 to %..rawptr
	%29 = call %..rawptr @__mem_zero(%..rawptr %28, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %3
	store {i8*, i64} %25, {i8*, i64}* %3
	%30 = call i64 @_preload-0.copy-4790({i8*, i64}* %2, {i8*, i64}* %3)
	%31 = load i64, i64* %7, align 8
	%32 = add i64 %31, %30
	store i64 %32, i64* %7
	ret void
}

define void @strconv-16.round_shortest(%decimal-17.Decimal* %d, i64 %mant, i64 %exp, %strconv-16.FloatInfo* %flt, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %strconv-16.FloatInfo*, align 16
	%4 = alloca i64, align 16
	%5 = alloca %decimal-17.Decimal, align 16
	%6 = alloca %decimal-17.Decimal*, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca %decimal-17.Decimal, align 16
	%10 = alloca %decimal-17.Decimal*, align 16
	%11 = alloca i8, align 16
	%12 = alloca i64, align 16
	%13 = alloca i64, align 16
	%14 = alloca i64, align 16
	%15 = alloca i8, align 16
	%16 = alloca i8, align 16
	%17 = alloca i8, align 16
	%18 = alloca i8, align 16
	%19 = alloca i8, align 16
	
	store %decimal-17.Decimal* %d, %decimal-17.Decimal** %0
	
	store i64 %mant, i64* %1
	
	store i64 %exp, i64* %2
	
	store %strconv-16.FloatInfo* %flt, %strconv-16.FloatInfo** %3
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp eq i64 %20, 0
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-1, label %if.done-2

if.then-1:
	; AssignStmt
	; SelectorExpr
	%24 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%25 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %24, i64 0
	%26 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %25, i64 0, i32 1
	store i64 0, i64* %26
	; ReturnStmt
	ret void

if.done-2:
	; minexp
	
	; SelectorExpr
	%27 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %3, align 8
	%28 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %27, i64 0
	%29 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %28, i64 0, i32 2
	%30 = load i64, i64* %29, align 8
	%31 = add i64 %30, 1
	store i64 %31, i64* %4
	; IfStmt
	%32 = load i64, i64* %2, align 8
	%33 = load i64, i64* %4, align 8
	%34 = icmp sgt i64 %32, %33
	%35 = zext i1 %34 to i8
	%36 = trunc i8 %35 to i1
	br i1 %36, label %cmp.and-3, label %if.done-5

cmp.and-3:
	; SelectorExpr
	%37 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%38 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %37, i64 0
	%39 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %38, i64 0, i32 2
	%40 = load i64, i64* %39, align 8
	; SelectorExpr
	%41 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%42 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %41, i64 0
	%43 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %42, i64 0, i32 1
	%44 = load i64, i64* %43, align 8
	%45 = sub i64 %40, %44
	%46 = mul i64 332, %45
	%47 = load i64, i64* %2, align 8
	; SelectorExpr
	%48 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %3, align 8
	%49 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %48, i64 0
	%50 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %49, i64 0, i32 0
	%51 = load i64, i64* %50, align 8
	%52 = bitcast i64 %51 to i64
	%53 = sub i64 %47, %52
	%54 = mul i64 100, %53
	%55 = icmp sge i64 %46, %54
	%56 = zext i1 %55 to i8
	%57 = trunc i8 %56 to i1
	br i1 %57, label %if.then-4, label %if.done-5

if.then-4:
	; ReturnStmt
	ret void

if.done-5:
	; upper_
	%58 = bitcast %decimal-17.Decimal* %5 to %..rawptr
	%59 = call %..rawptr @__mem_zero(%..rawptr %58, i64 408)
	store %decimal-17.Decimal zeroinitializer, %decimal-17.Decimal* %5
	
	; upper
	
	%60 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %5, i64 0
	store %decimal-17.Decimal* %60, %decimal-17.Decimal** %6
	%61 = load %decimal-17.Decimal*, %decimal-17.Decimal** %6, align 8
	%62 = load i64, i64* %1, align 8
	%63 = mul i64 2, %62
	%64 = sub i64 %63, 1
	call void @decimal-17.assign(%decimal-17.Decimal* %61, i64 %64, %Context* noalias nonnull %__.context_ptr)
	%65 = load %decimal-17.Decimal*, %decimal-17.Decimal** %6, align 8
	%66 = load i64, i64* %2, align 8
	; SelectorExpr
	%67 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %3, align 8
	%68 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %67, i64 0
	%69 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %68, i64 0, i32 0
	%70 = load i64, i64* %69, align 8
	%71 = bitcast i64 %70 to i64
	%72 = sub i64 %66, %71
	%73 = sub i64 %72, 1
	call void @decimal-17.shift(%decimal-17.Decimal* %65, i64 %73, %Context* noalias nonnull %__.context_ptr)
	; mantlo
	%74 = bitcast i64* %7 to %..rawptr
	%75 = call %..rawptr @__mem_zero(%..rawptr %74, i64 8)
	store i64 zeroinitializer, i64* %7
	
	; explo
	%76 = bitcast i64* %8 to %..rawptr
	%77 = call %..rawptr @__mem_zero(%..rawptr %76, i64 8)
	store i64 zeroinitializer, i64* %8
	
	; IfStmt
	%78 = load i64, i64* %1, align 8
	; SelectorExpr
	%79 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %3, align 8
	%80 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %79, i64 0
	%81 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %80, i64 0, i32 0
	%82 = load i64, i64* %81, align 8
	%83 = bitcast i64 %82 to i64
	%84 = shl i64 1, %83
	%85 = bitcast i64 %84 to i64
	%86 = icmp ugt i64 %78, %85
	%87 = zext i1 %86 to i8
	%88 = trunc i8 %87 to i1
	br i1 %88, label %if.then-7, label %cmp.or-6

cmp.or-6:
	%89 = load i64, i64* %2, align 8
	%90 = load i64, i64* %4, align 8
	%91 = icmp eq i64 %89, %90
	%92 = zext i1 %91 to i8
	%93 = trunc i8 %92 to i1
	br i1 %93, label %if.then-7, label %if.else-8

if.then-7:
	; AssignStmt
	%94 = load i64, i64* %1, align 8
	%95 = sub i64 %94, 1
	store i64 %95, i64* %7
	; AssignStmt
	%96 = load i64, i64* %2, align 8
	store i64 %96, i64* %8
	br label %if.done-9

if.else-8:
	; AssignStmt
	%97 = load i64, i64* %1, align 8
	%98 = mul i64 2, %97
	%99 = sub i64 %98, 1
	store i64 %99, i64* %7
	; AssignStmt
	%100 = load i64, i64* %2, align 8
	%101 = sub i64 %100, 1
	store i64 %101, i64* %8
	br label %if.done-9

if.done-9:
	; lower_
	%102 = bitcast %decimal-17.Decimal* %9 to %..rawptr
	%103 = call %..rawptr @__mem_zero(%..rawptr %102, i64 408)
	store %decimal-17.Decimal zeroinitializer, %decimal-17.Decimal* %9
	
	; lower
	
	%104 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %9, i64 0
	store %decimal-17.Decimal* %104, %decimal-17.Decimal** %10
	%105 = load %decimal-17.Decimal*, %decimal-17.Decimal** %10, align 8
	%106 = load i64, i64* %7, align 8
	%107 = mul i64 2, %106
	%108 = add i64 %107, 1
	call void @decimal-17.assign(%decimal-17.Decimal* %105, i64 %108, %Context* noalias nonnull %__.context_ptr)
	%109 = load %decimal-17.Decimal*, %decimal-17.Decimal** %10, align 8
	%110 = load i64, i64* %8, align 8
	; SelectorExpr
	%111 = load %strconv-16.FloatInfo*, %strconv-16.FloatInfo** %3, align 8
	%112 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %111, i64 0
	%113 = getelementptr inbounds %strconv-16.FloatInfo, %strconv-16.FloatInfo* %112, i64 0, i32 0
	%114 = load i64, i64* %113, align 8
	%115 = bitcast i64 %114 to i64
	%116 = sub i64 %110, %115
	%117 = sub i64 %116, 1
	call void @decimal-17.shift(%decimal-17.Decimal* %109, i64 %117, %Context* noalias nonnull %__.context_ptr)
	; inclusive
	
	%118 = load i64, i64* %1, align 8
	%119 = urem i64 %118, 2
	%120 = icmp eq i64 %119, 0
	%121 = zext i1 %120 to i8
	store i8 %121, i8* %11
	; RangeStmt
	; i
	%122 = bitcast i64* %12 to %..rawptr
	%123 = call %..rawptr @__mem_zero(%..rawptr %122, i64 8)
	store i64 zeroinitializer, i64* %12
	
	%124 = bitcast i64* %13 to %..rawptr
	%125 = call %..rawptr @__mem_zero(%..rawptr %124, i64 8)
	store i64 zeroinitializer, i64* %13
	store i64 0, i64* %13
	%126 = bitcast i64* %14 to %..rawptr
	%127 = call %..rawptr @__mem_zero(%..rawptr %126, i64 8)
	store i64 zeroinitializer, i64* %14
	store i64 0, i64* %14
	br label %for.interval.loop-10

for.interval.loop-10:
	; SelectorExpr
	%128 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%129 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %128, i64 0
	%130 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %129, i64 0, i32 1
	%131 = load i64, i64* %130, align 8
	%132 = load i64, i64* %13, align 8
	%133 = icmp slt i64 %132, %131
	br i1 %133, label %for.interval.body-11, label %for.interval.done-34

for.interval.body-11:
	%134 = load i64, i64* %13, align 8
	%135 = load i64, i64* %14, align 8
	%136 = load i64, i64* %13, align 8
	%137 = add i64 %136, 1
	store i64 %137, i64* %13
	%138 = load i64, i64* %14, align 8
	%139 = add i64 %138, 1
	store i64 %139, i64* %14
	store i64 %134, i64* %12
	; l
	
	store i8 48, i8* %15
	; IfStmt
	%140 = load i64, i64* %12, align 8
	; SelectorExpr
	%141 = load %decimal-17.Decimal*, %decimal-17.Decimal** %10, align 8
	%142 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %141, i64 0
	%143 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %142, i64 0, i32 1
	%144 = load i64, i64* %143, align 8
	%145 = icmp slt i64 %140, %144
	%146 = zext i1 %145 to i8
	%147 = trunc i8 %146 to i1
	br i1 %147, label %if.then-12, label %if.done-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%148 = load %decimal-17.Decimal*, %decimal-17.Decimal** %10, align 8
	%149 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %148, i64 0
	%150 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %149, i64 0, i32 0
	%151 = load i64, i64* %12, align 8
	%152 = trunc i64 %151 to i32
	%153 = getelementptr inbounds [384 x i8], [384 x i8]* %150, i64 0, i32 %152
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1df, i64 0, i32 0), i64 50}, i64 402, i64 21, i64 %151, i64 384)
	%154 = load i8, i8* %153, align 1
	store i8 %154, i8* %15
	br label %if.done-13

if.done-13:
	; m
	
	; IndexExpr
	; SelectorExpr
	%155 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%156 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %155, i64 0
	%157 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %156, i64 0, i32 0
	%158 = load i64, i64* %12, align 8
	%159 = trunc i64 %158 to i32
	%160 = getelementptr inbounds [384 x i8], [384 x i8]* %157, i64 0, i32 %159
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e0, i64 0, i32 0), i64 50}, i64 404, i64 17, i64 %158, i64 384)
	%161 = load i8, i8* %160, align 1
	store i8 %161, i8* %16
	; u
	
	store i8 48, i8* %17
	; IfStmt
	%162 = load i64, i64* %12, align 8
	; SelectorExpr
	%163 = load %decimal-17.Decimal*, %decimal-17.Decimal** %6, align 8
	%164 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %163, i64 0
	%165 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %164, i64 0, i32 1
	%166 = load i64, i64* %165, align 8
	%167 = icmp slt i64 %162, %166
	%168 = zext i1 %167 to i8
	%169 = trunc i8 %168 to i1
	br i1 %169, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%170 = load %decimal-17.Decimal*, %decimal-17.Decimal** %6, align 8
	%171 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %170, i64 0
	%172 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %171, i64 0, i32 0
	%173 = load i64, i64* %12, align 8
	%174 = trunc i64 %173 to i32
	%175 = getelementptr inbounds [384 x i8], [384 x i8]* %172, i64 0, i32 %174
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e1, i64 0, i32 0), i64 50}, i64 407, i64 21, i64 %173, i64 384)
	%176 = load i8, i8* %175, align 1
	store i8 %176, i8* %17
	br label %if.done-15

if.done-15:
	; ok_round_down
	
	%177 = load i8, i8* %15, align 1
	%178 = load i8, i8* %16, align 1
	%179 = icmp ne i8 %177, %178
	%180 = zext i1 %179 to i8
	%181 = load i8, i8* %15, align 1
	%182 = load i8, i8* %16, align 1
	%183 = icmp ne i8 %181, %182
	%184 = zext i1 %183 to i8
	%185 = trunc i8 %184 to i1
	br i1 %185, label %logical.cmp.done-19, label %logical.cmp.rhs-16

logical.cmp.rhs-16:
	%186 = load i8, i8* %11, align 1
	%187 = load i8, i8* %11, align 1
	%188 = trunc i8 %187 to i1
	br i1 %188, label %logical.cmp.rhs-17, label %logical.cmp.done-18

logical.cmp.rhs-17:
	%189 = load i64, i64* %12, align 8
	%190 = add i64 %189, 1
	; SelectorExpr
	%191 = load %decimal-17.Decimal*, %decimal-17.Decimal** %10, align 8
	%192 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %191, i64 0
	%193 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %192, i64 0, i32 1
	%194 = load i64, i64* %193, align 8
	%195 = icmp eq i64 %190, %194
	%196 = zext i1 %195 to i8
	br label %logical.cmp.done-18

logical.cmp.done-18:
	%197 = phi i8 [ 0, %logical.cmp.rhs-16 ], [ %196, %logical.cmp.rhs-17 ]
	br label %logical.cmp.done-19

logical.cmp.done-19:
	%198 = phi i8 [ 1, %if.done-15 ], [ %197, %logical.cmp.done-18 ]
	store i8 %198, i8* %18
	; ok_round_up
	
	%199 = load i8, i8* %16, align 1
	%200 = load i8, i8* %17, align 1
	%201 = icmp ne i8 %199, %200
	%202 = zext i1 %201 to i8
	%203 = load i8, i8* %16, align 1
	%204 = load i8, i8* %17, align 1
	%205 = icmp ne i8 %203, %204
	%206 = zext i1 %205 to i8
	%207 = trunc i8 %206 to i1
	br i1 %207, label %logical.cmp.rhs-20, label %logical.cmp.done-26

logical.cmp.rhs-20:
	%208 = load i8, i8* %11, align 1
	%209 = load i8, i8* %11, align 1
	%210 = trunc i8 %209 to i1
	br i1 %210, label %logical.cmp.done-22, label %logical.cmp.rhs-21

logical.cmp.rhs-21:
	%211 = load i8, i8* %16, align 1
	%212 = add i8 %211, 1
	%213 = load i8, i8* %17, align 1
	%214 = icmp ult i8 %212, %213
	%215 = zext i1 %214 to i8
	br label %logical.cmp.done-22

logical.cmp.done-22:
	%216 = phi i8 [ 1, %logical.cmp.rhs-20 ], [ %215, %logical.cmp.rhs-21 ]
	%217 = load i8, i8* %11, align 1
	%218 = trunc i8 %217 to i1
	br i1 %218, label %logical.cmp.done-25, label %cmp.or-23

cmp.or-23:
	%219 = load i8, i8* %16, align 1
	%220 = add i8 %219, 1
	%221 = load i8, i8* %17, align 1
	%222 = icmp ult i8 %220, %221
	%223 = zext i1 %222 to i8
	%224 = trunc i8 %223 to i1
	br i1 %224, label %logical.cmp.done-25, label %logical.cmp.rhs-24

logical.cmp.rhs-24:
	%225 = load i64, i64* %12, align 8
	%226 = add i64 %225, 1
	; SelectorExpr
	%227 = load %decimal-17.Decimal*, %decimal-17.Decimal** %6, align 8
	%228 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %227, i64 0
	%229 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %228, i64 0, i32 1
	%230 = load i64, i64* %229, align 8
	%231 = icmp slt i64 %226, %230
	%232 = zext i1 %231 to i8
	br label %logical.cmp.done-25

logical.cmp.done-25:
	%233 = phi i8 [ 1, %logical.cmp.done-22 ], [ 1, %cmp.or-23 ], [ %232, %logical.cmp.rhs-24 ]
	br label %logical.cmp.done-26

logical.cmp.done-26:
	%234 = phi i8 [ 0, %logical.cmp.done-19 ], [ %233, %logical.cmp.done-25 ]
	store i8 %234, i8* %19
	; IfStmt
	%235 = load i8, i8* %18, align 1
	%236 = trunc i8 %235 to i1
	br i1 %236, label %cmp.and-27, label %if.done-29

cmp.and-27:
	%237 = load i8, i8* %19, align 1
	%238 = trunc i8 %237 to i1
	br i1 %238, label %if.then-28, label %if.done-29

if.then-28:
	%239 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%240 = load i64, i64* %12, align 8
	%241 = add i64 %240, 1
	call void @decimal-17.round(%decimal-17.Decimal* %239, i64 %241, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-29:
	; IfStmt
	%242 = load i8, i8* %18, align 1
	%243 = trunc i8 %242 to i1
	br i1 %243, label %if.then-30, label %if.done-31

if.then-30:
	%244 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%245 = load i64, i64* %12, align 8
	%246 = add i64 %245, 1
	call void @decimal-17.round_down(%decimal-17.Decimal* %244, i64 %246, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-31:
	; IfStmt
	%247 = load i8, i8* %19, align 1
	%248 = trunc i8 %247 to i1
	br i1 %248, label %if.then-32, label %if.done-33

if.then-32:
	%249 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%250 = load i64, i64* %12, align 8
	%251 = add i64 %250, 1
	call void @decimal-17.round_up(%decimal-17.Decimal* %249, i64 %251, %Context* noalias nonnull %__.context_ptr)
	; ReturnStmt
	ret void

if.done-33:
	br label %for.interval.loop-10

for.interval.done-34:
	ret void
}

define {i64, i8} @strconv-16.is_integer_negative(i64 %u, i1 %is_signed, i64 %bit_size, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i8, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8, align 16
	%5 = alloca i8, align 16
	%6 = alloca i16, align 16
	%7 = alloca i32, align 16
	%8 = alloca i64, align 16
	%9 = alloca %Source_Code_Location, align 16
	%10 = alloca {i64, i8}, align 16
	
	store i64 %u, i64* %0
	
	%11 = zext i1 %is_signed to i8
	store i8 %11, i8* %1
	
	store i64 %bit_size, i64* %2
	%12 = bitcast i64* %3 to %..rawptr
	%13 = call %..rawptr @__mem_zero(%..rawptr %12, i64 8)
	store i64 zeroinitializer, i64* %3
	
	%14 = bitcast i8* %4 to %..rawptr
	%15 = call %..rawptr @__mem_zero(%..rawptr %14, i64 1)
	store i8 zeroinitializer, i8* %4
	
	; IfStmt
	%16 = load i8, i8* %1, align 1
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-1, label %if.done-11

if.then-1:
	; SwitchStmt
	%18 = load i64, i64* %2, align 8
	%19 = icmp eq i64 %18, 8
	br i1 %19, label %switch.case.body-3, label %switch.case.next-2

switch.case.next-2:
	%20 = icmp eq i64 %18, 16
	br i1 %20, label %switch.fall.body-5, label %switch.case.next-4

switch.case.body-3:
	; i
	
	%21 = load i64, i64* %0, align 8
	%22 = trunc i64 %21 to i8
	store i8 %22, i8* %5
	; AssignStmt
	%23 = load i8, i8* %5, align 1
	%24 = icmp slt i8 %23, 0
	%25 = zext i1 %24 to i8
	store i8 %25, i8* %4
	; AssignStmt
	; abs
	%26 = load i8, i8* %5, align 1
	%27 = icmp slt i8 %26, 0
	%28 = sub i8 0, %26
	%29 = select i1 %27, i8 %28, i8 %26
	%30 = sext i8 %29 to i64
	store i64 %30, i64* %0
	br label %switch.done-10

switch.case.next-4:
	%31 = icmp eq i64 %18, 32
	br i1 %31, label %switch.fall.body-7, label %switch.case.next-6

switch.fall.body-5:
	; i
	
	%32 = load i64, i64* %0, align 8
	%33 = trunc i64 %32 to i16
	store i16 %33, i16* %6
	; AssignStmt
	%34 = load i16, i16* %6, align 2
	%35 = icmp slt i16 %34, 0
	%36 = zext i1 %35 to i8
	store i8 %36, i8* %4
	; AssignStmt
	; abs
	%37 = load i16, i16* %6, align 2
	%38 = icmp slt i16 %37, 0
	%39 = sub i16 0, %37
	%40 = select i1 %38, i16 %39, i16 %37
	%41 = sext i16 %40 to i64
	store i64 %41, i64* %0
	br label %switch.done-10

switch.case.next-6:
	%42 = icmp eq i64 %18, 64
	br i1 %42, label %switch.fall.body-9, label %switch.case.next-8

switch.fall.body-7:
	; i
	
	%43 = load i64, i64* %0, align 8
	%44 = trunc i64 %43 to i32
	store i32 %44, i32* %7
	; AssignStmt
	%45 = load i32, i32* %7, align 4
	%46 = icmp slt i32 %45, 0
	%47 = zext i1 %46 to i8
	store i8 %47, i8* %4
	; AssignStmt
	; abs
	%48 = load i32, i32* %7, align 4
	%49 = icmp slt i32 %48, 0
	%50 = sub i32 0, %48
	%51 = select i1 %49, i32 %50, i32 %48
	%52 = sext i32 %51 to i64
	store i64 %52, i64* %0
	br label %switch.done-10

switch.case.next-8:
	%53 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e2, i64 0, i32 0), i64 50}, i64 453, i64 4, %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__str$1e3, i64 0, i32 0), i64 19})
	%54 = bitcast %Source_Code_Location* %9 to %..rawptr
	%55 = call %..rawptr @__mem_zero(%..rawptr %54, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %9
	store %Source_Code_Location %53, %Source_Code_Location* %9
	call void @panic(%..string {i8* getelementptr inbounds ([42 x i8], [42 x i8]* @__str$1e4, i64 0, i32 0), i64 41}, %Source_Code_Location* %9)
	br label %switch.done-10

switch.fall.body-9:
	; i
	
	%56 = load i64, i64* %0, align 8
	%57 = bitcast i64 %56 to i64
	store i64 %57, i64* %8
	; AssignStmt
	%58 = load i64, i64* %8, align 8
	%59 = icmp slt i64 %58, 0
	%60 = zext i1 %59 to i8
	store i8 %60, i8* %4
	; AssignStmt
	; abs
	%61 = load i64, i64* %8, align 8
	%62 = icmp slt i64 %61, 0
	%63 = sub i64 0, %61
	%64 = select i1 %62, i64 %63, i64 %61
	%65 = bitcast i64 %64 to i64
	store i64 %65, i64* %0
	br label %switch.done-10

switch.done-10:
	br label %if.done-11

if.done-11:
	; ReturnStmt
	%66 = load i64, i64* %0, align 8
	%67 = load i8, i8* %4, align 1
	%68 = bitcast {i64, i8}* %10 to %..rawptr
	%69 = call %..rawptr @__mem_zero(%..rawptr %68, i64 16)
	store {i64, i8} zeroinitializer, {i64, i8}* %10
	%70 = getelementptr inbounds {i64, i8}, {i64, i8}* %10, i64 0, i32 0
	store i64 %66, i64* %70
	%71 = getelementptr inbounds {i64, i8}, {i64, i8}* %10, i64 0, i32 1
	store i8 %67, i8* %71
	%72 = load {i64, i8}, {i64, i8}* %10, align 8
	ret {i64, i8} %72
}

define %..string @strconv-16.append_bits({i8*, i64}* %buf, i64 %u, i64 %base, i1 %is_signed, i64 %bit_size, %..string %digits, i64 %flags, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = alloca i64, align 16
	%2 = alloca i8, align 16
	%3 = alloca i64, align 16
	%4 = alloca %..string, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Source_Code_Location, align 16
	%7 = alloca i8, align 16
	%8 = alloca [129 x i8], align 16
	%9 = alloca i64, align 16
	%10 = alloca i64, align 16
	%11 = alloca i8, align 16
	%12 = alloca {i8*, i64}, align 16
	%13 = alloca {i8*, i64}, align 16
	%14 = alloca {i8*, i64}, align 16
	%15 = alloca {i8*, i64}, align 16
	%16 = alloca {i8*, i64}, align 16
	%17 = alloca %..string, align 16
	%18 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	
	store i64 %u, i64* %0
	
	store i64 %base, i64* %1
	
	%19 = zext i1 %is_signed to i8
	store i8 %19, i8* %2
	
	store i64 %bit_size, i64* %3
	
	store %..string %digits, %..string* %4
	
	store i64 %flags, i64* %5
	; IfStmt
	%20 = load i64, i64* %1, align 8
	%21 = icmp slt i64 %20, 2
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%24 = load i64, i64* %1, align 8
	%25 = icmp sgt i64 %24, 32
	%26 = zext i1 %25 to i8
	%27 = trunc i8 %26 to i1
	br i1 %27, label %if.then-2, label %if.done-3

if.then-2:
	%28 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e5, i64 0, i32 0), i64 50}, i64 461, i64 3, %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$1e6, i64 0, i32 0), i64 11})
	%29 = bitcast %Source_Code_Location* %6 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %28, %Source_Code_Location* %6
	call void @panic(%..string {i8* getelementptr inbounds ([44 x i8], [44 x i8]* @__str$1e7, i64 0, i32 0), i64 43}, %Source_Code_Location* %6)
	br label %if.done-3

if.done-3:
	; neg
	%31 = bitcast i8* %7 to %..rawptr
	%32 = call %..rawptr @__mem_zero(%..rawptr %31, i64 1)
	store i8 zeroinitializer, i8* %7
	
	; a
	%33 = bitcast [129 x i8]* %8 to %..rawptr
	%34 = call %..rawptr @__mem_zero(%..rawptr %33, i64 129)
	store [129 x i8] zeroinitializer, [129 x i8]* %8
	
	; i
	
	store i64 129, i64* %9
	; AssignStmt
	%35 = load i64, i64* %0, align 8
	%36 = load i8, i8* %2, align 1
	%37 = load i64, i64* %3, align 8
	%38 = trunc i8 %36 to i1
	%39 = call {i64, i8} @strconv-16.is_integer_negative(i64 %35, i1 %38, i64 %37, %Context* noalias nonnull %__.context_ptr)
	%40 = extractvalue {i64, i8} %39, 0
	%41 = extractvalue {i64, i8} %39, 1
	store i64 %40, i64* %0
	store i8 %41, i8* %7
	; b
	
	%42 = load i64, i64* %1, align 8
	%43 = bitcast i64 %42 to i64
	store i64 %43, i64* %10
	; ForStmt
	br label %for.loop-4

for.loop-4:
	%44 = load i64, i64* %0, align 8
	%45 = load i64, i64* %10, align 8
	%46 = icmp uge i64 %44, %45
	%47 = zext i1 %46 to i8
	%48 = trunc i8 %47 to i1
	br i1 %48, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	%49 = load i64, i64* %9, align 8
	%50 = sub i64 %49, 1
	store i64 %50, i64* %9
	; AssignStmt
	; IndexExpr
	%51 = load i64, i64* %9, align 8
	%52 = trunc i64 %51 to i32
	%53 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %52
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e8, i64 0, i32 0), i64 50}, i64 470, i64 11, i64 %51, i64 129)
	; IndexExpr
	%54 = load %..string, %..string* %4, align 8
	%55 = extractvalue %..string %54, 0
	%56 = extractvalue %..string %54, 1
	%57 = load i64, i64* %0, align 8
	%58 = load i64, i64* %10, align 8
	%59 = urem i64 %57, %58
	%60 = bitcast i64 %59 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1e9, i64 0, i32 0), i64 50}, i64 470, i64 23, i64 %60, i64 %56)
	%61 = getelementptr inbounds i8, i8* %55, i64 %60
	%62 = load i8, i8* %61, align 1
	store i8 %62, i8* %53
	; AssignStmt
	%63 = load i64, i64* %10, align 8
	%64 = load i64, i64* %0, align 8
	%65 = udiv i64 %64, %63
	store i64 %65, i64* %0
	br label %for.loop-4

for.done-6:
	; AssignStmt
	%66 = load i64, i64* %9, align 8
	%67 = sub i64 %66, 1
	store i64 %67, i64* %9
	; AssignStmt
	; IndexExpr
	%68 = load i64, i64* %9, align 8
	%69 = trunc i64 %68 to i32
	%70 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %69
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ea, i64 0, i32 0), i64 50}, i64 473, i64 10, i64 %68, i64 129)
	; IndexExpr
	%71 = load %..string, %..string* %4, align 8
	%72 = extractvalue %..string %71, 0
	%73 = extractvalue %..string %71, 1
	%74 = load i64, i64* %0, align 8
	%75 = load i64, i64* %10, align 8
	%76 = urem i64 %74, %75
	%77 = bitcast i64 %76 to i64
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1eb, i64 0, i32 0), i64 50}, i64 473, i64 22, i64 %77, i64 %73)
	%78 = getelementptr inbounds i8, i8* %72, i64 %77
	%79 = load i8, i8* %78, align 1
	store i8 %79, i8* %70
	; IfStmt
	%80 = load i64, i64* %5, align 8
	%81 = and i64 %80, 1
	%82 = icmp ne i64 %81, 0
	%83 = zext i1 %82 to i8
	%84 = trunc i8 %83 to i1
	br i1 %84, label %if.then-7, label %if.done-21

if.then-7:
	; ok
	
	store i8 1, i8* %11
	; SwitchStmt
	%85 = load i64, i64* %1, align 8
	%86 = icmp eq i64 %85, 2
	br i1 %86, label %switch.case.body-9, label %switch.case.next-8

switch.case.next-8:
	%87 = icmp eq i64 %85, 8
	br i1 %87, label %switch.fall.body-11, label %switch.case.next-10

switch.case.body-9:
	; AssignStmt
	%88 = load i64, i64* %9, align 8
	%89 = sub i64 %88, 1
	store i64 %89, i64* %9
	; AssignStmt
	; IndexExpr
	%90 = load i64, i64* %9, align 8
	%91 = trunc i64 %90 to i32
	%92 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %91
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ec, i64 0, i32 0), i64 50}, i64 478, i64 20, i64 %90, i64 129)
	store i8 98, i8* %92
	br label %switch.done-18

switch.case.next-10:
	%93 = icmp eq i64 %85, 10
	br i1 %93, label %switch.fall.body-13, label %switch.case.next-12

switch.fall.body-11:
	; AssignStmt
	%94 = load i64, i64* %9, align 8
	%95 = sub i64 %94, 1
	store i64 %95, i64* %9
	; AssignStmt
	; IndexExpr
	%96 = load i64, i64* %9, align 8
	%97 = trunc i64 %96 to i32
	%98 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %97
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ed, i64 0, i32 0), i64 50}, i64 479, i64 20, i64 %96, i64 129)
	store i8 111, i8* %98
	br label %switch.done-18

switch.case.next-12:
	%99 = icmp eq i64 %85, 12
	br i1 %99, label %switch.fall.body-15, label %switch.case.next-14

switch.fall.body-13:
	; AssignStmt
	%100 = load i64, i64* %9, align 8
	%101 = sub i64 %100, 1
	store i64 %101, i64* %9
	; AssignStmt
	; IndexExpr
	%102 = load i64, i64* %9, align 8
	%103 = trunc i64 %102 to i32
	%104 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %103
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ee, i64 0, i32 0), i64 50}, i64 480, i64 20, i64 %102, i64 129)
	store i8 100, i8* %104
	br label %switch.done-18

switch.case.next-14:
	%105 = icmp eq i64 %85, 16
	br i1 %105, label %switch.fall.body-17, label %switch.case.next-16

switch.fall.body-15:
	; AssignStmt
	%106 = load i64, i64* %9, align 8
	%107 = sub i64 %106, 1
	store i64 %107, i64* %9
	; AssignStmt
	; IndexExpr
	%108 = load i64, i64* %9, align 8
	%109 = trunc i64 %108 to i32
	%110 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %109
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ef, i64 0, i32 0), i64 50}, i64 481, i64 20, i64 %108, i64 129)
	store i8 122, i8* %110
	br label %switch.done-18

switch.case.next-16:
	; AssignStmt
	store i8 0, i8* %11
	br label %switch.done-18

switch.fall.body-17:
	; AssignStmt
	%111 = load i64, i64* %9, align 8
	%112 = sub i64 %111, 1
	store i64 %112, i64* %9
	; AssignStmt
	; IndexExpr
	%113 = load i64, i64* %9, align 8
	%114 = trunc i64 %113 to i32
	%115 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %114
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f0, i64 0, i32 0), i64 50}, i64 482, i64 20, i64 %113, i64 129)
	store i8 120, i8* %115
	br label %switch.done-18

switch.done-18:
	; IfStmt
	%116 = load i8, i8* %11, align 1
	%117 = trunc i8 %116 to i1
	br i1 %117, label %if.then-19, label %if.done-20

if.then-19:
	; AssignStmt
	%118 = load i64, i64* %9, align 8
	%119 = sub i64 %118, 1
	store i64 %119, i64* %9
	; AssignStmt
	; IndexExpr
	%120 = load i64, i64* %9, align 8
	%121 = trunc i64 %120 to i32
	%122 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %121
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f1, i64 0, i32 0), i64 50}, i64 486, i64 12, i64 %120, i64 129)
	store i8 48, i8* %122
	br label %if.done-20

if.done-20:
	br label %if.done-21

if.done-21:
	; SwitchStmt
	%123 = load i8, i8* %7, align 1
	%124 = icmp eq i8 1, %123
	br i1 %124, label %switch.case.body-23, label %switch.case.next-22

switch.case.next-22:
	%125 = load i64, i64* %5, align 8
	%126 = and i64 %125, 2
	%127 = icmp ne i64 %126, 0
	%128 = zext i1 %127 to i8
	%129 = icmp eq i8 1, %128
	br i1 %129, label %switch.fall.body-25, label %switch.case.next-24

switch.case.body-23:
	; AssignStmt
	%130 = load i64, i64* %9, align 8
	%131 = sub i64 %130, 1
	store i64 %131, i64* %9
	; AssignStmt
	; IndexExpr
	%132 = load i64, i64* %9, align 8
	%133 = trunc i64 %132 to i32
	%134 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %133
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f2, i64 0, i32 0), i64 50}, i64 492, i64 11, i64 %132, i64 129)
	store i8 45, i8* %134
	br label %switch.done-28

switch.case.next-24:
	%135 = load i64, i64* %5, align 8
	%136 = and i64 %135, 4
	%137 = icmp ne i64 %136, 0
	%138 = zext i1 %137 to i8
	%139 = icmp eq i8 1, %138
	br i1 %139, label %switch.fall.body-27, label %switch.case.next-26

switch.fall.body-25:
	; AssignStmt
	%140 = load i64, i64* %9, align 8
	%141 = sub i64 %140, 1
	store i64 %141, i64* %9
	; AssignStmt
	; IndexExpr
	%142 = load i64, i64* %9, align 8
	%143 = trunc i64 %142 to i32
	%144 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %143
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f3, i64 0, i32 0), i64 50}, i64 494, i64 11, i64 %142, i64 129)
	store i8 43, i8* %144
	br label %switch.done-28

switch.case.next-26:
	br label %switch.done-28

switch.fall.body-27:
	; AssignStmt
	%145 = load i64, i64* %9, align 8
	%146 = sub i64 %145, 1
	store i64 %146, i64* %9
	; AssignStmt
	; IndexExpr
	%147 = load i64, i64* %9, align 8
	%148 = trunc i64 %147 to i32
	%149 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 %148
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f4, i64 0, i32 0), i64 50}, i64 496, i64 11, i64 %147, i64 129)
	store i8 32, i8* %149
	br label %switch.done-28

switch.done-28:
	; out
	
	; SliceExpr
	%150 = load i64, i64* %9, align 8
	%151 = load [129 x i8], [129 x i8]* %8, align 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f5, i64 0, i32 0), i64 50}, i64 499, i64 10, i64 %150, i64 129, i64 129)
	%152 = getelementptr inbounds [129 x i8], [129 x i8]* %8, i64 0, i32 0
	%153 = getelementptr inbounds i8, i8* %152, i64 %150
	%154 = sub i64 129, %150
	%155 = bitcast {i8*, i64}* %13 to %..rawptr
	%156 = call %..rawptr @__mem_zero(%..rawptr %155, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %13
	%157 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 0
	store i8* %153, i8** %157
	%158 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %13, i64 0, i32 1
	store i64 %154, i64* %158
	%159 = load {i8*, i64}, {i8*, i64}* %13, align 8
	store {i8*, i64} %159, {i8*, i64}* %12
	%160 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%161 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%162 = bitcast {i8*, i64}* %14 to %..rawptr
	%163 = call %..rawptr @__mem_zero(%..rawptr %162, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %14
	store {i8*, i64} %160, {i8*, i64}* %14
	%164 = bitcast {i8*, i64}* %15 to %..rawptr
	%165 = call %..rawptr @__mem_zero(%..rawptr %164, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %15
	store {i8*, i64} %161, {i8*, i64}* %15
	%166 = call i64 @_preload-0.copy-4790({i8*, i64}* %14, {i8*, i64}* %15)
	; ReturnStmt
	; SliceExpr
	%167 = load {i8*, i64}, {i8*, i64}* %12, align 8
	%168 = extractvalue {i8*, i64} %167, 1
	%169 = load {i8*, i64}, {i8*, i64}* %buf, align 8
	%170 = extractvalue {i8*, i64} %169, 1
	call void @__slice_expr_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f6, i64 0, i32 0), i64 50}, i64 501, i64 19, i64 0, i64 %168, i64 %170)
	%171 = extractvalue {i8*, i64} %169, 0
	%172 = getelementptr inbounds i8, i8* %171, i64 0
	%173 = sub i64 %168, 0
	%174 = bitcast {i8*, i64}* %16 to %..rawptr
	%175 = call %..rawptr @__mem_zero(%..rawptr %174, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %16
	%176 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 0
	store i8* %172, i8** %176
	%177 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %16, i64 0, i32 1
	store i64 %173, i64* %177
	%178 = load {i8*, i64}, {i8*, i64}* %16, align 8
	%179 = extractvalue {i8*, i64} %178, 0
	%180 = extractvalue {i8*, i64} %178, 1
	%181 = bitcast %..string* %17 to %..rawptr
	%182 = call %..rawptr @__mem_zero(%..rawptr %181, i64 16)
	store %..string zeroinitializer, %..string* %17
	%183 = getelementptr inbounds %..string, %..string* %17, i64 0, i32 0
	store i8* %179, i8** %183
	%184 = getelementptr inbounds %..string, %..string* %17, i64 0, i32 1
	store i64 %180, i64* %184
	%185 = load %..string, %..string* %17, align 8
	ret %..string %185
}

define void @decimal-17.trim(%decimal-17.Decimal* %a, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	; ForStmt
	br label %for.loop-1

for.loop-1:
	; SelectorExpr
	%1 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%2 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %1, i64 0
	%3 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %2, i64 0, i32 1
	%4 = load i64, i64* %3, align 8
	%5 = icmp sgt i64 %4, 0
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %cmp.and-2, label %for.done-4

cmp.and-2:
	; IndexExpr
	; SelectorExpr
	%8 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%9 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %8, i64 0
	%10 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %9, i64 0, i32 0
	; SelectorExpr
	%11 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%12 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %11, i64 0
	%13 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %12, i64 0, i32 1
	%14 = load i64, i64* %13, align 8
	%15 = sub i64 %14, 1
	%16 = trunc i64 %15 to i32
	%17 = getelementptr inbounds [384 x i8], [384 x i8]* %10, i64 0, i32 %16
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f7, i64 0, i32 0), i64 50}, i64 49, i64 32, i64 %15, i64 384)
	%18 = load i8, i8* %17, align 1
	%19 = icmp eq i8 %18, 48
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %for.body-3, label %for.done-4

for.body-3:
	; AssignStmt
	; SelectorExpr
	%22 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %23, i64 0, i32 1
	%25 = load i64, i64* %24, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %24
	br label %for.loop-1

for.done-4:
	; IfStmt
	; SelectorExpr
	%27 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%28 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %27, i64 0
	%29 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %28, i64 0, i32 1
	%30 = load i64, i64* %29, align 8
	%31 = icmp eq i64 %30, 0
	%32 = zext i1 %31 to i8
	%33 = trunc i8 %32 to i1
	br i1 %33, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%34 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%35 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %34, i64 0
	%36 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %35, i64 0, i32 2
	store i64 0, i64* %36
	br label %if.done-6

if.done-6:
	ret void
}

define void @decimal-17.assign(%decimal-17.Decimal* %a, i64 %i, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca [64 x i8], align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %i, i64* %1
	; buf
	%5 = bitcast [64 x i8]* %2 to %..rawptr
	%6 = call %..rawptr @__mem_zero(%..rawptr %5, i64 64)
	store [64 x i8] zeroinitializer, [64 x i8]* %2
	
	; n
	
	store i64 0, i64* %3
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%7 = load i64, i64* %1, align 8
	%8 = icmp ugt i64 %7, 0
	%9 = zext i1 %8 to i8
	%10 = trunc i8 %9 to i1
	br i1 %10, label %for.body-2, label %for.done-3

for.body-2:
	; j
	
	%11 = load i64, i64* %1, align 8
	%12 = udiv i64 %11, 10
	store i64 %12, i64* %4
	; AssignStmt
	%13 = load i64, i64* %4, align 8
	%14 = mul i64 10, %13
	%15 = load i64, i64* %1, align 8
	%16 = sub i64 %15, %14
	store i64 %16, i64* %1
	; AssignStmt
	; IndexExpr
	%17 = load i64, i64* %3, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i32 %18
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f8, i64 0, i32 0), i64 50}, i64 64, i64 7, i64 %17, i64 64)
	%20 = load i64, i64* %1, align 8
	%21 = add i64 48, %20
	%22 = trunc i64 %21 to i8
	store i8 %22, i8* %19
	; AssignStmt
	%23 = load i64, i64* %3, align 8
	%24 = add i64 %23, 1
	store i64 %24, i64* %3
	; AssignStmt
	%25 = load i64, i64* %4, align 8
	store i64 %25, i64* %1
	br label %for.loop-1

for.done-3:
	; AssignStmt
	; SelectorExpr
	%26 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%27 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %26, i64 0
	%28 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %27, i64 0, i32 1
	store i64 0, i64* %28
	; ForStmt
	; AssignStmt
	%29 = load i64, i64* %3, align 8
	%30 = sub i64 %29, 1
	store i64 %30, i64* %3
	br label %for.loop-4

for.loop-4:
	%31 = load i64, i64* %3, align 8
	%32 = icmp sge i64 %31, 0
	%33 = zext i1 %32 to i8
	%34 = trunc i8 %33 to i1
	br i1 %34, label %for.body-5, label %for.done-6

for.body-5:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%35 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%36 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %35, i64 0
	%37 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %36, i64 0, i32 0
	; SelectorExpr
	%38 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%39 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %38, i64 0
	%40 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %39, i64 0, i32 1
	%41 = load i64, i64* %40, align 8
	%42 = trunc i64 %41 to i32
	%43 = getelementptr inbounds [384 x i8], [384 x i8]* %37, i64 0, i32 %42
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1f9, i64 0, i32 0), i64 50}, i64 71, i64 14, i64 %41, i64 384)
	; IndexExpr
	%44 = load i64, i64* %3, align 8
	%45 = trunc i64 %44 to i32
	%46 = getelementptr inbounds [64 x i8], [64 x i8]* %2, i64 0, i32 %45
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1fa, i64 0, i32 0), i64 50}, i64 71, i64 27, i64 %44, i64 64)
	%47 = load i8, i8* %46, align 1
	store i8 %47, i8* %43
	; AssignStmt
	; SelectorExpr
	%48 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %49, i64 0, i32 1
	%51 = load i64, i64* %50, align 8
	%52 = add i64 %51, 1
	store i64 %52, i64* %50
	; AssignStmt
	%53 = load i64, i64* %3, align 8
	%54 = sub i64 %53, 1
	store i64 %54, i64* %3
	br label %for.loop-4

for.done-6:
	; AssignStmt
	; SelectorExpr
	%55 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%56 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %55, i64 0
	%57 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %56, i64 0, i32 2
	; SelectorExpr
	%58 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %59, i64 0, i32 1
	%61 = load i64, i64* %60, align 8
	store i64 %61, i64* %57
	%62 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.trim(%decimal-17.Decimal* %62, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @decimal-17.shift_right(%decimal-17.Decimal* %a, i64 %k, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %k, i64* %1
	; r
	
	store i64 0, i64* %2
	; w
	
	store i64 0, i64* %3
	; n
	%10 = bitcast i64* %4 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 8)
	store i64 zeroinitializer, i64* %4
	
	; ForStmt
	br label %for.loop-1

for.loop-1:
	%12 = load i64, i64* %4, align 8
	%13 = load i64, i64* %1, align 8
	%14 = lshr i64 %12, %13
	%15 = icmp eq i64 %14, 0
	%16 = zext i1 %15 to i8
	%17 = trunc i8 %16 to i1
	br i1 %17, label %for.body-2, label %for.done-10

for.body-2:
	; IfStmt
	%18 = load i64, i64* %2, align 8
	; SelectorExpr
	%19 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%20 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %19, i64 0
	%21 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %20, i64 0, i32 1
	%22 = load i64, i64* %21, align 8
	%23 = icmp sge i64 %18, %22
	%24 = zext i1 %23 to i8
	%25 = trunc i8 %24 to i1
	br i1 %25, label %if.then-3, label %if.done-9

if.then-3:
	; IfStmt
	%26 = load i64, i64* %4, align 8
	%27 = icmp eq i64 %26, 0
	%28 = zext i1 %27 to i8
	%29 = trunc i8 %28 to i1
	br i1 %29, label %if.then-4, label %if.done-5

if.then-4:
	; AssignStmt
	; SelectorExpr
	%30 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%31 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %30, i64 0
	%32 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %31, i64 0, i32 1
	store i64 0, i64* %32
	; ReturnStmt
	ret void

if.done-5:
	; ForStmt
	br label %for.loop-6

for.loop-6:
	%33 = load i64, i64* %4, align 8
	%34 = load i64, i64* %1, align 8
	%35 = lshr i64 %33, %34
	%36 = icmp eq i64 %35, 0
	%37 = zext i1 %36 to i8
	%38 = trunc i8 %37 to i1
	br i1 %38, label %for.body-7, label %for.done-8

for.body-7:
	; AssignStmt
	%39 = load i64, i64* %4, align 8
	%40 = mul i64 %39, 10
	store i64 %40, i64* %4
	; AssignStmt
	%41 = load i64, i64* %2, align 8
	%42 = add i64 %41, 1
	store i64 %42, i64* %2
	br label %for.loop-6

for.done-8:
	; break
	br label %for.done-10

if.done-9:
	; c
	
	; IndexExpr
	; SelectorExpr
	%43 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%44 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %43, i64 0
	%45 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %44, i64 0, i32 0
	%46 = load i64, i64* %2, align 8
	%47 = trunc i64 %46 to i32
	%48 = getelementptr inbounds [384 x i8], [384 x i8]* %45, i64 0, i32 %47
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1fb, i64 0, i32 0), i64 50}, i64 98, i64 22, i64 %46, i64 384)
	%49 = load i8, i8* %48, align 1
	%50 = zext i8 %49 to i64
	store i64 %50, i64* %5
	; AssignStmt
	%51 = load i64, i64* %4, align 8
	%52 = mul i64 %51, 10
	%53 = load i64, i64* %5, align 8
	%54 = add i64 %52, %53
	%55 = sub i64 %54, 48
	store i64 %55, i64* %4
	; AssignStmt
	%56 = load i64, i64* %2, align 8
	%57 = add i64 %56, 1
	store i64 %57, i64* %2
	br label %for.loop-1

for.done-10:
	; AssignStmt
	; SelectorExpr
	%58 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %59, i64 0, i32 2
	%61 = load i64, i64* %2, align 8
	%62 = sub i64 %61, 1
	%63 = load i64, i64* %60, align 8
	%64 = sub i64 %63, %62
	store i64 %64, i64* %60
	; mask
	
	%65 = load i64, i64* %1, align 8
	%66 = shl i64 1, %65
	%67 = bitcast i64 %66 to i64
	%68 = sub i64 %67, 1
	%69 = bitcast i64 %68 to i64
	store i64 %69, i64* %6
	; ForStmt
	br label %for.loop-11

for.loop-11:
	%70 = load i64, i64* %2, align 8
	; SelectorExpr
	%71 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%72 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %71, i64 0
	%73 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %72, i64 0, i32 1
	%74 = load i64, i64* %73, align 8
	%75 = icmp slt i64 %70, %74
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %for.body-12, label %for.done-13

for.body-12:
	; c
	
	; IndexExpr
	; SelectorExpr
	%78 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%79 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %78, i64 0
	%80 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %79, i64 0, i32 0
	%81 = load i64, i64* %2, align 8
	%82 = trunc i64 %81 to i32
	%83 = getelementptr inbounds [384 x i8], [384 x i8]* %80, i64 0, i32 %82
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1fc, i64 0, i32 0), i64 50}, i64 106, i64 22, i64 %81, i64 384)
	%84 = load i8, i8* %83, align 1
	%85 = zext i8 %84 to i64
	store i64 %85, i64* %7
	; dig
	
	%86 = load i64, i64* %4, align 8
	%87 = load i64, i64* %1, align 8
	%88 = lshr i64 %86, %87
	store i64 %88, i64* %8
	; AssignStmt
	%89 = load i64, i64* %6, align 8
	%90 = load i64, i64* %4, align 8
	%91 = and i64 %90, %89
	store i64 %91, i64* %4
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%92 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%93 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %92, i64 0
	%94 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %93, i64 0, i32 0
	%95 = load i64, i64* %3, align 8
	%96 = trunc i64 %95 to i32
	%97 = getelementptr inbounds [384 x i8], [384 x i8]* %94, i64 0, i32 %96
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1fd, i64 0, i32 0), i64 50}, i64 109, i64 12, i64 %95, i64 384)
	%98 = load i64, i64* %8, align 8
	%99 = add i64 48, %98
	%100 = trunc i64 %99 to i8
	store i8 %100, i8* %97
	; AssignStmt
	%101 = load i64, i64* %3, align 8
	%102 = add i64 %101, 1
	store i64 %102, i64* %3
	; AssignStmt
	%103 = load i64, i64* %4, align 8
	%104 = mul i64 %103, 10
	%105 = load i64, i64* %7, align 8
	%106 = add i64 %104, %105
	%107 = sub i64 %106, 48
	store i64 %107, i64* %4
	; AssignStmt
	%108 = load i64, i64* %2, align 8
	%109 = add i64 %108, 1
	store i64 %109, i64* %2
	br label %for.loop-11

for.done-13:
	; ForStmt
	br label %for.loop-14

for.loop-14:
	%110 = load i64, i64* %4, align 8
	%111 = icmp ugt i64 %110, 0
	%112 = zext i1 %111 to i8
	%113 = trunc i8 %112 to i1
	br i1 %113, label %for.body-15, label %for.done-21

for.body-15:
	; dig
	
	%114 = load i64, i64* %4, align 8
	%115 = load i64, i64* %1, align 8
	%116 = lshr i64 %114, %115
	store i64 %116, i64* %9
	; AssignStmt
	%117 = load i64, i64* %6, align 8
	%118 = load i64, i64* %4, align 8
	%119 = and i64 %118, %117
	store i64 %119, i64* %4
	; IfStmt
	%120 = load i64, i64* %3, align 8
	%121 = icmp slt i64 %120, 384
	%122 = zext i1 %121 to i8
	%123 = trunc i8 %122 to i1
	br i1 %123, label %if.then-16, label %if.else-17

if.then-16:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%124 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%125 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %124, i64 0
	%126 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %125, i64 0, i32 0
	%127 = load i64, i64* %3, align 8
	%128 = trunc i64 %127 to i32
	%129 = getelementptr inbounds [384 x i8], [384 x i8]* %126, i64 0, i32 %128
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1fe, i64 0, i32 0), i64 50}, i64 118, i64 13, i64 %127, i64 384)
	%130 = load i64, i64* %9, align 8
	%131 = add i64 48, %130
	%132 = trunc i64 %131 to i8
	store i8 %132, i8* %129
	; AssignStmt
	%133 = load i64, i64* %3, align 8
	%134 = add i64 %133, 1
	store i64 %134, i64* %3
	br label %if.done-20

if.else-17:
	; IfStmt
	%135 = load i64, i64* %9, align 8
	%136 = icmp ugt i64 %135, 0
	%137 = zext i1 %136 to i8
	%138 = trunc i8 %137 to i1
	br i1 %138, label %if.then-18, label %if.done-19

if.then-18:
	; AssignStmt
	; SelectorExpr
	%139 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%140 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %139, i64 0
	%141 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %140, i64 0, i32 4
	store i8 1, i8* %141
	br label %if.done-19

if.done-19:
	br label %if.done-20

if.done-20:
	; AssignStmt
	%142 = load i64, i64* %4, align 8
	%143 = mul i64 %142, 10
	store i64 %143, i64* %4
	br label %for.loop-14

for.done-21:
	; AssignStmt
	; SelectorExpr
	%144 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%145 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %144, i64 0
	%146 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %145, i64 0, i32 1
	%147 = load i64, i64* %3, align 8
	store i64 %147, i64* %146
	%148 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.trim(%decimal-17.Decimal* %148, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @decimal-17.shift_left(%decimal-17.Decimal* %a, i64 %k, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca i64, align 16
	%7 = alloca i64, align 16
	%8 = alloca i64, align 16
	%9 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %k, i64* %1
	; delta
	
	%10 = load i64, i64* %1, align 8
	%11 = udiv i64 %10, 4
	%12 = bitcast i64 %11 to i64
	store i64 %12, i64* %2
	; r
	
	; SelectorExpr
	%13 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%14 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %13, i64 0
	%15 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %14, i64 0, i32 1
	%16 = load i64, i64* %15, align 8
	store i64 %16, i64* %3
	; w
	
	; SelectorExpr
	%17 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%18 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %17, i64 0
	%19 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %18, i64 0, i32 1
	%20 = load i64, i64* %19, align 8
	%21 = load i64, i64* %2, align 8
	%22 = add i64 %20, %21
	store i64 %22, i64* %4
	; n
	%23 = bitcast i64* %5 to %..rawptr
	%24 = call %..rawptr @__mem_zero(%..rawptr %23, i64 8)
	store i64 zeroinitializer, i64* %5
	
	; ForStmt
	; AssignStmt
	%25 = load i64, i64* %3, align 8
	%26 = sub i64 %25, 1
	store i64 %26, i64* %3
	br label %for.loop-1

for.loop-1:
	%27 = load i64, i64* %3, align 8
	%28 = icmp sge i64 %27, 0
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	br i1 %30, label %for.body-2, label %for.done-8

for.body-2:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%31 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%32 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %31, i64 0
	%33 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %32, i64 0, i32 0
	%34 = load i64, i64* %3, align 8
	%35 = trunc i64 %34 to i32
	%36 = getelementptr inbounds [384 x i8], [384 x i8]* %33, i64 0, i32 %35
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$1ff, i64 0, i32 0), i64 50}, i64 139, i64 23, i64 %34, i64 384)
	%37 = load i8, i8* %36, align 1
	%38 = zext i8 %37 to i64
	%39 = sub i64 %38, 48
	%40 = load i64, i64* %1, align 8
	%41 = shl i64 %39, %40
	%42 = load i64, i64* %5, align 8
	%43 = add i64 %42, %41
	store i64 %43, i64* %5
	; quo
	
	%44 = load i64, i64* %5, align 8
	%45 = udiv i64 %44, 10
	store i64 %45, i64* %6
	; rem
	
	%46 = load i64, i64* %5, align 8
	%47 = load i64, i64* %6, align 8
	%48 = mul i64 10, %47
	%49 = sub i64 %46, %48
	store i64 %49, i64* %7
	; AssignStmt
	%50 = load i64, i64* %4, align 8
	%51 = sub i64 %50, 1
	store i64 %51, i64* %4
	; IfStmt
	%52 = load i64, i64* %4, align 8
	%53 = icmp slt i64 %52, 384
	%54 = zext i1 %53 to i8
	%55 = trunc i8 %54 to i1
	br i1 %55, label %if.then-3, label %if.else-4

if.then-3:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%56 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%57 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %56, i64 0
	%58 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %57, i64 0, i32 0
	%59 = load i64, i64* %4, align 8
	%60 = trunc i64 %59 to i32
	%61 = getelementptr inbounds [384 x i8], [384 x i8]* %58, i64 0, i32 %60
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$200, i64 0, i32 0), i64 50}, i64 144, i64 13, i64 %59, i64 384)
	%62 = load i64, i64* %7, align 8
	%63 = add i64 48, %62
	%64 = trunc i64 %63 to i8
	store i8 %64, i8* %61
	br label %if.done-7

if.else-4:
	; IfStmt
	%65 = load i64, i64* %7, align 8
	%66 = icmp ne i64 %65, 0
	%67 = zext i1 %66 to i8
	%68 = trunc i8 %67 to i1
	br i1 %68, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%69 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%70 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %69, i64 0
	%71 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %70, i64 0, i32 4
	store i8 1, i8* %71
	br label %if.done-6

if.done-6:
	br label %if.done-7

if.done-7:
	; AssignStmt
	%72 = load i64, i64* %6, align 8
	store i64 %72, i64* %5
	; AssignStmt
	%73 = load i64, i64* %3, align 8
	%74 = sub i64 %73, 1
	store i64 %74, i64* %3
	br label %for.loop-1

for.done-8:
	; ForStmt
	br label %for.loop-9

for.loop-9:
	%75 = load i64, i64* %5, align 8
	%76 = icmp ugt i64 %75, 0
	%77 = zext i1 %76 to i8
	%78 = trunc i8 %77 to i1
	br i1 %78, label %for.body-10, label %for.done-17

for.body-10:
	; quo
	
	%79 = load i64, i64* %5, align 8
	%80 = udiv i64 %79, 10
	store i64 %80, i64* %8
	; rem
	
	%81 = load i64, i64* %5, align 8
	%82 = load i64, i64* %8, align 8
	%83 = mul i64 10, %82
	%84 = sub i64 %81, %83
	store i64 %84, i64* %9
	; AssignStmt
	%85 = load i64, i64* %4, align 8
	%86 = sub i64 %85, 1
	store i64 %86, i64* %4
	; IfStmt
	%87 = load i64, i64* %4, align 8
	%88 = icmp sle i64 0, %87
	%89 = zext i1 %88 to i8
	%90 = trunc i8 %89 to i1
	br i1 %90, label %cmp.and-11, label %if.else-13

cmp.and-11:
	%91 = load i64, i64* %4, align 8
	%92 = icmp slt i64 %91, 384
	%93 = zext i1 %92 to i8
	%94 = trunc i8 %93 to i1
	br i1 %94, label %if.then-12, label %if.else-13

if.then-12:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%95 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%96 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %95, i64 0
	%97 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %96, i64 0, i32 0
	%98 = load i64, i64* %4, align 8
	%99 = trunc i64 %98 to i32
	%100 = getelementptr inbounds [384 x i8], [384 x i8]* %97, i64 0, i32 %99
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$201, i64 0, i32 0), i64 50}, i64 156, i64 13, i64 %98, i64 384)
	%101 = load i64, i64* %9, align 8
	%102 = add i64 48, %101
	%103 = trunc i64 %102 to i8
	store i8 %103, i8* %100
	br label %if.done-16

if.else-13:
	; IfStmt
	%104 = load i64, i64* %9, align 8
	%105 = icmp ne i64 %104, 0
	%106 = zext i1 %105 to i8
	%107 = trunc i8 %106 to i1
	br i1 %107, label %if.then-14, label %if.done-15

if.then-14:
	; AssignStmt
	; SelectorExpr
	%108 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%109 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %108, i64 0
	%110 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %109, i64 0, i32 4
	store i8 1, i8* %110
	br label %if.done-15

if.done-15:
	br label %if.done-16

if.done-16:
	; AssignStmt
	%111 = load i64, i64* %8, align 8
	store i64 %111, i64* %5
	br label %for.loop-9

for.done-17:
	; AssignStmt
	; SelectorExpr
	%112 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%113 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %112, i64 0
	%114 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %113, i64 0, i32 1
	%115 = load i64, i64* %2, align 8
	%116 = load i64, i64* %114, align 8
	%117 = add i64 %116, %115
	store i64 %117, i64* %114
	; AssignStmt
	; SelectorExpr
	%118 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%119 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %118, i64 0
	%120 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %119, i64 0, i32 1
	; min
	; SelectorExpr
	%121 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%122 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %121, i64 0
	%123 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %122, i64 0, i32 1
	%124 = load i64, i64* %123, align 8
	%125 = icmp slt i64 %124, 384
	%126 = select i1 %125, i64 %124, i64 384
	store i64 %126, i64* %120
	; AssignStmt
	; SelectorExpr
	%127 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%128 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %127, i64 0
	%129 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %128, i64 0, i32 2
	%130 = load i64, i64* %2, align 8
	%131 = load i64, i64* %129, align 8
	%132 = add i64 %131, %130
	store i64 %132, i64* %129
	%133 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.trim(%decimal-17.Decimal* %133, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define void @decimal-17.shift(%decimal-17.Decimal* %a, i64 %k, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %k, i64* %1
	; SwitchStmt
	; SelectorExpr
	%2 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%3 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %2, i64 0
	%4 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %3, i64 0, i32 1
	%5 = load i64, i64* %4, align 8
	%6 = icmp eq i64 %5, 0
	%7 = zext i1 %6 to i8
	%8 = icmp eq i8 1, %7
	br i1 %8, label %switch.case.body-2, label %switch.case.next-1

switch.case.next-1:
	%9 = load i64, i64* %1, align 8
	%10 = icmp sgt i64 %9, 0
	%11 = zext i1 %10 to i8
	%12 = icmp eq i8 1, %11
	br i1 %12, label %switch.fall.body-4, label %switch.case.next-3

switch.case.body-2:
	br label %switch.done-13

switch.case.next-3:
	%13 = load i64, i64* %1, align 8
	%14 = icmp slt i64 %13, 0
	%15 = zext i1 %14 to i8
	%16 = icmp eq i8 1, %15
	br i1 %16, label %switch.fall.body-9, label %switch.case.next-8

switch.fall.body-4:
	; ForStmt
	br label %for.loop-5

for.loop-5:
	%17 = load i64, i64* %1, align 8
	%18 = icmp sgt i64 %17, 60
	%19 = zext i1 %18 to i8
	%20 = trunc i8 %19 to i1
	br i1 %20, label %for.body-6, label %for.done-7

for.body-6:
	%21 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.shift_left(%decimal-17.Decimal* %21, i64 60, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%22 = load i64, i64* %1, align 8
	%23 = sub i64 %22, 60
	store i64 %23, i64* %1
	br label %for.loop-5

for.done-7:
	%24 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%25 = load i64, i64* %1, align 8
	%26 = bitcast i64 %25 to i64
	call void @decimal-17.shift_left(%decimal-17.Decimal* %24, i64 %26, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-13

switch.case.next-8:
	br label %switch.done-13

switch.fall.body-9:
	; ForStmt
	br label %for.loop-10

for.loop-10:
	%27 = load i64, i64* %1, align 8
	%28 = icmp slt i64 %27, -60
	%29 = zext i1 %28 to i8
	%30 = trunc i8 %29 to i1
	br i1 %30, label %for.body-11, label %for.done-12

for.body-11:
	%31 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.shift_right(%decimal-17.Decimal* %31, i64 60, %Context* noalias nonnull %__.context_ptr)
	; AssignStmt
	%32 = load i64, i64* %1, align 8
	%33 = add i64 %32, 60
	store i64 %33, i64* %1
	br label %for.loop-10

for.done-12:
	%34 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%35 = load i64, i64* %1, align 8
	%36 = sub i64 0, %35
	%37 = bitcast i64 %36 to i64
	call void @decimal-17.shift_right(%decimal-17.Decimal* %34, i64 %37, %Context* noalias nonnull %__.context_ptr)
	br label %switch.done-13

switch.done-13:
	ret void
}

define i8 @decimal-17.can_round_up(%decimal-17.Decimal* %a, i64 %nd, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret i8 0

if.done-3:
	; IfStmt
	; IndexExpr
	; SelectorExpr
	%14 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%15 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %14, i64 0
	%16 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %15, i64 0, i32 0
	%17 = load i64, i64* %1, align 8
	%18 = trunc i64 %17 to i32
	%19 = getelementptr inbounds [384 x i8], [384 x i8]* %16, i64 0, i32 %18
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$202, i64 0, i32 0), i64 50}, i64 195, i64 14, i64 %17, i64 384)
	%20 = load i8, i8* %19, align 1
	%21 = icmp eq i8 %20, 53
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %cmp.and-4, label %if.done-10

cmp.and-4:
	%24 = load i64, i64* %1, align 8
	%25 = add i64 %24, 1
	; SelectorExpr
	%26 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%27 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %26, i64 0
	%28 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %27, i64 0, i32 1
	%29 = load i64, i64* %28, align 8
	%30 = icmp eq i64 %25, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-10

if.then-5:
	; IfStmt
	; SelectorExpr
	%33 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %34, i64 0, i32 4
	%36 = load i8, i8* %35, align 1
	%37 = trunc i8 %36 to i1
	br i1 %37, label %if.then-6, label %if.done-7

if.then-6:
	; ReturnStmt
	ret i8 1

if.done-7:
	; ReturnStmt
	%38 = load i64, i64* %1, align 8
	%39 = icmp sgt i64 %38, 0
	%40 = zext i1 %39 to i8
	%41 = load i64, i64* %1, align 8
	%42 = icmp sgt i64 %41, 0
	%43 = zext i1 %42 to i8
	%44 = trunc i8 %43 to i1
	br i1 %44, label %logical.cmp.rhs-8, label %logical.cmp.done-9

logical.cmp.rhs-8:
	; IndexExpr
	; SelectorExpr
	%45 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%46 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %45, i64 0
	%47 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %46, i64 0, i32 0
	%48 = load i64, i64* %1, align 8
	%49 = sub i64 %48, 1
	%50 = trunc i64 %49 to i32
	%51 = getelementptr inbounds [384 x i8], [384 x i8]* %47, i64 0, i32 %50
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$203, i64 0, i32 0), i64 50}, i64 197, i64 30, i64 %49, i64 384)
	%52 = load i8, i8* %51, align 1
	%53 = sub i8 %52, 48
	%54 = urem i8 %53, 2
	%55 = icmp ne i8 %54, 0
	%56 = zext i1 %55 to i8
	br label %logical.cmp.done-9

logical.cmp.done-9:
	%57 = phi i8 [ 0, %if.done-7 ], [ %56, %logical.cmp.rhs-8 ]
	ret i8 %57

if.done-10:
	; ReturnStmt
	; IndexExpr
	; SelectorExpr
	%58 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%59 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %58, i64 0
	%60 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %59, i64 0, i32 0
	%61 = load i64, i64* %1, align 8
	%62 = trunc i64 %61 to i32
	%63 = getelementptr inbounds [384 x i8], [384 x i8]* %60, i64 0, i32 %62
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$204, i64 0, i32 0), i64 50}, i64 200, i64 18, i64 %61, i64 384)
	%64 = load i8, i8* %63, align 1
	%65 = icmp uge i8 %64, 53
	%66 = zext i1 %65 to i8
	ret i8 %66
}

define void @decimal-17.round(%decimal-17.Decimal* %a, i64 %nd, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; IfStmt
	%14 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%15 = load i64, i64* %1, align 8
	%16 = call i8 @decimal-17.can_round_up(%decimal-17.Decimal* %14, i64 %15, %Context* noalias nonnull %__.context_ptr)
	%17 = trunc i8 %16 to i1
	br i1 %17, label %if.then-4, label %if.else-5

if.then-4:
	%18 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%19 = load i64, i64* %1, align 8
	call void @decimal-17.round_up(%decimal-17.Decimal* %18, i64 %19, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.else-5:
	%20 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%21 = load i64, i64* %1, align 8
	call void @decimal-17.round_down(%decimal-17.Decimal* %20, i64 %21, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.done-6:
	ret void
}

define void @decimal-17.round_up(%decimal-17.Decimal* %a, i64 %nd, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca i8, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %nd, i64* %1
	; IfStmt
	%4 = load i64, i64* %1, align 8
	%5 = icmp slt i64 %4, 0
	%6 = zext i1 %5 to i8
	%7 = trunc i8 %6 to i1
	br i1 %7, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%8 = load i64, i64* %1, align 8
	; SelectorExpr
	%9 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%10 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %9, i64 0
	%11 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %10, i64 0, i32 1
	%12 = load i64, i64* %11, align 8
	%13 = icmp sge i64 %8, %12
	%14 = zext i1 %13 to i8
	%15 = trunc i8 %14 to i1
	br i1 %15, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; ForStmt
	; i
	
	%16 = load i64, i64* %1, align 8
	%17 = sub i64 %16, 1
	store i64 %17, i64* %2
	br label %for.loop-4

for.loop-4:
	%18 = load i64, i64* %2, align 8
	%19 = icmp sge i64 %18, 0
	%20 = zext i1 %19 to i8
	%21 = trunc i8 %20 to i1
	br i1 %21, label %for.body-5, label %for.done-8

for.body-5:
	; IfStmt
	; c
	
	; IndexExpr
	; SelectorExpr
	%22 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%23 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %22, i64 0
	%24 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %23, i64 0, i32 0
	%25 = load i64, i64* %2, align 8
	%26 = trunc i64 %25 to i32
	%27 = getelementptr inbounds [384 x i8], [384 x i8]* %24, i64 0, i32 %26
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$205, i64 0, i32 0), i64 50}, i64 216, i64 20, i64 %25, i64 384)
	%28 = load i8, i8* %27, align 1
	store i8 %28, i8* %3
	%29 = load i8, i8* %3, align 1
	%30 = icmp ult i8 %29, 57
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-6, label %if.done-7

if.then-6:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%33 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%34 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %33, i64 0
	%35 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %34, i64 0, i32 0
	%36 = load i64, i64* %2, align 8
	%37 = trunc i64 %36 to i32
	%38 = getelementptr inbounds [384 x i8], [384 x i8]* %35, i64 0, i32 %37
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([51 x i8], [51 x i8]* @__str$206, i64 0, i32 0), i64 50}, i64 217, i64 13, i64 %36, i64 384)
	%39 = load i8, i8* %38, align 1
	%40 = add i8 %39, 1
	store i8 %40, i8* %38
	; AssignStmt
	; SelectorExpr
	%41 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%42 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %41, i64 0
	%43 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %42, i64 0, i32 1
	%44 = load i64, i64* %2, align 8
	%45 = add i64 %44, 1
	store i64 %45, i64* %43
	; ReturnStmt
	ret void

if.done-7:
	; AssignStmt
	%46 = load i64, i64* %2, align 8
	%47 = sub i64 %46, 1
	store i64 %47, i64* %2
	br label %for.loop-4

for.done-8:
	; AssignStmt
	; IndexExpr
	; SelectorExpr
	%48 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%49 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %48, i64 0
	%50 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %49, i64 0, i32 0
	%51 = getelementptr inbounds [384 x i8], [384 x i8]* %50, i64 0, i32 0
	store i8 49, i8* %51
	; AssignStmt
	; SelectorExpr
	%52 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%53 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %52, i64 0
	%54 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %53, i64 0, i32 1
	store i64 1, i64* %54
	; AssignStmt
	; SelectorExpr
	%55 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%56 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %55, i64 0
	%57 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %56, i64 0, i32 2
	%58 = load i64, i64* %57, align 8
	%59 = add i64 %58, 1
	store i64 %59, i64* %57
	ret void
}

define void @decimal-17.round_down(%decimal-17.Decimal* %a, i64 %nd, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca %decimal-17.Decimal*, align 16
	%1 = alloca i64, align 16
	
	store %decimal-17.Decimal* %a, %decimal-17.Decimal** %0
	
	store i64 %nd, i64* %1
	; IfStmt
	%2 = load i64, i64* %1, align 8
	%3 = icmp slt i64 %2, 0
	%4 = zext i1 %3 to i8
	%5 = trunc i8 %4 to i1
	br i1 %5, label %if.then-2, label %cmp.or-1

cmp.or-1:
	%6 = load i64, i64* %1, align 8
	; SelectorExpr
	%7 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%8 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %7, i64 0
	%9 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %8, i64 0, i32 1
	%10 = load i64, i64* %9, align 8
	%11 = icmp sge i64 %6, %10
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-2, label %if.done-3

if.then-2:
	; ReturnStmt
	ret void

if.done-3:
	; AssignStmt
	; SelectorExpr
	%14 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	%15 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %14, i64 0
	%16 = getelementptr inbounds %decimal-17.Decimal, %decimal-17.Decimal* %15, i64 0, i32 1
	%17 = load i64, i64* %1, align 8
	store i64 %17, i64* %16
	%18 = load %decimal-17.Decimal*, %decimal-17.Decimal** %0, align 8
	call void @decimal-17.trim(%decimal-17.Decimal* %18, %Context* noalias nonnull %__.context_ptr)
	ret void
}

define i8* @raw-5.string_data-4271(%..string %s, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %..string, align 16
	%1 = alloca %raw-5.String*, align 16
	
	store %..string %s, %..string* %0
	; ReturnStmt
	; SelectorExpr
	%2 = getelementptr inbounds %..string, %..string* %0, i64 0
	%3 = bitcast %..string* %2 to %raw-5.String*
	%4 = bitcast %raw-5.String** %1 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 8)
	store %raw-5.String* zeroinitializer, %raw-5.String** %1
	store %raw-5.String* %3, %raw-5.String** %1
	%6 = load %raw-5.String*, %raw-5.String** %1, align 8
	%7 = getelementptr inbounds %raw-5.String, %raw-5.String* %6, i64 0
	%8 = getelementptr inbounds %raw-5.String, %raw-5.String* %7, i64 0, i32 0
	%9 = load i8*, i8** %8, align 8
	ret i8* %9
}

define i64 @_preload-0.copy-4790({i8*, i64}* %dst, {i8*, i64}* %src) #0 {
decls-0:
	%0 = alloca i64, align 16
	%1 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%2 = load {i8*, i64}, {i8*, i64}* %src, align 8
	; n
	
	; max
	; min
	%3 = load {i8*, i64}, {i8*, i64}* %src, align 8
	%4 = extractvalue {i8*, i64} %3, 1
	%5 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%6 = extractvalue {i8*, i64} %5, 1
	%7 = icmp slt i64 %6, %4
	%8 = select i1 %7, i64 %6, i64 %4
	%9 = icmp sgt i64 0, %8
	%10 = select i1 %9, i64 0, i64 %8
	store i64 %10, i64* %0
	; IfStmt
	%11 = load i64, i64* %0, align 8
	%12 = icmp sgt i64 %11, 0
	%13 = zext i1 %12 to i8
	%14 = trunc i8 %13 to i1
	br i1 %14, label %if.then-1, label %if.done-2

if.then-1:
	; IndexExpr
	%15 = load {i8*, i64}, {i8*, i64}* %dst, align 8
	%16 = extractvalue {i8*, i64} %15, 0
	%17 = extractvalue {i8*, i64} %15, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$207, i64 0, i32 0), i64 51}, i64 317, i64 30, i64 0, i64 %17)
	%18 = getelementptr inbounds i8, i8* %16, i64 0
	%19 = getelementptr inbounds i8, i8* %18, i64 0
	; IndexExpr
	%20 = load {i8*, i64}, {i8*, i64}* %src, align 8
	%21 = extractvalue {i8*, i64} %20, 0
	%22 = extractvalue {i8*, i64} %20, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$208, i64 0, i32 0), i64 51}, i64 317, i64 39, i64 0, i64 %22)
	%23 = getelementptr inbounds i8, i8* %21, i64 0
	%24 = getelementptr inbounds i8, i8* %23, i64 0
	%25 = load i64, i64* %0, align 8
	%26 = mul i64 %25, 1
	%27 = bitcast i8* %19 to %..rawptr
	%28 = bitcast i8* %24 to %..rawptr
	%29 = call %..rawptr @__mem_copy(%..rawptr %27, %..rawptr %28, i64 %26)
	br label %if.done-2

if.done-2:
	; ReturnStmt
	%30 = load i64, i64* %0, align 8
	ret i64 %30
}

define %html-11.Document* @_preload-0.new-4958(%Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %html-11.Document*, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; ptr
	
	%3 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%4 = bitcast %Source_Code_Location* %1 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %3, %Source_Code_Location* %1
	%6 = call %..rawptr @alloc(i64 192, i64 8, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	%7 = bitcast %..rawptr %6 to %html-11.Document*
	store %html-11.Document* %7, %html-11.Document** %0
	; AssignStmt
	%8 = load %html-11.Document*, %html-11.Document** %0, align 8
	%9 = getelementptr inbounds %html-11.Document, %html-11.Document* %8, i64 0
	store %html-11.Document zeroinitializer, %html-11.Document* %9
	; ReturnStmt
	%10 = load %html-11.Document*, %html-11.Document** %0, align 8
	ret %html-11.Document* %10
}

define %html-11.Element* @_preload-0.new-4969(%Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) alwaysinline #1 {
decls-0:
	%0 = alloca %html-11.Element*, align 16
	%1 = alloca %Source_Code_Location, align 16
	%2 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; ptr
	
	%3 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%4 = bitcast %Source_Code_Location* %1 to %..rawptr
	%5 = call %..rawptr @__mem_zero(%..rawptr %4, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %1
	store %Source_Code_Location %3, %Source_Code_Location* %1
	%6 = call %..rawptr @alloc(i64 152, i64 8, %Source_Code_Location* %1, %Context* noalias nonnull %__.context_ptr)
	%7 = bitcast %..rawptr %6 to %html-11.Element*
	store %html-11.Element* %7, %html-11.Element** %0
	; AssignStmt
	%8 = load %html-11.Element*, %html-11.Element** %0, align 8
	%9 = getelementptr inbounds %html-11.Element, %html-11.Element* %8, i64 0
	store %html-11.Element zeroinitializer, %html-11.Element* %9
	; ReturnStmt
	%10 = load %html-11.Element*, %html-11.Element** %0, align 8
	ret %html-11.Element* %10
}

define i64 @_preload-0.append-5089({%html-11.Element**, i64, i64, %Allocator}* %array, {%html-11.Element**, i64}* %args, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {%html-11.Element**, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca %html-11.Element**, align 16
	%6 = alloca %Source_Code_Location, align 16
	
	store {%html-11.Element**, i64, i64, %Allocator}* %array, {%html-11.Element**, i64, i64, %Allocator}** %0
	%7 = load {%html-11.Element**, i64}, {%html-11.Element**, i64}* %args, align 8
	%8 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%10 = icmp eq {%html-11.Element**, i64, i64, %Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	
	%13 = load {%html-11.Element**, i64}, {%html-11.Element**, i64}* %args, align 8
	%14 = extractvalue {%html-11.Element**, i64} %13, 1
	store i64 %14, i64* %1
	; IfStmt
	%15 = load i64, i64* %1, align 8
	%16 = icmp sle i64 %15, 0
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%19 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%20 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %19, align 8
	%21 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %20, 1
	ret i64 %21

if.done-4:
	; IfStmt
	%22 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%23 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %22, align 8
	%24 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %23, 2
	%25 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%26 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %25, align 8
	%27 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %26, 1
	%28 = load i64, i64* %1, align 8
	%29 = add i64 %27, %28
	%30 = icmp sle i64 %24, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-6

if.then-5:
	; cap
	
	%33 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%34 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %33, align 8
	%35 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %34, 2
	%36 = mul i64 2, %35
	; max
	%37 = load i64, i64* %1, align 8
	%38 = icmp sgt i64 8, %37
	%39 = select i1 %38, i64 8, i64 %37
	%40 = add i64 %36, %39
	store i64 %40, i64* %2
	; AssignStmt
	%41 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%42 = load i64, i64* %2, align 8
	%43 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%44 = bitcast %Source_Code_Location* %3 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %43, %Source_Code_Location* %3
	%46 = call i8 @_preload-0.reserve_dynamic_array-6128({%html-11.Element**, i64, i64, %Allocator}* %41, i64 %42, %Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.done-6:
	; AssignStmt
	; min
	%47 = load i64, i64* %1, align 8
	%48 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%49 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %48, align 8
	%50 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %49, 2
	%51 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%52 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %51, align 8
	%53 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %52, 1
	%54 = sub i64 %50, %53
	%55 = icmp slt i64 %54, %47
	%56 = select i1 %55, i64 %54, i64 %47
	store i64 %56, i64* %1
	; IfStmt
	%57 = load i64, i64* %1, align 8
	%58 = icmp sgt i64 %57, 0
	%59 = zext i1 %58 to i8
	%60 = trunc i8 %59 to i1
	br i1 %60, label %if.then-7, label %if.done-8

if.then-7:
	; a
	
	%61 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%62 = bitcast {%html-11.Element**, i64, i64, %Allocator}* %61 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %62, %raw-5.Dynamic_Array** %4
	; data
	
	; SelectorExpr
	%63 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%64 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %63, i64 0
	%65 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %64, i64 0, i32 0
	%66 = load %..rawptr, %..rawptr* %65, align 8
	%67 = bitcast %..rawptr %66 to %html-11.Element**
	store %html-11.Element** %67, %html-11.Element*** %5
	%68 = load %html-11.Element**, %html-11.Element*** %5, align 8
	%69 = icmp ne %html-11.Element** %68, zeroinitializer
	%70 = zext i1 %69 to i8
	%71 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$209, i64 0, i32 0), i64 51}, i64 337, i64 3, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$20a, i64 0, i32 0), i64 6})
	%72 = trunc i8 %70 to i1
	%73 = bitcast %Source_Code_Location* %6 to %..rawptr
	%74 = call %..rawptr @__mem_zero(%..rawptr %73, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %71, %Source_Code_Location* %6
	%75 = call i8 @assert(i1 %72, %..string zeroinitializer, %Source_Code_Location* %6)
	%76 = load %html-11.Element**, %html-11.Element*** %5, align 8
	; SelectorExpr
	%77 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%78 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %77, i64 0
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	%81 = getelementptr inbounds %html-11.Element*, %html-11.Element** %76, i64 %80
	; IndexExpr
	%82 = load {%html-11.Element**, i64}, {%html-11.Element**, i64}* %args, align 8
	%83 = extractvalue {%html-11.Element**, i64} %82, 0
	%84 = extractvalue {%html-11.Element**, i64} %82, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$20b, i64 0, i32 0), i64 51}, i64 338, i64 34, i64 0, i64 %84)
	%85 = getelementptr inbounds %html-11.Element*, %html-11.Element** %83, i64 0
	%86 = getelementptr inbounds %html-11.Element*, %html-11.Element** %85, i64 0
	%87 = load i64, i64* %1, align 8
	%88 = mul i64 8, %87
	%89 = bitcast %html-11.Element** %81 to %..rawptr
	%90 = bitcast %html-11.Element** %86 to %..rawptr
	%91 = call %..rawptr @__mem_copy(%..rawptr %89, %..rawptr %90, i64 %88)
	; AssignStmt
	; SelectorExpr
	%92 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%93 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %92, i64 0
	%94 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %93, i64 0, i32 1
	%95 = load i64, i64* %1, align 8
	%96 = load i64, i64* %94, align 8
	%97 = add i64 %96, %95
	store i64 %97, i64* %94
	br label %if.done-8

if.done-8:
	; ReturnStmt
	%98 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%99 = load {%html-11.Element**, i64, i64, %Allocator}, {%html-11.Element**, i64, i64, %Allocator}* %98, align 8
	%100 = extractvalue {%html-11.Element**, i64, i64, %Allocator} %99, 1
	ret i64 %100
}

define i64 @_preload-0.append_string-5135({i8*, i64, i64, %Allocator}* %array, {%..string*, i64}* %args, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8*, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	%8 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; RangeStmt
	; arg
	%10 = bitcast %..string* %1 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 16)
	store %..string zeroinitializer, %..string* %1
	
	%12 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%13 = bitcast i64* %2 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 8)
	store i64 zeroinitializer, i64* %2
	%15 = extractvalue {%..string*, i64} %12, 1
	store i64 %15, i64* %2
	%16 = bitcast i64* %3 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%18 = load i64, i64* %3, align 8
	%19 = add i64 %18, 1
	store i64 %19, i64* %3
	%20 = load i64, i64* %2, align 8
	%21 = icmp slt i64 %19, %20
	br i1 %21, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%22 = load i64, i64* %3, align 8
	%23 = extractvalue {%..string*, i64} %12, 0
	%24 = getelementptr inbounds %..string, %..string* %23, i64 %22
	%25 = load %..string, %..string* %24, align 8
	store %..string %25, %..string* %1
	%26 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%27 = load %..string, %..string* %1, align 8
	%28 = extractvalue %..string %27, 0
	%29 = bitcast i8** %4 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 8)
	store i8* zeroinitializer, i8** %4
	store i8* %28, i8** %4
	%31 = extractvalue %..string %27, 1
	%32 = sub i64 %31, 0
	%33 = load i8*, i8** %4, align 8
	%34 = getelementptr inbounds i8, i8* %33, i64 0
	%35 = bitcast {i8*, i64}* %5 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %34, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %32, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%40 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%41 = bitcast {i8*, i64}* %6 to %..rawptr
	%42 = call %..rawptr @__mem_zero(%..rawptr %41, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %39, {i8*, i64}* %6
	%43 = bitcast %Source_Code_Location* %7 to %..rawptr
	%44 = call %..rawptr @__mem_zero(%..rawptr %43, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %40, %Source_Code_Location* %7
	%45 = call i64 @_preload-0.append-6146({i8*, i64, i64, %Allocator}* %26, {i8*, i64}* %6, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%46 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%47 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %46, align 8
	%48 = extractvalue {i8*, i64, i64, %Allocator} %47, 1
	ret i64 %48
}

define i64 @_preload-0.append_string-5374({i8*, i64, i64, %Allocator}* %array, {%..string*, i64}* %args, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca %..string, align 16
	%2 = alloca i64, align 16
	%3 = alloca i64, align 16
	%4 = alloca i8*, align 16
	%5 = alloca {i8*, i64}, align 16
	%6 = alloca {i8*, i64}, align 16
	%7 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	%8 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; RangeStmt
	; arg
	%10 = bitcast %..string* %1 to %..rawptr
	%11 = call %..rawptr @__mem_zero(%..rawptr %10, i64 16)
	store %..string zeroinitializer, %..string* %1
	
	%12 = load {%..string*, i64}, {%..string*, i64}* %args, align 8
	%13 = bitcast i64* %2 to %..rawptr
	%14 = call %..rawptr @__mem_zero(%..rawptr %13, i64 8)
	store i64 zeroinitializer, i64* %2
	%15 = extractvalue {%..string*, i64} %12, 1
	store i64 %15, i64* %2
	%16 = bitcast i64* %3 to %..rawptr
	%17 = call %..rawptr @__mem_zero(%..rawptr %16, i64 8)
	store i64 zeroinitializer, i64* %3
	store i64 -1, i64* %3
	br label %for.index.loop-1

for.index.loop-1:
	%18 = load i64, i64* %3, align 8
	%19 = add i64 %18, 1
	store i64 %19, i64* %3
	%20 = load i64, i64* %2, align 8
	%21 = icmp slt i64 %19, %20
	br i1 %21, label %for.index.body-2, label %for.index.done-3

for.index.body-2:
	%22 = load i64, i64* %3, align 8
	%23 = extractvalue {%..string*, i64} %12, 0
	%24 = getelementptr inbounds %..string, %..string* %23, i64 %22
	%25 = load %..string, %..string* %24, align 8
	store %..string %25, %..string* %1
	%26 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%27 = load %..string, %..string* %1, align 8
	%28 = extractvalue %..string %27, 0
	%29 = bitcast i8** %4 to %..rawptr
	%30 = call %..rawptr @__mem_zero(%..rawptr %29, i64 8)
	store i8* zeroinitializer, i8** %4
	store i8* %28, i8** %4
	%31 = extractvalue %..string %27, 1
	%32 = sub i64 %31, 0
	%33 = load i8*, i8** %4, align 8
	%34 = getelementptr inbounds i8, i8* %33, i64 0
	%35 = bitcast {i8*, i64}* %5 to %..rawptr
	%36 = call %..rawptr @__mem_zero(%..rawptr %35, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %5
	%37 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 0
	store i8* %34, i8** %37
	%38 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %5, i64 0, i32 1
	store i64 %32, i64* %38
	%39 = load {i8*, i64}, {i8*, i64}* %5, align 8
	%40 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%41 = bitcast {i8*, i64}* %6 to %..rawptr
	%42 = call %..rawptr @__mem_zero(%..rawptr %41, i64 16)
	store {i8*, i64} zeroinitializer, {i8*, i64}* %6
	store {i8*, i64} %39, {i8*, i64}* %6
	%43 = bitcast %Source_Code_Location* %7 to %..rawptr
	%44 = call %..rawptr @__mem_zero(%..rawptr %43, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %7
	store %Source_Code_Location %40, %Source_Code_Location* %7
	%45 = call i64 @_preload-0.append-5382({i8*, i64, i64, %Allocator}* %26, {i8*, i64}* %6, %Source_Code_Location* %7, %Context* noalias nonnull %__.context_ptr)
	br label %for.index.loop-1

for.index.done-3:
	; ReturnStmt
	%46 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%47 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %46, align 8
	%48 = extractvalue {i8*, i64, i64, %Allocator} %47, 1
	ret i64 %48
}

define i64 @_preload-0.append-5382({i8*, i64, i64, %Allocator}* %array, {i8*, i64}* %args, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca i8*, align 16
	%6 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	%7 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%8 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%10 = icmp eq {i8*, i64, i64, %Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	
	%13 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%14 = extractvalue {i8*, i64} %13, 1
	store i64 %14, i64* %1
	; IfStmt
	%15 = load i64, i64* %1, align 8
	%16 = icmp sle i64 %15, 0
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%19 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%20 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %19, align 8
	%21 = extractvalue {i8*, i64, i64, %Allocator} %20, 1
	ret i64 %21

if.done-4:
	; IfStmt
	%22 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%23 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %22, align 8
	%24 = extractvalue {i8*, i64, i64, %Allocator} %23, 2
	%25 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%26 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %25, align 8
	%27 = extractvalue {i8*, i64, i64, %Allocator} %26, 1
	%28 = load i64, i64* %1, align 8
	%29 = add i64 %27, %28
	%30 = icmp sle i64 %24, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-6

if.then-5:
	; cap
	
	%33 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%34 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %33, align 8
	%35 = extractvalue {i8*, i64, i64, %Allocator} %34, 2
	%36 = mul i64 2, %35
	; max
	%37 = load i64, i64* %1, align 8
	%38 = icmp sgt i64 8, %37
	%39 = select i1 %38, i64 8, i64 %37
	%40 = add i64 %36, %39
	store i64 %40, i64* %2
	; AssignStmt
	%41 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%42 = load i64, i64* %2, align 8
	%43 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%44 = bitcast %Source_Code_Location* %3 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %43, %Source_Code_Location* %3
	%46 = call i8 @_preload-0.reserve_dynamic_array-6171({i8*, i64, i64, %Allocator}* %41, i64 %42, %Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.done-6:
	; AssignStmt
	; min
	%47 = load i64, i64* %1, align 8
	%48 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%49 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %48, align 8
	%50 = extractvalue {i8*, i64, i64, %Allocator} %49, 2
	%51 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%52 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %51, align 8
	%53 = extractvalue {i8*, i64, i64, %Allocator} %52, 1
	%54 = sub i64 %50, %53
	%55 = icmp slt i64 %54, %47
	%56 = select i1 %55, i64 %54, i64 %47
	store i64 %56, i64* %1
	; IfStmt
	%57 = load i64, i64* %1, align 8
	%58 = icmp sgt i64 %57, 0
	%59 = zext i1 %58 to i8
	%60 = trunc i8 %59 to i1
	br i1 %60, label %if.then-7, label %if.done-8

if.then-7:
	; a
	
	%61 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%62 = bitcast {i8*, i64, i64, %Allocator}* %61 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %62, %raw-5.Dynamic_Array** %4
	; data
	
	; SelectorExpr
	%63 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%64 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %63, i64 0
	%65 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %64, i64 0, i32 0
	%66 = load %..rawptr, %..rawptr* %65, align 8
	%67 = bitcast %..rawptr %66 to i8*
	store i8* %67, i8** %5
	%68 = load i8*, i8** %5, align 8
	%69 = icmp ne i8* %68, zeroinitializer
	%70 = zext i1 %69 to i8
	%71 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$20c, i64 0, i32 0), i64 51}, i64 337, i64 3, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$20d, i64 0, i32 0), i64 6})
	%72 = trunc i8 %70 to i1
	%73 = bitcast %Source_Code_Location* %6 to %..rawptr
	%74 = call %..rawptr @__mem_zero(%..rawptr %73, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %71, %Source_Code_Location* %6
	%75 = call i8 @assert(i1 %72, %..string zeroinitializer, %Source_Code_Location* %6)
	%76 = load i8*, i8** %5, align 8
	; SelectorExpr
	%77 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%78 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %77, i64 0
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	%81 = getelementptr inbounds i8, i8* %76, i64 %80
	; IndexExpr
	%82 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%83 = extractvalue {i8*, i64} %82, 0
	%84 = extractvalue {i8*, i64} %82, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$20e, i64 0, i32 0), i64 51}, i64 338, i64 34, i64 0, i64 %84)
	%85 = getelementptr inbounds i8, i8* %83, i64 0
	%86 = getelementptr inbounds i8, i8* %85, i64 0
	%87 = load i64, i64* %1, align 8
	%88 = mul i64 1, %87
	%89 = bitcast i8* %81 to %..rawptr
	%90 = bitcast i8* %86 to %..rawptr
	%91 = call %..rawptr @__mem_copy(%..rawptr %89, %..rawptr %90, i64 %88)
	; AssignStmt
	; SelectorExpr
	%92 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%93 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %92, i64 0
	%94 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %93, i64 0, i32 1
	%95 = load i64, i64* %1, align 8
	%96 = load i64, i64* %94, align 8
	%97 = add i64 %96, %95
	store i64 %97, i64* %94
	br label %if.done-8

if.done-8:
	; ReturnStmt
	%98 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%99 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %98, align 8
	%100 = extractvalue {i8*, i64, i64, %Allocator} %99, 1
	ret i64 %100
}

define i8 @_preload-0.reserve_dynamic_array-6128({%html-11.Element**, i64, i64, %Allocator}* %array, i64 %capacity, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {%html-11.Element**, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %raw-5.Dynamic_Array*, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Allocator, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store {%html-11.Element**, i64, i64, %Allocator}* %array, {%html-11.Element**, i64, i64, %Allocator}** %0
	
	store i64 %capacity, i64* %1
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%11 = icmp eq {%html-11.Element**, i64, i64, %Allocator}* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; a
	
	%14 = load {%html-11.Element**, i64, i64, %Allocator}*, {%html-11.Element**, i64, i64, %Allocator}** %0, align 8
	%15 = bitcast {%html-11.Element**, i64, i64, %Allocator}* %14 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %15, %raw-5.Dynamic_Array** %2
	; IfStmt
	%16 = load i64, i64* %1, align 8
	; SelectorExpr
	%17 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sle i64 %16, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%25 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %25, i64 0, i32 3
	%27 = getelementptr inbounds %Allocator, %Allocator* %26, i64 0, i32 0
	%28 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %27, align 8
	%29 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%32 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%33 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %33, i64 0, i32 3
	; SelectorExpr
	%35 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%36 = load %Allocator, %Allocator* %35, align 8
	store %Allocator %36, %Allocator* %34
	br label %if.done-6

if.done-6:
	; SelectorExpr
	; SelectorExpr
	%37 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%38 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %37, i64 0
	%39 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %38, i64 0, i32 3
	%40 = getelementptr inbounds %Allocator, %Allocator* %39, i64 0, i32 0
	%41 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %40, align 8
	%42 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %41, zeroinitializer
	%43 = zext i1 %42 to i8
	%44 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$20f, i64 0, i32 0), i64 51}, i64 382, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__str$210, i64 0, i32 0), i64 21})
	%45 = trunc i8 %43 to i1
	%46 = bitcast %Source_Code_Location* %3 to %..rawptr
	%47 = call %..rawptr @__mem_zero(%..rawptr %46, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %44, %Source_Code_Location* %3
	%48 = call i8 @assert(i1 %45, %..string zeroinitializer, %Source_Code_Location* %3)
	; old_size
	
	; SelectorExpr
	%49 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%50 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %49, i64 0
	%51 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %50, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	%53 = mul i64 %52, 8
	store i64 %53, i64* %4
	; new_size
	
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 %54, 8
	store i64 %55, i64* %5
	; allocator
	
	; SelectorExpr
	%56 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%57 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %56, i64 0
	%58 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %57, i64 0, i32 3
	%59 = load %Allocator, %Allocator* %58, align 8
	store %Allocator %59, %Allocator* %6
	; new_data
	
	; SelectorExpr
	%60 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 0
	%61 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %60, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = load i64, i64* %5, align 8
	; SelectorExpr
	%65 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%66 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %65, i64 0
	%67 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %66, i64 0, i32 0
	%68 = load %..rawptr, %..rawptr* %67, align 8
	%69 = load i64, i64* %4, align 8
	%70 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%71 = bitcast %Source_Code_Location* %8 to %..rawptr
	%72 = call %..rawptr @__mem_zero(%..rawptr %71, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %70, %Source_Code_Location* %8
	%73 = call %..rawptr %61(%..rawptr %63, i8 3, i64 %64, i64 8, %..rawptr %68, i64 %69, i64 0, %Source_Code_Location* %8, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %73, %..rawptr* %7
	; IfStmt
	%74 = load %..rawptr, %..rawptr* %7, align 8
	%75 = icmp eq %..rawptr %74, zeroinitializer
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	; AssignStmt
	; SelectorExpr
	%78 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %79, i64 0, i32 0
	%81 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %81, %..rawptr* %80
	; AssignStmt
	; SelectorExpr
	%82 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%83 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %82, i64 0
	%84 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %83, i64 0, i32 2
	%85 = load i64, i64* %1, align 8
	store i64 %85, i64* %84
	; ReturnStmt
	ret i8 1
}

define i64 @_preload-0.append-6146({i8*, i64, i64, %Allocator}* %array, {i8*, i64}* %args, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca i64, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca %raw-5.Dynamic_Array*, align 16
	%5 = alloca i8*, align 16
	%6 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	%7 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%8 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%9 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%10 = icmp eq {i8*, i64, i64, %Allocator}* %9, zeroinitializer
	%11 = zext i1 %10 to i8
	%12 = trunc i8 %11 to i1
	br i1 %12, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i64 0

if.done-2:
	; arg_len
	
	%13 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%14 = extractvalue {i8*, i64} %13, 1
	store i64 %14, i64* %1
	; IfStmt
	%15 = load i64, i64* %1, align 8
	%16 = icmp sle i64 %15, 0
	%17 = zext i1 %16 to i8
	%18 = trunc i8 %17 to i1
	br i1 %18, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	%19 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%20 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %19, align 8
	%21 = extractvalue {i8*, i64, i64, %Allocator} %20, 1
	ret i64 %21

if.done-4:
	; IfStmt
	%22 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%23 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %22, align 8
	%24 = extractvalue {i8*, i64, i64, %Allocator} %23, 2
	%25 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%26 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %25, align 8
	%27 = extractvalue {i8*, i64, i64, %Allocator} %26, 1
	%28 = load i64, i64* %1, align 8
	%29 = add i64 %27, %28
	%30 = icmp sle i64 %24, %29
	%31 = zext i1 %30 to i8
	%32 = trunc i8 %31 to i1
	br i1 %32, label %if.then-5, label %if.done-6

if.then-5:
	; cap
	
	%33 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%34 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %33, align 8
	%35 = extractvalue {i8*, i64, i64, %Allocator} %34, 2
	%36 = mul i64 2, %35
	; max
	%37 = load i64, i64* %1, align 8
	%38 = icmp sgt i64 8, %37
	%39 = select i1 %38, i64 8, i64 %37
	%40 = add i64 %36, %39
	store i64 %40, i64* %2
	; AssignStmt
	%41 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%42 = load i64, i64* %2, align 8
	%43 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%44 = bitcast %Source_Code_Location* %3 to %..rawptr
	%45 = call %..rawptr @__mem_zero(%..rawptr %44, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %43, %Source_Code_Location* %3
	%46 = call i8 @_preload-0.reserve_dynamic_array-6382({i8*, i64, i64, %Allocator}* %41, i64 %42, %Source_Code_Location* %3, %Context* noalias nonnull %__.context_ptr)
	br label %if.done-6

if.done-6:
	; AssignStmt
	; min
	%47 = load i64, i64* %1, align 8
	%48 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%49 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %48, align 8
	%50 = extractvalue {i8*, i64, i64, %Allocator} %49, 2
	%51 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%52 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %51, align 8
	%53 = extractvalue {i8*, i64, i64, %Allocator} %52, 1
	%54 = sub i64 %50, %53
	%55 = icmp slt i64 %54, %47
	%56 = select i1 %55, i64 %54, i64 %47
	store i64 %56, i64* %1
	; IfStmt
	%57 = load i64, i64* %1, align 8
	%58 = icmp sgt i64 %57, 0
	%59 = zext i1 %58 to i8
	%60 = trunc i8 %59 to i1
	br i1 %60, label %if.then-7, label %if.done-8

if.then-7:
	; a
	
	%61 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%62 = bitcast {i8*, i64, i64, %Allocator}* %61 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %62, %raw-5.Dynamic_Array** %4
	; data
	
	; SelectorExpr
	%63 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%64 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %63, i64 0
	%65 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %64, i64 0, i32 0
	%66 = load %..rawptr, %..rawptr* %65, align 8
	%67 = bitcast %..rawptr %66 to i8*
	store i8* %67, i8** %5
	%68 = load i8*, i8** %5, align 8
	%69 = icmp ne i8* %68, zeroinitializer
	%70 = zext i1 %69 to i8
	%71 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$211, i64 0, i32 0), i64 51}, i64 337, i64 3, %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$212, i64 0, i32 0), i64 6})
	%72 = trunc i8 %70 to i1
	%73 = bitcast %Source_Code_Location* %6 to %..rawptr
	%74 = call %..rawptr @__mem_zero(%..rawptr %73, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %6
	store %Source_Code_Location %71, %Source_Code_Location* %6
	%75 = call i8 @assert(i1 %72, %..string zeroinitializer, %Source_Code_Location* %6)
	%76 = load i8*, i8** %5, align 8
	; SelectorExpr
	%77 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%78 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %77, i64 0
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0, i32 1
	%80 = load i64, i64* %79, align 8
	%81 = getelementptr inbounds i8, i8* %76, i64 %80
	; IndexExpr
	%82 = load {i8*, i64}, {i8*, i64}* %args, align 8
	%83 = extractvalue {i8*, i64} %82, 0
	%84 = extractvalue {i8*, i64} %82, 1
	call void @__bounds_check_error(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$213, i64 0, i32 0), i64 51}, i64 338, i64 34, i64 0, i64 %84)
	%85 = getelementptr inbounds i8, i8* %83, i64 0
	%86 = getelementptr inbounds i8, i8* %85, i64 0
	%87 = load i64, i64* %1, align 8
	%88 = mul i64 1, %87
	%89 = bitcast i8* %81 to %..rawptr
	%90 = bitcast i8* %86 to %..rawptr
	%91 = call %..rawptr @__mem_copy(%..rawptr %89, %..rawptr %90, i64 %88)
	; AssignStmt
	; SelectorExpr
	%92 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %4, align 8
	%93 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %92, i64 0
	%94 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %93, i64 0, i32 1
	%95 = load i64, i64* %1, align 8
	%96 = load i64, i64* %94, align 8
	%97 = add i64 %96, %95
	store i64 %97, i64* %94
	br label %if.done-8

if.done-8:
	; ReturnStmt
	%98 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%99 = load {i8*, i64, i64, %Allocator}, {i8*, i64, i64, %Allocator}* %98, align 8
	%100 = extractvalue {i8*, i64, i64, %Allocator} %99, 1
	ret i64 %100
}

define i8 @_preload-0.reserve_dynamic_array-6171({i8*, i64, i64, %Allocator}* %array, i64 %capacity, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %raw-5.Dynamic_Array*, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Allocator, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	
	store i64 %capacity, i64* %1
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%11 = icmp eq {i8*, i64, i64, %Allocator}* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; a
	
	%14 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%15 = bitcast {i8*, i64, i64, %Allocator}* %14 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %15, %raw-5.Dynamic_Array** %2
	; IfStmt
	%16 = load i64, i64* %1, align 8
	; SelectorExpr
	%17 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sle i64 %16, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%25 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %25, i64 0, i32 3
	%27 = getelementptr inbounds %Allocator, %Allocator* %26, i64 0, i32 0
	%28 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %27, align 8
	%29 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%32 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%33 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %33, i64 0, i32 3
	; SelectorExpr
	%35 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%36 = load %Allocator, %Allocator* %35, align 8
	store %Allocator %36, %Allocator* %34
	br label %if.done-6

if.done-6:
	; SelectorExpr
	; SelectorExpr
	%37 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%38 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %37, i64 0
	%39 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %38, i64 0, i32 3
	%40 = getelementptr inbounds %Allocator, %Allocator* %39, i64 0, i32 0
	%41 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %40, align 8
	%42 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %41, zeroinitializer
	%43 = zext i1 %42 to i8
	%44 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$214, i64 0, i32 0), i64 51}, i64 382, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__str$215, i64 0, i32 0), i64 21})
	%45 = trunc i8 %43 to i1
	%46 = bitcast %Source_Code_Location* %3 to %..rawptr
	%47 = call %..rawptr @__mem_zero(%..rawptr %46, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %44, %Source_Code_Location* %3
	%48 = call i8 @assert(i1 %45, %..string zeroinitializer, %Source_Code_Location* %3)
	; old_size
	
	; SelectorExpr
	%49 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%50 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %49, i64 0
	%51 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %50, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	%53 = mul i64 %52, 1
	store i64 %53, i64* %4
	; new_size
	
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 %54, 1
	store i64 %55, i64* %5
	; allocator
	
	; SelectorExpr
	%56 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%57 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %56, i64 0
	%58 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %57, i64 0, i32 3
	%59 = load %Allocator, %Allocator* %58, align 8
	store %Allocator %59, %Allocator* %6
	; new_data
	
	; SelectorExpr
	%60 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 0
	%61 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %60, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = load i64, i64* %5, align 8
	; SelectorExpr
	%65 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%66 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %65, i64 0
	%67 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %66, i64 0, i32 0
	%68 = load %..rawptr, %..rawptr* %67, align 8
	%69 = load i64, i64* %4, align 8
	%70 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%71 = bitcast %Source_Code_Location* %8 to %..rawptr
	%72 = call %..rawptr @__mem_zero(%..rawptr %71, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %70, %Source_Code_Location* %8
	%73 = call %..rawptr %61(%..rawptr %63, i8 3, i64 %64, i64 1, %..rawptr %68, i64 %69, i64 0, %Source_Code_Location* %8, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %73, %..rawptr* %7
	; IfStmt
	%74 = load %..rawptr, %..rawptr* %7, align 8
	%75 = icmp eq %..rawptr %74, zeroinitializer
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	; AssignStmt
	; SelectorExpr
	%78 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %79, i64 0, i32 0
	%81 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %81, %..rawptr* %80
	; AssignStmt
	; SelectorExpr
	%82 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%83 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %82, i64 0
	%84 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %83, i64 0, i32 2
	%85 = load i64, i64* %1, align 8
	store i64 %85, i64* %84
	; ReturnStmt
	ret i8 1
}

define i8 @_preload-0.reserve_dynamic_array-6382({i8*, i64, i64, %Allocator}* %array, i64 %capacity, %Source_Code_Location* %loc, %Context* noalias nonnull %__.context_ptr) #0 {
decls-0:
	%0 = alloca {i8*, i64, i64, %Allocator}*, align 16
	%1 = alloca i64, align 16
	%2 = alloca %raw-5.Dynamic_Array*, align 16
	%3 = alloca %Source_Code_Location, align 16
	%4 = alloca i64, align 16
	%5 = alloca i64, align 16
	%6 = alloca %Allocator, align 16
	%7 = alloca %..rawptr, align 16
	%8 = alloca %Source_Code_Location, align 16
	
	store {i8*, i64, i64, %Allocator}* %array, {i8*, i64, i64, %Allocator}** %0
	
	store i64 %capacity, i64* %1
	%9 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	; IfStmt
	%10 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%11 = icmp eq {i8*, i64, i64, %Allocator}* %10, zeroinitializer
	%12 = zext i1 %11 to i8
	%13 = trunc i8 %12 to i1
	br i1 %13, label %if.then-1, label %if.done-2

if.then-1:
	; ReturnStmt
	ret i8 0

if.done-2:
	; a
	
	%14 = load {i8*, i64, i64, %Allocator}*, {i8*, i64, i64, %Allocator}** %0, align 8
	%15 = bitcast {i8*, i64, i64, %Allocator}* %14 to %raw-5.Dynamic_Array*
	store %raw-5.Dynamic_Array* %15, %raw-5.Dynamic_Array** %2
	; IfStmt
	%16 = load i64, i64* %1, align 8
	; SelectorExpr
	%17 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%18 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %17, i64 0
	%19 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %18, i64 0, i32 2
	%20 = load i64, i64* %19, align 8
	%21 = icmp sle i64 %16, %20
	%22 = zext i1 %21 to i8
	%23 = trunc i8 %22 to i1
	br i1 %23, label %if.then-3, label %if.done-4

if.then-3:
	; ReturnStmt
	ret i8 1

if.done-4:
	; IfStmt
	; SelectorExpr
	; SelectorExpr
	%24 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%25 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %24, i64 0
	%26 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %25, i64 0, i32 3
	%27 = getelementptr inbounds %Allocator, %Allocator* %26, i64 0, i32 0
	%28 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %27, align 8
	%29 = icmp eq %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %28, zeroinitializer
	%30 = zext i1 %29 to i8
	%31 = trunc i8 %30 to i1
	br i1 %31, label %if.then-5, label %if.done-6

if.then-5:
	; AssignStmt
	; SelectorExpr
	%32 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%33 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %32, i64 0
	%34 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %33, i64 0, i32 3
	; SelectorExpr
	%35 = getelementptr inbounds %Context, %Context* %__.context_ptr, i64 0, i32 0
	%36 = load %Allocator, %Allocator* %35, align 8
	store %Allocator %36, %Allocator* %34
	br label %if.done-6

if.done-6:
	; SelectorExpr
	; SelectorExpr
	%37 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%38 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %37, i64 0
	%39 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %38, i64 0, i32 3
	%40 = getelementptr inbounds %Allocator, %Allocator* %39, i64 0, i32 0
	%41 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %40, align 8
	%42 = icmp ne %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)* %41, zeroinitializer
	%43 = zext i1 %42 to i8
	%44 = call %Source_Code_Location @make_source_code_location(%..string {i8* getelementptr inbounds ([52 x i8], [52 x i8]* @__str$216, i64 0, i32 0), i64 51}, i64 382, i64 2, %..string {i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__str$217, i64 0, i32 0), i64 21})
	%45 = trunc i8 %43 to i1
	%46 = bitcast %Source_Code_Location* %3 to %..rawptr
	%47 = call %..rawptr @__mem_zero(%..rawptr %46, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %3
	store %Source_Code_Location %44, %Source_Code_Location* %3
	%48 = call i8 @assert(i1 %45, %..string zeroinitializer, %Source_Code_Location* %3)
	; old_size
	
	; SelectorExpr
	%49 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%50 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %49, i64 0
	%51 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %50, i64 0, i32 2
	%52 = load i64, i64* %51, align 8
	%53 = mul i64 %52, 1
	store i64 %53, i64* %4
	; new_size
	
	%54 = load i64, i64* %1, align 8
	%55 = mul i64 %54, 1
	store i64 %55, i64* %5
	; allocator
	
	; SelectorExpr
	%56 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%57 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %56, i64 0
	%58 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %57, i64 0, i32 3
	%59 = load %Allocator, %Allocator* %58, align 8
	store %Allocator %59, %Allocator* %6
	; new_data
	
	; SelectorExpr
	%60 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 0
	%61 = load %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)*, %..rawptr (%..rawptr, i8, i64, i64, %..rawptr, i64, i64, %Source_Code_Location*, %Context*)** %60, align 8
	; SelectorExpr
	%62 = getelementptr inbounds %Allocator, %Allocator* %6, i64 0, i32 1
	%63 = load %..rawptr, %..rawptr* %62, align 8
	%64 = load i64, i64* %5, align 8
	; SelectorExpr
	%65 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%66 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %65, i64 0
	%67 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %66, i64 0, i32 0
	%68 = load %..rawptr, %..rawptr* %67, align 8
	%69 = load i64, i64* %4, align 8
	%70 = load %Source_Code_Location, %Source_Code_Location* %loc, align 8
	%71 = bitcast %Source_Code_Location* %8 to %..rawptr
	%72 = call %..rawptr @__mem_zero(%..rawptr %71, i64 48)
	store %Source_Code_Location zeroinitializer, %Source_Code_Location* %8
	store %Source_Code_Location %70, %Source_Code_Location* %8
	%73 = call %..rawptr %61(%..rawptr %63, i8 3, i64 %64, i64 1, %..rawptr %68, i64 %69, i64 0, %Source_Code_Location* %8, %Context* noalias nonnull %__.context_ptr)
	store %..rawptr %73, %..rawptr* %7
	; IfStmt
	%74 = load %..rawptr, %..rawptr* %7, align 8
	%75 = icmp eq %..rawptr %74, zeroinitializer
	%76 = zext i1 %75 to i8
	%77 = trunc i8 %76 to i1
	br i1 %77, label %if.then-7, label %if.done-8

if.then-7:
	; ReturnStmt
	ret i8 0

if.done-8:
	; AssignStmt
	; SelectorExpr
	%78 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%79 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %78, i64 0
	%80 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %79, i64 0, i32 0
	%81 = load %..rawptr, %..rawptr* %7, align 8
	store %..rawptr %81, %..rawptr* %80
	; AssignStmt
	; SelectorExpr
	%82 = load %raw-5.Dynamic_Array*, %raw-5.Dynamic_Array** %2, align 8
	%83 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %82, i64 0
	%84 = getelementptr inbounds %raw-5.Dynamic_Array, %raw-5.Dynamic_Array* %83, i64 0, i32 2
	%85 = load i64, i64* %1, align 8
	store i64 %85, i64* %84
	; ReturnStmt
	ret i8 1
}

define ccc i32 @main(i32 %argc, i8** %argv) noinline #2 {
decls-0:
	%0 = alloca i32, align 16
	%1 = alloca i8**, align 16
	store i32 %argc, i32* %0
	store i8** %argv, i8*** %1
	%2 = load i32, i32* %0, align 4
	%3 = load i8**, i8*** %1, align 8
	%4 = sext i32 %2 to i64
	%5 = getelementptr inbounds {i8**, i64}, {i8**, i64}* @__args__, i64 0, i32 0
	store i8** %3, i8*** %5
	%6 = getelementptr inbounds {i8**, i64}, {i8**, i64}* @__args__, i64 0, i32 1
	store i64 %4, i64* %6
	call void @__$startup_runtime()
	call void @test1-0.main()
	ret i32 0
}

define void @__$startup_runtime() noinline #2 {
decls-0:
	%0 = alloca %Context, align 16
	%1 = bitcast %Context* %0 to %..rawptr
	%2 = call %..rawptr @__mem_zero(%..rawptr %1, i64 72)
	store %Context zeroinitializer, %Context* %0
	%3 = load %Context, %Context* @__ggv$0, align 8
	store %Context %3, %Context* %0
	%4 = getelementptr inbounds %Context, %Context* %0, i64 0, i32 0
	%5 = call %Allocator @default_allocator(%Context* noalias nonnull %0)
	store %Allocator %5, %Allocator* %4
	call void @__init_context(%Context* @__ggv$0)
	%6 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 0
	%7 = getelementptr inbounds {%Type_Info*, i64}, {%Type_Info*, i64}* @__type_table, i64 0, i32 0
	store %Type_Info* %6, %Type_Info** %7
	%8 = getelementptr inbounds {%Type_Info*, i64}, {%Type_Info*, i64}* @__type_table, i64 0, i32 1
	store i64 159, i64* %8
	%9 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 1
	%10 = getelementptr inbounds %Type_Info, %Type_Info* %9, i64 0, i32 2
	%11 = getelementptr inbounds %Type_Info, %Type_Info* %9, i64 0, i32 0
	store i64 24, i64* %11
	%12 = getelementptr inbounds %Type_Info, %Type_Info* %9, i64 0, i32 1
	store i64 8, i64* %12
	; Type_Info_Named
	%13 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %10 to %Type_Info_Named*
	%14 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 2
	%15 = bitcast %Type_Info* %14 to %Type_Info*
	%16 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %13, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$218, i64 0, i32 0), i64 15}, %..string* %16
	%17 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %13, i64 0, i32 1
	store %Type_Info* %15, %Type_Info** %17
	%18 = load %Type_Info_Named, %Type_Info_Named* %13, align 8
	%19 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %10 to %Type_Info_Named*
	store %Type_Info_Named %18, %Type_Info_Named* %19
	%20 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %10, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %20
	%21 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 2
	%22 = getelementptr inbounds %Type_Info, %Type_Info* %21, i64 0, i32 2
	%23 = getelementptr inbounds %Type_Info, %Type_Info* %21, i64 0, i32 0
	store i64 24, i64* %23
	%24 = getelementptr inbounds %Type_Info, %Type_Info* %21, i64 0, i32 1
	store i64 8, i64* %24
	; Type_Info_Struct
	%25 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %22 to %Type_Info_Struct*
	%26 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 4
	store i8 0, i8* %26
	%27 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 5
	store i8 0, i8* %27
	%28 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 6
	store i8 0, i8* %28
	%29 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 0
	%30 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 0
	%31 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 0
	%32 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 0
	%33 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%34 = bitcast %Type_Info* %33 to %Type_Info*
	%35 = getelementptr inbounds %Type_Info*, %Type_Info** %29, i64 0
	%36 = getelementptr inbounds i64, i64* %31, i64 0
	%37 = getelementptr inbounds i8, i8* %32, i64 0
	%38 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %38, %Type_Info** %35
	%39 = getelementptr inbounds %..string, %..string* %30, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$219, i64 0, i32 0), i64 4}, %..string* %39
	store i64 0, i64* %36
	store i8 0, i8* %37
	%40 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%41 = bitcast %Type_Info* %40 to %Type_Info*
	%42 = getelementptr inbounds %Type_Info*, %Type_Info** %29, i64 1
	%43 = getelementptr inbounds i64, i64* %31, i64 1
	%44 = getelementptr inbounds i8, i8* %32, i64 1
	%45 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %45, %Type_Info** %42
	%46 = getelementptr inbounds %..string, %..string* %30, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$21a, i64 0, i32 0), i64 4}, %..string* %46
	store i64 16, i64* %43
	store i8 0, i8* %44
	%47 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 0
	%48 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %47, i64 0, i32 0
	store %Type_Info** %29, %Type_Info*** %48
	%49 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %47, i64 0, i32 1
	store i64 2, i64* %49
	%50 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 1
	%51 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %50, i64 0, i32 0
	store %..string* %30, %..string** %51
	%52 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %50, i64 0, i32 1
	store i64 2, i64* %52
	%53 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 2
	%54 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %53, i64 0, i32 0
	store i64* %31, i64** %54
	%55 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %53, i64 0, i32 1
	store i64 2, i64* %55
	%56 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %25, i64 0, i32 3
	%57 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %56, i64 0, i32 0
	store i8* %32, i8** %57
	%58 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %56, i64 0, i32 1
	store i64 2, i64* %58
	%59 = load %Type_Info_Struct, %Type_Info_Struct* %25, align 8
	%60 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %22 to %Type_Info_Struct*
	store %Type_Info_Struct %59, %Type_Info_Struct* %60
	%61 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %22, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %61
	%62 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%63 = getelementptr inbounds %Type_Info, %Type_Info* %62, i64 0, i32 2
	%64 = getelementptr inbounds %Type_Info, %Type_Info* %62, i64 0, i32 0
	store i64 16, i64* %64
	%65 = getelementptr inbounds %Type_Info, %Type_Info* %62, i64 0, i32 1
	store i64 8, i64* %65
	; Type_Info_Basic
	%66 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %63 to %Type_Info_String*
	%67 = load %Type_Info_String, %Type_Info_String* %66, align 1
	%68 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %63 to %Type_Info_String*
	store %Type_Info_String %67, %Type_Info_String* %68
	%69 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %63, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %69
	%70 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 4
	%71 = getelementptr inbounds %Type_Info, %Type_Info* %70, i64 0, i32 2
	%72 = getelementptr inbounds %Type_Info, %Type_Info* %70, i64 0, i32 0
	store i64 8, i64* %72
	%73 = getelementptr inbounds %Type_Info, %Type_Info* %70, i64 0, i32 1
	store i64 8, i64* %73
	; Type_Info_Pointer
	%74 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %71 to %Type_Info_Pointer*
	%75 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%76 = bitcast %Type_Info* %75 to %Type_Info*
	%77 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %74, i64 0, i32 0
	store %Type_Info* %76, %Type_Info** %77
	%78 = load %Type_Info_Pointer, %Type_Info_Pointer* %74, align 8
	%79 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %71 to %Type_Info_Pointer*
	store %Type_Info_Pointer %78, %Type_Info_Pointer* %79
	%80 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %71, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %80
	%81 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%82 = getelementptr inbounds %Type_Info, %Type_Info* %81, i64 0, i32 2
	%83 = getelementptr inbounds %Type_Info, %Type_Info* %81, i64 0, i32 0
	store i64 1, i64* %83
	%84 = getelementptr inbounds %Type_Info, %Type_Info* %81, i64 0, i32 1
	store i64 1, i64* %84
	; Type_Info_Basic
	%85 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %82 to %Type_Info_Integer*
	%86 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %85, i64 0, i32 0
	store i8 0, i8* %86
	%87 = load %Type_Info_Integer, %Type_Info_Integer* %85, align 1
	%88 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %82 to %Type_Info_Integer*
	store %Type_Info_Integer %87, %Type_Info_Integer* %88
	%89 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %82, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %89
	%90 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%91 = getelementptr inbounds %Type_Info, %Type_Info* %90, i64 0, i32 2
	%92 = getelementptr inbounds %Type_Info, %Type_Info* %90, i64 0, i32 0
	store i64 8, i64* %92
	%93 = getelementptr inbounds %Type_Info, %Type_Info* %90, i64 0, i32 1
	store i64 8, i64* %93
	; Type_Info_Basic
	%94 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %91 to %Type_Info_Integer*
	%95 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %94, i64 0, i32 0
	store i8 1, i8* %95
	%96 = load %Type_Info_Integer, %Type_Info_Integer* %94, align 1
	%97 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %91 to %Type_Info_Integer*
	store %Type_Info_Integer %96, %Type_Info_Integer* %97
	%98 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %91, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %98
	%99 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%100 = getelementptr inbounds %Type_Info, %Type_Info* %99, i64 0, i32 2
	%101 = getelementptr inbounds %Type_Info, %Type_Info* %99, i64 0, i32 0
	store i64 8, i64* %101
	%102 = getelementptr inbounds %Type_Info, %Type_Info* %99, i64 0, i32 1
	store i64 8, i64* %102
	; Type_Info_Pointer
	%103 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %100 to %Type_Info_Pointer*
	%104 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 8
	%105 = bitcast %Type_Info* %104 to %Type_Info*
	%106 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %103, i64 0, i32 0
	store %Type_Info* %105, %Type_Info** %106
	%107 = load %Type_Info_Pointer, %Type_Info_Pointer* %103, align 8
	%108 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %100 to %Type_Info_Pointer*
	store %Type_Info_Pointer %107, %Type_Info_Pointer* %108
	%109 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %100, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %109
	%110 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 8
	%111 = getelementptr inbounds %Type_Info, %Type_Info* %110, i64 0, i32 2
	%112 = getelementptr inbounds %Type_Info, %Type_Info* %110, i64 0, i32 0
	store i64 96, i64* %112
	%113 = getelementptr inbounds %Type_Info, %Type_Info* %110, i64 0, i32 1
	store i64 8, i64* %113
	; Type_Info_Named
	%114 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %111 to %Type_Info_Named*
	%115 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 9
	%116 = bitcast %Type_Info* %115 to %Type_Info*
	%117 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %114, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$21b, i64 0, i32 0), i64 9}, %..string* %117
	%118 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %114, i64 0, i32 1
	store %Type_Info* %116, %Type_Info** %118
	%119 = load %Type_Info_Named, %Type_Info_Named* %114, align 8
	%120 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %111 to %Type_Info_Named*
	store %Type_Info_Named %119, %Type_Info_Named* %120
	%121 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %111, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %121
	%122 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 9
	%123 = getelementptr inbounds %Type_Info, %Type_Info* %122, i64 0, i32 2
	%124 = getelementptr inbounds %Type_Info, %Type_Info* %122, i64 0, i32 0
	store i64 96, i64* %124
	%125 = getelementptr inbounds %Type_Info, %Type_Info* %122, i64 0, i32 1
	store i64 8, i64* %125
	; Type_Info_Struct
	%126 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %123 to %Type_Info_Struct*
	%127 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 4
	store i8 0, i8* %127
	%128 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 5
	store i8 0, i8* %128
	%129 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 6
	store i8 0, i8* %129
	%130 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 2
	%131 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 2
	%132 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 2
	%133 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 2
	%134 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%135 = bitcast %Type_Info* %134 to %Type_Info*
	%136 = getelementptr inbounds %Type_Info*, %Type_Info** %130, i64 0
	%137 = getelementptr inbounds i64, i64* %132, i64 0
	%138 = getelementptr inbounds i8, i8* %133, i64 0
	%139 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %139, %Type_Info** %136
	%140 = getelementptr inbounds %..string, %..string* %131, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$21c, i64 0, i32 0), i64 4}, %..string* %140
	store i64 0, i64* %137
	store i8 0, i8* %138
	%141 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%142 = bitcast %Type_Info* %141 to %Type_Info*
	%143 = getelementptr inbounds %Type_Info*, %Type_Info** %130, i64 1
	%144 = getelementptr inbounds i64, i64* %132, i64 1
	%145 = getelementptr inbounds i8, i8* %133, i64 1
	%146 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %146, %Type_Info** %143
	%147 = getelementptr inbounds %..string, %..string* %131, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$21d, i64 0, i32 0), i64 5}, %..string* %147
	store i64 8, i64* %144
	store i8 0, i8* %145
	%148 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%149 = bitcast %Type_Info* %148 to %Type_Info*
	%150 = getelementptr inbounds %Type_Info*, %Type_Info** %130, i64 2
	%151 = getelementptr inbounds i64, i64* %132, i64 2
	%152 = getelementptr inbounds i8, i8* %133, i64 2
	%153 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	store %Type_Info* %153, %Type_Info** %150
	%154 = getelementptr inbounds %..string, %..string* %131, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$21e, i64 0, i32 0), i64 7}, %..string* %154
	store i64 16, i64* %151
	store i8 0, i8* %152
	%155 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 0
	%156 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %155, i64 0, i32 0
	store %Type_Info** %130, %Type_Info*** %156
	%157 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %155, i64 0, i32 1
	store i64 3, i64* %157
	%158 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 1
	%159 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %158, i64 0, i32 0
	store %..string* %131, %..string** %159
	%160 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %158, i64 0, i32 1
	store i64 3, i64* %160
	%161 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 2
	%162 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %161, i64 0, i32 0
	store i64* %132, i64** %162
	%163 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %161, i64 0, i32 1
	store i64 3, i64* %163
	%164 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %126, i64 0, i32 3
	%165 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %164, i64 0, i32 0
	store i8* %133, i8** %165
	%166 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %164, i64 0, i32 1
	store i64 3, i64* %166
	%167 = load %Type_Info_Struct, %Type_Info_Struct* %126, align 8
	%168 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %123 to %Type_Info_Struct*
	store %Type_Info_Struct %167, %Type_Info_Struct* %168
	%169 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %123, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %169
	%170 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 10
	%171 = getelementptr inbounds %Type_Info, %Type_Info* %170, i64 0, i32 2
	%172 = getelementptr inbounds %Type_Info, %Type_Info* %170, i64 0, i32 0
	store i64 80, i64* %172
	%173 = getelementptr inbounds %Type_Info, %Type_Info* %170, i64 0, i32 1
	store i64 8, i64* %173
	; Type_Info_Union
	%174 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %171 to %Type_Info_Union*
	%175 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %174, i64 0, i32 0
	%176 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %174, i64 0, i32 1
	%177 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %174, i64 0, i32 2
	%178 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 5
	%179 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 1
	%180 = bitcast %Type_Info* %179 to %Type_Info*
	%181 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 0
	%182 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 1
	store %Type_Info* %182, %Type_Info** %181
	%183 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 11
	%184 = bitcast %Type_Info* %183 to %Type_Info*
	%185 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 1
	%186 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 11
	store %Type_Info* %186, %Type_Info** %185
	%187 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 14
	%188 = bitcast %Type_Info* %187 to %Type_Info*
	%189 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 2
	%190 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 14
	store %Type_Info* %190, %Type_Info** %189
	%191 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 16
	%192 = bitcast %Type_Info* %191 to %Type_Info*
	%193 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 3
	%194 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 16
	store %Type_Info* %194, %Type_Info** %193
	%195 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 17
	%196 = bitcast %Type_Info* %195 to %Type_Info*
	%197 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 4
	%198 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 17
	store %Type_Info* %198, %Type_Info** %197
	%199 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 18
	%200 = bitcast %Type_Info* %199 to %Type_Info*
	%201 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 5
	%202 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 18
	store %Type_Info* %202, %Type_Info** %201
	%203 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 20
	%204 = bitcast %Type_Info* %203 to %Type_Info*
	%205 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 6
	%206 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 20
	store %Type_Info* %206, %Type_Info** %205
	%207 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 21
	%208 = bitcast %Type_Info* %207 to %Type_Info*
	%209 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 7
	%210 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 21
	store %Type_Info* %210, %Type_Info** %209
	%211 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 22
	%212 = bitcast %Type_Info* %211 to %Type_Info*
	%213 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 8
	%214 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 22
	store %Type_Info* %214, %Type_Info** %213
	%215 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 24
	%216 = bitcast %Type_Info* %215 to %Type_Info*
	%217 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 9
	%218 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 24
	store %Type_Info* %218, %Type_Info** %217
	%219 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 28
	%220 = bitcast %Type_Info* %219 to %Type_Info*
	%221 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 10
	%222 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 28
	store %Type_Info* %222, %Type_Info** %221
	%223 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 30
	%224 = bitcast %Type_Info* %223 to %Type_Info*
	%225 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 11
	%226 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 30
	store %Type_Info* %226, %Type_Info** %225
	%227 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 32
	%228 = bitcast %Type_Info* %227 to %Type_Info*
	%229 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 12
	%230 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 32
	store %Type_Info* %230, %Type_Info** %229
	%231 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 33
	%232 = bitcast %Type_Info* %231 to %Type_Info*
	%233 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 13
	%234 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 33
	store %Type_Info* %234, %Type_Info** %233
	%235 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 39
	%236 = bitcast %Type_Info* %235 to %Type_Info*
	%237 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 14
	%238 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 39
	store %Type_Info* %238, %Type_Info** %237
	%239 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 46
	%240 = bitcast %Type_Info* %239 to %Type_Info*
	%241 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 15
	%242 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 46
	store %Type_Info* %242, %Type_Info** %241
	%243 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 48
	%244 = bitcast %Type_Info* %243 to %Type_Info*
	%245 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 16
	%246 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 48
	store %Type_Info* %246, %Type_Info** %245
	%247 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 65
	%248 = bitcast %Type_Info* %247 to %Type_Info*
	%249 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 17
	%250 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 65
	store %Type_Info* %250, %Type_Info** %249
	%251 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 67
	%252 = bitcast %Type_Info* %251 to %Type_Info*
	%253 = getelementptr inbounds %Type_Info*, %Type_Info** %178, i64 18
	%254 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 67
	store %Type_Info* %254, %Type_Info** %253
	%255 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %175, i64 0, i32 0
	store %Type_Info** %178, %Type_Info*** %255
	%256 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %175, i64 0, i32 1
	store i64 19, i64* %256
	store i64 72, i64* %176
	%257 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	store %Type_Info* %257, %Type_Info** %177
	%258 = load %Type_Info_Union, %Type_Info_Union* %174, align 8
	%259 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %171 to %Type_Info_Union*
	store %Type_Info_Union %258, %Type_Info_Union* %259
	%260 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %171, i64 0, i32 2 ; UnionTagPtr
	store i8 16, i8* %260
	%261 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 11
	%262 = getelementptr inbounds %Type_Info, %Type_Info* %261, i64 0, i32 2
	%263 = getelementptr inbounds %Type_Info, %Type_Info* %261, i64 0, i32 0
	store i64 1, i64* %263
	%264 = getelementptr inbounds %Type_Info, %Type_Info* %261, i64 0, i32 1
	store i64 1, i64* %264
	; Type_Info_Named
	%265 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %262 to %Type_Info_Named*
	%266 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 12
	%267 = bitcast %Type_Info* %266 to %Type_Info*
	%268 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %265, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$21f, i64 0, i32 0), i64 17}, %..string* %268
	%269 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %265, i64 0, i32 1
	store %Type_Info* %267, %Type_Info** %269
	%270 = load %Type_Info_Named, %Type_Info_Named* %265, align 8
	%271 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %262 to %Type_Info_Named*
	store %Type_Info_Named %270, %Type_Info_Named* %271
	%272 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %262, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %272
	%273 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 12
	%274 = getelementptr inbounds %Type_Info, %Type_Info* %273, i64 0, i32 2
	%275 = getelementptr inbounds %Type_Info, %Type_Info* %273, i64 0, i32 0
	store i64 1, i64* %275
	%276 = getelementptr inbounds %Type_Info, %Type_Info* %273, i64 0, i32 1
	store i64 1, i64* %276
	; Type_Info_Struct
	%277 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %274 to %Type_Info_Struct*
	%278 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 4
	store i8 0, i8* %278
	%279 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 5
	store i8 0, i8* %279
	%280 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 6
	store i8 0, i8* %280
	%281 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 24
	%282 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 5
	%283 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 5
	%284 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 5
	%285 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%286 = bitcast %Type_Info* %285 to %Type_Info*
	%287 = getelementptr inbounds %Type_Info*, %Type_Info** %281, i64 0
	%288 = getelementptr inbounds i64, i64* %283, i64 0
	%289 = getelementptr inbounds i8, i8* %284, i64 0
	%290 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %290, %Type_Info** %287
	%291 = getelementptr inbounds %..string, %..string* %282, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$220, i64 0, i32 0), i64 6}, %..string* %291
	store i64 0, i64* %288
	store i8 0, i8* %289
	%292 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 0
	%293 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %292, i64 0, i32 0
	store %Type_Info** %281, %Type_Info*** %293
	%294 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %292, i64 0, i32 1
	store i64 1, i64* %294
	%295 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 1
	%296 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %295, i64 0, i32 0
	store %..string* %282, %..string** %296
	%297 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %295, i64 0, i32 1
	store i64 1, i64* %297
	%298 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 2
	%299 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %298, i64 0, i32 0
	store i64* %283, i64** %299
	%300 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %298, i64 0, i32 1
	store i64 1, i64* %300
	%301 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %277, i64 0, i32 3
	%302 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %301, i64 0, i32 0
	store i8* %284, i8** %302
	%303 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %301, i64 0, i32 1
	store i64 1, i64* %303
	%304 = load %Type_Info_Struct, %Type_Info_Struct* %277, align 8
	%305 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %274 to %Type_Info_Struct*
	store %Type_Info_Struct %304, %Type_Info_Struct* %305
	%306 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %274, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %306
	%307 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%308 = getelementptr inbounds %Type_Info, %Type_Info* %307, i64 0, i32 2
	%309 = getelementptr inbounds %Type_Info, %Type_Info* %307, i64 0, i32 0
	store i64 1, i64* %309
	%310 = getelementptr inbounds %Type_Info, %Type_Info* %307, i64 0, i32 1
	store i64 1, i64* %310
	; Type_Info_Basic
	%311 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %308 to %Type_Info_Boolean*
	%312 = load %Type_Info_Boolean, %Type_Info_Boolean* %311, align 1
	%313 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %308 to %Type_Info_Boolean*
	store %Type_Info_Boolean %312, %Type_Info_Boolean* %313
	%314 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %308, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %314
	%315 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 14
	%316 = getelementptr inbounds %Type_Info, %Type_Info* %315, i64 0, i32 2
	%317 = getelementptr inbounds %Type_Info, %Type_Info* %315, i64 0, i32 0
	store i64 0, i64* %317
	%318 = getelementptr inbounds %Type_Info, %Type_Info* %315, i64 0, i32 1
	store i64 1, i64* %318
	; Type_Info_Named
	%319 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %316 to %Type_Info_Named*
	%320 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%321 = bitcast %Type_Info* %320 to %Type_Info*
	%322 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %319, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$221, i64 0, i32 0), i64 14}, %..string* %322
	%323 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %319, i64 0, i32 1
	store %Type_Info* %321, %Type_Info** %323
	%324 = load %Type_Info_Named, %Type_Info_Named* %319, align 8
	%325 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %316 to %Type_Info_Named*
	store %Type_Info_Named %324, %Type_Info_Named* %325
	%326 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %316, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %326
	%327 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%328 = getelementptr inbounds %Type_Info, %Type_Info* %327, i64 0, i32 2
	%329 = getelementptr inbounds %Type_Info, %Type_Info* %327, i64 0, i32 0
	store i64 0, i64* %329
	%330 = getelementptr inbounds %Type_Info, %Type_Info* %327, i64 0, i32 1
	store i64 1, i64* %330
	; Type_Info_Struct
	%331 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %328 to %Type_Info_Struct*
	%332 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 4
	store i8 0, i8* %332
	%333 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 5
	store i8 0, i8* %333
	%334 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 6
	store i8 0, i8* %334
	%335 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 25
	%336 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 6
	%337 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 6
	%338 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 6
	%339 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 0
	%340 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %339, i64 0, i32 0
	store %Type_Info** %335, %Type_Info*** %340
	%341 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %339, i64 0, i32 1
	store i64 0, i64* %341
	%342 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 1
	%343 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %342, i64 0, i32 0
	store %..string* %336, %..string** %343
	%344 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %342, i64 0, i32 1
	store i64 0, i64* %344
	%345 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 2
	%346 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %345, i64 0, i32 0
	store i64* %337, i64** %346
	%347 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %345, i64 0, i32 1
	store i64 0, i64* %347
	%348 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %331, i64 0, i32 3
	%349 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %348, i64 0, i32 0
	store i8* %338, i8** %349
	%350 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %348, i64 0, i32 1
	store i64 0, i64* %350
	%351 = load %Type_Info_Struct, %Type_Info_Struct* %331, align 8
	%352 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %328 to %Type_Info_Struct*
	store %Type_Info_Struct %351, %Type_Info_Struct* %352
	%353 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %328, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %353
	%354 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 16
	%355 = getelementptr inbounds %Type_Info, %Type_Info* %354, i64 0, i32 2
	%356 = getelementptr inbounds %Type_Info, %Type_Info* %354, i64 0, i32 0
	store i64 0, i64* %356
	%357 = getelementptr inbounds %Type_Info, %Type_Info* %354, i64 0, i32 1
	store i64 1, i64* %357
	; Type_Info_Named
	%358 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %355 to %Type_Info_Named*
	%359 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%360 = bitcast %Type_Info* %359 to %Type_Info*
	%361 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %358, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$222, i64 0, i32 0), i64 15}, %..string* %361
	%362 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %358, i64 0, i32 1
	store %Type_Info* %360, %Type_Info** %362
	%363 = load %Type_Info_Named, %Type_Info_Named* %358, align 8
	%364 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %355 to %Type_Info_Named*
	store %Type_Info_Named %363, %Type_Info_Named* %364
	%365 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %355, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %365
	%366 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 17
	%367 = getelementptr inbounds %Type_Info, %Type_Info* %366, i64 0, i32 2
	%368 = getelementptr inbounds %Type_Info, %Type_Info* %366, i64 0, i32 0
	store i64 0, i64* %368
	%369 = getelementptr inbounds %Type_Info, %Type_Info* %366, i64 0, i32 1
	store i64 1, i64* %369
	; Type_Info_Named
	%370 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %367 to %Type_Info_Named*
	%371 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%372 = bitcast %Type_Info* %371 to %Type_Info*
	%373 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %370, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$223, i64 0, i32 0), i64 17}, %..string* %373
	%374 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %370, i64 0, i32 1
	store %Type_Info* %372, %Type_Info** %374
	%375 = load %Type_Info_Named, %Type_Info_Named* %370, align 8
	%376 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %367 to %Type_Info_Named*
	store %Type_Info_Named %375, %Type_Info_Named* %376
	%377 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %367, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %377
	%378 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 18
	%379 = getelementptr inbounds %Type_Info, %Type_Info* %378, i64 0, i32 2
	%380 = getelementptr inbounds %Type_Info, %Type_Info* %378, i64 0, i32 0
	store i64 1, i64* %380
	%381 = getelementptr inbounds %Type_Info, %Type_Info* %378, i64 0, i32 1
	store i64 1, i64* %381
	; Type_Info_Named
	%382 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %379 to %Type_Info_Named*
	%383 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 19
	%384 = bitcast %Type_Info* %383 to %Type_Info*
	%385 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %382, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__str$224, i64 0, i32 0), i64 16}, %..string* %385
	%386 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %382, i64 0, i32 1
	store %Type_Info* %384, %Type_Info** %386
	%387 = load %Type_Info_Named, %Type_Info_Named* %382, align 8
	%388 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %379 to %Type_Info_Named*
	store %Type_Info_Named %387, %Type_Info_Named* %388
	%389 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %379, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %389
	%390 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 19
	%391 = getelementptr inbounds %Type_Info, %Type_Info* %390, i64 0, i32 2
	%392 = getelementptr inbounds %Type_Info, %Type_Info* %390, i64 0, i32 0
	store i64 1, i64* %392
	%393 = getelementptr inbounds %Type_Info, %Type_Info* %390, i64 0, i32 1
	store i64 1, i64* %393
	; Type_Info_Struct
	%394 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %391 to %Type_Info_Struct*
	%395 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 4
	store i8 0, i8* %395
	%396 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 5
	store i8 0, i8* %396
	%397 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 6
	store i8 0, i8* %397
	%398 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 25
	%399 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 6
	%400 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 6
	%401 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 6
	%402 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%403 = bitcast %Type_Info* %402 to %Type_Info*
	%404 = getelementptr inbounds %Type_Info*, %Type_Info** %398, i64 0
	%405 = getelementptr inbounds i64, i64* %400, i64 0
	%406 = getelementptr inbounds i8, i8* %401, i64 0
	%407 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %407, %Type_Info** %404
	%408 = getelementptr inbounds %..string, %..string* %399, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$225, i64 0, i32 0), i64 10}, %..string* %408
	store i64 0, i64* %405
	store i8 0, i8* %406
	%409 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 0
	%410 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %409, i64 0, i32 0
	store %Type_Info** %398, %Type_Info*** %410
	%411 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %409, i64 0, i32 1
	store i64 1, i64* %411
	%412 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 1
	%413 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %412, i64 0, i32 0
	store %..string* %399, %..string** %413
	%414 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %412, i64 0, i32 1
	store i64 1, i64* %414
	%415 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 2
	%416 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %415, i64 0, i32 0
	store i64* %400, i64** %416
	%417 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %415, i64 0, i32 1
	store i64 1, i64* %417
	%418 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %394, i64 0, i32 3
	%419 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %418, i64 0, i32 0
	store i8* %401, i8** %419
	%420 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %418, i64 0, i32 1
	store i64 1, i64* %420
	%421 = load %Type_Info_Struct, %Type_Info_Struct* %394, align 8
	%422 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %391 to %Type_Info_Struct*
	store %Type_Info_Struct %421, %Type_Info_Struct* %422
	%423 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %391, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %423
	%424 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 20
	%425 = getelementptr inbounds %Type_Info, %Type_Info* %424, i64 0, i32 2
	%426 = getelementptr inbounds %Type_Info, %Type_Info* %424, i64 0, i32 0
	store i64 0, i64* %426
	%427 = getelementptr inbounds %Type_Info, %Type_Info* %424, i64 0, i32 1
	store i64 1, i64* %427
	; Type_Info_Named
	%428 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %425 to %Type_Info_Named*
	%429 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%430 = bitcast %Type_Info* %429 to %Type_Info*
	%431 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %428, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$226, i64 0, i32 0), i64 17}, %..string* %431
	%432 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %428, i64 0, i32 1
	store %Type_Info* %430, %Type_Info** %432
	%433 = load %Type_Info_Named, %Type_Info_Named* %428, align 8
	%434 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %425 to %Type_Info_Named*
	store %Type_Info_Named %433, %Type_Info_Named* %434
	%435 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %425, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %435
	%436 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 21
	%437 = getelementptr inbounds %Type_Info, %Type_Info* %436, i64 0, i32 2
	%438 = getelementptr inbounds %Type_Info, %Type_Info* %436, i64 0, i32 0
	store i64 0, i64* %438
	%439 = getelementptr inbounds %Type_Info, %Type_Info* %436, i64 0, i32 1
	store i64 1, i64* %439
	; Type_Info_Named
	%440 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %437 to %Type_Info_Named*
	%441 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 15
	%442 = bitcast %Type_Info* %441 to %Type_Info*
	%443 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %440, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$227, i64 0, i32 0), i64 13}, %..string* %443
	%444 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %440, i64 0, i32 1
	store %Type_Info* %442, %Type_Info** %444
	%445 = load %Type_Info_Named, %Type_Info_Named* %440, align 8
	%446 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %437 to %Type_Info_Named*
	store %Type_Info_Named %445, %Type_Info_Named* %446
	%447 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %437, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %447
	%448 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 22
	%449 = getelementptr inbounds %Type_Info, %Type_Info* %448, i64 0, i32 2
	%450 = getelementptr inbounds %Type_Info, %Type_Info* %448, i64 0, i32 0
	store i64 8, i64* %450
	%451 = getelementptr inbounds %Type_Info, %Type_Info* %448, i64 0, i32 1
	store i64 8, i64* %451
	; Type_Info_Named
	%452 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %449 to %Type_Info_Named*
	%453 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 23
	%454 = bitcast %Type_Info* %453 to %Type_Info*
	%455 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %452, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$228, i64 0, i32 0), i64 17}, %..string* %455
	%456 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %452, i64 0, i32 1
	store %Type_Info* %454, %Type_Info** %456
	%457 = load %Type_Info_Named, %Type_Info_Named* %452, align 8
	%458 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %449 to %Type_Info_Named*
	store %Type_Info_Named %457, %Type_Info_Named* %458
	%459 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %449, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %459
	%460 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 23
	%461 = getelementptr inbounds %Type_Info, %Type_Info* %460, i64 0, i32 2
	%462 = getelementptr inbounds %Type_Info, %Type_Info* %460, i64 0, i32 0
	store i64 8, i64* %462
	%463 = getelementptr inbounds %Type_Info, %Type_Info* %460, i64 0, i32 1
	store i64 8, i64* %463
	; Type_Info_Struct
	%464 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %461 to %Type_Info_Struct*
	%465 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 4
	store i8 0, i8* %465
	%466 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 5
	store i8 0, i8* %466
	%467 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 6
	store i8 0, i8* %467
	%468 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 26
	%469 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 7
	%470 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 7
	%471 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 7
	%472 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%473 = bitcast %Type_Info* %472 to %Type_Info*
	%474 = getelementptr inbounds %Type_Info*, %Type_Info** %468, i64 0
	%475 = getelementptr inbounds i64, i64* %470, i64 0
	%476 = getelementptr inbounds i8, i8* %471, i64 0
	%477 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %477, %Type_Info** %474
	%478 = getelementptr inbounds %..string, %..string* %469, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$229, i64 0, i32 0), i64 4}, %..string* %478
	store i64 0, i64* %475
	store i8 0, i8* %476
	%479 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 0
	%480 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %479, i64 0, i32 0
	store %Type_Info** %468, %Type_Info*** %480
	%481 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %479, i64 0, i32 1
	store i64 1, i64* %481
	%482 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 1
	%483 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %482, i64 0, i32 0
	store %..string* %469, %..string** %483
	%484 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %482, i64 0, i32 1
	store i64 1, i64* %484
	%485 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 2
	%486 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %485, i64 0, i32 0
	store i64* %470, i64** %486
	%487 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %485, i64 0, i32 1
	store i64 1, i64* %487
	%488 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %464, i64 0, i32 3
	%489 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %488, i64 0, i32 0
	store i8* %471, i8** %489
	%490 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %488, i64 0, i32 1
	store i64 1, i64* %490
	%491 = load %Type_Info_Struct, %Type_Info_Struct* %464, align 8
	%492 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %461 to %Type_Info_Struct*
	store %Type_Info_Struct %491, %Type_Info_Struct* %492
	%493 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %461, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %493
	%494 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 24
	%495 = getelementptr inbounds %Type_Info, %Type_Info* %494, i64 0, i32 2
	%496 = getelementptr inbounds %Type_Info, %Type_Info* %494, i64 0, i32 0
	store i64 32, i64* %496
	%497 = getelementptr inbounds %Type_Info, %Type_Info* %494, i64 0, i32 1
	store i64 8, i64* %497
	; Type_Info_Named
	%498 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %495 to %Type_Info_Named*
	%499 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 25
	%500 = bitcast %Type_Info* %499 to %Type_Info*
	%501 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %498, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__str$22a, i64 0, i32 0), i64 19}, %..string* %501
	%502 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %498, i64 0, i32 1
	store %Type_Info* %500, %Type_Info** %502
	%503 = load %Type_Info_Named, %Type_Info_Named* %498, align 8
	%504 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %495 to %Type_Info_Named*
	store %Type_Info_Named %503, %Type_Info_Named* %504
	%505 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %495, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %505
	%506 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 25
	%507 = getelementptr inbounds %Type_Info, %Type_Info* %506, i64 0, i32 2
	%508 = getelementptr inbounds %Type_Info, %Type_Info* %506, i64 0, i32 0
	store i64 32, i64* %508
	%509 = getelementptr inbounds %Type_Info, %Type_Info* %506, i64 0, i32 1
	store i64 8, i64* %509
	; Type_Info_Struct
	%510 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %507 to %Type_Info_Struct*
	%511 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 4
	store i8 0, i8* %511
	%512 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 5
	store i8 0, i8* %512
	%513 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 6
	store i8 0, i8* %513
	%514 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 27
	%515 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 8
	%516 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 8
	%517 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 8
	%518 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%519 = bitcast %Type_Info* %518 to %Type_Info*
	%520 = getelementptr inbounds %Type_Info*, %Type_Info** %514, i64 0
	%521 = getelementptr inbounds i64, i64* %516, i64 0
	%522 = getelementptr inbounds i8, i8* %517, i64 0
	%523 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %523, %Type_Info** %520
	%524 = getelementptr inbounds %..string, %..string* %515, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$22b, i64 0, i32 0), i64 6}, %..string* %524
	store i64 0, i64* %521
	store i8 0, i8* %522
	%525 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%526 = bitcast %Type_Info* %525 to %Type_Info*
	%527 = getelementptr inbounds %Type_Info*, %Type_Info** %514, i64 1
	%528 = getelementptr inbounds i64, i64* %516, i64 1
	%529 = getelementptr inbounds i8, i8* %517, i64 1
	%530 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %530, %Type_Info** %527
	%531 = getelementptr inbounds %..string, %..string* %515, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$22c, i64 0, i32 0), i64 7}, %..string* %531
	store i64 8, i64* %528
	store i8 0, i8* %529
	%532 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%533 = bitcast %Type_Info* %532 to %Type_Info*
	%534 = getelementptr inbounds %Type_Info*, %Type_Info** %514, i64 2
	%535 = getelementptr inbounds i64, i64* %516, i64 2
	%536 = getelementptr inbounds i8, i8* %517, i64 2
	%537 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %537, %Type_Info** %534
	%538 = getelementptr inbounds %..string, %..string* %515, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$22d, i64 0, i32 0), i64 8}, %..string* %538
	store i64 16, i64* %535
	store i8 0, i8* %536
	%539 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 26
	%540 = bitcast %Type_Info* %539 to %Type_Info*
	%541 = getelementptr inbounds %Type_Info*, %Type_Info** %514, i64 3
	%542 = getelementptr inbounds i64, i64* %516, i64 3
	%543 = getelementptr inbounds i8, i8* %517, i64 3
	%544 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 26
	store %Type_Info* %544, %Type_Info** %541
	%545 = getelementptr inbounds %..string, %..string* %515, i64 3
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$22e, i64 0, i32 0), i64 10}, %..string* %545
	store i64 24, i64* %542
	store i8 0, i8* %543
	%546 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 0
	%547 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %546, i64 0, i32 0
	store %Type_Info** %514, %Type_Info*** %547
	%548 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %546, i64 0, i32 1
	store i64 4, i64* %548
	%549 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 1
	%550 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %549, i64 0, i32 0
	store %..string* %515, %..string** %550
	%551 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %549, i64 0, i32 1
	store i64 4, i64* %551
	%552 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 2
	%553 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %552, i64 0, i32 0
	store i64* %516, i64** %553
	%554 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %552, i64 0, i32 1
	store i64 4, i64* %554
	%555 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %510, i64 0, i32 3
	%556 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %555, i64 0, i32 0
	store i8* %517, i8** %556
	%557 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %555, i64 0, i32 1
	store i64 4, i64* %557
	%558 = load %Type_Info_Struct, %Type_Info_Struct* %510, align 8
	%559 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %507 to %Type_Info_Struct*
	store %Type_Info_Struct %558, %Type_Info_Struct* %559
	%560 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %507, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %560
	%561 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 26
	%562 = getelementptr inbounds %Type_Info, %Type_Info* %561, i64 0, i32 2
	%563 = getelementptr inbounds %Type_Info, %Type_Info* %561, i64 0, i32 0
	store i64 8, i64* %563
	%564 = getelementptr inbounds %Type_Info, %Type_Info* %561, i64 0, i32 1
	store i64 8, i64* %564
	; Type_Info_Named
	%565 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %562 to %Type_Info_Named*
	%566 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 27
	%567 = bitcast %Type_Info* %566 to %Type_Info*
	%568 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %565, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$22f, i64 0, i32 0), i64 18}, %..string* %568
	%569 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %565, i64 0, i32 1
	store %Type_Info* %567, %Type_Info** %569
	%570 = load %Type_Info_Named, %Type_Info_Named* %565, align 8
	%571 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %562 to %Type_Info_Named*
	store %Type_Info_Named %570, %Type_Info_Named* %571
	%572 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %562, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %572
	%573 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 27
	%574 = getelementptr inbounds %Type_Info, %Type_Info* %573, i64 0, i32 2
	%575 = getelementptr inbounds %Type_Info, %Type_Info* %573, i64 0, i32 0
	store i64 8, i64* %575
	%576 = getelementptr inbounds %Type_Info, %Type_Info* %573, i64 0, i32 1
	store i64 8, i64* %576
	; Type_Info_Enum
	%577 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %574 to %Type_Info_Enum*
	%578 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%579 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %577, i64 0, i32 0
	store %Type_Info* %578, %Type_Info** %579
	%580 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %577, i64 0, i32 3
	store i8 0, i8* %580
	%581 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 0
	%582 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 0
	%583 = bitcast %Type_Info_Enum_Value* %582 to i64*
	store i64 0, i64* %583
	%584 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %582, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %584
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$230, i64 0, i32 0), i64 7}, %..string* %581
	%585 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 1
	%586 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 1
	%587 = bitcast %Type_Info_Enum_Value* %586 to i64*
	store i64 1, i64* %587
	%588 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %586, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %588
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$231, i64 0, i32 0), i64 4}, %..string* %585
	%589 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 2
	%590 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 2
	%591 = bitcast %Type_Info_Enum_Value* %590 to i64*
	store i64 2, i64* %591
	%592 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %590, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %592
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$232, i64 0, i32 0), i64 11}, %..string* %589
	%593 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 3
	%594 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 3
	%595 = bitcast %Type_Info_Enum_Value* %594 to i64*
	store i64 3, i64* %595
	%596 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %594, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %596
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$233, i64 0, i32 0), i64 1}, %..string* %593
	%597 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 4
	%598 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 4
	%599 = bitcast %Type_Info_Enum_Value* %598 to i64*
	store i64 4, i64* %599
	%600 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %598, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %600
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$234, i64 0, i32 0), i64 3}, %..string* %597
	%601 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 5
	%602 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 5
	%603 = bitcast %Type_Info_Enum_Value* %602 to i64*
	store i64 5, i64* %603
	%604 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %602, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %604
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$235, i64 0, i32 0), i64 4}, %..string* %601
	%605 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %577, i64 0, i32 1
	%606 = getelementptr inbounds [6 x %..string], [6 x %..string]* @__$enum_names-1b, i64 0, i32 0
	%607 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %605, i64 0, i32 0
	store %..string* %606, %..string** %607
	%608 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %605, i64 0, i32 1
	store i64 6, i64* %608
	%609 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %577, i64 0, i32 2
	%610 = getelementptr inbounds [6 x %Type_Info_Enum_Value], [6 x %Type_Info_Enum_Value]* @__$enum_values-1b, i64 0, i32 0
	%611 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %609, i64 0, i32 0
	store %Type_Info_Enum_Value* %610, %Type_Info_Enum_Value** %611
	%612 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %609, i64 0, i32 1
	store i64 6, i64* %612
	%613 = load %Type_Info_Enum, %Type_Info_Enum* %577, align 8
	%614 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %574 to %Type_Info_Enum*
	store %Type_Info_Enum %613, %Type_Info_Enum* %614
	%615 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %574, i64 0, i32 2 ; UnionTagPtr
	store i8 17, i8* %615
	%616 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 28
	%617 = getelementptr inbounds %Type_Info, %Type_Info* %616, i64 0, i32 2
	%618 = getelementptr inbounds %Type_Info, %Type_Info* %616, i64 0, i32 0
	store i64 24, i64* %618
	%619 = getelementptr inbounds %Type_Info, %Type_Info* %616, i64 0, i32 1
	store i64 8, i64* %619
	; Type_Info_Named
	%620 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %617 to %Type_Info_Named*
	%621 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 29
	%622 = bitcast %Type_Info* %621 to %Type_Info*
	%623 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %620, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$236, i64 0, i32 0), i64 15}, %..string* %623
	%624 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %620, i64 0, i32 1
	store %Type_Info* %622, %Type_Info** %624
	%625 = load %Type_Info_Named, %Type_Info_Named* %620, align 8
	%626 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %617 to %Type_Info_Named*
	store %Type_Info_Named %625, %Type_Info_Named* %626
	%627 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %617, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %627
	%628 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 29
	%629 = getelementptr inbounds %Type_Info, %Type_Info* %628, i64 0, i32 2
	%630 = getelementptr inbounds %Type_Info, %Type_Info* %628, i64 0, i32 0
	store i64 24, i64* %630
	%631 = getelementptr inbounds %Type_Info, %Type_Info* %628, i64 0, i32 1
	store i64 8, i64* %631
	; Type_Info_Struct
	%632 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %629 to %Type_Info_Struct*
	%633 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 4
	store i8 0, i8* %633
	%634 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 5
	store i8 0, i8* %634
	%635 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 6
	store i8 0, i8* %635
	%636 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 31
	%637 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 12
	%638 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 12
	%639 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 12
	%640 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%641 = bitcast %Type_Info* %640 to %Type_Info*
	%642 = getelementptr inbounds %Type_Info*, %Type_Info** %636, i64 0
	%643 = getelementptr inbounds i64, i64* %638, i64 0
	%644 = getelementptr inbounds i8, i8* %639, i64 0
	%645 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %645, %Type_Info** %642
	%646 = getelementptr inbounds %..string, %..string* %637, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$237, i64 0, i32 0), i64 4}, %..string* %646
	store i64 0, i64* %643
	store i8 0, i8* %644
	%647 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%648 = bitcast %Type_Info* %647 to %Type_Info*
	%649 = getelementptr inbounds %Type_Info*, %Type_Info** %636, i64 1
	%650 = getelementptr inbounds i64, i64* %638, i64 1
	%651 = getelementptr inbounds i8, i8* %639, i64 1
	%652 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %652, %Type_Info** %649
	%653 = getelementptr inbounds %..string, %..string* %637, i64 1
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$238, i64 0, i32 0), i64 9}, %..string* %653
	store i64 8, i64* %650
	store i8 0, i8* %651
	%654 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%655 = bitcast %Type_Info* %654 to %Type_Info*
	%656 = getelementptr inbounds %Type_Info*, %Type_Info** %636, i64 2
	%657 = getelementptr inbounds i64, i64* %638, i64 2
	%658 = getelementptr inbounds i8, i8* %639, i64 2
	%659 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %659, %Type_Info** %656
	%660 = getelementptr inbounds %..string, %..string* %637, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$239, i64 0, i32 0), i64 5}, %..string* %660
	store i64 16, i64* %657
	store i8 0, i8* %658
	%661 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 0
	%662 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %661, i64 0, i32 0
	store %Type_Info** %636, %Type_Info*** %662
	%663 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %661, i64 0, i32 1
	store i64 3, i64* %663
	%664 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 1
	%665 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %664, i64 0, i32 0
	store %..string* %637, %..string** %665
	%666 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %664, i64 0, i32 1
	store i64 3, i64* %666
	%667 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 2
	%668 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %667, i64 0, i32 0
	store i64* %638, i64** %668
	%669 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %667, i64 0, i32 1
	store i64 3, i64* %669
	%670 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %632, i64 0, i32 3
	%671 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %670, i64 0, i32 0
	store i8* %639, i8** %671
	%672 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %670, i64 0, i32 1
	store i64 3, i64* %672
	%673 = load %Type_Info_Struct, %Type_Info_Struct* %632, align 8
	%674 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %629 to %Type_Info_Struct*
	store %Type_Info_Struct %673, %Type_Info_Struct* %674
	%675 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %629, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %675
	%676 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 30
	%677 = getelementptr inbounds %Type_Info, %Type_Info* %676, i64 0, i32 2
	%678 = getelementptr inbounds %Type_Info, %Type_Info* %676, i64 0, i32 0
	store i64 16, i64* %678
	%679 = getelementptr inbounds %Type_Info, %Type_Info* %676, i64 0, i32 1
	store i64 8, i64* %679
	; Type_Info_Named
	%680 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %677 to %Type_Info_Named*
	%681 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 31
	%682 = bitcast %Type_Info* %681 to %Type_Info*
	%683 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %680, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__str$23a, i64 0, i32 0), i64 23}, %..string* %683
	%684 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %680, i64 0, i32 1
	store %Type_Info* %682, %Type_Info** %684
	%685 = load %Type_Info_Named, %Type_Info_Named* %680, align 8
	%686 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %677 to %Type_Info_Named*
	store %Type_Info_Named %685, %Type_Info_Named* %686
	%687 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %677, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %687
	%688 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 31
	%689 = getelementptr inbounds %Type_Info, %Type_Info* %688, i64 0, i32 2
	%690 = getelementptr inbounds %Type_Info, %Type_Info* %688, i64 0, i32 0
	store i64 16, i64* %690
	%691 = getelementptr inbounds %Type_Info, %Type_Info* %688, i64 0, i32 1
	store i64 8, i64* %691
	; Type_Info_Struct
	%692 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %689 to %Type_Info_Struct*
	%693 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 4
	store i8 0, i8* %693
	%694 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 5
	store i8 0, i8* %694
	%695 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 6
	store i8 0, i8* %695
	%696 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 34
	%697 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 15
	%698 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 15
	%699 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 15
	%700 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%701 = bitcast %Type_Info* %700 to %Type_Info*
	%702 = getelementptr inbounds %Type_Info*, %Type_Info** %696, i64 0
	%703 = getelementptr inbounds i64, i64* %698, i64 0
	%704 = getelementptr inbounds i8, i8* %699, i64 0
	%705 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %705, %Type_Info** %702
	%706 = getelementptr inbounds %..string, %..string* %697, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$23b, i64 0, i32 0), i64 4}, %..string* %706
	store i64 0, i64* %703
	store i8 0, i8* %704
	%707 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%708 = bitcast %Type_Info* %707 to %Type_Info*
	%709 = getelementptr inbounds %Type_Info*, %Type_Info** %696, i64 1
	%710 = getelementptr inbounds i64, i64* %698, i64 1
	%711 = getelementptr inbounds i8, i8* %699, i64 1
	%712 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %712, %Type_Info** %709
	%713 = getelementptr inbounds %..string, %..string* %697, i64 1
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$23c, i64 0, i32 0), i64 9}, %..string* %713
	store i64 8, i64* %710
	store i8 0, i8* %711
	%714 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 0
	%715 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %714, i64 0, i32 0
	store %Type_Info** %696, %Type_Info*** %715
	%716 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %714, i64 0, i32 1
	store i64 2, i64* %716
	%717 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 1
	%718 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %717, i64 0, i32 0
	store %..string* %697, %..string** %718
	%719 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %717, i64 0, i32 1
	store i64 2, i64* %719
	%720 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 2
	%721 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %720, i64 0, i32 0
	store i64* %698, i64** %721
	%722 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %720, i64 0, i32 1
	store i64 2, i64* %722
	%723 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %692, i64 0, i32 3
	%724 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %723, i64 0, i32 0
	store i8* %699, i8** %724
	%725 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %723, i64 0, i32 1
	store i64 2, i64* %725
	%726 = load %Type_Info_Struct, %Type_Info_Struct* %692, align 8
	%727 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %689 to %Type_Info_Struct*
	store %Type_Info_Struct %726, %Type_Info_Struct* %727
	%728 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %689, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %728
	%729 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 32
	%730 = getelementptr inbounds %Type_Info, %Type_Info* %729, i64 0, i32 2
	%731 = getelementptr inbounds %Type_Info, %Type_Info* %729, i64 0, i32 0
	store i64 16, i64* %731
	%732 = getelementptr inbounds %Type_Info, %Type_Info* %729, i64 0, i32 1
	store i64 8, i64* %732
	; Type_Info_Named
	%733 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %730 to %Type_Info_Named*
	%734 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 31
	%735 = bitcast %Type_Info* %734 to %Type_Info*
	%736 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %733, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$23d, i64 0, i32 0), i64 15}, %..string* %736
	%737 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %733, i64 0, i32 1
	store %Type_Info* %735, %Type_Info** %737
	%738 = load %Type_Info_Named, %Type_Info_Named* %733, align 8
	%739 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %730 to %Type_Info_Named*
	store %Type_Info_Named %738, %Type_Info_Named* %739
	%740 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %730, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %740
	%741 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 33
	%742 = getelementptr inbounds %Type_Info, %Type_Info* %741, i64 0, i32 2
	%743 = getelementptr inbounds %Type_Info, %Type_Info* %741, i64 0, i32 0
	store i64 32, i64* %743
	%744 = getelementptr inbounds %Type_Info, %Type_Info* %741, i64 0, i32 1
	store i64 8, i64* %744
	; Type_Info_Named
	%745 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %742 to %Type_Info_Named*
	%746 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 34
	%747 = bitcast %Type_Info* %746 to %Type_Info*
	%748 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %745, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$23e, i64 0, i32 0), i64 15}, %..string* %748
	%749 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %745, i64 0, i32 1
	store %Type_Info* %747, %Type_Info** %749
	%750 = load %Type_Info_Named, %Type_Info_Named* %745, align 8
	%751 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %742 to %Type_Info_Named*
	store %Type_Info_Named %750, %Type_Info_Named* %751
	%752 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %742, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %752
	%753 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 34
	%754 = getelementptr inbounds %Type_Info, %Type_Info* %753, i64 0, i32 2
	%755 = getelementptr inbounds %Type_Info, %Type_Info* %753, i64 0, i32 0
	store i64 32, i64* %755
	%756 = getelementptr inbounds %Type_Info, %Type_Info* %753, i64 0, i32 1
	store i64 8, i64* %756
	; Type_Info_Struct
	%757 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %754 to %Type_Info_Struct*
	%758 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 4
	store i8 0, i8* %758
	%759 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 5
	store i8 0, i8* %759
	%760 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 6
	store i8 0, i8* %760
	%761 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 36
	%762 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 17
	%763 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 17
	%764 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 17
	%765 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	%766 = bitcast %Type_Info* %765 to %Type_Info*
	%767 = getelementptr inbounds %Type_Info*, %Type_Info** %761, i64 0
	%768 = getelementptr inbounds i64, i64* %763, i64 0
	%769 = getelementptr inbounds i8, i8* %764, i64 0
	%770 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	store %Type_Info* %770, %Type_Info** %767
	%771 = getelementptr inbounds %..string, %..string* %762, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$23f, i64 0, i32 0), i64 5}, %..string* %771
	store i64 0, i64* %768
	store i8 0, i8* %769
	%772 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	%773 = bitcast %Type_Info* %772 to %Type_Info*
	%774 = getelementptr inbounds %Type_Info*, %Type_Info** %761, i64 1
	%775 = getelementptr inbounds i64, i64* %763, i64 1
	%776 = getelementptr inbounds i8, i8* %764, i64 1
	%777 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	store %Type_Info* %777, %Type_Info** %774
	%778 = getelementptr inbounds %..string, %..string* %762, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$240, i64 0, i32 0), i64 5}, %..string* %778
	store i64 16, i64* %775
	store i8 0, i8* %776
	%779 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 0
	%780 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %779, i64 0, i32 0
	store %Type_Info** %761, %Type_Info*** %780
	%781 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %779, i64 0, i32 1
	store i64 2, i64* %781
	%782 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 1
	%783 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %782, i64 0, i32 0
	store %..string* %762, %..string** %783
	%784 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %782, i64 0, i32 1
	store i64 2, i64* %784
	%785 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 2
	%786 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %785, i64 0, i32 0
	store i64* %763, i64** %786
	%787 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %785, i64 0, i32 1
	store i64 2, i64* %787
	%788 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %757, i64 0, i32 3
	%789 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %788, i64 0, i32 0
	store i8* %764, i8** %789
	%790 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %788, i64 0, i32 1
	store i64 2, i64* %790
	%791 = load %Type_Info_Struct, %Type_Info_Struct* %757, align 8
	%792 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %754 to %Type_Info_Struct*
	store %Type_Info_Struct %791, %Type_Info_Struct* %792
	%793 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %754, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %793
	%794 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	%795 = getelementptr inbounds %Type_Info, %Type_Info* %794, i64 0, i32 2
	%796 = getelementptr inbounds %Type_Info, %Type_Info* %794, i64 0, i32 0
	store i64 16, i64* %796
	%797 = getelementptr inbounds %Type_Info, %Type_Info* %794, i64 0, i32 1
	store i64 8, i64* %797
	; Type_Info_Slice
	%798 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %795 to %Type_Info_Slice*
	%799 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%800 = bitcast %Type_Info* %799 to %Type_Info*
	%801 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %798, i64 0, i32 0
	store %Type_Info* %800, %Type_Info** %801
	%802 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %798, i64 0, i32 1
	store i64 8, i64* %802
	%803 = load %Type_Info_Slice, %Type_Info_Slice* %798, align 8
	%804 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %795 to %Type_Info_Slice*
	store %Type_Info_Slice %803, %Type_Info_Slice* %804
	%805 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %795, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %805
	%806 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 36
	%807 = getelementptr inbounds %Type_Info, %Type_Info* %806, i64 0, i32 2
	%808 = getelementptr inbounds %Type_Info, %Type_Info* %806, i64 0, i32 0
	store i64 8, i64* %808
	%809 = getelementptr inbounds %Type_Info, %Type_Info* %806, i64 0, i32 1
	store i64 8, i64* %809
	; Type_Info_Pointer
	%810 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %807 to %Type_Info_Pointer*
	%811 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%812 = bitcast %Type_Info* %811 to %Type_Info*
	%813 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %810, i64 0, i32 0
	store %Type_Info* %812, %Type_Info** %813
	%814 = load %Type_Info_Pointer, %Type_Info_Pointer* %810, align 8
	%815 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %807 to %Type_Info_Pointer*
	store %Type_Info_Pointer %814, %Type_Info_Pointer* %815
	%816 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %807, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %816
	%817 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	%818 = getelementptr inbounds %Type_Info, %Type_Info* %817, i64 0, i32 2
	%819 = getelementptr inbounds %Type_Info, %Type_Info* %817, i64 0, i32 0
	store i64 16, i64* %819
	%820 = getelementptr inbounds %Type_Info, %Type_Info* %817, i64 0, i32 1
	store i64 8, i64* %820
	; Type_Info_Slice
	%821 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %818 to %Type_Info_Slice*
	%822 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%823 = bitcast %Type_Info* %822 to %Type_Info*
	%824 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %821, i64 0, i32 0
	store %Type_Info* %823, %Type_Info** %824
	%825 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %821, i64 0, i32 1
	store i64 16, i64* %825
	%826 = load %Type_Info_Slice, %Type_Info_Slice* %821, align 8
	%827 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %818 to %Type_Info_Slice*
	store %Type_Info_Slice %826, %Type_Info_Slice* %827
	%828 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %818, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %828
	%829 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 38
	%830 = getelementptr inbounds %Type_Info, %Type_Info* %829, i64 0, i32 2
	%831 = getelementptr inbounds %Type_Info, %Type_Info* %829, i64 0, i32 0
	store i64 8, i64* %831
	%832 = getelementptr inbounds %Type_Info, %Type_Info* %829, i64 0, i32 1
	store i64 8, i64* %832
	; Type_Info_Pointer
	%833 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %830 to %Type_Info_Pointer*
	%834 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%835 = bitcast %Type_Info* %834 to %Type_Info*
	%836 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %833, i64 0, i32 0
	store %Type_Info* %835, %Type_Info** %836
	%837 = load %Type_Info_Pointer, %Type_Info_Pointer* %833, align 8
	%838 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %830 to %Type_Info_Pointer*
	store %Type_Info_Pointer %837, %Type_Info_Pointer* %838
	%839 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %830, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %839
	%840 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 39
	%841 = getelementptr inbounds %Type_Info, %Type_Info* %840, i64 0, i32 2
	%842 = getelementptr inbounds %Type_Info, %Type_Info* %840, i64 0, i32 0
	store i64 72, i64* %842
	%843 = getelementptr inbounds %Type_Info, %Type_Info* %840, i64 0, i32 1
	store i64 8, i64* %843
	; Type_Info_Named
	%844 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %841 to %Type_Info_Named*
	%845 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 40
	%846 = bitcast %Type_Info* %845 to %Type_Info*
	%847 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %844, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__str$241, i64 0, i32 0), i64 16}, %..string* %847
	%848 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %844, i64 0, i32 1
	store %Type_Info* %846, %Type_Info** %848
	%849 = load %Type_Info_Named, %Type_Info_Named* %844, align 8
	%850 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %841 to %Type_Info_Named*
	store %Type_Info_Named %849, %Type_Info_Named* %850
	%851 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %841, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %851
	%852 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 40
	%853 = getelementptr inbounds %Type_Info, %Type_Info* %852, i64 0, i32 2
	%854 = getelementptr inbounds %Type_Info, %Type_Info* %852, i64 0, i32 0
	store i64 72, i64* %854
	%855 = getelementptr inbounds %Type_Info, %Type_Info* %852, i64 0, i32 1
	store i64 8, i64* %855
	; Type_Info_Struct
	%856 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %853 to %Type_Info_Struct*
	%857 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 4
	store i8 0, i8* %857
	%858 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 5
	store i8 0, i8* %858
	%859 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 6
	store i8 0, i8* %859
	%860 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 38
	%861 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 19
	%862 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 19
	%863 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 19
	%864 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	%865 = bitcast %Type_Info* %864 to %Type_Info*
	%866 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 0
	%867 = getelementptr inbounds i64, i64* %862, i64 0
	%868 = getelementptr inbounds i8, i8* %863, i64 0
	%869 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	store %Type_Info* %869, %Type_Info** %866
	%870 = getelementptr inbounds %..string, %..string* %861, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$242, i64 0, i32 0), i64 5}, %..string* %870
	store i64 0, i64* %867
	store i8 0, i8* %868
	%871 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	%872 = bitcast %Type_Info* %871 to %Type_Info*
	%873 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 1
	%874 = getelementptr inbounds i64, i64* %862, i64 1
	%875 = getelementptr inbounds i8, i8* %863, i64 1
	%876 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	store %Type_Info* %876, %Type_Info** %873
	%877 = getelementptr inbounds %..string, %..string* %861, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$243, i64 0, i32 0), i64 5}, %..string* %877
	store i64 16, i64* %874
	store i8 0, i8* %875
	%878 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 41
	%879 = bitcast %Type_Info* %878 to %Type_Info*
	%880 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 2
	%881 = getelementptr inbounds i64, i64* %862, i64 2
	%882 = getelementptr inbounds i8, i8* %863, i64 2
	%883 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 41
	store %Type_Info* %883, %Type_Info** %880
	%884 = getelementptr inbounds %..string, %..string* %861, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$244, i64 0, i32 0), i64 7}, %..string* %884
	store i64 32, i64* %881
	store i8 0, i8* %882
	%885 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 44
	%886 = bitcast %Type_Info* %885 to %Type_Info*
	%887 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 3
	%888 = getelementptr inbounds i64, i64* %862, i64 3
	%889 = getelementptr inbounds i8, i8* %863, i64 3
	%890 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 44
	store %Type_Info* %890, %Type_Info** %887
	%891 = getelementptr inbounds %..string, %..string* %861, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$245, i64 0, i32 0), i64 6}, %..string* %891
	store i64 48, i64* %888
	store i8 0, i8* %889
	%892 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%893 = bitcast %Type_Info* %892 to %Type_Info*
	%894 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 4
	%895 = getelementptr inbounds i64, i64* %862, i64 4
	%896 = getelementptr inbounds i8, i8* %863, i64 4
	%897 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %897, %Type_Info** %894
	%898 = getelementptr inbounds %..string, %..string* %861, i64 4
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$246, i64 0, i32 0), i64 9}, %..string* %898
	store i64 64, i64* %895
	store i8 0, i8* %896
	%899 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%900 = bitcast %Type_Info* %899 to %Type_Info*
	%901 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 5
	%902 = getelementptr inbounds i64, i64* %862, i64 5
	%903 = getelementptr inbounds i8, i8* %863, i64 5
	%904 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %904, %Type_Info** %901
	%905 = getelementptr inbounds %..string, %..string* %861, i64 5
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$247, i64 0, i32 0), i64 12}, %..string* %905
	store i64 65, i64* %902
	store i8 0, i8* %903
	%906 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%907 = bitcast %Type_Info* %906 to %Type_Info*
	%908 = getelementptr inbounds %Type_Info*, %Type_Info** %860, i64 6
	%909 = getelementptr inbounds i64, i64* %862, i64 6
	%910 = getelementptr inbounds i8, i8* %863, i64 6
	%911 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %911, %Type_Info** %908
	%912 = getelementptr inbounds %..string, %..string* %861, i64 6
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$248, i64 0, i32 0), i64 12}, %..string* %912
	store i64 66, i64* %909
	store i8 0, i8* %910
	%913 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 0
	%914 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %913, i64 0, i32 0
	store %Type_Info** %860, %Type_Info*** %914
	%915 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %913, i64 0, i32 1
	store i64 7, i64* %915
	%916 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 1
	%917 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %916, i64 0, i32 0
	store %..string* %861, %..string** %917
	%918 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %916, i64 0, i32 1
	store i64 7, i64* %918
	%919 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 2
	%920 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %919, i64 0, i32 0
	store i64* %862, i64** %920
	%921 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %919, i64 0, i32 1
	store i64 7, i64* %921
	%922 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %856, i64 0, i32 3
	%923 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %922, i64 0, i32 0
	store i8* %863, i8** %923
	%924 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %922, i64 0, i32 1
	store i64 7, i64* %924
	%925 = load %Type_Info_Struct, %Type_Info_Struct* %856, align 8
	%926 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %853 to %Type_Info_Struct*
	store %Type_Info_Struct %925, %Type_Info_Struct* %926
	%927 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %853, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %927
	%928 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 41
	%929 = getelementptr inbounds %Type_Info, %Type_Info* %928, i64 0, i32 2
	%930 = getelementptr inbounds %Type_Info, %Type_Info* %928, i64 0, i32 0
	store i64 16, i64* %930
	%931 = getelementptr inbounds %Type_Info, %Type_Info* %928, i64 0, i32 1
	store i64 8, i64* %931
	; Type_Info_Slice
	%932 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %929 to %Type_Info_Slice*
	%933 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%934 = bitcast %Type_Info* %933 to %Type_Info*
	%935 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %932, i64 0, i32 0
	store %Type_Info* %934, %Type_Info** %935
	%936 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %932, i64 0, i32 1
	store i64 8, i64* %936
	%937 = load %Type_Info_Slice, %Type_Info_Slice* %932, align 8
	%938 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %929 to %Type_Info_Slice*
	store %Type_Info_Slice %937, %Type_Info_Slice* %938
	%939 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %929, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %939
	%940 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%941 = getelementptr inbounds %Type_Info, %Type_Info* %940, i64 0, i32 2
	%942 = getelementptr inbounds %Type_Info, %Type_Info* %940, i64 0, i32 0
	store i64 8, i64* %942
	%943 = getelementptr inbounds %Type_Info, %Type_Info* %940, i64 0, i32 1
	store i64 8, i64* %943
	; Type_Info_Basic
	%944 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %941 to %Type_Info_Integer*
	%945 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %944, i64 0, i32 0
	store i8 0, i8* %945
	%946 = load %Type_Info_Integer, %Type_Info_Integer* %944, align 1
	%947 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %941 to %Type_Info_Integer*
	store %Type_Info_Integer %946, %Type_Info_Integer* %947
	%948 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %941, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %948
	%949 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 43
	%950 = getelementptr inbounds %Type_Info, %Type_Info* %949, i64 0, i32 2
	%951 = getelementptr inbounds %Type_Info, %Type_Info* %949, i64 0, i32 0
	store i64 8, i64* %951
	%952 = getelementptr inbounds %Type_Info, %Type_Info* %949, i64 0, i32 1
	store i64 8, i64* %952
	; Type_Info_Pointer
	%953 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %950 to %Type_Info_Pointer*
	%954 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%955 = bitcast %Type_Info* %954 to %Type_Info*
	%956 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %953, i64 0, i32 0
	store %Type_Info* %955, %Type_Info** %956
	%957 = load %Type_Info_Pointer, %Type_Info_Pointer* %953, align 8
	%958 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %950 to %Type_Info_Pointer*
	store %Type_Info_Pointer %957, %Type_Info_Pointer* %958
	%959 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %950, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %959
	%960 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 44
	%961 = getelementptr inbounds %Type_Info, %Type_Info* %960, i64 0, i32 2
	%962 = getelementptr inbounds %Type_Info, %Type_Info* %960, i64 0, i32 0
	store i64 16, i64* %962
	%963 = getelementptr inbounds %Type_Info, %Type_Info* %960, i64 0, i32 1
	store i64 8, i64* %963
	; Type_Info_Slice
	%964 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %961 to %Type_Info_Slice*
	%965 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%966 = bitcast %Type_Info* %965 to %Type_Info*
	%967 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %964, i64 0, i32 0
	store %Type_Info* %966, %Type_Info** %967
	%968 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %964, i64 0, i32 1
	store i64 1, i64* %968
	%969 = load %Type_Info_Slice, %Type_Info_Slice* %964, align 8
	%970 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %961 to %Type_Info_Slice*
	store %Type_Info_Slice %969, %Type_Info_Slice* %970
	%971 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %961, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %971
	%972 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 45
	%973 = getelementptr inbounds %Type_Info, %Type_Info* %972, i64 0, i32 2
	%974 = getelementptr inbounds %Type_Info, %Type_Info* %972, i64 0, i32 0
	store i64 8, i64* %974
	%975 = getelementptr inbounds %Type_Info, %Type_Info* %972, i64 0, i32 1
	store i64 8, i64* %975
	; Type_Info_Pointer
	%976 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %973 to %Type_Info_Pointer*
	%977 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%978 = bitcast %Type_Info* %977 to %Type_Info*
	%979 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %976, i64 0, i32 0
	store %Type_Info* %978, %Type_Info** %979
	%980 = load %Type_Info_Pointer, %Type_Info_Pointer* %976, align 8
	%981 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %973 to %Type_Info_Pointer*
	store %Type_Info_Pointer %980, %Type_Info_Pointer* %981
	%982 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %973, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %982
	%983 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 46
	%984 = getelementptr inbounds %Type_Info, %Type_Info* %983, i64 0, i32 2
	%985 = getelementptr inbounds %Type_Info, %Type_Info* %983, i64 0, i32 0
	store i64 32, i64* %985
	%986 = getelementptr inbounds %Type_Info, %Type_Info* %983, i64 0, i32 1
	store i64 8, i64* %986
	; Type_Info_Named
	%987 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %984 to %Type_Info_Named*
	%988 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 47
	%989 = bitcast %Type_Info* %988 to %Type_Info*
	%990 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %987, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$249, i64 0, i32 0), i64 15}, %..string* %990
	%991 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %987, i64 0, i32 1
	store %Type_Info* %989, %Type_Info** %991
	%992 = load %Type_Info_Named, %Type_Info_Named* %987, align 8
	%993 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %984 to %Type_Info_Named*
	store %Type_Info_Named %992, %Type_Info_Named* %993
	%994 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %984, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %994
	%995 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 47
	%996 = getelementptr inbounds %Type_Info, %Type_Info* %995, i64 0, i32 2
	%997 = getelementptr inbounds %Type_Info, %Type_Info* %995, i64 0, i32 0
	store i64 32, i64* %997
	%998 = getelementptr inbounds %Type_Info, %Type_Info* %995, i64 0, i32 1
	store i64 8, i64* %998
	; Type_Info_Struct
	%999 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %996 to %Type_Info_Struct*
	%1000 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 4
	store i8 0, i8* %1000
	%1001 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 5
	store i8 0, i8* %1001
	%1002 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 6
	store i8 0, i8* %1002
	%1003 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 45
	%1004 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 26
	%1005 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 26
	%1006 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 26
	%1007 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	%1008 = bitcast %Type_Info* %1007 to %Type_Info*
	%1009 = getelementptr inbounds %Type_Info*, %Type_Info** %1003, i64 0
	%1010 = getelementptr inbounds i64, i64* %1005, i64 0
	%1011 = getelementptr inbounds i8, i8* %1006, i64 0
	%1012 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 35
	store %Type_Info* %1012, %Type_Info** %1009
	%1013 = getelementptr inbounds %..string, %..string* %1004, i64 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$24a, i64 0, i32 0), i64 8}, %..string* %1013
	store i64 0, i64* %1010
	store i8 0, i8* %1011
	%1014 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%1015 = bitcast %Type_Info* %1014 to %Type_Info*
	%1016 = getelementptr inbounds %Type_Info*, %Type_Info** %1003, i64 1
	%1017 = getelementptr inbounds i64, i64* %1005, i64 1
	%1018 = getelementptr inbounds i8, i8* %1006, i64 1
	%1019 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	store %Type_Info* %1019, %Type_Info** %1016
	%1020 = getelementptr inbounds %..string, %..string* %1004, i64 1
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$24b, i64 0, i32 0), i64 10}, %..string* %1020
	store i64 16, i64* %1017
	store i8 0, i8* %1018
	%1021 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%1022 = bitcast %Type_Info* %1021 to %Type_Info*
	%1023 = getelementptr inbounds %Type_Info*, %Type_Info** %1003, i64 2
	%1024 = getelementptr inbounds i64, i64* %1005, i64 2
	%1025 = getelementptr inbounds i8, i8* %1006, i64 2
	%1026 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %1026, %Type_Info** %1023
	%1027 = getelementptr inbounds %..string, %..string* %1004, i64 2
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$24c, i64 0, i32 0), i64 8}, %..string* %1027
	store i64 24, i64* %1024
	store i8 0, i8* %1025
	%1028 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 0
	%1029 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1028, i64 0, i32 0
	store %Type_Info** %1003, %Type_Info*** %1029
	%1030 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1028, i64 0, i32 1
	store i64 3, i64* %1030
	%1031 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 1
	%1032 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1031, i64 0, i32 0
	store %..string* %1004, %..string** %1032
	%1033 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1031, i64 0, i32 1
	store i64 3, i64* %1033
	%1034 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 2
	%1035 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1034, i64 0, i32 0
	store i64* %1005, i64** %1035
	%1036 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1034, i64 0, i32 1
	store i64 3, i64* %1036
	%1037 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %999, i64 0, i32 3
	%1038 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1037, i64 0, i32 0
	store i8* %1006, i8** %1038
	%1039 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1037, i64 0, i32 1
	store i64 3, i64* %1039
	%1040 = load %Type_Info_Struct, %Type_Info_Struct* %999, align 8
	%1041 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %996 to %Type_Info_Struct*
	store %Type_Info_Struct %1040, %Type_Info_Struct* %1041
	%1042 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %996, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1042
	%1043 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 48
	%1044 = getelementptr inbounds %Type_Info, %Type_Info* %1043, i64 0, i32 2
	%1045 = getelementptr inbounds %Type_Info, %Type_Info* %1043, i64 0, i32 0
	store i64 48, i64* %1045
	%1046 = getelementptr inbounds %Type_Info, %Type_Info* %1043, i64 0, i32 1
	store i64 8, i64* %1046
	; Type_Info_Named
	%1047 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1044 to %Type_Info_Named*
	%1048 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 49
	%1049 = bitcast %Type_Info* %1048 to %Type_Info*
	%1050 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1047, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$24d, i64 0, i32 0), i64 14}, %..string* %1050
	%1051 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1047, i64 0, i32 1
	store %Type_Info* %1049, %Type_Info** %1051
	%1052 = load %Type_Info_Named, %Type_Info_Named* %1047, align 8
	%1053 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1044 to %Type_Info_Named*
	store %Type_Info_Named %1052, %Type_Info_Named* %1053
	%1054 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1044, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1054
	%1055 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 49
	%1056 = getelementptr inbounds %Type_Info, %Type_Info* %1055, i64 0, i32 2
	%1057 = getelementptr inbounds %Type_Info, %Type_Info* %1055, i64 0, i32 0
	store i64 48, i64* %1057
	%1058 = getelementptr inbounds %Type_Info, %Type_Info* %1055, i64 0, i32 1
	store i64 8, i64* %1058
	; Type_Info_Struct
	%1059 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1056 to %Type_Info_Struct*
	%1060 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 4
	store i8 0, i8* %1060
	%1061 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 5
	store i8 0, i8* %1061
	%1062 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 6
	store i8 0, i8* %1062
	%1063 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 48
	%1064 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 29
	%1065 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 29
	%1066 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 29
	%1067 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%1068 = bitcast %Type_Info* %1067 to %Type_Info*
	%1069 = getelementptr inbounds %Type_Info*, %Type_Info** %1063, i64 0
	%1070 = getelementptr inbounds i64, i64* %1065, i64 0
	%1071 = getelementptr inbounds i8, i8* %1066, i64 0
	%1072 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %1072, %Type_Info** %1069
	%1073 = getelementptr inbounds %..string, %..string* %1064, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$24e, i64 0, i32 0), i64 4}, %..string* %1073
	store i64 0, i64* %1070
	store i8 0, i8* %1071
	%1074 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	%1075 = bitcast %Type_Info* %1074 to %Type_Info*
	%1076 = getelementptr inbounds %Type_Info*, %Type_Info** %1063, i64 1
	%1077 = getelementptr inbounds i64, i64* %1065, i64 1
	%1078 = getelementptr inbounds i8, i8* %1066, i64 1
	%1079 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	store %Type_Info* %1079, %Type_Info** %1076
	%1080 = getelementptr inbounds %..string, %..string* %1064, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$24f, i64 0, i32 0), i64 5}, %..string* %1080
	store i64 8, i64* %1077
	store i8 0, i8* %1078
	%1081 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 50
	%1082 = bitcast %Type_Info* %1081 to %Type_Info*
	%1083 = getelementptr inbounds %Type_Info*, %Type_Info** %1063, i64 2
	%1084 = getelementptr inbounds i64, i64* %1065, i64 2
	%1085 = getelementptr inbounds i8, i8* %1066, i64 2
	%1086 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 50
	store %Type_Info* %1086, %Type_Info** %1083
	%1087 = getelementptr inbounds %..string, %..string* %1064, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$250, i64 0, i32 0), i64 6}, %..string* %1087
	store i64 24, i64* %1084
	store i8 0, i8* %1085
	%1088 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%1089 = bitcast %Type_Info* %1088 to %Type_Info*
	%1090 = getelementptr inbounds %Type_Info*, %Type_Info** %1063, i64 3
	%1091 = getelementptr inbounds i64, i64* %1065, i64 3
	%1092 = getelementptr inbounds i8, i8* %1066, i64 3
	%1093 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %1093, %Type_Info** %1090
	%1094 = getelementptr inbounds %..string, %..string* %1064, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$251, i64 0, i32 0), i64 9}, %..string* %1094
	store i64 40, i64* %1091
	store i8 0, i8* %1092
	%1095 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 0
	%1096 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1095, i64 0, i32 0
	store %Type_Info** %1063, %Type_Info*** %1096
	%1097 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1095, i64 0, i32 1
	store i64 4, i64* %1097
	%1098 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 1
	%1099 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1098, i64 0, i32 0
	store %..string* %1064, %..string** %1099
	%1100 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1098, i64 0, i32 1
	store i64 4, i64* %1100
	%1101 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 2
	%1102 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1101, i64 0, i32 0
	store i64* %1065, i64** %1102
	%1103 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1101, i64 0, i32 1
	store i64 4, i64* %1103
	%1104 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1059, i64 0, i32 3
	%1105 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1104, i64 0, i32 0
	store i8* %1066, i8** %1105
	%1106 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1104, i64 0, i32 1
	store i64 4, i64* %1106
	%1107 = load %Type_Info_Struct, %Type_Info_Struct* %1059, align 8
	%1108 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1056 to %Type_Info_Struct*
	store %Type_Info_Struct %1107, %Type_Info_Struct* %1108
	%1109 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1056, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1109
	%1110 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 50
	%1111 = getelementptr inbounds %Type_Info, %Type_Info* %1110, i64 0, i32 2
	%1112 = getelementptr inbounds %Type_Info, %Type_Info* %1110, i64 0, i32 0
	store i64 16, i64* %1112
	%1113 = getelementptr inbounds %Type_Info, %Type_Info* %1110, i64 0, i32 1
	store i64 8, i64* %1113
	; Type_Info_Slice
	%1114 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1111 to %Type_Info_Slice*
	%1115 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 51
	%1116 = bitcast %Type_Info* %1115 to %Type_Info*
	%1117 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %1114, i64 0, i32 0
	store %Type_Info* %1116, %Type_Info** %1117
	%1118 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %1114, i64 0, i32 1
	store i64 16, i64* %1118
	%1119 = load %Type_Info_Slice, %Type_Info_Slice* %1114, align 8
	%1120 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1111 to %Type_Info_Slice*
	store %Type_Info_Slice %1119, %Type_Info_Slice* %1120
	%1121 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1111, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %1121
	%1122 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 51
	%1123 = getelementptr inbounds %Type_Info, %Type_Info* %1122, i64 0, i32 2
	%1124 = getelementptr inbounds %Type_Info, %Type_Info* %1122, i64 0, i32 0
	store i64 16, i64* %1124
	%1125 = getelementptr inbounds %Type_Info, %Type_Info* %1122, i64 0, i32 1
	store i64 8, i64* %1125
	; Type_Info_Named
	%1126 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1123 to %Type_Info_Named*
	%1127 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 52
	%1128 = bitcast %Type_Info* %1127 to %Type_Info*
	%1129 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1126, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$252, i64 0, i32 0), i64 20}, %..string* %1129
	%1130 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1126, i64 0, i32 1
	store %Type_Info* %1128, %Type_Info** %1130
	%1131 = load %Type_Info_Named, %Type_Info_Named* %1126, align 8
	%1132 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1123 to %Type_Info_Named*
	store %Type_Info_Named %1131, %Type_Info_Named* %1132
	%1133 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1123, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1133
	%1134 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 52
	%1135 = getelementptr inbounds %Type_Info, %Type_Info* %1134, i64 0, i32 2
	%1136 = getelementptr inbounds %Type_Info, %Type_Info* %1134, i64 0, i32 0
	store i64 16, i64* %1136
	%1137 = getelementptr inbounds %Type_Info, %Type_Info* %1134, i64 0, i32 1
	store i64 8, i64* %1137
	; Type_Info_Union
	%1138 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1135 to %Type_Info_Union*
	%1139 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %1138, i64 0, i32 0
	%1140 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %1138, i64 0, i32 1
	%1141 = getelementptr inbounds %Type_Info_Union, %Type_Info_Union* %1138, i64 0, i32 2
	%1142 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 52
	%1143 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	%1144 = bitcast %Type_Info* %1143 to %Type_Info*
	%1145 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 0
	%1146 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	store %Type_Info* %1146, %Type_Info** %1145
	%1147 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%1148 = bitcast %Type_Info* %1147 to %Type_Info*
	%1149 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 1
	%1150 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	store %Type_Info* %1150, %Type_Info** %1149
	%1151 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%1152 = bitcast %Type_Info* %1151 to %Type_Info*
	%1153 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 2
	%1154 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	store %Type_Info* %1154, %Type_Info** %1153
	%1155 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%1156 = bitcast %Type_Info* %1155 to %Type_Info*
	%1157 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 3
	%1158 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	store %Type_Info* %1158, %Type_Info** %1157
	%1159 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%1160 = bitcast %Type_Info* %1159 to %Type_Info*
	%1161 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 4
	%1162 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	store %Type_Info* %1162, %Type_Info** %1161
	%1163 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1164 = bitcast %Type_Info* %1163 to %Type_Info*
	%1165 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 5
	%1166 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1166, %Type_Info** %1165
	%1167 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%1168 = bitcast %Type_Info* %1167 to %Type_Info*
	%1169 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 6
	%1170 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	store %Type_Info* %1170, %Type_Info** %1169
	%1171 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%1172 = bitcast %Type_Info* %1171 to %Type_Info*
	%1173 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 7
	%1174 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	store %Type_Info* %1174, %Type_Info** %1173
	%1175 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%1176 = bitcast %Type_Info* %1175 to %Type_Info*
	%1177 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 8
	%1178 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	store %Type_Info* %1178, %Type_Info** %1177
	%1179 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%1180 = bitcast %Type_Info* %1179 to %Type_Info*
	%1181 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 9
	%1182 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	store %Type_Info* %1182, %Type_Info** %1181
	%1183 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%1184 = bitcast %Type_Info* %1183 to %Type_Info*
	%1185 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 10
	%1186 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	store %Type_Info* %1186, %Type_Info** %1185
	%1187 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%1188 = bitcast %Type_Info* %1187 to %Type_Info*
	%1189 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 11
	%1190 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	store %Type_Info* %1190, %Type_Info** %1189
	%1191 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 62
	%1192 = bitcast %Type_Info* %1191 to %Type_Info*
	%1193 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 12
	%1194 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 62
	store %Type_Info* %1194, %Type_Info** %1193
	%1195 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 63
	%1196 = bitcast %Type_Info* %1195 to %Type_Info*
	%1197 = getelementptr inbounds %Type_Info*, %Type_Info** %1142, i64 13
	%1198 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 63
	store %Type_Info* %1198, %Type_Info** %1197
	%1199 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1139, i64 0, i32 0
	store %Type_Info** %1142, %Type_Info*** %1199
	%1200 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1139, i64 0, i32 1
	store i64 14, i64* %1200
	store i64 8, i64* %1140
	%1201 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	store %Type_Info* %1201, %Type_Info** %1141
	%1202 = load %Type_Info_Union, %Type_Info_Union* %1138, align 8
	%1203 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1135 to %Type_Info_Union*
	store %Type_Info_Union %1202, %Type_Info_Union* %1203
	%1204 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1135, i64 0, i32 2 ; UnionTagPtr
	store i8 16, i8* %1204
	%1205 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 53
	%1206 = getelementptr inbounds %Type_Info, %Type_Info* %1205, i64 0, i32 2
	%1207 = getelementptr inbounds %Type_Info, %Type_Info* %1205, i64 0, i32 0
	store i64 4, i64* %1207
	%1208 = getelementptr inbounds %Type_Info, %Type_Info* %1205, i64 0, i32 1
	store i64 4, i64* %1208
	; Type_Info_Basic
	%1209 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1206 to %Type_Info_Rune*
	%1210 = load %Type_Info_Rune, %Type_Info_Rune* %1209, align 1
	%1211 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1206 to %Type_Info_Rune*
	store %Type_Info_Rune %1210, %Type_Info_Rune* %1211
	%1212 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1206, i64 0, i32 2 ; UnionTagPtr
	store i8 3, i8* %1212
	%1213 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 54
	%1214 = getelementptr inbounds %Type_Info, %Type_Info* %1213, i64 0, i32 2
	%1215 = getelementptr inbounds %Type_Info, %Type_Info* %1213, i64 0, i32 0
	store i64 1, i64* %1215
	%1216 = getelementptr inbounds %Type_Info, %Type_Info* %1213, i64 0, i32 1
	store i64 1, i64* %1216
	; Type_Info_Basic
	%1217 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1214 to %Type_Info_Integer*
	%1218 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1217, i64 0, i32 0
	store i8 1, i8* %1218
	%1219 = load %Type_Info_Integer, %Type_Info_Integer* %1217, align 1
	%1220 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1214 to %Type_Info_Integer*
	store %Type_Info_Integer %1219, %Type_Info_Integer* %1220
	%1221 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1214, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1221
	%1222 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 55
	%1223 = getelementptr inbounds %Type_Info, %Type_Info* %1222, i64 0, i32 2
	%1224 = getelementptr inbounds %Type_Info, %Type_Info* %1222, i64 0, i32 0
	store i64 2, i64* %1224
	%1225 = getelementptr inbounds %Type_Info, %Type_Info* %1222, i64 0, i32 1
	store i64 2, i64* %1225
	; Type_Info_Basic
	%1226 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1223 to %Type_Info_Integer*
	%1227 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1226, i64 0, i32 0
	store i8 1, i8* %1227
	%1228 = load %Type_Info_Integer, %Type_Info_Integer* %1226, align 1
	%1229 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1223 to %Type_Info_Integer*
	store %Type_Info_Integer %1228, %Type_Info_Integer* %1229
	%1230 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1223, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1230
	%1231 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%1232 = getelementptr inbounds %Type_Info, %Type_Info* %1231, i64 0, i32 2
	%1233 = getelementptr inbounds %Type_Info, %Type_Info* %1231, i64 0, i32 0
	store i64 4, i64* %1233
	%1234 = getelementptr inbounds %Type_Info, %Type_Info* %1231, i64 0, i32 1
	store i64 4, i64* %1234
	; Type_Info_Basic
	%1235 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1232 to %Type_Info_Integer*
	%1236 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1235, i64 0, i32 0
	store i8 1, i8* %1236
	%1237 = load %Type_Info_Integer, %Type_Info_Integer* %1235, align 1
	%1238 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1232 to %Type_Info_Integer*
	store %Type_Info_Integer %1237, %Type_Info_Integer* %1238
	%1239 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1232, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1239
	%1240 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 57
	%1241 = getelementptr inbounds %Type_Info, %Type_Info* %1240, i64 0, i32 2
	%1242 = getelementptr inbounds %Type_Info, %Type_Info* %1240, i64 0, i32 0
	store i64 8, i64* %1242
	%1243 = getelementptr inbounds %Type_Info, %Type_Info* %1240, i64 0, i32 1
	store i64 8, i64* %1243
	; Type_Info_Basic
	%1244 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1241 to %Type_Info_Integer*
	%1245 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1244, i64 0, i32 0
	store i8 1, i8* %1245
	%1246 = load %Type_Info_Integer, %Type_Info_Integer* %1244, align 1
	%1247 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1241 to %Type_Info_Integer*
	store %Type_Info_Integer %1246, %Type_Info_Integer* %1247
	%1248 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1241, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1248
	%1249 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 58
	%1250 = getelementptr inbounds %Type_Info, %Type_Info* %1249, i64 0, i32 2
	%1251 = getelementptr inbounds %Type_Info, %Type_Info* %1249, i64 0, i32 0
	store i64 2, i64* %1251
	%1252 = getelementptr inbounds %Type_Info, %Type_Info* %1249, i64 0, i32 1
	store i64 2, i64* %1252
	; Type_Info_Basic
	%1253 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1250 to %Type_Info_Integer*
	%1254 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1253, i64 0, i32 0
	store i8 0, i8* %1254
	%1255 = load %Type_Info_Integer, %Type_Info_Integer* %1253, align 1
	%1256 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1250 to %Type_Info_Integer*
	store %Type_Info_Integer %1255, %Type_Info_Integer* %1256
	%1257 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1250, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1257
	%1258 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%1259 = getelementptr inbounds %Type_Info, %Type_Info* %1258, i64 0, i32 2
	%1260 = getelementptr inbounds %Type_Info, %Type_Info* %1258, i64 0, i32 0
	store i64 4, i64* %1260
	%1261 = getelementptr inbounds %Type_Info, %Type_Info* %1258, i64 0, i32 1
	store i64 4, i64* %1261
	; Type_Info_Basic
	%1262 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1259 to %Type_Info_Integer*
	%1263 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1262, i64 0, i32 0
	store i8 0, i8* %1263
	%1264 = load %Type_Info_Integer, %Type_Info_Integer* %1262, align 1
	%1265 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1259 to %Type_Info_Integer*
	store %Type_Info_Integer %1264, %Type_Info_Integer* %1265
	%1266 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1259, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1266
	%1267 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%1268 = getelementptr inbounds %Type_Info, %Type_Info* %1267, i64 0, i32 2
	%1269 = getelementptr inbounds %Type_Info, %Type_Info* %1267, i64 0, i32 0
	store i64 8, i64* %1269
	%1270 = getelementptr inbounds %Type_Info, %Type_Info* %1267, i64 0, i32 1
	store i64 8, i64* %1270
	; Type_Info_Basic
	%1271 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1268 to %Type_Info_Integer*
	%1272 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1271, i64 0, i32 0
	store i8 0, i8* %1272
	%1273 = load %Type_Info_Integer, %Type_Info_Integer* %1271, align 1
	%1274 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1268 to %Type_Info_Integer*
	store %Type_Info_Integer %1273, %Type_Info_Integer* %1274
	%1275 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1268, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1275
	%1276 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%1277 = getelementptr inbounds %Type_Info, %Type_Info* %1276, i64 0, i32 2
	%1278 = getelementptr inbounds %Type_Info, %Type_Info* %1276, i64 0, i32 0
	store i64 8, i64* %1278
	%1279 = getelementptr inbounds %Type_Info, %Type_Info* %1276, i64 0, i32 1
	store i64 8, i64* %1279
	; Type_Info_Basic
	%1280 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1277 to %Type_Info_Integer*
	%1281 = getelementptr inbounds %Type_Info_Integer, %Type_Info_Integer* %1280, i64 0, i32 0
	store i8 0, i8* %1281
	%1282 = load %Type_Info_Integer, %Type_Info_Integer* %1280, align 1
	%1283 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1277 to %Type_Info_Integer*
	store %Type_Info_Integer %1282, %Type_Info_Integer* %1283
	%1284 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1277, i64 0, i32 2 ; UnionTagPtr
	store i8 2, i8* %1284
	%1285 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 62
	%1286 = getelementptr inbounds %Type_Info, %Type_Info* %1285, i64 0, i32 2
	%1287 = getelementptr inbounds %Type_Info, %Type_Info* %1285, i64 0, i32 0
	store i64 4, i64* %1287
	%1288 = getelementptr inbounds %Type_Info, %Type_Info* %1285, i64 0, i32 1
	store i64 4, i64* %1288
	; Type_Info_Basic
	%1289 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1286 to %Type_Info_Float*
	%1290 = load %Type_Info_Float, %Type_Info_Float* %1289, align 1
	%1291 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1286 to %Type_Info_Float*
	store %Type_Info_Float %1290, %Type_Info_Float* %1291
	%1292 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1286, i64 0, i32 2 ; UnionTagPtr
	store i8 4, i8* %1292
	%1293 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 63
	%1294 = getelementptr inbounds %Type_Info, %Type_Info* %1293, i64 0, i32 2
	%1295 = getelementptr inbounds %Type_Info, %Type_Info* %1293, i64 0, i32 0
	store i64 8, i64* %1295
	%1296 = getelementptr inbounds %Type_Info, %Type_Info* %1293, i64 0, i32 1
	store i64 8, i64* %1296
	; Type_Info_Basic
	%1297 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1294 to %Type_Info_Float*
	%1298 = load %Type_Info_Float, %Type_Info_Float* %1297, align 1
	%1299 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1294 to %Type_Info_Float*
	store %Type_Info_Float %1298, %Type_Info_Float* %1299
	%1300 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1294, i64 0, i32 2 ; UnionTagPtr
	store i8 4, i8* %1300
	%1301 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 64
	%1302 = getelementptr inbounds %Type_Info, %Type_Info* %1301, i64 0, i32 2
	%1303 = getelementptr inbounds %Type_Info, %Type_Info* %1301, i64 0, i32 0
	store i64 8, i64* %1303
	%1304 = getelementptr inbounds %Type_Info, %Type_Info* %1301, i64 0, i32 1
	store i64 8, i64* %1304
	; Type_Info_Pointer
	%1305 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1302 to %Type_Info_Pointer*
	%1306 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 51
	%1307 = bitcast %Type_Info* %1306 to %Type_Info*
	%1308 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %1305, i64 0, i32 0
	store %Type_Info* %1307, %Type_Info** %1308
	%1309 = load %Type_Info_Pointer, %Type_Info_Pointer* %1305, align 8
	%1310 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1302 to %Type_Info_Pointer*
	store %Type_Info_Pointer %1309, %Type_Info_Pointer* %1310
	%1311 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1302, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %1311
	%1312 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 65
	%1313 = getelementptr inbounds %Type_Info, %Type_Info* %1312, i64 0, i32 2
	%1314 = getelementptr inbounds %Type_Info, %Type_Info* %1312, i64 0, i32 0
	store i64 24, i64* %1314
	%1315 = getelementptr inbounds %Type_Info, %Type_Info* %1312, i64 0, i32 1
	store i64 8, i64* %1315
	; Type_Info_Named
	%1316 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1313 to %Type_Info_Named*
	%1317 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 66
	%1318 = bitcast %Type_Info* %1317 to %Type_Info*
	%1319 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1316, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$253, i64 0, i32 0), i64 13}, %..string* %1319
	%1320 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1316, i64 0, i32 1
	store %Type_Info* %1318, %Type_Info** %1320
	%1321 = load %Type_Info_Named, %Type_Info_Named* %1316, align 8
	%1322 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1313 to %Type_Info_Named*
	store %Type_Info_Named %1321, %Type_Info_Named* %1322
	%1323 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1313, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1323
	%1324 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 66
	%1325 = getelementptr inbounds %Type_Info, %Type_Info* %1324, i64 0, i32 2
	%1326 = getelementptr inbounds %Type_Info, %Type_Info* %1324, i64 0, i32 0
	store i64 24, i64* %1326
	%1327 = getelementptr inbounds %Type_Info, %Type_Info* %1324, i64 0, i32 1
	store i64 8, i64* %1327
	; Type_Info_Struct
	%1328 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1325 to %Type_Info_Struct*
	%1329 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 4
	store i8 0, i8* %1329
	%1330 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 5
	store i8 0, i8* %1330
	%1331 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 6
	store i8 0, i8* %1331
	%1332 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 66
	%1333 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 33
	%1334 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 33
	%1335 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 33
	%1336 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%1337 = bitcast %Type_Info* %1336 to %Type_Info*
	%1338 = getelementptr inbounds %Type_Info*, %Type_Info** %1332, i64 0
	%1339 = getelementptr inbounds i64, i64* %1334, i64 0
	%1340 = getelementptr inbounds i8, i8* %1335, i64 0
	%1341 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %1341, %Type_Info** %1338
	%1342 = getelementptr inbounds %..string, %..string* %1333, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$254, i64 0, i32 0), i64 3}, %..string* %1342
	store i64 0, i64* %1339
	store i8 0, i8* %1340
	%1343 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%1344 = bitcast %Type_Info* %1343 to %Type_Info*
	%1345 = getelementptr inbounds %Type_Info*, %Type_Info** %1332, i64 1
	%1346 = getelementptr inbounds i64, i64* %1334, i64 1
	%1347 = getelementptr inbounds i8, i8* %1335, i64 1
	%1348 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %1348, %Type_Info** %1345
	%1349 = getelementptr inbounds %..string, %..string* %1333, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$255, i64 0, i32 0), i64 5}, %..string* %1349
	store i64 8, i64* %1346
	store i8 0, i8* %1347
	%1350 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	%1351 = bitcast %Type_Info* %1350 to %Type_Info*
	%1352 = getelementptr inbounds %Type_Info*, %Type_Info** %1332, i64 2
	%1353 = getelementptr inbounds i64, i64* %1334, i64 2
	%1354 = getelementptr inbounds i8, i8* %1335, i64 2
	%1355 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 7
	store %Type_Info* %1355, %Type_Info** %1352
	%1356 = getelementptr inbounds %..string, %..string* %1333, i64 2
	store %..string {i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__str$256, i64 0, i32 0), i64 16}, %..string* %1356
	store i64 16, i64* %1353
	store i8 0, i8* %1354
	%1357 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 0
	%1358 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1357, i64 0, i32 0
	store %Type_Info** %1332, %Type_Info*** %1358
	%1359 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1357, i64 0, i32 1
	store i64 3, i64* %1359
	%1360 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 1
	%1361 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1360, i64 0, i32 0
	store %..string* %1333, %..string** %1361
	%1362 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1360, i64 0, i32 1
	store i64 3, i64* %1362
	%1363 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 2
	%1364 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1363, i64 0, i32 0
	store i64* %1334, i64** %1364
	%1365 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1363, i64 0, i32 1
	store i64 3, i64* %1365
	%1366 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1328, i64 0, i32 3
	%1367 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1366, i64 0, i32 0
	store i8* %1335, i8** %1367
	%1368 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1366, i64 0, i32 1
	store i64 3, i64* %1368
	%1369 = load %Type_Info_Struct, %Type_Info_Struct* %1328, align 8
	%1370 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1325 to %Type_Info_Struct*
	store %Type_Info_Struct %1369, %Type_Info_Struct* %1370
	%1371 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1325, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1371
	%1372 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 67
	%1373 = getelementptr inbounds %Type_Info, %Type_Info* %1372, i64 0, i32 2
	%1374 = getelementptr inbounds %Type_Info, %Type_Info* %1372, i64 0, i32 0
	store i64 48, i64* %1374
	%1375 = getelementptr inbounds %Type_Info, %Type_Info* %1372, i64 0, i32 1
	store i64 8, i64* %1375
	; Type_Info_Named
	%1376 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1373 to %Type_Info_Named*
	%1377 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 68
	%1378 = bitcast %Type_Info* %1377 to %Type_Info*
	%1379 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1376, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__str$257, i64 0, i32 0), i64 19}, %..string* %1379
	%1380 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1376, i64 0, i32 1
	store %Type_Info* %1378, %Type_Info** %1380
	%1381 = load %Type_Info_Named, %Type_Info_Named* %1376, align 8
	%1382 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1373 to %Type_Info_Named*
	store %Type_Info_Named %1381, %Type_Info_Named* %1382
	%1383 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1373, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1383
	%1384 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 68
	%1385 = getelementptr inbounds %Type_Info, %Type_Info* %1384, i64 0, i32 2
	%1386 = getelementptr inbounds %Type_Info, %Type_Info* %1384, i64 0, i32 0
	store i64 48, i64* %1386
	%1387 = getelementptr inbounds %Type_Info, %Type_Info* %1384, i64 0, i32 1
	store i64 8, i64* %1387
	; Type_Info_Struct
	%1388 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1385 to %Type_Info_Struct*
	%1389 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 4
	store i8 0, i8* %1389
	%1390 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 5
	store i8 0, i8* %1390
	%1391 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 6
	store i8 0, i8* %1391
	%1392 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 69
	%1393 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 36
	%1394 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 36
	%1395 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 36
	%1396 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	%1397 = bitcast %Type_Info* %1396 to %Type_Info*
	%1398 = getelementptr inbounds %Type_Info*, %Type_Info** %1392, i64 0
	%1399 = getelementptr inbounds i64, i64* %1394, i64 0
	%1400 = getelementptr inbounds i8, i8* %1395, i64 0
	%1401 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 37
	store %Type_Info* %1401, %Type_Info** %1398
	%1402 = getelementptr inbounds %..string, %..string* %1393, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$258, i64 0, i32 0), i64 5}, %..string* %1402
	store i64 0, i64* %1399
	store i8 0, i8* %1400
	%1403 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 69
	%1404 = bitcast %Type_Info* %1403 to %Type_Info*
	%1405 = getelementptr inbounds %Type_Info*, %Type_Info** %1392, i64 1
	%1406 = getelementptr inbounds i64, i64* %1394, i64 1
	%1407 = getelementptr inbounds i8, i8* %1395, i64 1
	%1408 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 69
	store %Type_Info* %1408, %Type_Info** %1405
	%1409 = getelementptr inbounds %..string, %..string* %1393, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$259, i64 0, i32 0), i64 4}, %..string* %1409
	store i64 16, i64* %1406
	store i8 0, i8* %1407
	%1410 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 69
	%1411 = bitcast %Type_Info* %1410 to %Type_Info*
	%1412 = getelementptr inbounds %Type_Info*, %Type_Info** %1392, i64 2
	%1413 = getelementptr inbounds i64, i64* %1394, i64 2
	%1414 = getelementptr inbounds i8, i8* %1395, i64 2
	%1415 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 69
	store %Type_Info* %1415, %Type_Info** %1412
	%1416 = getelementptr inbounds %..string, %..string* %1393, i64 2
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$25a, i64 0, i32 0), i64 7}, %..string* %1416
	store i64 32, i64* %1413
	store i8 0, i8* %1414
	%1417 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 0
	%1418 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1417, i64 0, i32 0
	store %Type_Info** %1392, %Type_Info*** %1418
	%1419 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1417, i64 0, i32 1
	store i64 3, i64* %1419
	%1420 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 1
	%1421 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1420, i64 0, i32 0
	store %..string* %1393, %..string** %1421
	%1422 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1420, i64 0, i32 1
	store i64 3, i64* %1422
	%1423 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 2
	%1424 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1423, i64 0, i32 0
	store i64* %1394, i64** %1424
	%1425 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1423, i64 0, i32 1
	store i64 3, i64* %1425
	%1426 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1388, i64 0, i32 3
	%1427 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1426, i64 0, i32 0
	store i8* %1395, i8** %1427
	%1428 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1426, i64 0, i32 1
	store i64 3, i64* %1428
	%1429 = load %Type_Info_Struct, %Type_Info_Struct* %1388, align 8
	%1430 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1385 to %Type_Info_Struct*
	store %Type_Info_Struct %1429, %Type_Info_Struct* %1430
	%1431 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1385, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1431
	%1432 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 69
	%1433 = getelementptr inbounds %Type_Info, %Type_Info* %1432, i64 0, i32 2
	%1434 = getelementptr inbounds %Type_Info, %Type_Info* %1432, i64 0, i32 0
	store i64 16, i64* %1434
	%1435 = getelementptr inbounds %Type_Info, %Type_Info* %1432, i64 0, i32 1
	store i64 8, i64* %1435
	; Type_Info_Slice
	%1436 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1433 to %Type_Info_Slice*
	%1437 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%1438 = bitcast %Type_Info* %1437 to %Type_Info*
	%1439 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %1436, i64 0, i32 0
	store %Type_Info* %1438, %Type_Info** %1439
	%1440 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %1436, i64 0, i32 1
	store i64 4, i64* %1440
	%1441 = load %Type_Info_Slice, %Type_Info_Slice* %1436, align 8
	%1442 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1433 to %Type_Info_Slice*
	store %Type_Info_Slice %1441, %Type_Info_Slice* %1442
	%1443 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1433, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %1443
	%1444 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 70
	%1445 = getelementptr inbounds %Type_Info, %Type_Info* %1444, i64 0, i32 2
	%1446 = getelementptr inbounds %Type_Info, %Type_Info* %1444, i64 0, i32 0
	store i64 8, i64* %1446
	%1447 = getelementptr inbounds %Type_Info, %Type_Info* %1444, i64 0, i32 1
	store i64 8, i64* %1447
	; Type_Info_Pointer
	%1448 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1445 to %Type_Info_Pointer*
	%1449 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 56
	%1450 = bitcast %Type_Info* %1449 to %Type_Info*
	%1451 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %1448, i64 0, i32 0
	store %Type_Info* %1450, %Type_Info** %1451
	%1452 = load %Type_Info_Pointer, %Type_Info_Pointer* %1448, align 8
	%1453 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1445 to %Type_Info_Pointer*
	store %Type_Info_Pointer %1452, %Type_Info_Pointer* %1453
	%1454 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1445, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %1454
	%1455 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 71
	%1456 = getelementptr inbounds %Type_Info, %Type_Info* %1455, i64 0, i32 2
	%1457 = getelementptr inbounds %Type_Info, %Type_Info* %1455, i64 0, i32 0
	store i64 1, i64* %1457
	%1458 = getelementptr inbounds %Type_Info, %Type_Info* %1455, i64 0, i32 1
	store i64 1, i64* %1458
	; Type_Info_Named
	%1459 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1456 to %Type_Info_Named*
	%1460 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 72
	%1461 = bitcast %Type_Info* %1460 to %Type_Info*
	%1462 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1459, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$25b, i64 0, i32 0), i64 14}, %..string* %1462
	%1463 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1459, i64 0, i32 1
	store %Type_Info* %1461, %Type_Info** %1463
	%1464 = load %Type_Info_Named, %Type_Info_Named* %1459, align 8
	%1465 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1456 to %Type_Info_Named*
	store %Type_Info_Named %1464, %Type_Info_Named* %1465
	%1466 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1456, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1466
	%1467 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 72
	%1468 = getelementptr inbounds %Type_Info, %Type_Info* %1467, i64 0, i32 2
	%1469 = getelementptr inbounds %Type_Info, %Type_Info* %1467, i64 0, i32 0
	store i64 1, i64* %1469
	%1470 = getelementptr inbounds %Type_Info, %Type_Info* %1467, i64 0, i32 1
	store i64 1, i64* %1470
	; Type_Info_Enum
	%1471 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1468 to %Type_Info_Enum*
	%1472 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%1473 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1471, i64 0, i32 0
	store %Type_Info* %1472, %Type_Info** %1473
	%1474 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1471, i64 0, i32 3
	store i8 0, i8* %1474
	%1475 = getelementptr inbounds [4 x %..string], [4 x %..string]* @__$enum_names-48, i64 0, i32 0
	%1476 = getelementptr inbounds [4 x %Type_Info_Enum_Value], [4 x %Type_Info_Enum_Value]* @__$enum_values-48, i64 0, i32 0
	%1477 = bitcast %Type_Info_Enum_Value* %1476 to i8*
	store i8 0, i8* %1477
	%1478 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1476, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1478
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$25c, i64 0, i32 0), i64 5}, %..string* %1475
	%1479 = getelementptr inbounds [4 x %..string], [4 x %..string]* @__$enum_names-48, i64 0, i32 1
	%1480 = getelementptr inbounds [4 x %Type_Info_Enum_Value], [4 x %Type_Info_Enum_Value]* @__$enum_values-48, i64 0, i32 1
	%1481 = bitcast %Type_Info_Enum_Value* %1480 to i8*
	store i8 1, i8* %1481
	%1482 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1480, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1482
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$25d, i64 0, i32 0), i64 4}, %..string* %1479
	%1483 = getelementptr inbounds [4 x %..string], [4 x %..string]* @__$enum_names-48, i64 0, i32 2
	%1484 = getelementptr inbounds [4 x %Type_Info_Enum_Value], [4 x %Type_Info_Enum_Value]* @__$enum_values-48, i64 0, i32 2
	%1485 = bitcast %Type_Info_Enum_Value* %1484 to i8*
	store i8 2, i8* %1485
	%1486 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1484, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1486
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$25e, i64 0, i32 0), i64 7}, %..string* %1483
	%1487 = getelementptr inbounds [4 x %..string], [4 x %..string]* @__$enum_names-48, i64 0, i32 3
	%1488 = getelementptr inbounds [4 x %Type_Info_Enum_Value], [4 x %Type_Info_Enum_Value]* @__$enum_values-48, i64 0, i32 3
	%1489 = bitcast %Type_Info_Enum_Value* %1488 to i8*
	store i8 3, i8* %1489
	%1490 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1488, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1490
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$25f, i64 0, i32 0), i64 6}, %..string* %1487
	%1491 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1471, i64 0, i32 1
	%1492 = getelementptr inbounds [4 x %..string], [4 x %..string]* @__$enum_names-48, i64 0, i32 0
	%1493 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1491, i64 0, i32 0
	store %..string* %1492, %..string** %1493
	%1494 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1491, i64 0, i32 1
	store i64 4, i64* %1494
	%1495 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1471, i64 0, i32 2
	%1496 = getelementptr inbounds [4 x %Type_Info_Enum_Value], [4 x %Type_Info_Enum_Value]* @__$enum_values-48, i64 0, i32 0
	%1497 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %1495, i64 0, i32 0
	store %Type_Info_Enum_Value* %1496, %Type_Info_Enum_Value** %1497
	%1498 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %1495, i64 0, i32 1
	store i64 4, i64* %1498
	%1499 = load %Type_Info_Enum, %Type_Info_Enum* %1471, align 8
	%1500 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1468 to %Type_Info_Enum*
	store %Type_Info_Enum %1499, %Type_Info_Enum* %1500
	%1501 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1468, i64 0, i32 2 ; UnionTagPtr
	store i8 17, i8* %1501
	%1502 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	%1503 = getelementptr inbounds %Type_Info, %Type_Info* %1502, i64 0, i32 2
	%1504 = getelementptr inbounds %Type_Info, %Type_Info* %1502, i64 0, i32 0
	store i64 16, i64* %1504
	%1505 = getelementptr inbounds %Type_Info, %Type_Info* %1502, i64 0, i32 1
	store i64 8, i64* %1505
	; Type_Info_Basic
	%1506 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1503 to %Type_Info_Any*
	%1507 = load %Type_Info_Any, %Type_Info_Any* %1506, align 1
	%1508 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1503 to %Type_Info_Any*
	store %Type_Info_Any %1507, %Type_Info_Any* %1508
	%1509 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1503, i64 0, i32 2 ; UnionTagPtr
	store i8 8, i8* %1509
	%1510 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%1511 = getelementptr inbounds %Type_Info, %Type_Info* %1510, i64 0, i32 2
	%1512 = getelementptr inbounds %Type_Info, %Type_Info* %1510, i64 0, i32 0
	store i64 8, i64* %1512
	%1513 = getelementptr inbounds %Type_Info, %Type_Info* %1510, i64 0, i32 1
	store i64 8, i64* %1513
	; Type_Info_Basic
	%1514 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1511 to %Type_Info_Pointer*
	%1515 = load %Type_Info_Pointer, %Type_Info_Pointer* %1514, align 8
	%1516 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1511 to %Type_Info_Pointer*
	store %Type_Info_Pointer %1515, %Type_Info_Pointer* %1516
	%1517 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1511, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %1517
	%1518 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 75
	%1519 = getelementptr inbounds %Type_Info, %Type_Info* %1518, i64 0, i32 2
	%1520 = getelementptr inbounds %Type_Info, %Type_Info* %1518, i64 0, i32 0
	store i64 8, i64* %1520
	%1521 = getelementptr inbounds %Type_Info, %Type_Info* %1518, i64 0, i32 1
	store i64 8, i64* %1521
	; Type_Info_Named
	%1522 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1519 to %Type_Info_Named*
	%1523 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 76
	%1524 = bitcast %Type_Info* %1523 to %Type_Info*
	%1525 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1522, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$260, i64 0, i32 0), i64 8}, %..string* %1525
	%1526 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1522, i64 0, i32 1
	store %Type_Info* %1524, %Type_Info** %1526
	%1527 = load %Type_Info_Named, %Type_Info_Named* %1522, align 8
	%1528 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1519 to %Type_Info_Named*
	store %Type_Info_Named %1527, %Type_Info_Named* %1528
	%1529 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1519, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1529
	%1530 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 76
	%1531 = getelementptr inbounds %Type_Info, %Type_Info* %1530, i64 0, i32 2
	%1532 = getelementptr inbounds %Type_Info, %Type_Info* %1530, i64 0, i32 0
	store i64 8, i64* %1532
	%1533 = getelementptr inbounds %Type_Info, %Type_Info* %1530, i64 0, i32 1
	store i64 8, i64* %1533
	; Type_Info_Enum
	%1534 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1531 to %Type_Info_Enum*
	%1535 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1536 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1534, i64 0, i32 0
	store %Type_Info* %1535, %Type_Info** %1536
	%1537 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1534, i64 0, i32 3
	store i8 0, i8* %1537
	%1538 = getelementptr inbounds [3 x %..string], [3 x %..string]* @__$enum_names-4c, i64 0, i32 0
	%1539 = getelementptr inbounds [3 x %Type_Info_Enum_Value], [3 x %Type_Info_Enum_Value]* @__$enum_values-4c, i64 0, i32 0
	%1540 = bitcast %Type_Info_Enum_Value* %1539 to i64*
	store i64 1, i64* %1540
	%1541 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1539, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %1541
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$261, i64 0, i32 0), i64 6}, %..string* %1538
	%1542 = getelementptr inbounds [3 x %..string], [3 x %..string]* @__$enum_names-4c, i64 0, i32 1
	%1543 = getelementptr inbounds [3 x %Type_Info_Enum_Value], [3 x %Type_Info_Enum_Value]* @__$enum_values-4c, i64 0, i32 1
	%1544 = bitcast %Type_Info_Enum_Value* %1543 to i64*
	store i64 2, i64* %1544
	%1545 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1543, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %1545
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$262, i64 0, i32 0), i64 4}, %..string* %1542
	%1546 = getelementptr inbounds [3 x %..string], [3 x %..string]* @__$enum_names-4c, i64 0, i32 2
	%1547 = getelementptr inbounds [3 x %Type_Info_Enum_Value], [3 x %Type_Info_Enum_Value]* @__$enum_values-4c, i64 0, i32 2
	%1548 = bitcast %Type_Info_Enum_Value* %1547 to i64*
	store i64 4, i64* %1548
	%1549 = getelementptr inbounds %Type_Info_Enum_Value, %Type_Info_Enum_Value* %1547, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %1549
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$263, i64 0, i32 0), i64 5}, %..string* %1546
	%1550 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1534, i64 0, i32 1
	%1551 = getelementptr inbounds [3 x %..string], [3 x %..string]* @__$enum_names-4c, i64 0, i32 0
	%1552 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1550, i64 0, i32 0
	store %..string* %1551, %..string** %1552
	%1553 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1550, i64 0, i32 1
	store i64 3, i64* %1553
	%1554 = getelementptr inbounds %Type_Info_Enum, %Type_Info_Enum* %1534, i64 0, i32 2
	%1555 = getelementptr inbounds [3 x %Type_Info_Enum_Value], [3 x %Type_Info_Enum_Value]* @__$enum_values-4c, i64 0, i32 0
	%1556 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %1554, i64 0, i32 0
	store %Type_Info_Enum_Value* %1555, %Type_Info_Enum_Value** %1556
	%1557 = getelementptr inbounds {%Type_Info_Enum_Value*, i64}, {%Type_Info_Enum_Value*, i64}* %1554, i64 0, i32 1
	store i64 3, i64* %1557
	%1558 = load %Type_Info_Enum, %Type_Info_Enum* %1534, align 8
	%1559 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1531 to %Type_Info_Enum*
	store %Type_Info_Enum %1558, %Type_Info_Enum* %1559
	%1560 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1531, i64 0, i32 2 ; UnionTagPtr
	store i8 17, i8* %1560
	%1561 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 77
	%1562 = getelementptr inbounds %Type_Info, %Type_Info* %1561, i64 0, i32 2
	%1563 = getelementptr inbounds %Type_Info, %Type_Info* %1561, i64 0, i32 0
	store i64 1, i64* %1563
	%1564 = getelementptr inbounds %Type_Info, %Type_Info* %1561, i64 0, i32 1
	store i64 1, i64* %1564
	; Type_Info_Basic
	%1565 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1562 to %Type_Info_Boolean*
	%1566 = load %Type_Info_Boolean, %Type_Info_Boolean* %1565, align 1
	%1567 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1562 to %Type_Info_Boolean*
	store %Type_Info_Boolean %1566, %Type_Info_Boolean* %1567
	%1568 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1562, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1568
	%1569 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 78
	%1570 = getelementptr inbounds %Type_Info, %Type_Info* %1569, i64 0, i32 2
	%1571 = getelementptr inbounds %Type_Info, %Type_Info* %1569, i64 0, i32 0
	store i64 2, i64* %1571
	%1572 = getelementptr inbounds %Type_Info, %Type_Info* %1569, i64 0, i32 1
	store i64 2, i64* %1572
	; Type_Info_Basic
	%1573 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1570 to %Type_Info_Boolean*
	%1574 = load %Type_Info_Boolean, %Type_Info_Boolean* %1573, align 1
	%1575 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1570 to %Type_Info_Boolean*
	store %Type_Info_Boolean %1574, %Type_Info_Boolean* %1575
	%1576 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1570, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1576
	%1577 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 79
	%1578 = getelementptr inbounds %Type_Info, %Type_Info* %1577, i64 0, i32 2
	%1579 = getelementptr inbounds %Type_Info, %Type_Info* %1577, i64 0, i32 0
	store i64 4, i64* %1579
	%1580 = getelementptr inbounds %Type_Info, %Type_Info* %1577, i64 0, i32 1
	store i64 4, i64* %1580
	; Type_Info_Basic
	%1581 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1578 to %Type_Info_Boolean*
	%1582 = load %Type_Info_Boolean, %Type_Info_Boolean* %1581, align 1
	%1583 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1578 to %Type_Info_Boolean*
	store %Type_Info_Boolean %1582, %Type_Info_Boolean* %1583
	%1584 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1578, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1584
	%1585 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 80
	%1586 = getelementptr inbounds %Type_Info, %Type_Info* %1585, i64 0, i32 2
	%1587 = getelementptr inbounds %Type_Info, %Type_Info* %1585, i64 0, i32 0
	store i64 8, i64* %1587
	%1588 = getelementptr inbounds %Type_Info, %Type_Info* %1585, i64 0, i32 1
	store i64 8, i64* %1588
	; Type_Info_Basic
	%1589 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1586 to %Type_Info_Boolean*
	%1590 = load %Type_Info_Boolean, %Type_Info_Boolean* %1589, align 1
	%1591 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1586 to %Type_Info_Boolean*
	store %Type_Info_Boolean %1590, %Type_Info_Boolean* %1591
	%1592 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1586, i64 0, i32 2 ; UnionTagPtr
	store i8 7, i8* %1592
	%1593 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 81
	%1594 = getelementptr inbounds %Type_Info, %Type_Info* %1593, i64 0, i32 2
	%1595 = getelementptr inbounds %Type_Info, %Type_Info* %1593, i64 0, i32 0
	store i64 8, i64* %1595
	%1596 = getelementptr inbounds %Type_Info, %Type_Info* %1593, i64 0, i32 1
	store i64 4, i64* %1596
	; Type_Info_Basic
	%1597 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1594 to %Type_Info_Complex*
	%1598 = load %Type_Info_Complex, %Type_Info_Complex* %1597, align 1
	%1599 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1594 to %Type_Info_Complex*
	store %Type_Info_Complex %1598, %Type_Info_Complex* %1599
	%1600 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1594, i64 0, i32 2 ; UnionTagPtr
	store i8 5, i8* %1600
	%1601 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 82
	%1602 = getelementptr inbounds %Type_Info, %Type_Info* %1601, i64 0, i32 2
	%1603 = getelementptr inbounds %Type_Info, %Type_Info* %1601, i64 0, i32 0
	store i64 16, i64* %1603
	%1604 = getelementptr inbounds %Type_Info, %Type_Info* %1601, i64 0, i32 1
	store i64 8, i64* %1604
	; Type_Info_Basic
	%1605 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1602 to %Type_Info_Complex*
	%1606 = load %Type_Info_Complex, %Type_Info_Complex* %1605, align 1
	%1607 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1602 to %Type_Info_Complex*
	store %Type_Info_Complex %1606, %Type_Info_Complex* %1607
	%1608 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1602, i64 0, i32 2 ; UnionTagPtr
	store i8 5, i8* %1608
	%1609 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 83
	%1610 = getelementptr inbounds %Type_Info, %Type_Info* %1609, i64 0, i32 2
	%1611 = getelementptr inbounds %Type_Info, %Type_Info* %1609, i64 0, i32 0
	store i64 8, i64* %1611
	%1612 = getelementptr inbounds %Type_Info, %Type_Info* %1609, i64 0, i32 1
	store i64 8, i64* %1612
	; Type_Info_Basic
	%1613 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1610 to %Type_Info_String*
	%1614 = getelementptr inbounds %Type_Info_String, %Type_Info_String* %1613, i64 0, i32 0
	store i8 1, i8* %1614
	%1615 = load %Type_Info_String, %Type_Info_String* %1613, align 1
	%1616 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1610 to %Type_Info_String*
	store %Type_Info_String %1615, %Type_Info_String* %1616
	%1617 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1610, i64 0, i32 2 ; UnionTagPtr
	store i8 6, i8* %1617
	%1618 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 84
	%1619 = getelementptr inbounds %Type_Info, %Type_Info* %1618, i64 0, i32 2
	%1620 = getelementptr inbounds %Type_Info, %Type_Info* %1618, i64 0, i32 0
	store i64 48, i64* %1620
	%1621 = getelementptr inbounds %Type_Info, %Type_Info* %1618, i64 0, i32 1
	store i64 8, i64* %1621
	; Type_Info_Named
	%1622 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1619 to %Type_Info_Named*
	%1623 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 85
	%1624 = bitcast %Type_Info* %1623 to %Type_Info*
	%1625 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1622, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__str$264, i64 0, i32 0), i64 20}, %..string* %1625
	%1626 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1622, i64 0, i32 1
	store %Type_Info* %1624, %Type_Info** %1626
	%1627 = load %Type_Info_Named, %Type_Info_Named* %1622, align 8
	%1628 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1619 to %Type_Info_Named*
	store %Type_Info_Named %1627, %Type_Info_Named* %1628
	%1629 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1619, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1629
	%1630 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 85
	%1631 = getelementptr inbounds %Type_Info, %Type_Info* %1630, i64 0, i32 2
	%1632 = getelementptr inbounds %Type_Info, %Type_Info* %1630, i64 0, i32 0
	store i64 48, i64* %1632
	%1633 = getelementptr inbounds %Type_Info, %Type_Info* %1630, i64 0, i32 1
	store i64 8, i64* %1633
	; Type_Info_Struct
	%1634 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1631 to %Type_Info_Struct*
	%1635 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 4
	store i8 0, i8* %1635
	%1636 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 5
	store i8 0, i8* %1636
	%1637 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 6
	store i8 0, i8* %1637
	%1638 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 72
	%1639 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 39
	%1640 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 39
	%1641 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 39
	%1642 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%1643 = bitcast %Type_Info* %1642 to %Type_Info*
	%1644 = getelementptr inbounds %Type_Info*, %Type_Info** %1638, i64 0
	%1645 = getelementptr inbounds i64, i64* %1640, i64 0
	%1646 = getelementptr inbounds i8, i8* %1641, i64 0
	%1647 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %1647, %Type_Info** %1644
	%1648 = getelementptr inbounds %..string, %..string* %1639, i64 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$265, i64 0, i32 0), i64 9}, %..string* %1648
	store i64 0, i64* %1645
	store i8 0, i8* %1646
	%1649 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1650 = bitcast %Type_Info* %1649 to %Type_Info*
	%1651 = getelementptr inbounds %Type_Info*, %Type_Info** %1638, i64 1
	%1652 = getelementptr inbounds i64, i64* %1640, i64 1
	%1653 = getelementptr inbounds i8, i8* %1641, i64 1
	%1654 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1654, %Type_Info** %1651
	%1655 = getelementptr inbounds %..string, %..string* %1639, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$266, i64 0, i32 0), i64 4}, %..string* %1655
	store i64 16, i64* %1652
	store i8 0, i8* %1653
	%1656 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1657 = bitcast %Type_Info* %1656 to %Type_Info*
	%1658 = getelementptr inbounds %Type_Info*, %Type_Info** %1638, i64 2
	%1659 = getelementptr inbounds i64, i64* %1640, i64 2
	%1660 = getelementptr inbounds i8, i8* %1641, i64 2
	%1661 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1661, %Type_Info** %1658
	%1662 = getelementptr inbounds %..string, %..string* %1639, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$267, i64 0, i32 0), i64 6}, %..string* %1662
	store i64 24, i64* %1659
	store i8 0, i8* %1660
	%1663 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%1664 = bitcast %Type_Info* %1663 to %Type_Info*
	%1665 = getelementptr inbounds %Type_Info*, %Type_Info** %1638, i64 3
	%1666 = getelementptr inbounds i64, i64* %1640, i64 3
	%1667 = getelementptr inbounds i8, i8* %1641, i64 3
	%1668 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %1668, %Type_Info** %1665
	%1669 = getelementptr inbounds %..string, %..string* %1639, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$268, i64 0, i32 0), i64 9}, %..string* %1669
	store i64 32, i64* %1666
	store i8 0, i8* %1667
	%1670 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 0
	%1671 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1670, i64 0, i32 0
	store %Type_Info** %1638, %Type_Info*** %1671
	%1672 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1670, i64 0, i32 1
	store i64 4, i64* %1672
	%1673 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 1
	%1674 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1673, i64 0, i32 0
	store %..string* %1639, %..string** %1674
	%1675 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1673, i64 0, i32 1
	store i64 4, i64* %1675
	%1676 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 2
	%1677 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1676, i64 0, i32 0
	store i64* %1640, i64** %1677
	%1678 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1676, i64 0, i32 1
	store i64 4, i64* %1678
	%1679 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1634, i64 0, i32 3
	%1680 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1679, i64 0, i32 0
	store i8* %1641, i8** %1680
	%1681 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1679, i64 0, i32 1
	store i64 4, i64* %1681
	%1682 = load %Type_Info_Struct, %Type_Info_Struct* %1634, align 8
	%1683 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1631 to %Type_Info_Struct*
	store %Type_Info_Struct %1682, %Type_Info_Struct* %1683
	%1684 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1631, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1684
	%1685 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 86
	%1686 = getelementptr inbounds %Type_Info, %Type_Info* %1685, i64 0, i32 2
	%1687 = getelementptr inbounds %Type_Info, %Type_Info* %1685, i64 0, i32 0
	store i64 8, i64* %1687
	%1688 = getelementptr inbounds %Type_Info, %Type_Info* %1685, i64 0, i32 1
	store i64 8, i64* %1688
	; Type_Info_Named
	%1689 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1686 to %Type_Info_Named*
	%1690 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 87
	%1691 = bitcast %Type_Info* %1690 to %Type_Info*
	%1692 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1689, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$269, i64 0, i32 0), i64 14}, %..string* %1692
	%1693 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1689, i64 0, i32 1
	store %Type_Info* %1691, %Type_Info** %1693
	%1694 = load %Type_Info_Named, %Type_Info_Named* %1689, align 8
	%1695 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1686 to %Type_Info_Named*
	store %Type_Info_Named %1694, %Type_Info_Named* %1695
	%1696 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1686, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1696
	%1697 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 87
	%1698 = getelementptr inbounds %Type_Info, %Type_Info* %1697, i64 0, i32 2
	%1699 = getelementptr inbounds %Type_Info, %Type_Info* %1697, i64 0, i32 0
	store i64 8, i64* %1699
	%1700 = getelementptr inbounds %Type_Info, %Type_Info* %1697, i64 0, i32 1
	store i64 8, i64* %1700
	; Type_Info_Proc
	%1701 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1698 to %Type_Info_Procedure*
	%1702 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %1701, i64 0, i32 0
	%1703 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %1701, i64 0, i32 1
	%1704 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %1701, i64 0, i32 2
	%1705 = getelementptr inbounds %Type_Info_Procedure, %Type_Info_Procedure* %1701, i64 0, i32 3
	%1706 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 88
	%1707 = bitcast %Type_Info* %1706 to %Type_Info*
	store %Type_Info* %1707, %Type_Info** %1702
	%1708 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 89
	%1709 = bitcast %Type_Info* %1708 to %Type_Info*
	store %Type_Info* %1709, %Type_Info** %1703
	store i8 0, i8* %1704
	store i64 1, i64* %1705
	%1710 = load %Type_Info_Procedure, %Type_Info_Procedure* %1701, align 8
	%1711 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1698 to %Type_Info_Procedure*
	store %Type_Info_Procedure %1710, %Type_Info_Procedure* %1711
	%1712 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1698, i64 0, i32 2 ; UnionTagPtr
	store i8 10, i8* %1712
	%1713 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 88
	%1714 = getelementptr inbounds %Type_Info, %Type_Info* %1713, i64 0, i32 2
	%1715 = getelementptr inbounds %Type_Info, %Type_Info* %1713, i64 0, i32 0
	store i64 104, i64* %1715
	%1716 = getelementptr inbounds %Type_Info, %Type_Info* %1713, i64 0, i32 1
	store i64 8, i64* %1716
	; Type_Info_Tuple
	%1717 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1714 to %Type_Info_Tuple*
	%1718 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 76
	%1719 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 43
	%1720 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 0
	%1721 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %1721, %Type_Info** %1720
	%1722 = getelementptr inbounds %..string, %..string* %1719, i64 0
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$26a, i64 0, i32 0), i64 14}, %..string* %1722
	%1723 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 1
	%1724 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 71
	store %Type_Info* %1724, %Type_Info** %1723
	%1725 = getelementptr inbounds %..string, %..string* %1719, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$26b, i64 0, i32 0), i64 4}, %..string* %1725
	%1726 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 2
	%1727 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1727, %Type_Info** %1726
	%1728 = getelementptr inbounds %..string, %..string* %1719, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$26c, i64 0, i32 0), i64 4}, %..string* %1728
	%1729 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 3
	%1730 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1730, %Type_Info** %1729
	%1731 = getelementptr inbounds %..string, %..string* %1719, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$26d, i64 0, i32 0), i64 9}, %..string* %1731
	%1732 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 4
	%1733 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %1733, %Type_Info** %1732
	%1734 = getelementptr inbounds %..string, %..string* %1719, i64 4
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$26e, i64 0, i32 0), i64 10}, %..string* %1734
	%1735 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 5
	%1736 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1736, %Type_Info** %1735
	%1737 = getelementptr inbounds %..string, %..string* %1719, i64 5
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$26f, i64 0, i32 0), i64 8}, %..string* %1737
	%1738 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 6
	%1739 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	store %Type_Info* %1739, %Type_Info** %1738
	%1740 = getelementptr inbounds %..string, %..string* %1719, i64 6
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$270, i64 0, i32 0), i64 5}, %..string* %1740
	%1741 = getelementptr inbounds %Type_Info*, %Type_Info** %1718, i64 7
	%1742 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 84
	store %Type_Info* %1742, %Type_Info** %1741
	%1743 = getelementptr inbounds %..string, %..string* %1719, i64 7
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$271, i64 0, i32 0), i64 8}, %..string* %1743
	%1744 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %1717, i64 0, i32 0
	%1745 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1744, i64 0, i32 0
	store %Type_Info** %1718, %Type_Info*** %1745
	%1746 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1744, i64 0, i32 1
	store i64 8, i64* %1746
	%1747 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %1717, i64 0, i32 1
	%1748 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1747, i64 0, i32 0
	store %..string* %1719, %..string** %1748
	%1749 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1747, i64 0, i32 1
	store i64 8, i64* %1749
	%1750 = load %Type_Info_Tuple, %Type_Info_Tuple* %1717, align 8
	%1751 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1714 to %Type_Info_Tuple*
	store %Type_Info_Tuple %1750, %Type_Info_Tuple* %1751
	%1752 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1714, i64 0, i32 2 ; UnionTagPtr
	store i8 14, i8* %1752
	%1753 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 89
	%1754 = getelementptr inbounds %Type_Info, %Type_Info* %1753, i64 0, i32 2
	%1755 = getelementptr inbounds %Type_Info, %Type_Info* %1753, i64 0, i32 0
	store i64 8, i64* %1755
	%1756 = getelementptr inbounds %Type_Info, %Type_Info* %1753, i64 0, i32 1
	store i64 8, i64* %1756
	; Type_Info_Tuple
	%1757 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1754 to %Type_Info_Tuple*
	%1758 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 84
	%1759 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 51
	%1760 = getelementptr inbounds %Type_Info*, %Type_Info** %1758, i64 0
	%1761 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %1761, %Type_Info** %1760
	%1762 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %1757, i64 0, i32 0
	%1763 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1762, i64 0, i32 0
	store %Type_Info** %1758, %Type_Info*** %1763
	%1764 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1762, i64 0, i32 1
	store i64 1, i64* %1764
	%1765 = getelementptr inbounds %Type_Info_Tuple, %Type_Info_Tuple* %1757, i64 0, i32 1
	%1766 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1765, i64 0, i32 0
	store %..string* %1759, %..string** %1766
	%1767 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1765, i64 0, i32 1
	store i64 1, i64* %1767
	%1768 = load %Type_Info_Tuple, %Type_Info_Tuple* %1757, align 8
	%1769 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1754 to %Type_Info_Tuple*
	store %Type_Info_Tuple %1768, %Type_Info_Tuple* %1769
	%1770 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1754, i64 0, i32 2 ; UnionTagPtr
	store i8 14, i8* %1770
	%1771 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 90
	%1772 = getelementptr inbounds %Type_Info, %Type_Info* %1771, i64 0, i32 2
	%1773 = getelementptr inbounds %Type_Info, %Type_Info* %1771, i64 0, i32 0
	store i64 16, i64* %1773
	%1774 = getelementptr inbounds %Type_Info, %Type_Info* %1771, i64 0, i32 1
	store i64 8, i64* %1774
	; Type_Info_Named
	%1775 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1772 to %Type_Info_Named*
	%1776 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 91
	%1777 = bitcast %Type_Info* %1776 to %Type_Info*
	%1778 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1775, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$272, i64 0, i32 0), i64 9}, %..string* %1778
	%1779 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1775, i64 0, i32 1
	store %Type_Info* %1777, %Type_Info** %1779
	%1780 = load %Type_Info_Named, %Type_Info_Named* %1775, align 8
	%1781 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1772 to %Type_Info_Named*
	store %Type_Info_Named %1780, %Type_Info_Named* %1781
	%1782 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1772, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1782
	%1783 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 91
	%1784 = getelementptr inbounds %Type_Info, %Type_Info* %1783, i64 0, i32 2
	%1785 = getelementptr inbounds %Type_Info, %Type_Info* %1783, i64 0, i32 0
	store i64 16, i64* %1785
	%1786 = getelementptr inbounds %Type_Info, %Type_Info* %1783, i64 0, i32 1
	store i64 8, i64* %1786
	; Type_Info_Struct
	%1787 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1784 to %Type_Info_Struct*
	%1788 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 4
	store i8 0, i8* %1788
	%1789 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 5
	store i8 0, i8* %1789
	%1790 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 6
	store i8 0, i8* %1790
	%1791 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 85
	%1792 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 52
	%1793 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 43
	%1794 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 43
	%1795 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 86
	%1796 = bitcast %Type_Info* %1795 to %Type_Info*
	%1797 = getelementptr inbounds %Type_Info*, %Type_Info** %1791, i64 0
	%1798 = getelementptr inbounds i64, i64* %1793, i64 0
	%1799 = getelementptr inbounds i8, i8* %1794, i64 0
	%1800 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 86
	store %Type_Info* %1800, %Type_Info** %1797
	%1801 = getelementptr inbounds %..string, %..string* %1792, i64 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$273, i64 0, i32 0), i64 9}, %..string* %1801
	store i64 0, i64* %1798
	store i8 0, i8* %1799
	%1802 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%1803 = bitcast %Type_Info* %1802 to %Type_Info*
	%1804 = getelementptr inbounds %Type_Info*, %Type_Info** %1791, i64 1
	%1805 = getelementptr inbounds i64, i64* %1793, i64 1
	%1806 = getelementptr inbounds i8, i8* %1794, i64 1
	%1807 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %1807, %Type_Info** %1804
	%1808 = getelementptr inbounds %..string, %..string* %1792, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$274, i64 0, i32 0), i64 4}, %..string* %1808
	store i64 8, i64* %1805
	store i8 0, i8* %1806
	%1809 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 0
	%1810 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1809, i64 0, i32 0
	store %Type_Info** %1791, %Type_Info*** %1810
	%1811 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1809, i64 0, i32 1
	store i64 2, i64* %1811
	%1812 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 1
	%1813 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1812, i64 0, i32 0
	store %..string* %1792, %..string** %1813
	%1814 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1812, i64 0, i32 1
	store i64 2, i64* %1814
	%1815 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 2
	%1816 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1815, i64 0, i32 0
	store i64* %1793, i64** %1816
	%1817 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1815, i64 0, i32 1
	store i64 2, i64* %1817
	%1818 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1787, i64 0, i32 3
	%1819 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1818, i64 0, i32 0
	store i8* %1794, i8** %1819
	%1820 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1818, i64 0, i32 1
	store i64 2, i64* %1820
	%1821 = load %Type_Info_Struct, %Type_Info_Struct* %1787, align 8
	%1822 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1784 to %Type_Info_Struct*
	store %Type_Info_Struct %1821, %Type_Info_Struct* %1822
	%1823 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1784, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1823
	%1824 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 92
	%1825 = getelementptr inbounds %Type_Info, %Type_Info* %1824, i64 0, i32 2
	%1826 = getelementptr inbounds %Type_Info, %Type_Info* %1824, i64 0, i32 0
	store i64 72, i64* %1826
	%1827 = getelementptr inbounds %Type_Info, %Type_Info* %1824, i64 0, i32 1
	store i64 8, i64* %1827
	; Type_Info_Named
	%1828 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1825 to %Type_Info_Named*
	%1829 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 93
	%1830 = bitcast %Type_Info* %1829 to %Type_Info*
	%1831 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1828, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$275, i64 0, i32 0), i64 7}, %..string* %1831
	%1832 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1828, i64 0, i32 1
	store %Type_Info* %1830, %Type_Info** %1832
	%1833 = load %Type_Info_Named, %Type_Info_Named* %1828, align 8
	%1834 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1825 to %Type_Info_Named*
	store %Type_Info_Named %1833, %Type_Info_Named* %1834
	%1835 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1825, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1835
	%1836 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 93
	%1837 = getelementptr inbounds %Type_Info, %Type_Info* %1836, i64 0, i32 2
	%1838 = getelementptr inbounds %Type_Info, %Type_Info* %1836, i64 0, i32 0
	store i64 72, i64* %1838
	%1839 = getelementptr inbounds %Type_Info, %Type_Info* %1836, i64 0, i32 1
	store i64 8, i64* %1839
	; Type_Info_Struct
	%1840 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1837 to %Type_Info_Struct*
	%1841 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 4
	store i8 0, i8* %1841
	%1842 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 5
	store i8 0, i8* %1842
	%1843 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 6
	store i8 0, i8* %1843
	%1844 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 87
	%1845 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 54
	%1846 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 45
	%1847 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 45
	%1848 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 90
	%1849 = bitcast %Type_Info* %1848 to %Type_Info*
	%1850 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 0
	%1851 = getelementptr inbounds i64, i64* %1846, i64 0
	%1852 = getelementptr inbounds i8, i8* %1847, i64 0
	%1853 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 90
	store %Type_Info* %1853, %Type_Info** %1850
	%1854 = getelementptr inbounds %..string, %..string* %1845, i64 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$276, i64 0, i32 0), i64 9}, %..string* %1854
	store i64 0, i64* %1851
	store i8 0, i8* %1852
	%1855 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1856 = bitcast %Type_Info* %1855 to %Type_Info*
	%1857 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 1
	%1858 = getelementptr inbounds i64, i64* %1846, i64 1
	%1859 = getelementptr inbounds i8, i8* %1847, i64 1
	%1860 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1860, %Type_Info** %1857
	%1861 = getelementptr inbounds %..string, %..string* %1845, i64 1
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$277, i64 0, i32 0), i64 9}, %..string* %1861
	store i64 16, i64* %1858
	store i8 0, i8* %1859
	%1862 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	%1863 = bitcast %Type_Info* %1862 to %Type_Info*
	%1864 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 2
	%1865 = getelementptr inbounds i64, i64* %1846, i64 2
	%1866 = getelementptr inbounds i8, i8* %1847, i64 2
	%1867 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	store %Type_Info* %1867, %Type_Info** %1864
	%1868 = getelementptr inbounds %..string, %..string* %1845, i64 2
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$278, i64 0, i32 0), i64 9}, %..string* %1868
	store i64 24, i64* %1865
	store i8 0, i8* %1866
	%1869 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1870 = bitcast %Type_Info* %1869 to %Type_Info*
	%1871 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 3
	%1872 = getelementptr inbounds i64, i64* %1846, i64 3
	%1873 = getelementptr inbounds i8, i8* %1847, i64 3
	%1874 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1874, %Type_Info** %1871
	%1875 = getelementptr inbounds %..string, %..string* %1845, i64 3
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$279, i64 0, i32 0), i64 10}, %..string* %1875
	store i64 40, i64* %1872
	store i8 0, i8* %1873
	%1876 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 94
	%1877 = bitcast %Type_Info* %1876 to %Type_Info*
	%1878 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 4
	%1879 = getelementptr inbounds i64, i64* %1846, i64 4
	%1880 = getelementptr inbounds i8, i8* %1847, i64 4
	%1881 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 94
	store %Type_Info* %1881, %Type_Info** %1878
	%1882 = getelementptr inbounds %..string, %..string* %1845, i64 4
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$27a, i64 0, i32 0), i64 6}, %..string* %1882
	store i64 48, i64* %1879
	store i8 0, i8* %1880
	%1883 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	%1884 = bitcast %Type_Info* %1883 to %Type_Info*
	%1885 = getelementptr inbounds %Type_Info*, %Type_Info** %1844, i64 5
	%1886 = getelementptr inbounds i64, i64* %1846, i64 5
	%1887 = getelementptr inbounds i8, i8* %1847, i64 5
	%1888 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	store %Type_Info* %1888, %Type_Info** %1885
	%1889 = getelementptr inbounds %..string, %..string* %1845, i64 5
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$27b, i64 0, i32 0), i64 7}, %..string* %1889
	store i64 56, i64* %1886
	store i8 0, i8* %1887
	%1890 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 0
	%1891 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1890, i64 0, i32 0
	store %Type_Info** %1844, %Type_Info*** %1891
	%1892 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1890, i64 0, i32 1
	store i64 6, i64* %1892
	%1893 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 1
	%1894 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1893, i64 0, i32 0
	store %..string* %1845, %..string** %1894
	%1895 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1893, i64 0, i32 1
	store i64 6, i64* %1895
	%1896 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 2
	%1897 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1896, i64 0, i32 0
	store i64* %1846, i64** %1897
	%1898 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1896, i64 0, i32 1
	store i64 6, i64* %1898
	%1899 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1840, i64 0, i32 3
	%1900 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1899, i64 0, i32 0
	store i8* %1847, i8** %1900
	%1901 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1899, i64 0, i32 1
	store i64 6, i64* %1901
	%1902 = load %Type_Info_Struct, %Type_Info_Struct* %1840, align 8
	%1903 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1837 to %Type_Info_Struct*
	store %Type_Info_Struct %1902, %Type_Info_Struct* %1903
	%1904 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1837, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1904
	%1905 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 94
	%1906 = getelementptr inbounds %Type_Info, %Type_Info* %1905, i64 0, i32 2
	%1907 = getelementptr inbounds %Type_Info, %Type_Info* %1905, i64 0, i32 0
	store i64 8, i64* %1907
	%1908 = getelementptr inbounds %Type_Info, %Type_Info* %1905, i64 0, i32 1
	store i64 8, i64* %1908
	; Type_Info_Pointer
	%1909 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1906 to %Type_Info_Pointer*
	%1910 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 92
	%1911 = bitcast %Type_Info* %1910 to %Type_Info*
	%1912 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %1909, i64 0, i32 0
	store %Type_Info* %1911, %Type_Info** %1912
	%1913 = load %Type_Info_Pointer, %Type_Info_Pointer* %1909, align 8
	%1914 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1906 to %Type_Info_Pointer*
	store %Type_Info_Pointer %1913, %Type_Info_Pointer* %1914
	%1915 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1906, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %1915
	%1916 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	%1917 = getelementptr inbounds %Type_Info, %Type_Info* %1916, i64 0, i32 2
	%1918 = getelementptr inbounds %Type_Info, %Type_Info* %1916, i64 0, i32 0
	store i64 24, i64* %1918
	%1919 = getelementptr inbounds %Type_Info, %Type_Info* %1916, i64 0, i32 1
	store i64 8, i64* %1919
	; Type_Info_Named
	%1920 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1917 to %Type_Info_Named*
	%1921 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 96
	%1922 = bitcast %Type_Info* %1921 to %Type_Info*
	%1923 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1920, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$27c, i64 0, i32 0), i64 9}, %..string* %1923
	%1924 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1920, i64 0, i32 1
	store %Type_Info* %1922, %Type_Info** %1924
	%1925 = load %Type_Info_Named, %Type_Info_Named* %1920, align 8
	%1926 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1917 to %Type_Info_Named*
	store %Type_Info_Named %1925, %Type_Info_Named* %1926
	%1927 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1917, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1927
	%1928 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 96
	%1929 = getelementptr inbounds %Type_Info, %Type_Info* %1928, i64 0, i32 2
	%1930 = getelementptr inbounds %Type_Info, %Type_Info* %1928, i64 0, i32 0
	store i64 24, i64* %1930
	%1931 = getelementptr inbounds %Type_Info, %Type_Info* %1928, i64 0, i32 1
	store i64 8, i64* %1931
	; Type_Info_Struct
	%1932 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1929 to %Type_Info_Struct*
	%1933 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 4
	store i8 0, i8* %1933
	%1934 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 5
	store i8 0, i8* %1934
	%1935 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 6
	store i8 0, i8* %1935
	%1936 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 93
	%1937 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 60
	%1938 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 51
	%1939 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 51
	%1940 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	%1941 = bitcast %Type_Info* %1940 to %Type_Info*
	%1942 = getelementptr inbounds %Type_Info*, %Type_Info** %1936, i64 0
	%1943 = getelementptr inbounds i64, i64* %1938, i64 0
	%1944 = getelementptr inbounds i8, i8* %1939, i64 0
	%1945 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 60
	store %Type_Info* %1945, %Type_Info** %1942
	%1946 = getelementptr inbounds %..string, %..string* %1937, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$27d, i64 0, i32 0), i64 4}, %..string* %1946
	store i64 0, i64* %1943
	store i8 0, i8* %1944
	%1947 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%1948 = bitcast %Type_Info* %1947 to %Type_Info*
	%1949 = getelementptr inbounds %Type_Info*, %Type_Info** %1936, i64 1
	%1950 = getelementptr inbounds i64, i64* %1938, i64 1
	%1951 = getelementptr inbounds i8, i8* %1939, i64 1
	%1952 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %1952, %Type_Info** %1949
	%1953 = getelementptr inbounds %..string, %..string* %1937, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$27e, i64 0, i32 0), i64 3}, %..string* %1953
	store i64 8, i64* %1950
	store i8 0, i8* %1951
	%1954 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 0
	%1955 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1954, i64 0, i32 0
	store %Type_Info** %1936, %Type_Info*** %1955
	%1956 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %1954, i64 0, i32 1
	store i64 2, i64* %1956
	%1957 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 1
	%1958 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1957, i64 0, i32 0
	store %..string* %1937, %..string** %1958
	%1959 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %1957, i64 0, i32 1
	store i64 2, i64* %1959
	%1960 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 2
	%1961 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1960, i64 0, i32 0
	store i64* %1938, i64** %1961
	%1962 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %1960, i64 0, i32 1
	store i64 2, i64* %1962
	%1963 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1932, i64 0, i32 3
	%1964 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1963, i64 0, i32 0
	store i8* %1939, i8** %1964
	%1965 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %1963, i64 0, i32 1
	store i64 2, i64* %1965
	%1966 = load %Type_Info_Struct, %Type_Info_Struct* %1932, align 8
	%1967 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1929 to %Type_Info_Struct*
	store %Type_Info_Struct %1966, %Type_Info_Struct* %1967
	%1968 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1929, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %1968
	%1969 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 97
	%1970 = getelementptr inbounds %Type_Info, %Type_Info* %1969, i64 0, i32 2
	%1971 = getelementptr inbounds %Type_Info, %Type_Info* %1969, i64 0, i32 0
	store i64 24, i64* %1971
	%1972 = getelementptr inbounds %Type_Info, %Type_Info* %1969, i64 0, i32 1
	store i64 8, i64* %1972
	; Type_Info_Named
	%1973 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1970 to %Type_Info_Named*
	%1974 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 98
	%1975 = bitcast %Type_Info* %1974 to %Type_Info*
	%1976 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1973, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$27f, i64 0, i32 0), i64 17}, %..string* %1976
	%1977 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %1973, i64 0, i32 1
	store %Type_Info* %1975, %Type_Info** %1977
	%1978 = load %Type_Info_Named, %Type_Info_Named* %1973, align 8
	%1979 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1970 to %Type_Info_Named*
	store %Type_Info_Named %1978, %Type_Info_Named* %1979
	%1980 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1970, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %1980
	%1981 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 98
	%1982 = getelementptr inbounds %Type_Info, %Type_Info* %1981, i64 0, i32 2
	%1983 = getelementptr inbounds %Type_Info, %Type_Info* %1981, i64 0, i32 0
	store i64 24, i64* %1983
	%1984 = getelementptr inbounds %Type_Info, %Type_Info* %1981, i64 0, i32 1
	store i64 8, i64* %1984
	; Type_Info_Struct
	%1985 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1982 to %Type_Info_Struct*
	%1986 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 4
	store i8 0, i8* %1986
	%1987 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 5
	store i8 0, i8* %1987
	%1988 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 6
	store i8 0, i8* %1988
	%1989 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 95
	%1990 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 62
	%1991 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 53
	%1992 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 53
	%1993 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%1994 = bitcast %Type_Info* %1993 to %Type_Info*
	%1995 = getelementptr inbounds %Type_Info*, %Type_Info** %1989, i64 0
	%1996 = getelementptr inbounds i64, i64* %1991, i64 0
	%1997 = getelementptr inbounds i8, i8* %1992, i64 0
	%1998 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %1998, %Type_Info** %1995
	%1999 = getelementptr inbounds %..string, %..string* %1990, i64 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$280, i64 0, i32 0), i64 10}, %..string* %1999
	store i64 0, i64* %1996
	store i8 0, i8* %1997
	%2000 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2001 = bitcast %Type_Info* %2000 to %Type_Info*
	%2002 = getelementptr inbounds %Type_Info*, %Type_Info** %1989, i64 1
	%2003 = getelementptr inbounds i64, i64* %1991, i64 1
	%2004 = getelementptr inbounds i8, i8* %1992, i64 1
	%2005 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2005, %Type_Info** %2002
	%2006 = getelementptr inbounds %..string, %..string* %1990, i64 1
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$281, i64 0, i32 0), i64 10}, %..string* %2006
	store i64 8, i64* %2003
	store i8 0, i8* %2004
	%2007 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2008 = bitcast %Type_Info* %2007 to %Type_Info*
	%2009 = getelementptr inbounds %Type_Info*, %Type_Info** %1989, i64 2
	%2010 = getelementptr inbounds i64, i64* %1991, i64 2
	%2011 = getelementptr inbounds i8, i8* %1992, i64 2
	%2012 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2012, %Type_Info** %2009
	%2013 = getelementptr inbounds %..string, %..string* %1990, i64 2
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$282, i64 0, i32 0), i64 11}, %..string* %2013
	store i64 16, i64* %2010
	store i8 0, i8* %2011
	%2014 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 0
	%2015 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2014, i64 0, i32 0
	store %Type_Info** %1989, %Type_Info*** %2015
	%2016 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2014, i64 0, i32 1
	store i64 3, i64* %2016
	%2017 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 1
	%2018 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2017, i64 0, i32 0
	store %..string* %1990, %..string** %2018
	%2019 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2017, i64 0, i32 1
	store i64 3, i64* %2019
	%2020 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 2
	%2021 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2020, i64 0, i32 0
	store i64* %1991, i64** %2021
	%2022 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2020, i64 0, i32 1
	store i64 3, i64* %2022
	%2023 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %1985, i64 0, i32 3
	%2024 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2023, i64 0, i32 0
	store i8* %1992, i8** %2024
	%2025 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2023, i64 0, i32 1
	store i64 3, i64* %2025
	%2026 = load %Type_Info_Struct, %Type_Info_Struct* %1985, align 8
	%2027 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %1982 to %Type_Info_Struct*
	store %Type_Info_Struct %2026, %Type_Info_Struct* %2027
	%2028 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %1982, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2028
	%2029 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 99
	%2030 = getelementptr inbounds %Type_Info, %Type_Info* %2029, i64 0, i32 2
	%2031 = getelementptr inbounds %Type_Info, %Type_Info* %2029, i64 0, i32 0
	store i64 32, i64* %2031
	%2032 = getelementptr inbounds %Type_Info, %Type_Info* %2029, i64 0, i32 1
	store i64 8, i64* %2032
	; Type_Info_Named
	%2033 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2030 to %Type_Info_Named*
	%2034 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 100
	%2035 = bitcast %Type_Info* %2034 to %Type_Info*
	%2036 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2033, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__str$283, i64 0, i32 0), i64 18}, %..string* %2036
	%2037 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2033, i64 0, i32 1
	store %Type_Info* %2035, %Type_Info** %2037
	%2038 = load %Type_Info_Named, %Type_Info_Named* %2033, align 8
	%2039 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2030 to %Type_Info_Named*
	store %Type_Info_Named %2038, %Type_Info_Named* %2039
	%2040 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2030, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2040
	%2041 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 100
	%2042 = getelementptr inbounds %Type_Info, %Type_Info* %2041, i64 0, i32 2
	%2043 = getelementptr inbounds %Type_Info, %Type_Info* %2041, i64 0, i32 0
	store i64 32, i64* %2043
	%2044 = getelementptr inbounds %Type_Info, %Type_Info* %2041, i64 0, i32 1
	store i64 8, i64* %2044
	; Type_Info_Struct
	%2045 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2042 to %Type_Info_Struct*
	%2046 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 4
	store i8 0, i8* %2046
	%2047 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 5
	store i8 0, i8* %2047
	%2048 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 6
	store i8 0, i8* %2048
	%2049 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 98
	%2050 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 65
	%2051 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 56
	%2052 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 56
	%2053 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	%2054 = bitcast %Type_Info* %2053 to %Type_Info*
	%2055 = getelementptr inbounds %Type_Info*, %Type_Info** %2049, i64 0
	%2056 = getelementptr inbounds i64, i64* %2051, i64 0
	%2057 = getelementptr inbounds i8, i8* %2052, i64 0
	%2058 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	store %Type_Info* %2058, %Type_Info** %2055
	%2059 = getelementptr inbounds %..string, %..string* %2050, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$284, i64 0, i32 0), i64 3}, %..string* %2059
	store i64 0, i64* %2056
	store i8 0, i8* %2057
	%2060 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2061 = bitcast %Type_Info* %2060 to %Type_Info*
	%2062 = getelementptr inbounds %Type_Info*, %Type_Info** %2049, i64 1
	%2063 = getelementptr inbounds i64, i64* %2051, i64 1
	%2064 = getelementptr inbounds i8, i8* %2052, i64 1
	%2065 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2065, %Type_Info** %2062
	%2066 = getelementptr inbounds %..string, %..string* %2050, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$285, i64 0, i32 0), i64 4}, %..string* %2066
	store i64 24, i64* %2063
	store i8 0, i8* %2064
	%2067 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 0
	%2068 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2067, i64 0, i32 0
	store %Type_Info** %2049, %Type_Info*** %2068
	%2069 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2067, i64 0, i32 1
	store i64 2, i64* %2069
	%2070 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 1
	%2071 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2070, i64 0, i32 0
	store %..string* %2050, %..string** %2071
	%2072 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2070, i64 0, i32 1
	store i64 2, i64* %2072
	%2073 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 2
	%2074 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2073, i64 0, i32 0
	store i64* %2051, i64** %2074
	%2075 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2073, i64 0, i32 1
	store i64 2, i64* %2075
	%2076 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2045, i64 0, i32 3
	%2077 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2076, i64 0, i32 0
	store i8* %2052, i8** %2077
	%2078 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2076, i64 0, i32 1
	store i64 2, i64* %2078
	%2079 = load %Type_Info_Struct, %Type_Info_Struct* %2045, align 8
	%2080 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2042 to %Type_Info_Struct*
	store %Type_Info_Struct %2079, %Type_Info_Struct* %2080
	%2081 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2042, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2081
	%2082 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 101
	%2083 = getelementptr inbounds %Type_Info, %Type_Info* %2082, i64 0, i32 2
	%2084 = getelementptr inbounds %Type_Info, %Type_Info* %2082, i64 0, i32 0
	store i64 48, i64* %2084
	%2085 = getelementptr inbounds %Type_Info, %Type_Info* %2082, i64 0, i32 1
	store i64 8, i64* %2085
	; Type_Info_Named
	%2086 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2083 to %Type_Info_Named*
	%2087 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 102
	%2088 = bitcast %Type_Info* %2087 to %Type_Info*
	%2089 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2086, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$286, i64 0, i32 0), i64 12}, %..string* %2089
	%2090 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2086, i64 0, i32 1
	store %Type_Info* %2088, %Type_Info** %2090
	%2091 = load %Type_Info_Named, %Type_Info_Named* %2086, align 8
	%2092 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2083 to %Type_Info_Named*
	store %Type_Info_Named %2091, %Type_Info_Named* %2092
	%2093 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2083, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2093
	%2094 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 102
	%2095 = getelementptr inbounds %Type_Info, %Type_Info* %2094, i64 0, i32 2
	%2096 = getelementptr inbounds %Type_Info, %Type_Info* %2094, i64 0, i32 0
	store i64 48, i64* %2096
	%2097 = getelementptr inbounds %Type_Info, %Type_Info* %2094, i64 0, i32 1
	store i64 8, i64* %2097
	; Type_Info_Struct
	%2098 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2095 to %Type_Info_Struct*
	%2099 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 4
	store i8 0, i8* %2099
	%2100 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 5
	store i8 0, i8* %2100
	%2101 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 6
	store i8 0, i8* %2101
	%2102 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 100
	%2103 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 67
	%2104 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 58
	%2105 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 58
	%2106 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 103
	%2107 = bitcast %Type_Info* %2106 to %Type_Info*
	%2108 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 0
	%2109 = getelementptr inbounds i64, i64* %2104, i64 0
	%2110 = getelementptr inbounds i8, i8* %2105, i64 0
	%2111 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 103
	store %Type_Info* %2111, %Type_Info** %2108
	%2112 = getelementptr inbounds %..string, %..string* %2103, i64 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$287, i64 0, i32 0), i64 1}, %..string* %2112
	store i64 0, i64* %2109
	store i8 0, i8* %2110
	%2113 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%2114 = bitcast %Type_Info* %2113 to %Type_Info*
	%2115 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 1
	%2116 = getelementptr inbounds i64, i64* %2104, i64 1
	%2117 = getelementptr inbounds i8, i8* %2105, i64 1
	%2118 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %2118, %Type_Info** %2115
	%2119 = getelementptr inbounds %..string, %..string* %2103, i64 1
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$288, i64 0, i32 0), i64 13}, %..string* %2119
	store i64 8, i64* %2116
	store i8 0, i8* %2117
	%2120 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2121 = bitcast %Type_Info* %2120 to %Type_Info*
	%2122 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 2
	%2123 = getelementptr inbounds i64, i64* %2104, i64 2
	%2124 = getelementptr inbounds i8, i8* %2105, i64 2
	%2125 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2125, %Type_Info** %2122
	%2126 = getelementptr inbounds %..string, %..string* %2103, i64 2
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$289, i64 0, i32 0), i64 10}, %..string* %2126
	store i64 16, i64* %2123
	store i8 0, i8* %2124
	%2127 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2128 = bitcast %Type_Info* %2127 to %Type_Info*
	%2129 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 3
	%2130 = getelementptr inbounds i64, i64* %2104, i64 3
	%2131 = getelementptr inbounds i8, i8* %2105, i64 3
	%2132 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2132, %Type_Info** %2129
	%2133 = getelementptr inbounds %..string, %..string* %2103, i64 3
	store %..string {i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__str$28a, i64 0, i32 0), i64 11}, %..string* %2133
	store i64 24, i64* %2130
	store i8 0, i8* %2131
	%2134 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%2135 = bitcast %Type_Info* %2134 to %Type_Info*
	%2136 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 4
	%2137 = getelementptr inbounds i64, i64* %2104, i64 4
	%2138 = getelementptr inbounds i8, i8* %2105, i64 4
	%2139 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	store %Type_Info* %2139, %Type_Info** %2136
	%2140 = getelementptr inbounds %..string, %..string* %2103, i64 4
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$28b, i64 0, i32 0), i64 12}, %..string* %2140
	store i64 32, i64* %2137
	store i8 0, i8* %2138
	%2141 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2142 = bitcast %Type_Info* %2141 to %Type_Info*
	%2143 = getelementptr inbounds %Type_Info*, %Type_Info** %2102, i64 5
	%2144 = getelementptr inbounds i64, i64* %2104, i64 5
	%2145 = getelementptr inbounds i8, i8* %2105, i64 5
	%2146 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2146, %Type_Info** %2143
	%2147 = getelementptr inbounds %..string, %..string* %2103, i64 5
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$28c, i64 0, i32 0), i64 10}, %..string* %2147
	store i64 40, i64* %2144
	store i8 0, i8* %2145
	%2148 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 0
	%2149 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2148, i64 0, i32 0
	store %Type_Info** %2102, %Type_Info*** %2149
	%2150 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2148, i64 0, i32 1
	store i64 6, i64* %2150
	%2151 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 1
	%2152 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2151, i64 0, i32 0
	store %..string* %2103, %..string** %2152
	%2153 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2151, i64 0, i32 1
	store i64 6, i64* %2153
	%2154 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 2
	%2155 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2154, i64 0, i32 0
	store i64* %2104, i64** %2155
	%2156 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2154, i64 0, i32 1
	store i64 6, i64* %2156
	%2157 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2098, i64 0, i32 3
	%2158 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2157, i64 0, i32 0
	store i8* %2105, i8** %2158
	%2159 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2157, i64 0, i32 1
	store i64 6, i64* %2159
	%2160 = load %Type_Info_Struct, %Type_Info_Struct* %2098, align 8
	%2161 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2095 to %Type_Info_Struct*
	store %Type_Info_Struct %2160, %Type_Info_Struct* %2161
	%2162 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2095, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2162
	%2163 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 103
	%2164 = getelementptr inbounds %Type_Info, %Type_Info* %2163, i64 0, i32 2
	%2165 = getelementptr inbounds %Type_Info, %Type_Info* %2163, i64 0, i32 0
	store i64 8, i64* %2165
	%2166 = getelementptr inbounds %Type_Info, %Type_Info* %2163, i64 0, i32 1
	store i64 8, i64* %2166
	; Type_Info_Pointer
	%2167 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2164 to %Type_Info_Pointer*
	%2168 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 104
	%2169 = bitcast %Type_Info* %2168 to %Type_Info*
	%2170 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2167, i64 0, i32 0
	store %Type_Info* %2169, %Type_Info** %2170
	%2171 = load %Type_Info_Pointer, %Type_Info_Pointer* %2167, align 8
	%2172 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2164 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2171, %Type_Info_Pointer* %2172
	%2173 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2164, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2173
	%2174 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 104
	%2175 = getelementptr inbounds %Type_Info, %Type_Info* %2174, i64 0, i32 2
	%2176 = getelementptr inbounds %Type_Info, %Type_Info* %2174, i64 0, i32 0
	store i64 80, i64* %2176
	%2177 = getelementptr inbounds %Type_Info, %Type_Info* %2174, i64 0, i32 1
	store i64 8, i64* %2177
	; Type_Info_Named
	%2178 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2175 to %Type_Info_Named*
	%2179 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 105
	%2180 = bitcast %Type_Info* %2179 to %Type_Info*
	%2181 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2178, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$28d, i64 0, i32 0), i64 3}, %..string* %2181
	%2182 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2178, i64 0, i32 1
	store %Type_Info* %2180, %Type_Info** %2182
	%2183 = load %Type_Info_Named, %Type_Info_Named* %2178, align 8
	%2184 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2175 to %Type_Info_Named*
	store %Type_Info_Named %2183, %Type_Info_Named* %2184
	%2185 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2175, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2185
	%2186 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 105
	%2187 = getelementptr inbounds %Type_Info, %Type_Info* %2186, i64 0, i32 2
	%2188 = getelementptr inbounds %Type_Info, %Type_Info* %2186, i64 0, i32 0
	store i64 80, i64* %2188
	%2189 = getelementptr inbounds %Type_Info, %Type_Info* %2186, i64 0, i32 1
	store i64 8, i64* %2189
	; Type_Info_Struct
	%2190 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2187 to %Type_Info_Struct*
	%2191 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 4
	store i8 0, i8* %2191
	%2192 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 5
	store i8 0, i8* %2192
	%2193 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 6
	store i8 0, i8* %2193
	%2194 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 106
	%2195 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 73
	%2196 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 64
	%2197 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 64
	%2198 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	%2199 = bitcast %Type_Info* %2198 to %Type_Info*
	%2200 = getelementptr inbounds %Type_Info*, %Type_Info** %2194, i64 0
	%2201 = getelementptr inbounds i64, i64* %2196, i64 0
	%2202 = getelementptr inbounds i8, i8* %2197, i64 0
	%2203 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	store %Type_Info* %2203, %Type_Info** %2200
	%2204 = getelementptr inbounds %..string, %..string* %2195, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$28e, i64 0, i32 0), i64 6}, %..string* %2204
	store i64 0, i64* %2201
	store i8 0, i8* %2202
	%2205 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 108
	%2206 = bitcast %Type_Info* %2205 to %Type_Info*
	%2207 = getelementptr inbounds %Type_Info*, %Type_Info** %2194, i64 1
	%2208 = getelementptr inbounds i64, i64* %2196, i64 1
	%2209 = getelementptr inbounds i8, i8* %2197, i64 1
	%2210 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 108
	store %Type_Info* %2210, %Type_Info** %2207
	%2211 = getelementptr inbounds %..string, %..string* %2195, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$28f, i64 0, i32 0), i64 7}, %..string* %2211
	store i64 40, i64* %2208
	store i8 0, i8* %2209
	%2212 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 0
	%2213 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2212, i64 0, i32 0
	store %Type_Info** %2194, %Type_Info*** %2213
	%2214 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2212, i64 0, i32 1
	store i64 2, i64* %2214
	%2215 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 1
	%2216 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2215, i64 0, i32 0
	store %..string* %2195, %..string** %2216
	%2217 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2215, i64 0, i32 1
	store i64 2, i64* %2217
	%2218 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 2
	%2219 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2218, i64 0, i32 0
	store i64* %2196, i64** %2219
	%2220 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2218, i64 0, i32 1
	store i64 2, i64* %2220
	%2221 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2190, i64 0, i32 3
	%2222 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2221, i64 0, i32 0
	store i8* %2197, i8** %2222
	%2223 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2221, i64 0, i32 1
	store i64 2, i64* %2223
	%2224 = load %Type_Info_Struct, %Type_Info_Struct* %2190, align 8
	%2225 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2187 to %Type_Info_Struct*
	store %Type_Info_Struct %2224, %Type_Info_Struct* %2225
	%2226 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2187, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2226
	%2227 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	%2228 = getelementptr inbounds %Type_Info, %Type_Info* %2227, i64 0, i32 2
	%2229 = getelementptr inbounds %Type_Info, %Type_Info* %2227, i64 0, i32 0
	store i64 40, i64* %2229
	%2230 = getelementptr inbounds %Type_Info, %Type_Info* %2227, i64 0, i32 1
	store i64 8, i64* %2230
	; Type_Info_Dynamic_Array
	%2231 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2228 to %Type_Info_Dynamic_Array*
	%2232 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2233 = bitcast %Type_Info* %2232 to %Type_Info*
	%2234 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2231, i64 0, i32 0
	store %Type_Info* %2233, %Type_Info** %2234
	%2235 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2231, i64 0, i32 1
	store i64 8, i64* %2235
	%2236 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2231, align 8
	%2237 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2228 to %Type_Info_Dynamic_Array*
	store %Type_Info_Dynamic_Array %2236, %Type_Info_Dynamic_Array* %2237
	%2238 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2228, i64 0, i32 2 ; UnionTagPtr
	store i8 12, i8* %2238
	%2239 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 107
	%2240 = getelementptr inbounds %Type_Info, %Type_Info* %2239, i64 0, i32 2
	%2241 = getelementptr inbounds %Type_Info, %Type_Info* %2239, i64 0, i32 0
	store i64 8, i64* %2241
	%2242 = getelementptr inbounds %Type_Info, %Type_Info* %2239, i64 0, i32 1
	store i64 8, i64* %2242
	; Type_Info_Pointer
	%2243 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2240 to %Type_Info_Pointer*
	%2244 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2245 = bitcast %Type_Info* %2244 to %Type_Info*
	%2246 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2243, i64 0, i32 0
	store %Type_Info* %2245, %Type_Info** %2246
	%2247 = load %Type_Info_Pointer, %Type_Info_Pointer* %2243, align 8
	%2248 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2240 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2247, %Type_Info_Pointer* %2248
	%2249 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2240, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2249
	%2250 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 108
	%2251 = getelementptr inbounds %Type_Info, %Type_Info* %2250, i64 0, i32 2
	%2252 = getelementptr inbounds %Type_Info, %Type_Info* %2250, i64 0, i32 0
	store i64 40, i64* %2252
	%2253 = getelementptr inbounds %Type_Info, %Type_Info* %2250, i64 0, i32 1
	store i64 8, i64* %2253
	; Type_Info_Named
	%2254 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2251 to %Type_Info_Named*
	%2255 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 109
	%2256 = bitcast %Type_Info* %2255 to %Type_Info*
	%2257 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2254, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$290, i64 0, i32 0), i64 13}, %..string* %2257
	%2258 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2254, i64 0, i32 1
	store %Type_Info* %2256, %Type_Info** %2258
	%2259 = load %Type_Info_Named, %Type_Info_Named* %2254, align 8
	%2260 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2251 to %Type_Info_Named*
	store %Type_Info_Named %2259, %Type_Info_Named* %2260
	%2261 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2251, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2261
	%2262 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 109
	%2263 = getelementptr inbounds %Type_Info, %Type_Info* %2262, i64 0, i32 2
	%2264 = getelementptr inbounds %Type_Info, %Type_Info* %2262, i64 0, i32 0
	store i64 40, i64* %2264
	%2265 = getelementptr inbounds %Type_Info, %Type_Info* %2262, i64 0, i32 1
	store i64 8, i64* %2265
	; Type_Info_Struct
	%2266 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2263 to %Type_Info_Struct*
	%2267 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 4
	store i8 0, i8* %2267
	%2268 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 5
	store i8 0, i8* %2268
	%2269 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 6
	store i8 0, i8* %2269
	%2270 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 108
	%2271 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 75
	%2272 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 66
	%2273 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 66
	%2274 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%2275 = bitcast %Type_Info* %2274 to %Type_Info*
	%2276 = getelementptr inbounds %Type_Info*, %Type_Info** %2270, i64 0
	%2277 = getelementptr inbounds i64, i64* %2272, i64 0
	%2278 = getelementptr inbounds i8, i8* %2273, i64 0
	%2279 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %2279, %Type_Info** %2276
	%2280 = getelementptr inbounds %..string, %..string* %2271, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$291, i64 0, i32 0), i64 4}, %..string* %2280
	store i64 0, i64* %2277
	store i8 0, i8* %2278
	%2281 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2282 = bitcast %Type_Info* %2281 to %Type_Info*
	%2283 = getelementptr inbounds %Type_Info*, %Type_Info** %2270, i64 1
	%2284 = getelementptr inbounds i64, i64* %2272, i64 1
	%2285 = getelementptr inbounds i8, i8* %2273, i64 1
	%2286 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2286, %Type_Info** %2283
	%2287 = getelementptr inbounds %..string, %..string* %2271, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$292, i64 0, i32 0), i64 3}, %..string* %2287
	store i64 8, i64* %2284
	store i8 0, i8* %2285
	%2288 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2289 = bitcast %Type_Info* %2288 to %Type_Info*
	%2290 = getelementptr inbounds %Type_Info*, %Type_Info** %2270, i64 2
	%2291 = getelementptr inbounds i64, i64* %2272, i64 2
	%2292 = getelementptr inbounds i8, i8* %2273, i64 2
	%2293 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2293, %Type_Info** %2290
	%2294 = getelementptr inbounds %..string, %..string* %2271, i64 2
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$293, i64 0, i32 0), i64 3}, %..string* %2294
	store i64 16, i64* %2291
	store i8 0, i8* %2292
	%2295 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 90
	%2296 = bitcast %Type_Info* %2295 to %Type_Info*
	%2297 = getelementptr inbounds %Type_Info*, %Type_Info** %2270, i64 3
	%2298 = getelementptr inbounds i64, i64* %2272, i64 3
	%2299 = getelementptr inbounds i8, i8* %2273, i64 3
	%2300 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 90
	store %Type_Info* %2300, %Type_Info** %2297
	%2301 = getelementptr inbounds %..string, %..string* %2271, i64 3
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$294, i64 0, i32 0), i64 9}, %..string* %2301
	store i64 24, i64* %2298
	store i8 0, i8* %2299
	%2302 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 0
	%2303 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2302, i64 0, i32 0
	store %Type_Info** %2270, %Type_Info*** %2303
	%2304 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2302, i64 0, i32 1
	store i64 4, i64* %2304
	%2305 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 1
	%2306 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2305, i64 0, i32 0
	store %..string* %2271, %..string** %2306
	%2307 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2305, i64 0, i32 1
	store i64 4, i64* %2307
	%2308 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 2
	%2309 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2308, i64 0, i32 0
	store i64* %2272, i64** %2309
	%2310 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2308, i64 0, i32 1
	store i64 4, i64* %2310
	%2311 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2266, i64 0, i32 3
	%2312 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2311, i64 0, i32 0
	store i8* %2273, i8** %2312
	%2313 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2311, i64 0, i32 1
	store i64 4, i64* %2313
	%2314 = load %Type_Info_Struct, %Type_Info_Struct* %2266, align 8
	%2315 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2263 to %Type_Info_Struct*
	store %Type_Info_Struct %2314, %Type_Info_Struct* %2315
	%2316 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2263, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2316
	%2317 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 110
	%2318 = getelementptr inbounds %Type_Info, %Type_Info* %2317, i64 0, i32 2
	%2319 = getelementptr inbounds %Type_Info, %Type_Info* %2317, i64 0, i32 0
	store i64 32, i64* %2319
	%2320 = getelementptr inbounds %Type_Info, %Type_Info* %2317, i64 0, i32 1
	store i64 8, i64* %2320
	; Type_Info_Named
	%2321 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2318 to %Type_Info_Named*
	%2322 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 111
	%2323 = bitcast %Type_Info* %2322 to %Type_Info*
	%2324 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2321, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$295, i64 0, i32 0), i64 4}, %..string* %2324
	%2325 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2321, i64 0, i32 1
	store %Type_Info* %2323, %Type_Info** %2325
	%2326 = load %Type_Info_Named, %Type_Info_Named* %2321, align 8
	%2327 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2318 to %Type_Info_Named*
	store %Type_Info_Named %2326, %Type_Info_Named* %2327
	%2328 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2318, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2328
	%2329 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 111
	%2330 = getelementptr inbounds %Type_Info, %Type_Info* %2329, i64 0, i32 2
	%2331 = getelementptr inbounds %Type_Info, %Type_Info* %2329, i64 0, i32 0
	store i64 32, i64* %2331
	%2332 = getelementptr inbounds %Type_Info, %Type_Info* %2329, i64 0, i32 1
	store i64 8, i64* %2332
	; Type_Info_Struct
	%2333 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2330 to %Type_Info_Struct*
	%2334 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 4
	store i8 0, i8* %2334
	%2335 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 5
	store i8 0, i8* %2335
	%2336 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 6
	store i8 0, i8* %2336
	%2337 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 112
	%2338 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 79
	%2339 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 70
	%2340 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 70
	%2341 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2342 = bitcast %Type_Info* %2341 to %Type_Info*
	%2343 = getelementptr inbounds %Type_Info*, %Type_Info** %2337, i64 0
	%2344 = getelementptr inbounds i64, i64* %2339, i64 0
	%2345 = getelementptr inbounds i8, i8* %2340, i64 0
	%2346 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2346, %Type_Info** %2343
	%2347 = getelementptr inbounds %..string, %..string* %2338, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$296, i64 0, i32 0), i64 7}, %..string* %2347
	store i64 0, i64* %2344
	store i8 0, i8* %2345
	%2348 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2349 = bitcast %Type_Info* %2348 to %Type_Info*
	%2350 = getelementptr inbounds %Type_Info*, %Type_Info** %2337, i64 1
	%2351 = getelementptr inbounds i64, i64* %2339, i64 1
	%2352 = getelementptr inbounds i8, i8* %2340, i64 1
	%2353 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2353, %Type_Info** %2350
	%2354 = getelementptr inbounds %..string, %..string* %2338, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$297, i64 0, i32 0), i64 5}, %..string* %2354
	store i64 8, i64* %2351
	store i8 0, i8* %2352
	%2355 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2356 = bitcast %Type_Info* %2355 to %Type_Info*
	%2357 = getelementptr inbounds %Type_Info*, %Type_Info** %2337, i64 2
	%2358 = getelementptr inbounds i64, i64* %2339, i64 2
	%2359 = getelementptr inbounds i8, i8* %2340, i64 2
	%2360 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2360, %Type_Info** %2357
	%2361 = getelementptr inbounds %..string, %..string* %2338, i64 2
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$298, i64 0, i32 0), i64 6}, %..string* %2361
	store i64 16, i64* %2358
	store i8 0, i8* %2359
	%2362 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2363 = bitcast %Type_Info* %2362 to %Type_Info*
	%2364 = getelementptr inbounds %Type_Info*, %Type_Info** %2337, i64 3
	%2365 = getelementptr inbounds i64, i64* %2339, i64 3
	%2366 = getelementptr inbounds i8, i8* %2340, i64 3
	%2367 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2367, %Type_Info** %2364
	%2368 = getelementptr inbounds %..string, %..string* %2338, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$299, i64 0, i32 0), i64 4}, %..string* %2368
	store i64 24, i64* %2365
	store i8 0, i8* %2366
	%2369 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 0
	%2370 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2369, i64 0, i32 0
	store %Type_Info** %2337, %Type_Info*** %2370
	%2371 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2369, i64 0, i32 1
	store i64 4, i64* %2371
	%2372 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 1
	%2373 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2372, i64 0, i32 0
	store %..string* %2338, %..string** %2373
	%2374 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2372, i64 0, i32 1
	store i64 4, i64* %2374
	%2375 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 2
	%2376 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2375, i64 0, i32 0
	store i64* %2339, i64** %2376
	%2377 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2375, i64 0, i32 1
	store i64 4, i64* %2377
	%2378 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2333, i64 0, i32 3
	%2379 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2378, i64 0, i32 0
	store i8* %2340, i8** %2379
	%2380 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2378, i64 0, i32 1
	store i64 4, i64* %2380
	%2381 = load %Type_Info_Struct, %Type_Info_Struct* %2333, align 8
	%2382 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2330 to %Type_Info_Struct*
	store %Type_Info_Struct %2381, %Type_Info_Struct* %2382
	%2383 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2330, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2383
	%2384 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2385 = getelementptr inbounds %Type_Info, %Type_Info* %2384, i64 0, i32 2
	%2386 = getelementptr inbounds %Type_Info, %Type_Info* %2384, i64 0, i32 0
	store i64 8, i64* %2386
	%2387 = getelementptr inbounds %Type_Info, %Type_Info* %2384, i64 0, i32 1
	store i64 8, i64* %2387
	; Type_Info_Pointer
	%2388 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2385 to %Type_Info_Pointer*
	%2389 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 113
	%2390 = bitcast %Type_Info* %2389 to %Type_Info*
	%2391 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2388, i64 0, i32 0
	store %Type_Info* %2390, %Type_Info** %2391
	%2392 = load %Type_Info_Pointer, %Type_Info_Pointer* %2388, align 8
	%2393 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2385 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2392, %Type_Info_Pointer* %2393
	%2394 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2385, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2394
	%2395 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 113
	%2396 = getelementptr inbounds %Type_Info, %Type_Info* %2395, i64 0, i32 2
	%2397 = getelementptr inbounds %Type_Info, %Type_Info* %2395, i64 0, i32 0
	store i64 152, i64* %2397
	%2398 = getelementptr inbounds %Type_Info, %Type_Info* %2395, i64 0, i32 1
	store i64 8, i64* %2398
	; Type_Info_Named
	%2399 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2396 to %Type_Info_Named*
	%2400 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 114
	%2401 = bitcast %Type_Info* %2400 to %Type_Info*
	%2402 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2399, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$29a, i64 0, i32 0), i64 7}, %..string* %2402
	%2403 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2399, i64 0, i32 1
	store %Type_Info* %2401, %Type_Info** %2403
	%2404 = load %Type_Info_Named, %Type_Info_Named* %2399, align 8
	%2405 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2396 to %Type_Info_Named*
	store %Type_Info_Named %2404, %Type_Info_Named* %2405
	%2406 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2396, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2406
	%2407 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 114
	%2408 = getelementptr inbounds %Type_Info, %Type_Info* %2407, i64 0, i32 2
	%2409 = getelementptr inbounds %Type_Info, %Type_Info* %2407, i64 0, i32 0
	store i64 152, i64* %2409
	%2410 = getelementptr inbounds %Type_Info, %Type_Info* %2407, i64 0, i32 1
	store i64 8, i64* %2410
	; Type_Info_Struct
	%2411 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2408 to %Type_Info_Struct*
	%2412 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 4
	store i8 0, i8* %2412
	%2413 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 5
	store i8 0, i8* %2413
	%2414 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 6
	store i8 0, i8* %2414
	%2415 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 116
	%2416 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 83
	%2417 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 74
	%2418 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 74
	%2419 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2420 = bitcast %Type_Info* %2419 to %Type_Info*
	%2421 = getelementptr inbounds %Type_Info*, %Type_Info** %2415, i64 0
	%2422 = getelementptr inbounds i64, i64* %2417, i64 0
	%2423 = getelementptr inbounds i8, i8* %2418, i64 0
	%2424 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %2424, %Type_Info** %2421
	%2425 = getelementptr inbounds %..string, %..string* %2416, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$29b, i64 0, i32 0), i64 4}, %..string* %2425
	store i64 0, i64* %2422
	store i8 0, i8* %2423
	%2426 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2427 = bitcast %Type_Info* %2426 to %Type_Info*
	%2428 = getelementptr inbounds %Type_Info*, %Type_Info** %2415, i64 1
	%2429 = getelementptr inbounds i64, i64* %2417, i64 1
	%2430 = getelementptr inbounds i8, i8* %2418, i64 1
	%2431 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %2431, %Type_Info** %2428
	%2432 = getelementptr inbounds %..string, %..string* %2416, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$29c, i64 0, i32 0), i64 4}, %..string* %2432
	store i64 16, i64* %2429
	store i8 0, i8* %2430
	%2433 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 115
	%2434 = bitcast %Type_Info* %2433 to %Type_Info*
	%2435 = getelementptr inbounds %Type_Info*, %Type_Info** %2415, i64 2
	%2436 = getelementptr inbounds i64, i64* %2417, i64 2
	%2437 = getelementptr inbounds i8, i8* %2418, i64 2
	%2438 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 115
	store %Type_Info* %2438, %Type_Info** %2435
	%2439 = getelementptr inbounds %..string, %..string* %2416, i64 2
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$29d, i64 0, i32 0), i64 10}, %..string* %2439
	store i64 32, i64* %2436
	store i8 0, i8* %2437
	%2440 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 120
	%2441 = bitcast %Type_Info* %2440 to %Type_Info*
	%2442 = getelementptr inbounds %Type_Info*, %Type_Info** %2415, i64 3
	%2443 = getelementptr inbounds i64, i64* %2417, i64 3
	%2444 = getelementptr inbounds i8, i8* %2418, i64 3
	%2445 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 120
	store %Type_Info* %2445, %Type_Info** %2442
	%2446 = getelementptr inbounds %..string, %..string* %2416, i64 3
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$29e, i64 0, i32 0), i64 8}, %..string* %2446
	store i64 112, i64* %2443
	store i8 0, i8* %2444
	%2447 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 0
	%2448 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2447, i64 0, i32 0
	store %Type_Info** %2415, %Type_Info*** %2448
	%2449 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2447, i64 0, i32 1
	store i64 4, i64* %2449
	%2450 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 1
	%2451 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2450, i64 0, i32 0
	store %..string* %2416, %..string** %2451
	%2452 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2450, i64 0, i32 1
	store i64 4, i64* %2452
	%2453 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 2
	%2454 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2453, i64 0, i32 0
	store i64* %2417, i64** %2454
	%2455 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2453, i64 0, i32 1
	store i64 4, i64* %2455
	%2456 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2411, i64 0, i32 3
	%2457 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2456, i64 0, i32 0
	store i8* %2418, i8** %2457
	%2458 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2456, i64 0, i32 1
	store i64 4, i64* %2458
	%2459 = load %Type_Info_Struct, %Type_Info_Struct* %2411, align 8
	%2460 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2408 to %Type_Info_Struct*
	store %Type_Info_Struct %2459, %Type_Info_Struct* %2460
	%2461 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2408, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2461
	%2462 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 115
	%2463 = getelementptr inbounds %Type_Info, %Type_Info* %2462, i64 0, i32 2
	%2464 = getelementptr inbounds %Type_Info, %Type_Info* %2462, i64 0, i32 0
	store i64 80, i64* %2464
	%2465 = getelementptr inbounds %Type_Info, %Type_Info* %2462, i64 0, i32 1
	store i64 8, i64* %2465
	; Type_Info_Map
	%2466 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2463 to %Type_Info_Map*
	%2467 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2466, i64 0, i32 0
	%2468 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2466, i64 0, i32 1
	%2469 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2466, i64 0, i32 2
	%2470 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2471 = bitcast %Type_Info* %2470 to %Type_Info*
	store %Type_Info* %2471, %Type_Info** %2467
	%2472 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2473 = bitcast %Type_Info* %2472 to %Type_Info*
	store %Type_Info* %2473, %Type_Info** %2468
	%2474 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 116
	%2475 = bitcast %Type_Info* %2474 to %Type_Info*
	store %Type_Info* %2475, %Type_Info** %2469
	%2476 = load %Type_Info_Map, %Type_Info_Map* %2466, align 8
	%2477 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2463 to %Type_Info_Map*
	store %Type_Info_Map %2476, %Type_Info_Map* %2477
	%2478 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2463, i64 0, i32 2 ; UnionTagPtr
	store i8 18, i8* %2478
	%2479 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 116
	%2480 = getelementptr inbounds %Type_Info, %Type_Info* %2479, i64 0, i32 2
	%2481 = getelementptr inbounds %Type_Info, %Type_Info* %2479, i64 0, i32 0
	store i64 80, i64* %2481
	%2482 = getelementptr inbounds %Type_Info, %Type_Info* %2479, i64 0, i32 1
	store i64 8, i64* %2482
	; Type_Info_Struct
	%2483 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2480 to %Type_Info_Struct*
	%2484 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 4
	store i8 0, i8* %2484
	%2485 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 5
	store i8 0, i8* %2485
	%2486 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 6
	store i8 0, i8* %2486
	%2487 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 120
	%2488 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 87
	%2489 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 78
	%2490 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 78
	%2491 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	%2492 = bitcast %Type_Info* %2491 to %Type_Info*
	%2493 = getelementptr inbounds %Type_Info*, %Type_Info** %2487, i64 0
	%2494 = getelementptr inbounds i64, i64* %2489, i64 0
	%2495 = getelementptr inbounds i8, i8* %2490, i64 0
	%2496 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	store %Type_Info* %2496, %Type_Info** %2493
	%2497 = getelementptr inbounds %..string, %..string* %2488, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$29f, i64 0, i32 0), i64 6}, %..string* %2497
	store i64 0, i64* %2494
	store i8 0, i8* %2495
	%2498 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 117
	%2499 = bitcast %Type_Info* %2498 to %Type_Info*
	%2500 = getelementptr inbounds %Type_Info*, %Type_Info** %2487, i64 1
	%2501 = getelementptr inbounds i64, i64* %2489, i64 1
	%2502 = getelementptr inbounds i8, i8* %2490, i64 1
	%2503 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 117
	store %Type_Info* %2503, %Type_Info** %2500
	%2504 = getelementptr inbounds %..string, %..string* %2488, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2a0, i64 0, i32 0), i64 7}, %..string* %2504
	store i64 40, i64* %2501
	store i8 0, i8* %2502
	%2505 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 0
	%2506 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2505, i64 0, i32 0
	store %Type_Info** %2487, %Type_Info*** %2506
	%2507 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2505, i64 0, i32 1
	store i64 2, i64* %2507
	%2508 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 1
	%2509 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2508, i64 0, i32 0
	store %..string* %2488, %..string** %2509
	%2510 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2508, i64 0, i32 1
	store i64 2, i64* %2510
	%2511 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 2
	%2512 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2511, i64 0, i32 0
	store i64* %2489, i64** %2512
	%2513 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2511, i64 0, i32 1
	store i64 2, i64* %2513
	%2514 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2483, i64 0, i32 3
	%2515 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2514, i64 0, i32 0
	store i8* %2490, i8** %2515
	%2516 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2514, i64 0, i32 1
	store i64 2, i64* %2516
	%2517 = load %Type_Info_Struct, %Type_Info_Struct* %2483, align 8
	%2518 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2480 to %Type_Info_Struct*
	store %Type_Info_Struct %2517, %Type_Info_Struct* %2518
	%2519 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2480, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2519
	%2520 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 117
	%2521 = getelementptr inbounds %Type_Info, %Type_Info* %2520, i64 0, i32 2
	%2522 = getelementptr inbounds %Type_Info, %Type_Info* %2520, i64 0, i32 0
	store i64 40, i64* %2522
	%2523 = getelementptr inbounds %Type_Info, %Type_Info* %2520, i64 0, i32 1
	store i64 8, i64* %2523
	; Type_Info_Dynamic_Array
	%2524 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2521 to %Type_Info_Dynamic_Array*
	%2525 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 118
	%2526 = bitcast %Type_Info* %2525 to %Type_Info*
	%2527 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2524, i64 0, i32 0
	store %Type_Info* %2526, %Type_Info** %2527
	%2528 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2524, i64 0, i32 1
	store i64 48, i64* %2528
	%2529 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2524, align 8
	%2530 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2521 to %Type_Info_Dynamic_Array*
	store %Type_Info_Dynamic_Array %2529, %Type_Info_Dynamic_Array* %2530
	%2531 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2521, i64 0, i32 2 ; UnionTagPtr
	store i8 12, i8* %2531
	%2532 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 118
	%2533 = getelementptr inbounds %Type_Info, %Type_Info* %2532, i64 0, i32 2
	%2534 = getelementptr inbounds %Type_Info, %Type_Info* %2532, i64 0, i32 0
	store i64 48, i64* %2534
	%2535 = getelementptr inbounds %Type_Info, %Type_Info* %2532, i64 0, i32 1
	store i64 8, i64* %2535
	; Type_Info_Struct
	%2536 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2533 to %Type_Info_Struct*
	%2537 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 4
	store i8 0, i8* %2537
	%2538 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 5
	store i8 0, i8* %2538
	%2539 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 6
	store i8 0, i8* %2539
	%2540 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 122
	%2541 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 89
	%2542 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 80
	%2543 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 80
	%2544 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	%2545 = bitcast %Type_Info* %2544 to %Type_Info*
	%2546 = getelementptr inbounds %Type_Info*, %Type_Info** %2540, i64 0
	%2547 = getelementptr inbounds i64, i64* %2542, i64 0
	%2548 = getelementptr inbounds i8, i8* %2543, i64 0
	%2549 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	store %Type_Info* %2549, %Type_Info** %2546
	%2550 = getelementptr inbounds %..string, %..string* %2541, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2a1, i64 0, i32 0), i64 3}, %..string* %2550
	store i64 0, i64* %2547
	store i8 0, i8* %2548
	%2551 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2552 = bitcast %Type_Info* %2551 to %Type_Info*
	%2553 = getelementptr inbounds %Type_Info*, %Type_Info** %2540, i64 1
	%2554 = getelementptr inbounds i64, i64* %2542, i64 1
	%2555 = getelementptr inbounds i8, i8* %2543, i64 1
	%2556 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2556, %Type_Info** %2553
	%2557 = getelementptr inbounds %..string, %..string* %2541, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2a2, i64 0, i32 0), i64 4}, %..string* %2557
	store i64 24, i64* %2554
	store i8 0, i8* %2555
	%2558 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2559 = bitcast %Type_Info* %2558 to %Type_Info*
	%2560 = getelementptr inbounds %Type_Info*, %Type_Info** %2540, i64 2
	%2561 = getelementptr inbounds i64, i64* %2542, i64 2
	%2562 = getelementptr inbounds i8, i8* %2543, i64 2
	%2563 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %2563, %Type_Info** %2560
	%2564 = getelementptr inbounds %..string, %..string* %2541, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2a3, i64 0, i32 0), i64 5}, %..string* %2564
	store i64 32, i64* %2561
	store i8 0, i8* %2562
	%2565 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 0
	%2566 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2565, i64 0, i32 0
	store %Type_Info** %2540, %Type_Info*** %2566
	%2567 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2565, i64 0, i32 1
	store i64 3, i64* %2567
	%2568 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 1
	%2569 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2568, i64 0, i32 0
	store %..string* %2541, %..string** %2569
	%2570 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2568, i64 0, i32 1
	store i64 3, i64* %2570
	%2571 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 2
	%2572 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2571, i64 0, i32 0
	store i64* %2542, i64** %2572
	%2573 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2571, i64 0, i32 1
	store i64 3, i64* %2573
	%2574 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2536, i64 0, i32 3
	%2575 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2574, i64 0, i32 0
	store i8* %2543, i8** %2575
	%2576 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2574, i64 0, i32 1
	store i64 3, i64* %2576
	%2577 = load %Type_Info_Struct, %Type_Info_Struct* %2536, align 8
	%2578 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2533 to %Type_Info_Struct*
	store %Type_Info_Struct %2577, %Type_Info_Struct* %2578
	%2579 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2533, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2579
	%2580 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 119
	%2581 = getelementptr inbounds %Type_Info, %Type_Info* %2580, i64 0, i32 2
	%2582 = getelementptr inbounds %Type_Info, %Type_Info* %2580, i64 0, i32 0
	store i64 8, i64* %2582
	%2583 = getelementptr inbounds %Type_Info, %Type_Info* %2580, i64 0, i32 1
	store i64 8, i64* %2583
	; Type_Info_Pointer
	%2584 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2581 to %Type_Info_Pointer*
	%2585 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 118
	%2586 = bitcast %Type_Info* %2585 to %Type_Info*
	%2587 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2584, i64 0, i32 0
	store %Type_Info* %2586, %Type_Info** %2587
	%2588 = load %Type_Info_Pointer, %Type_Info_Pointer* %2584, align 8
	%2589 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2581 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2588, %Type_Info_Pointer* %2589
	%2590 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2581, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2590
	%2591 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 120
	%2592 = getelementptr inbounds %Type_Info, %Type_Info* %2591, i64 0, i32 2
	%2593 = getelementptr inbounds %Type_Info, %Type_Info* %2591, i64 0, i32 0
	store i64 40, i64* %2593
	%2594 = getelementptr inbounds %Type_Info, %Type_Info* %2591, i64 0, i32 1
	store i64 8, i64* %2594
	; Type_Info_Dynamic_Array
	%2595 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2592 to %Type_Info_Dynamic_Array*
	%2596 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2597 = bitcast %Type_Info* %2596 to %Type_Info*
	%2598 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2595, i64 0, i32 0
	store %Type_Info* %2597, %Type_Info** %2598
	%2599 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2595, i64 0, i32 1
	store i64 8, i64* %2599
	%2600 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2595, align 8
	%2601 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2592 to %Type_Info_Dynamic_Array*
	store %Type_Info_Dynamic_Array %2600, %Type_Info_Dynamic_Array* %2601
	%2602 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2592, i64 0, i32 2 ; UnionTagPtr
	store i8 12, i8* %2602
	%2603 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 121
	%2604 = getelementptr inbounds %Type_Info, %Type_Info* %2603, i64 0, i32 2
	%2605 = getelementptr inbounds %Type_Info, %Type_Info* %2603, i64 0, i32 0
	store i64 8, i64* %2605
	%2606 = getelementptr inbounds %Type_Info, %Type_Info* %2603, i64 0, i32 1
	store i64 8, i64* %2606
	; Type_Info_Pointer
	%2607 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2604 to %Type_Info_Pointer*
	%2608 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2609 = bitcast %Type_Info* %2608 to %Type_Info*
	%2610 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2607, i64 0, i32 0
	store %Type_Info* %2609, %Type_Info** %2610
	%2611 = load %Type_Info_Pointer, %Type_Info_Pointer* %2607, align 8
	%2612 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2604 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2611, %Type_Info_Pointer* %2612
	%2613 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2604, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2613
	%2614 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 122
	%2615 = getelementptr inbounds %Type_Info, %Type_Info* %2614, i64 0, i32 2
	%2616 = getelementptr inbounds %Type_Info, %Type_Info* %2614, i64 0, i32 0
	store i64 16, i64* %2616
	%2617 = getelementptr inbounds %Type_Info, %Type_Info* %2614, i64 0, i32 1
	store i64 8, i64* %2617
	; Type_Info_Named
	%2618 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2615 to %Type_Info_Named*
	%2619 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 123
	%2620 = bitcast %Type_Info* %2619 to %Type_Info*
	%2621 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2618, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2a4, i64 0, i32 0), i64 6}, %..string* %2621
	%2622 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2618, i64 0, i32 1
	store %Type_Info* %2620, %Type_Info** %2622
	%2623 = load %Type_Info_Named, %Type_Info_Named* %2618, align 8
	%2624 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2615 to %Type_Info_Named*
	store %Type_Info_Named %2623, %Type_Info_Named* %2624
	%2625 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2615, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2625
	%2626 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 123
	%2627 = getelementptr inbounds %Type_Info, %Type_Info* %2626, i64 0, i32 2
	%2628 = getelementptr inbounds %Type_Info, %Type_Info* %2626, i64 0, i32 0
	store i64 16, i64* %2628
	%2629 = getelementptr inbounds %Type_Info, %Type_Info* %2626, i64 0, i32 1
	store i64 8, i64* %2629
	; Type_Info_Struct
	%2630 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2627 to %Type_Info_Struct*
	%2631 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 4
	store i8 0, i8* %2631
	%2632 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 5
	store i8 0, i8* %2632
	%2633 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 6
	store i8 0, i8* %2633
	%2634 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 125
	%2635 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 92
	%2636 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 83
	%2637 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 83
	%2638 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 4
	%2639 = bitcast %Type_Info* %2638 to %Type_Info*
	%2640 = getelementptr inbounds %Type_Info*, %Type_Info** %2634, i64 0
	%2641 = getelementptr inbounds i64, i64* %2636, i64 0
	%2642 = getelementptr inbounds i8, i8* %2637, i64 0
	%2643 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 4
	store %Type_Info* %2643, %Type_Info** %2640
	%2644 = getelementptr inbounds %..string, %..string* %2635, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2a5, i64 0, i32 0), i64 4}, %..string* %2644
	store i64 0, i64* %2641
	store i8 0, i8* %2642
	%2645 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2646 = bitcast %Type_Info* %2645 to %Type_Info*
	%2647 = getelementptr inbounds %Type_Info*, %Type_Info** %2634, i64 1
	%2648 = getelementptr inbounds i64, i64* %2636, i64 1
	%2649 = getelementptr inbounds i8, i8* %2637, i64 1
	%2650 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2650, %Type_Info** %2647
	%2651 = getelementptr inbounds %..string, %..string* %2635, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2a6, i64 0, i32 0), i64 3}, %..string* %2651
	store i64 8, i64* %2648
	store i8 0, i8* %2649
	%2652 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 0
	%2653 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2652, i64 0, i32 0
	store %Type_Info** %2634, %Type_Info*** %2653
	%2654 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2652, i64 0, i32 1
	store i64 2, i64* %2654
	%2655 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 1
	%2656 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2655, i64 0, i32 0
	store %..string* %2635, %..string** %2656
	%2657 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2655, i64 0, i32 1
	store i64 2, i64* %2657
	%2658 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 2
	%2659 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2658, i64 0, i32 0
	store i64* %2636, i64** %2659
	%2660 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2658, i64 0, i32 1
	store i64 2, i64* %2660
	%2661 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2630, i64 0, i32 3
	%2662 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2661, i64 0, i32 0
	store i8* %2637, i8** %2662
	%2663 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2661, i64 0, i32 1
	store i64 2, i64* %2663
	%2664 = load %Type_Info_Struct, %Type_Info_Struct* %2630, align 8
	%2665 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2627 to %Type_Info_Struct*
	store %Type_Info_Struct %2664, %Type_Info_Struct* %2665
	%2666 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2627, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2666
	%2667 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 124
	%2668 = getelementptr inbounds %Type_Info, %Type_Info* %2667, i64 0, i32 2
	%2669 = getelementptr inbounds %Type_Info, %Type_Info* %2667, i64 0, i32 0
	store i64 16, i64* %2669
	%2670 = getelementptr inbounds %Type_Info, %Type_Info* %2667, i64 0, i32 1
	store i64 8, i64* %2670
	; Type_Info_Named
	%2671 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2668 to %Type_Info_Named*
	%2672 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 125
	%2673 = bitcast %Type_Info* %2672 to %Type_Info*
	%2674 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2671, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2a7, i64 0, i32 0), i64 5}, %..string* %2674
	%2675 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2671, i64 0, i32 1
	store %Type_Info* %2673, %Type_Info** %2675
	%2676 = load %Type_Info_Named, %Type_Info_Named* %2671, align 8
	%2677 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2668 to %Type_Info_Named*
	store %Type_Info_Named %2676, %Type_Info_Named* %2677
	%2678 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2668, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2678
	%2679 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 125
	%2680 = getelementptr inbounds %Type_Info, %Type_Info* %2679, i64 0, i32 2
	%2681 = getelementptr inbounds %Type_Info, %Type_Info* %2679, i64 0, i32 0
	store i64 16, i64* %2681
	%2682 = getelementptr inbounds %Type_Info, %Type_Info* %2679, i64 0, i32 1
	store i64 8, i64* %2682
	; Type_Info_Struct
	%2683 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2680 to %Type_Info_Struct*
	%2684 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 4
	store i8 0, i8* %2684
	%2685 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 5
	store i8 0, i8* %2685
	%2686 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 6
	store i8 0, i8* %2686
	%2687 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 127
	%2688 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 94
	%2689 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 85
	%2690 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 85
	%2691 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%2692 = bitcast %Type_Info* %2691 to %Type_Info*
	%2693 = getelementptr inbounds %Type_Info*, %Type_Info** %2687, i64 0
	%2694 = getelementptr inbounds i64, i64* %2689, i64 0
	%2695 = getelementptr inbounds i8, i8* %2690, i64 0
	%2696 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %2696, %Type_Info** %2693
	%2697 = getelementptr inbounds %..string, %..string* %2688, i64 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2a8, i64 0, i32 0), i64 4}, %..string* %2697
	store i64 0, i64* %2694
	store i8 0, i8* %2695
	%2698 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2699 = bitcast %Type_Info* %2698 to %Type_Info*
	%2700 = getelementptr inbounds %Type_Info*, %Type_Info** %2687, i64 1
	%2701 = getelementptr inbounds i64, i64* %2689, i64 1
	%2702 = getelementptr inbounds i8, i8* %2690, i64 1
	%2703 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2703, %Type_Info** %2700
	%2704 = getelementptr inbounds %..string, %..string* %2688, i64 1
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2a9, i64 0, i32 0), i64 3}, %..string* %2704
	store i64 8, i64* %2701
	store i8 0, i8* %2702
	%2705 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 0
	%2706 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2705, i64 0, i32 0
	store %Type_Info** %2687, %Type_Info*** %2706
	%2707 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2705, i64 0, i32 1
	store i64 2, i64* %2707
	%2708 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 1
	%2709 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2708, i64 0, i32 0
	store %..string* %2688, %..string** %2709
	%2710 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2708, i64 0, i32 1
	store i64 2, i64* %2710
	%2711 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 2
	%2712 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2711, i64 0, i32 0
	store i64* %2689, i64** %2712
	%2713 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2711, i64 0, i32 1
	store i64 2, i64* %2713
	%2714 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2683, i64 0, i32 3
	%2715 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2714, i64 0, i32 0
	store i8* %2690, i8** %2715
	%2716 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2714, i64 0, i32 1
	store i64 2, i64* %2716
	%2717 = load %Type_Info_Struct, %Type_Info_Struct* %2683, align 8
	%2718 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2680 to %Type_Info_Struct*
	store %Type_Info_Struct %2717, %Type_Info_Struct* %2718
	%2719 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2680, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2719
	%2720 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 126
	%2721 = getelementptr inbounds %Type_Info, %Type_Info* %2720, i64 0, i32 2
	%2722 = getelementptr inbounds %Type_Info, %Type_Info* %2720, i64 0, i32 0
	store i64 2, i64* %2722
	%2723 = getelementptr inbounds %Type_Info, %Type_Info* %2720, i64 0, i32 1
	store i64 1, i64* %2723
	; Type_Info_Named
	%2724 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2721 to %Type_Info_Named*
	%2725 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 127
	%2726 = bitcast %Type_Info* %2725 to %Type_Info*
	%2727 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2724, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$2aa, i64 0, i32 0), i64 12}, %..string* %2727
	%2728 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2724, i64 0, i32 1
	store %Type_Info* %2726, %Type_Info** %2728
	%2729 = load %Type_Info_Named, %Type_Info_Named* %2724, align 8
	%2730 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2721 to %Type_Info_Named*
	store %Type_Info_Named %2729, %Type_Info_Named* %2730
	%2731 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2721, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2731
	%2732 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 127
	%2733 = getelementptr inbounds %Type_Info, %Type_Info* %2732, i64 0, i32 2
	%2734 = getelementptr inbounds %Type_Info, %Type_Info* %2732, i64 0, i32 0
	store i64 2, i64* %2734
	%2735 = getelementptr inbounds %Type_Info, %Type_Info* %2732, i64 0, i32 1
	store i64 1, i64* %2735
	; Type_Info_Struct
	%2736 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2733 to %Type_Info_Struct*
	%2737 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 4
	store i8 0, i8* %2737
	%2738 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 5
	store i8 0, i8* %2738
	%2739 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 6
	store i8 0, i8* %2739
	%2740 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 129
	%2741 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 96
	%2742 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 87
	%2743 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 87
	%2744 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%2745 = bitcast %Type_Info* %2744 to %Type_Info*
	%2746 = getelementptr inbounds %Type_Info*, %Type_Info** %2740, i64 0
	%2747 = getelementptr inbounds i64, i64* %2742, i64 0
	%2748 = getelementptr inbounds i8, i8* %2743, i64 0
	%2749 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	store %Type_Info* %2749, %Type_Info** %2746
	%2750 = getelementptr inbounds %..string, %..string* %2741, i64 0
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$2ab, i64 0, i32 0), i64 2}, %..string* %2750
	store i64 0, i64* %2747
	store i8 0, i8* %2748
	%2751 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%2752 = bitcast %Type_Info* %2751 to %Type_Info*
	%2753 = getelementptr inbounds %Type_Info*, %Type_Info** %2740, i64 1
	%2754 = getelementptr inbounds i64, i64* %2742, i64 1
	%2755 = getelementptr inbounds i8, i8* %2743, i64 1
	%2756 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	store %Type_Info* %2756, %Type_Info** %2753
	%2757 = getelementptr inbounds %..string, %..string* %2741, i64 1
	store %..string {i8* getelementptr inbounds ([3 x i8], [3 x i8]* @__str$2ac, i64 0, i32 0), i64 2}, %..string* %2757
	store i64 1, i64* %2754
	store i8 0, i8* %2755
	%2758 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 0
	%2759 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2758, i64 0, i32 0
	store %Type_Info** %2740, %Type_Info*** %2759
	%2760 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2758, i64 0, i32 1
	store i64 2, i64* %2760
	%2761 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 1
	%2762 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2761, i64 0, i32 0
	store %..string* %2741, %..string** %2762
	%2763 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2761, i64 0, i32 1
	store i64 2, i64* %2763
	%2764 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 2
	%2765 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2764, i64 0, i32 0
	store i64* %2742, i64** %2765
	%2766 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2764, i64 0, i32 1
	store i64 2, i64* %2766
	%2767 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2736, i64 0, i32 3
	%2768 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2767, i64 0, i32 0
	store i8* %2743, i8** %2768
	%2769 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2767, i64 0, i32 1
	store i64 2, i64* %2769
	%2770 = load %Type_Info_Struct, %Type_Info_Struct* %2736, align 8
	%2771 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2733 to %Type_Info_Struct*
	store %Type_Info_Struct %2770, %Type_Info_Struct* %2771
	%2772 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2733, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2772
	%2773 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 128
	%2774 = getelementptr inbounds %Type_Info, %Type_Info* %2773, i64 0, i32 2
	%2775 = getelementptr inbounds %Type_Info, %Type_Info* %2773, i64 0, i32 0
	store i64 8, i64* %2775
	%2776 = getelementptr inbounds %Type_Info, %Type_Info* %2773, i64 0, i32 1
	store i64 8, i64* %2776
	; Type_Info_Named
	%2777 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2774 to %Type_Info_Named*
	%2778 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 42
	%2779 = bitcast %Type_Info* %2778 to %Type_Info*
	%2780 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2777, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2ad, i64 0, i32 0), i64 6}, %..string* %2780
	%2781 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2777, i64 0, i32 1
	store %Type_Info* %2779, %Type_Info** %2781
	%2782 = load %Type_Info_Named, %Type_Info_Named* %2777, align 8
	%2783 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2774 to %Type_Info_Named*
	store %Type_Info_Named %2782, %Type_Info_Named* %2783
	%2784 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2774, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2784
	%2785 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 129
	%2786 = getelementptr inbounds %Type_Info, %Type_Info* %2785, i64 0, i32 2
	%2787 = getelementptr inbounds %Type_Info, %Type_Info* %2785, i64 0, i32 0
	store i64 8, i64* %2787
	%2788 = getelementptr inbounds %Type_Info, %Type_Info* %2785, i64 0, i32 1
	store i64 8, i64* %2788
	; Type_Info_Named
	%2789 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2786 to %Type_Info_Named*
	%2790 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2791 = bitcast %Type_Info* %2790 to %Type_Info*
	%2792 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2789, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2ae, i64 0, i32 0), i64 5}, %..string* %2792
	%2793 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2789, i64 0, i32 1
	store %Type_Info* %2791, %Type_Info** %2793
	%2794 = load %Type_Info_Named, %Type_Info_Named* %2789, align 8
	%2795 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2786 to %Type_Info_Named*
	store %Type_Info_Named %2794, %Type_Info_Named* %2795
	%2796 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2786, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2796
	%2797 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 130
	%2798 = getelementptr inbounds %Type_Info, %Type_Info* %2797, i64 0, i32 2
	%2799 = getelementptr inbounds %Type_Info, %Type_Info* %2797, i64 0, i32 0
	store i64 192, i64* %2799
	%2800 = getelementptr inbounds %Type_Info, %Type_Info* %2797, i64 0, i32 1
	store i64 8, i64* %2800
	; Type_Info_Named
	%2801 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2798 to %Type_Info_Named*
	%2802 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 131
	%2803 = bitcast %Type_Info* %2802 to %Type_Info*
	%2804 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2801, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$2af, i64 0, i32 0), i64 8}, %..string* %2804
	%2805 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %2801, i64 0, i32 1
	store %Type_Info* %2803, %Type_Info** %2805
	%2806 = load %Type_Info_Named, %Type_Info_Named* %2801, align 8
	%2807 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2798 to %Type_Info_Named*
	store %Type_Info_Named %2806, %Type_Info_Named* %2807
	%2808 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2798, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %2808
	%2809 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 131
	%2810 = getelementptr inbounds %Type_Info, %Type_Info* %2809, i64 0, i32 2
	%2811 = getelementptr inbounds %Type_Info, %Type_Info* %2809, i64 0, i32 0
	store i64 192, i64* %2811
	%2812 = getelementptr inbounds %Type_Info, %Type_Info* %2809, i64 0, i32 1
	store i64 8, i64* %2812
	; Type_Info_Struct
	%2813 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2810 to %Type_Info_Struct*
	%2814 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 4
	store i8 0, i8* %2814
	%2815 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 5
	store i8 0, i8* %2815
	%2816 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 6
	store i8 0, i8* %2816
	%2817 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 131
	%2818 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 98
	%2819 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 89
	%2820 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 89
	%2821 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2822 = bitcast %Type_Info* %2821 to %Type_Info*
	%2823 = getelementptr inbounds %Type_Info*, %Type_Info** %2817, i64 0
	%2824 = getelementptr inbounds i64, i64* %2819, i64 0
	%2825 = getelementptr inbounds i8, i8* %2820, i64 0
	%2826 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %2826, %Type_Info** %2823
	%2827 = getelementptr inbounds %..string, %..string* %2818, i64 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2b0, i64 0, i32 0), i64 7}, %..string* %2827
	store i64 0, i64* %2824
	store i8 0, i8* %2825
	%2828 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 115
	%2829 = bitcast %Type_Info* %2828 to %Type_Info*
	%2830 = getelementptr inbounds %Type_Info*, %Type_Info** %2817, i64 1
	%2831 = getelementptr inbounds i64, i64* %2819, i64 1
	%2832 = getelementptr inbounds i8, i8* %2820, i64 1
	%2833 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 115
	store %Type_Info* %2833, %Type_Info** %2830
	%2834 = getelementptr inbounds %..string, %..string* %2818, i64 1
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$2b1, i64 0, i32 0), i64 15}, %..string* %2834
	store i64 16, i64* %2831
	store i8 0, i8* %2832
	%2835 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 132
	%2836 = bitcast %Type_Info* %2835 to %Type_Info*
	%2837 = getelementptr inbounds %Type_Info*, %Type_Info** %2817, i64 2
	%2838 = getelementptr inbounds i64, i64* %2819, i64 2
	%2839 = getelementptr inbounds i8, i8* %2820, i64 2
	%2840 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 132
	store %Type_Info* %2840, %Type_Info** %2837
	%2841 = getelementptr inbounds %..string, %..string* %2818, i64 2
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$2b2, i64 0, i32 0), i64 17}, %..string* %2841
	store i64 96, i64* %2838
	store i8 0, i8* %2839
	%2842 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2843 = bitcast %Type_Info* %2842 to %Type_Info*
	%2844 = getelementptr inbounds %Type_Info*, %Type_Info** %2817, i64 3
	%2845 = getelementptr inbounds i64, i64* %2819, i64 3
	%2846 = getelementptr inbounds i8, i8* %2820, i64 3
	%2847 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2847, %Type_Info** %2844
	%2848 = getelementptr inbounds %..string, %..string* %2818, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2b3, i64 0, i32 0), i64 4}, %..string* %2848
	store i64 176, i64* %2845
	store i8 0, i8* %2846
	%2849 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2850 = bitcast %Type_Info* %2849 to %Type_Info*
	%2851 = getelementptr inbounds %Type_Info*, %Type_Info** %2817, i64 4
	%2852 = getelementptr inbounds i64, i64* %2819, i64 4
	%2853 = getelementptr inbounds i8, i8* %2820, i64 4
	%2854 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2854, %Type_Info** %2851
	%2855 = getelementptr inbounds %..string, %..string* %2818, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2b4, i64 0, i32 0), i64 4}, %..string* %2855
	store i64 184, i64* %2852
	store i8 0, i8* %2853
	%2856 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 0
	%2857 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2856, i64 0, i32 0
	store %Type_Info** %2817, %Type_Info*** %2857
	%2858 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2856, i64 0, i32 1
	store i64 5, i64* %2858
	%2859 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 1
	%2860 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2859, i64 0, i32 0
	store %..string* %2818, %..string** %2860
	%2861 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2859, i64 0, i32 1
	store i64 5, i64* %2861
	%2862 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 2
	%2863 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2862, i64 0, i32 0
	store i64* %2819, i64** %2863
	%2864 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2862, i64 0, i32 1
	store i64 5, i64* %2864
	%2865 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2813, i64 0, i32 3
	%2866 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2865, i64 0, i32 0
	store i8* %2820, i8** %2866
	%2867 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2865, i64 0, i32 1
	store i64 5, i64* %2867
	%2868 = load %Type_Info_Struct, %Type_Info_Struct* %2813, align 8
	%2869 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2810 to %Type_Info_Struct*
	store %Type_Info_Struct %2868, %Type_Info_Struct* %2869
	%2870 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2810, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2870
	%2871 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 132
	%2872 = getelementptr inbounds %Type_Info, %Type_Info* %2871, i64 0, i32 2
	%2873 = getelementptr inbounds %Type_Info, %Type_Info* %2871, i64 0, i32 0
	store i64 80, i64* %2873
	%2874 = getelementptr inbounds %Type_Info, %Type_Info* %2871, i64 0, i32 1
	store i64 8, i64* %2874
	; Type_Info_Map
	%2875 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2872 to %Type_Info_Map*
	%2876 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2875, i64 0, i32 0
	%2877 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2875, i64 0, i32 1
	%2878 = getelementptr inbounds %Type_Info_Map, %Type_Info_Map* %2875, i64 0, i32 2
	%2879 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%2880 = bitcast %Type_Info* %2879 to %Type_Info*
	store %Type_Info* %2880, %Type_Info** %2876
	%2881 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2882 = bitcast %Type_Info* %2881 to %Type_Info*
	store %Type_Info* %2882, %Type_Info** %2877
	%2883 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 133
	%2884 = bitcast %Type_Info* %2883 to %Type_Info*
	store %Type_Info* %2884, %Type_Info** %2878
	%2885 = load %Type_Info_Map, %Type_Info_Map* %2875, align 8
	%2886 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2872 to %Type_Info_Map*
	store %Type_Info_Map %2885, %Type_Info_Map* %2886
	%2887 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2872, i64 0, i32 2 ; UnionTagPtr
	store i8 18, i8* %2887
	%2888 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 133
	%2889 = getelementptr inbounds %Type_Info, %Type_Info* %2888, i64 0, i32 2
	%2890 = getelementptr inbounds %Type_Info, %Type_Info* %2888, i64 0, i32 0
	store i64 80, i64* %2890
	%2891 = getelementptr inbounds %Type_Info, %Type_Info* %2888, i64 0, i32 1
	store i64 8, i64* %2891
	; Type_Info_Struct
	%2892 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2889 to %Type_Info_Struct*
	%2893 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 4
	store i8 0, i8* %2893
	%2894 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 5
	store i8 0, i8* %2894
	%2895 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 6
	store i8 0, i8* %2895
	%2896 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 136
	%2897 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 103
	%2898 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 94
	%2899 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 94
	%2900 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	%2901 = bitcast %Type_Info* %2900 to %Type_Info*
	%2902 = getelementptr inbounds %Type_Info*, %Type_Info** %2896, i64 0
	%2903 = getelementptr inbounds i64, i64* %2898, i64 0
	%2904 = getelementptr inbounds i8, i8* %2899, i64 0
	%2905 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 106
	store %Type_Info* %2905, %Type_Info** %2902
	%2906 = getelementptr inbounds %..string, %..string* %2897, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2b5, i64 0, i32 0), i64 6}, %..string* %2906
	store i64 0, i64* %2903
	store i8 0, i8* %2904
	%2907 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 134
	%2908 = bitcast %Type_Info* %2907 to %Type_Info*
	%2909 = getelementptr inbounds %Type_Info*, %Type_Info** %2896, i64 1
	%2910 = getelementptr inbounds i64, i64* %2898, i64 1
	%2911 = getelementptr inbounds i8, i8* %2899, i64 1
	%2912 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 134
	store %Type_Info* %2912, %Type_Info** %2909
	%2913 = getelementptr inbounds %..string, %..string* %2897, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2b6, i64 0, i32 0), i64 7}, %..string* %2913
	store i64 40, i64* %2910
	store i8 0, i8* %2911
	%2914 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 0
	%2915 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2914, i64 0, i32 0
	store %Type_Info** %2896, %Type_Info*** %2915
	%2916 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2914, i64 0, i32 1
	store i64 2, i64* %2916
	%2917 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 1
	%2918 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2917, i64 0, i32 0
	store %..string* %2897, %..string** %2918
	%2919 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2917, i64 0, i32 1
	store i64 2, i64* %2919
	%2920 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 2
	%2921 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2920, i64 0, i32 0
	store i64* %2898, i64** %2921
	%2922 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2920, i64 0, i32 1
	store i64 2, i64* %2922
	%2923 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2892, i64 0, i32 3
	%2924 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2923, i64 0, i32 0
	store i8* %2899, i8** %2924
	%2925 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2923, i64 0, i32 1
	store i64 2, i64* %2925
	%2926 = load %Type_Info_Struct, %Type_Info_Struct* %2892, align 8
	%2927 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2889 to %Type_Info_Struct*
	store %Type_Info_Struct %2926, %Type_Info_Struct* %2927
	%2928 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2889, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2928
	%2929 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 134
	%2930 = getelementptr inbounds %Type_Info, %Type_Info* %2929, i64 0, i32 2
	%2931 = getelementptr inbounds %Type_Info, %Type_Info* %2929, i64 0, i32 0
	store i64 40, i64* %2931
	%2932 = getelementptr inbounds %Type_Info, %Type_Info* %2929, i64 0, i32 1
	store i64 8, i64* %2932
	; Type_Info_Dynamic_Array
	%2933 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2930 to %Type_Info_Dynamic_Array*
	%2934 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 135
	%2935 = bitcast %Type_Info* %2934 to %Type_Info*
	%2936 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2933, i64 0, i32 0
	store %Type_Info* %2935, %Type_Info** %2936
	%2937 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2933, i64 0, i32 1
	store i64 40, i64* %2937
	%2938 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %2933, align 8
	%2939 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2930 to %Type_Info_Dynamic_Array*
	store %Type_Info_Dynamic_Array %2938, %Type_Info_Dynamic_Array* %2939
	%2940 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2930, i64 0, i32 2 ; UnionTagPtr
	store i8 12, i8* %2940
	%2941 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 135
	%2942 = getelementptr inbounds %Type_Info, %Type_Info* %2941, i64 0, i32 2
	%2943 = getelementptr inbounds %Type_Info, %Type_Info* %2941, i64 0, i32 0
	store i64 40, i64* %2943
	%2944 = getelementptr inbounds %Type_Info, %Type_Info* %2941, i64 0, i32 1
	store i64 8, i64* %2944
	; Type_Info_Struct
	%2945 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2942 to %Type_Info_Struct*
	%2946 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 4
	store i8 0, i8* %2946
	%2947 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 5
	store i8 0, i8* %2947
	%2948 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 6
	store i8 0, i8* %2948
	%2949 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 138
	%2950 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 105
	%2951 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 96
	%2952 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 96
	%2953 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	%2954 = bitcast %Type_Info* %2953 to %Type_Info*
	%2955 = getelementptr inbounds %Type_Info*, %Type_Info** %2949, i64 0
	%2956 = getelementptr inbounds i64, i64* %2951, i64 0
	%2957 = getelementptr inbounds i8, i8* %2952, i64 0
	%2958 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 95
	store %Type_Info* %2958, %Type_Info** %2955
	%2959 = getelementptr inbounds %..string, %..string* %2950, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2b7, i64 0, i32 0), i64 3}, %..string* %2959
	store i64 0, i64* %2956
	store i8 0, i8* %2957
	%2960 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%2961 = bitcast %Type_Info* %2960 to %Type_Info*
	%2962 = getelementptr inbounds %Type_Info*, %Type_Info** %2949, i64 1
	%2963 = getelementptr inbounds i64, i64* %2951, i64 1
	%2964 = getelementptr inbounds i8, i8* %2952, i64 1
	%2965 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %2965, %Type_Info** %2962
	%2966 = getelementptr inbounds %..string, %..string* %2950, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2b8, i64 0, i32 0), i64 4}, %..string* %2966
	store i64 24, i64* %2963
	store i8 0, i8* %2964
	%2967 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	%2968 = bitcast %Type_Info* %2967 to %Type_Info*
	%2969 = getelementptr inbounds %Type_Info*, %Type_Info** %2949, i64 2
	%2970 = getelementptr inbounds i64, i64* %2951, i64 2
	%2971 = getelementptr inbounds i8, i8* %2952, i64 2
	%2972 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 112
	store %Type_Info* %2972, %Type_Info** %2969
	%2973 = getelementptr inbounds %..string, %..string* %2950, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2b9, i64 0, i32 0), i64 5}, %..string* %2973
	store i64 32, i64* %2970
	store i8 0, i8* %2971
	%2974 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 0
	%2975 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2974, i64 0, i32 0
	store %Type_Info** %2949, %Type_Info*** %2975
	%2976 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %2974, i64 0, i32 1
	store i64 3, i64* %2976
	%2977 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 1
	%2978 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2977, i64 0, i32 0
	store %..string* %2950, %..string** %2978
	%2979 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %2977, i64 0, i32 1
	store i64 3, i64* %2979
	%2980 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 2
	%2981 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2980, i64 0, i32 0
	store i64* %2951, i64** %2981
	%2982 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %2980, i64 0, i32 1
	store i64 3, i64* %2982
	%2983 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %2945, i64 0, i32 3
	%2984 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2983, i64 0, i32 0
	store i8* %2952, i8** %2984
	%2985 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %2983, i64 0, i32 1
	store i64 3, i64* %2985
	%2986 = load %Type_Info_Struct, %Type_Info_Struct* %2945, align 8
	%2987 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2942 to %Type_Info_Struct*
	store %Type_Info_Struct %2986, %Type_Info_Struct* %2987
	%2988 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2942, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %2988
	%2989 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 136
	%2990 = getelementptr inbounds %Type_Info, %Type_Info* %2989, i64 0, i32 2
	%2991 = getelementptr inbounds %Type_Info, %Type_Info* %2989, i64 0, i32 0
	store i64 8, i64* %2991
	%2992 = getelementptr inbounds %Type_Info, %Type_Info* %2989, i64 0, i32 1
	store i64 8, i64* %2992
	; Type_Info_Pointer
	%2993 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2990 to %Type_Info_Pointer*
	%2994 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 135
	%2995 = bitcast %Type_Info* %2994 to %Type_Info*
	%2996 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %2993, i64 0, i32 0
	store %Type_Info* %2995, %Type_Info** %2996
	%2997 = load %Type_Info_Pointer, %Type_Info_Pointer* %2993, align 8
	%2998 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %2990 to %Type_Info_Pointer*
	store %Type_Info_Pointer %2997, %Type_Info_Pointer* %2998
	%2999 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %2990, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %2999
	%3000 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 137
	%3001 = getelementptr inbounds %Type_Info, %Type_Info* %3000, i64 0, i32 2
	%3002 = getelementptr inbounds %Type_Info, %Type_Info* %3000, i64 0, i32 0
	store i64 40, i64* %3002
	%3003 = getelementptr inbounds %Type_Info, %Type_Info* %3000, i64 0, i32 1
	store i64 8, i64* %3003
	; Type_Info_Named
	%3004 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3001 to %Type_Info_Named*
	%3005 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 138
	%3006 = bitcast %Type_Info* %3005 to %Type_Info*
	%3007 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3004, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__str$2ba, i64 0, i32 0), i64 10}, %..string* %3007
	%3008 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3004, i64 0, i32 1
	store %Type_Info* %3006, %Type_Info** %3008
	%3009 = load %Type_Info_Named, %Type_Info_Named* %3004, align 8
	%3010 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3001 to %Type_Info_Named*
	store %Type_Info_Named %3009, %Type_Info_Named* %3010
	%3011 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3001, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3011
	%3012 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 138
	%3013 = getelementptr inbounds %Type_Info, %Type_Info* %3012, i64 0, i32 2
	%3014 = getelementptr inbounds %Type_Info, %Type_Info* %3012, i64 0, i32 0
	store i64 40, i64* %3014
	%3015 = getelementptr inbounds %Type_Info, %Type_Info* %3012, i64 0, i32 1
	store i64 8, i64* %3015
	; Type_Info_Struct
	%3016 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3013 to %Type_Info_Struct*
	%3017 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 4
	store i8 0, i8* %3017
	%3018 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 5
	store i8 0, i8* %3018
	%3019 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 6
	store i8 0, i8* %3019
	%3020 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 141
	%3021 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 108
	%3022 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 99
	%3023 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 99
	%3024 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 139
	%3025 = bitcast %Type_Info* %3024 to %Type_Info*
	%3026 = getelementptr inbounds %Type_Info*, %Type_Info** %3020, i64 0
	%3027 = getelementptr inbounds i64, i64* %3022, i64 0
	%3028 = getelementptr inbounds i8, i8* %3023, i64 0
	%3029 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 139
	store %Type_Info* %3029, %Type_Info** %3026
	%3030 = getelementptr inbounds %..string, %..string* %3021, i64 0
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2bb, i64 0, i32 0), i64 3}, %..string* %3030
	store i64 0, i64* %3027
	store i8 0, i8* %3028
	%3031 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3032 = bitcast %Type_Info* %3031 to %Type_Info*
	%3033 = getelementptr inbounds %Type_Info*, %Type_Info** %3020, i64 1
	%3034 = getelementptr inbounds i64, i64* %3022, i64 1
	%3035 = getelementptr inbounds i8, i8* %3023, i64 1
	%3036 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3036, %Type_Info** %3033
	%3037 = getelementptr inbounds %..string, %..string* %3021, i64 1
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$2bc, i64 0, i32 0), i64 14}, %..string* %3037
	store i64 8, i64* %3034
	store i8 0, i8* %3035
	%3038 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3039 = bitcast %Type_Info* %3038 to %Type_Info*
	%3040 = getelementptr inbounds %Type_Info*, %Type_Info** %3020, i64 2
	%3041 = getelementptr inbounds i64, i64* %3022, i64 2
	%3042 = getelementptr inbounds i8, i8* %3023, i64 2
	%3043 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3043, %Type_Info** %3040
	%3044 = getelementptr inbounds %..string, %..string* %3021, i64 2
	store %..string {i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__str$2bd, i64 0, i32 0), i64 15}, %..string* %3044
	store i64 9, i64* %3041
	store i8 0, i8* %3042
	%3045 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3046 = bitcast %Type_Info* %3045 to %Type_Info*
	%3047 = getelementptr inbounds %Type_Info*, %Type_Info** %3020, i64 3
	%3048 = getelementptr inbounds i64, i64* %3022, i64 3
	%3049 = getelementptr inbounds i8, i8* %3023, i64 3
	%3050 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3050, %Type_Info** %3047
	%3051 = getelementptr inbounds %..string, %..string* %3021, i64 3
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2be, i64 0, i32 0), i64 6}, %..string* %3051
	store i64 16, i64* %3048
	store i8 0, i8* %3049
	%3052 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	%3053 = bitcast %Type_Info* %3052 to %Type_Info*
	%3054 = getelementptr inbounds %Type_Info*, %Type_Info** %3020, i64 4
	%3055 = getelementptr inbounds i64, i64* %3022, i64 4
	%3056 = getelementptr inbounds i8, i8* %3023, i64 4
	%3057 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 3
	store %Type_Info* %3057, %Type_Info** %3054
	%3058 = getelementptr inbounds %..string, %..string* %3021, i64 4
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$2bf, i64 0, i32 0), i64 13}, %..string* %3058
	store i64 24, i64* %3055
	store i8 0, i8* %3056
	%3059 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 0
	%3060 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3059, i64 0, i32 0
	store %Type_Info** %3020, %Type_Info*** %3060
	%3061 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3059, i64 0, i32 1
	store i64 5, i64* %3061
	%3062 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 1
	%3063 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3062, i64 0, i32 0
	store %..string* %3021, %..string** %3063
	%3064 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3062, i64 0, i32 1
	store i64 5, i64* %3064
	%3065 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 2
	%3066 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3065, i64 0, i32 0
	store i64* %3022, i64** %3066
	%3067 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3065, i64 0, i32 1
	store i64 5, i64* %3067
	%3068 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3016, i64 0, i32 3
	%3069 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3068, i64 0, i32 0
	store i8* %3023, i8** %3069
	%3070 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3068, i64 0, i32 1
	store i64 5, i64* %3070
	%3071 = load %Type_Info_Struct, %Type_Info_Struct* %3016, align 8
	%3072 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3013 to %Type_Info_Struct*
	store %Type_Info_Struct %3071, %Type_Info_Struct* %3072
	%3073 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3013, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3073
	%3074 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 139
	%3075 = getelementptr inbounds %Type_Info, %Type_Info* %3074, i64 0, i32 2
	%3076 = getelementptr inbounds %Type_Info, %Type_Info* %3074, i64 0, i32 0
	store i64 8, i64* %3076
	%3077 = getelementptr inbounds %Type_Info, %Type_Info* %3074, i64 0, i32 1
	store i64 8, i64* %3077
	; Type_Info_Pointer
	%3078 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3075 to %Type_Info_Pointer*
	%3079 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 140
	%3080 = bitcast %Type_Info* %3079 to %Type_Info*
	%3081 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %3078, i64 0, i32 0
	store %Type_Info* %3080, %Type_Info** %3081
	%3082 = load %Type_Info_Pointer, %Type_Info_Pointer* %3078, align 8
	%3083 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3075 to %Type_Info_Pointer*
	store %Type_Info_Pointer %3082, %Type_Info_Pointer* %3083
	%3084 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3075, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %3084
	%3085 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 140
	%3086 = getelementptr inbounds %Type_Info, %Type_Info* %3085, i64 0, i32 2
	%3087 = getelementptr inbounds %Type_Info, %Type_Info* %3085, i64 0, i32 0
	store i64 40, i64* %3087
	%3088 = getelementptr inbounds %Type_Info, %Type_Info* %3085, i64 0, i32 1
	store i64 8, i64* %3088
	; Type_Info_Dynamic_Array
	%3089 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3086 to %Type_Info_Dynamic_Array*
	%3090 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%3091 = bitcast %Type_Info* %3090 to %Type_Info*
	%3092 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %3089, i64 0, i32 0
	store %Type_Info* %3091, %Type_Info** %3092
	%3093 = getelementptr inbounds %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %3089, i64 0, i32 1
	store i64 1, i64* %3093
	%3094 = load %Type_Info_Dynamic_Array, %Type_Info_Dynamic_Array* %3089, align 8
	%3095 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3086 to %Type_Info_Dynamic_Array*
	store %Type_Info_Dynamic_Array %3094, %Type_Info_Dynamic_Array* %3095
	%3096 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3086, i64 0, i32 2 ; UnionTagPtr
	store i8 12, i8* %3096
	%3097 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 141
	%3098 = getelementptr inbounds %Type_Info, %Type_Info* %3097, i64 0, i32 2
	%3099 = getelementptr inbounds %Type_Info, %Type_Info* %3097, i64 0, i32 0
	store i64 8, i64* %3099
	%3100 = getelementptr inbounds %Type_Info, %Type_Info* %3097, i64 0, i32 1
	store i64 8, i64* %3100
	; Type_Info_Named
	%3101 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3098 to %Type_Info_Named*
	%3102 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%3103 = bitcast %Type_Info* %3102 to %Type_Info*
	%3104 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3101, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2c0, i64 0, i32 0), i64 6}, %..string* %3104
	%3105 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3101, i64 0, i32 1
	store %Type_Info* %3103, %Type_Info** %3105
	%3106 = load %Type_Info_Named, %Type_Info_Named* %3101, align 8
	%3107 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3098 to %Type_Info_Named*
	store %Type_Info_Named %3106, %Type_Info_Named* %3107
	%3108 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3098, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3108
	%3109 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 142
	%3110 = getelementptr inbounds %Type_Info, %Type_Info* %3109, i64 0, i32 2
	%3111 = getelementptr inbounds %Type_Info, %Type_Info* %3109, i64 0, i32 0
	store i64 4, i64* %3111
	%3112 = getelementptr inbounds %Type_Info, %Type_Info* %3109, i64 0, i32 1
	store i64 4, i64* %3112
	; Type_Info_Named
	%3113 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3110 to %Type_Info_Named*
	%3114 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 79
	%3115 = bitcast %Type_Info* %3114 to %Type_Info*
	%3116 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3113, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2c1, i64 0, i32 0), i64 4}, %..string* %3116
	%3117 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3113, i64 0, i32 1
	store %Type_Info* %3115, %Type_Info** %3117
	%3118 = load %Type_Info_Named, %Type_Info_Named* %3113, align 8
	%3119 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3110 to %Type_Info_Named*
	store %Type_Info_Named %3118, %Type_Info_Named* %3119
	%3120 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3110, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3120
	%3121 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 143
	%3122 = getelementptr inbounds %Type_Info, %Type_Info* %3121, i64 0, i32 2
	%3123 = getelementptr inbounds %Type_Info, %Type_Info* %3121, i64 0, i32 0
	store i64 24, i64* %3123
	%3124 = getelementptr inbounds %Type_Info, %Type_Info* %3121, i64 0, i32 1
	store i64 8, i64* %3124
	; Type_Info_Named
	%3125 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3122 to %Type_Info_Named*
	%3126 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 144
	%3127 = bitcast %Type_Info* %3126 to %Type_Info*
	%3128 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3125, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__str$2c2, i64 0, i32 0), i64 19}, %..string* %3128
	%3129 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3125, i64 0, i32 1
	store %Type_Info* %3127, %Type_Info** %3129
	%3130 = load %Type_Info_Named, %Type_Info_Named* %3125, align 8
	%3131 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3122 to %Type_Info_Named*
	store %Type_Info_Named %3130, %Type_Info_Named* %3131
	%3132 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3122, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3132
	%3133 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 144
	%3134 = getelementptr inbounds %Type_Info, %Type_Info* %3133, i64 0, i32 2
	%3135 = getelementptr inbounds %Type_Info, %Type_Info* %3133, i64 0, i32 0
	store i64 24, i64* %3135
	%3136 = getelementptr inbounds %Type_Info, %Type_Info* %3133, i64 0, i32 1
	store i64 8, i64* %3136
	; Type_Info_Struct
	%3137 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3134 to %Type_Info_Struct*
	%3138 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 4
	store i8 0, i8* %3138
	%3139 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 5
	store i8 0, i8* %3139
	%3140 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 6
	store i8 0, i8* %3140
	%3141 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 146
	%3142 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 113
	%3143 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 104
	%3144 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 104
	%3145 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	%3146 = bitcast %Type_Info* %3145 to %Type_Info*
	%3147 = getelementptr inbounds %Type_Info*, %Type_Info** %3141, i64 0
	%3148 = getelementptr inbounds i64, i64* %3143, i64 0
	%3149 = getelementptr inbounds i8, i8* %3144, i64 0
	%3150 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 59
	store %Type_Info* %3150, %Type_Info** %3147
	%3151 = getelementptr inbounds %..string, %..string* %3142, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2c3, i64 0, i32 0), i64 6}, %..string* %3151
	store i64 0, i64* %3148
	store i8 0, i8* %3149
	%3152 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	%3153 = bitcast %Type_Info* %3152 to %Type_Info*
	%3154 = getelementptr inbounds %Type_Info*, %Type_Info** %3141, i64 1
	%3155 = getelementptr inbounds i64, i64* %3143, i64 1
	%3156 = getelementptr inbounds i8, i8* %3144, i64 1
	%3157 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 74
	store %Type_Info* %3157, %Type_Info** %3154
	%3158 = getelementptr inbounds %..string, %..string* %3142, i64 1
	store %..string {i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__str$2c4, i64 0, i32 0), i64 19}, %..string* %3158
	store i64 8, i64* %3155
	store i8 0, i8* %3156
	%3159 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 142
	%3160 = bitcast %Type_Info* %3159 to %Type_Info*
	%3161 = getelementptr inbounds %Type_Info*, %Type_Info** %3141, i64 2
	%3162 = getelementptr inbounds i64, i64* %3143, i64 2
	%3163 = getelementptr inbounds i8, i8* %3144, i64 2
	%3164 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 142
	store %Type_Info* %3164, %Type_Info** %3161
	%3165 = getelementptr inbounds %..string, %..string* %3142, i64 2
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$2c5, i64 0, i32 0), i64 14}, %..string* %3165
	store i64 16, i64* %3162
	store i8 0, i8* %3163
	%3166 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 0
	%3167 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3166, i64 0, i32 0
	store %Type_Info** %3141, %Type_Info*** %3167
	%3168 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3166, i64 0, i32 1
	store i64 3, i64* %3168
	%3169 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 1
	%3170 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3169, i64 0, i32 0
	store %..string* %3142, %..string** %3170
	%3171 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3169, i64 0, i32 1
	store i64 3, i64* %3171
	%3172 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 2
	%3173 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3172, i64 0, i32 0
	store i64* %3143, i64** %3173
	%3174 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3172, i64 0, i32 1
	store i64 3, i64* %3174
	%3175 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3137, i64 0, i32 3
	%3176 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3175, i64 0, i32 0
	store i8* %3144, i8** %3176
	%3177 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3175, i64 0, i32 1
	store i64 3, i64* %3177
	%3178 = load %Type_Info_Struct, %Type_Info_Struct* %3137, align 8
	%3179 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3134 to %Type_Info_Struct*
	store %Type_Info_Struct %3178, %Type_Info_Struct* %3179
	%3180 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3134, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3180
	%3181 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 145
	%3182 = getelementptr inbounds %Type_Info, %Type_Info* %3181, i64 0, i32 2
	%3183 = getelementptr inbounds %Type_Info, %Type_Info* %3181, i64 0, i32 0
	store i64 40, i64* %3183
	%3184 = getelementptr inbounds %Type_Info, %Type_Info* %3181, i64 0, i32 1
	store i64 8, i64* %3184
	; Type_Info_Named
	%3185 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3182 to %Type_Info_Named*
	%3186 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 140
	%3187 = bitcast %Type_Info* %3186 to %Type_Info*
	%3188 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3185, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$2c6, i64 0, i32 0), i64 13}, %..string* %3188
	%3189 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3185, i64 0, i32 1
	store %Type_Info* %3187, %Type_Info** %3189
	%3190 = load %Type_Info_Named, %Type_Info_Named* %3185, align 8
	%3191 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3182 to %Type_Info_Named*
	store %Type_Info_Named %3190, %Type_Info_Named* %3191
	%3192 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3182, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3192
	%3193 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 146
	%3194 = getelementptr inbounds %Type_Info, %Type_Info* %3193, i64 0, i32 2
	%3195 = getelementptr inbounds %Type_Info, %Type_Info* %3193, i64 0, i32 0
	store i64 64, i64* %3195
	%3196 = getelementptr inbounds %Type_Info, %Type_Info* %3193, i64 0, i32 1
	store i64 8, i64* %3196
	; Type_Info_Named
	%3197 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3194 to %Type_Info_Named*
	%3198 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 147
	%3199 = bitcast %Type_Info* %3198 to %Type_Info*
	%3200 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3197, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$2c7, i64 0, i32 0), i64 8}, %..string* %3200
	%3201 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3197, i64 0, i32 1
	store %Type_Info* %3199, %Type_Info** %3201
	%3202 = load %Type_Info_Named, %Type_Info_Named* %3197, align 8
	%3203 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3194 to %Type_Info_Named*
	store %Type_Info_Named %3202, %Type_Info_Named* %3203
	%3204 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3194, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3204
	%3205 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 147
	%3206 = getelementptr inbounds %Type_Info, %Type_Info* %3205, i64 0, i32 2
	%3207 = getelementptr inbounds %Type_Info, %Type_Info* %3205, i64 0, i32 0
	store i64 64, i64* %3207
	%3208 = getelementptr inbounds %Type_Info, %Type_Info* %3205, i64 0, i32 1
	store i64 8, i64* %3208
	; Type_Info_Struct
	%3209 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3206 to %Type_Info_Struct*
	%3210 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 4
	store i8 0, i8* %3210
	%3211 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 5
	store i8 0, i8* %3211
	%3212 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 6
	store i8 0, i8* %3212
	%3213 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 149
	%3214 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 116
	%3215 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 107
	%3216 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 107
	%3217 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3218 = bitcast %Type_Info* %3217 to %Type_Info*
	%3219 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 0
	%3220 = getelementptr inbounds i64, i64* %3215, i64 0
	%3221 = getelementptr inbounds i8, i8* %3216, i64 0
	%3222 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3222, %Type_Info** %3219
	%3223 = getelementptr inbounds %..string, %..string* %3214, i64 0
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2c8, i64 0, i32 0), i64 5}, %..string* %3223
	store i64 0, i64* %3220
	store i8 0, i8* %3221
	%3224 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3225 = bitcast %Type_Info* %3224 to %Type_Info*
	%3226 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 1
	%3227 = getelementptr inbounds i64, i64* %3215, i64 1
	%3228 = getelementptr inbounds i8, i8* %3216, i64 1
	%3229 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3229, %Type_Info** %3226
	%3230 = getelementptr inbounds %..string, %..string* %3214, i64 1
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2c9, i64 0, i32 0), i64 4}, %..string* %3230
	store i64 1, i64* %3227
	store i8 0, i8* %3228
	%3231 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3232 = bitcast %Type_Info* %3231 to %Type_Info*
	%3233 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 2
	%3234 = getelementptr inbounds i64, i64* %3215, i64 2
	%3235 = getelementptr inbounds i8, i8* %3216, i64 2
	%3236 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3236, %Type_Info** %3233
	%3237 = getelementptr inbounds %..string, %..string* %3214, i64 2
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2ca, i64 0, i32 0), i64 5}, %..string* %3237
	store i64 2, i64* %3234
	store i8 0, i8* %3235
	%3238 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3239 = bitcast %Type_Info* %3238 to %Type_Info*
	%3240 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 3
	%3241 = getelementptr inbounds i64, i64* %3215, i64 3
	%3242 = getelementptr inbounds i8, i8* %3216, i64 3
	%3243 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3243, %Type_Info** %3240
	%3244 = getelementptr inbounds %..string, %..string* %3214, i64 3
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2cb, i64 0, i32 0), i64 4}, %..string* %3244
	store i64 3, i64* %3241
	store i8 0, i8* %3242
	%3245 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3246 = bitcast %Type_Info* %3245 to %Type_Info*
	%3247 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 4
	%3248 = getelementptr inbounds i64, i64* %3215, i64 4
	%3249 = getelementptr inbounds i8, i8* %3216, i64 4
	%3250 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3250, %Type_Info** %3247
	%3251 = getelementptr inbounds %..string, %..string* %3214, i64 4
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2cc, i64 0, i32 0), i64 4}, %..string* %3251
	store i64 4, i64* %3248
	store i8 0, i8* %3249
	%3252 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3253 = bitcast %Type_Info* %3252 to %Type_Info*
	%3254 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 5
	%3255 = getelementptr inbounds i64, i64* %3215, i64 5
	%3256 = getelementptr inbounds i8, i8* %3216, i64 5
	%3257 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3257, %Type_Info** %3254
	%3258 = getelementptr inbounds %..string, %..string* %3214, i64 5
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$2cd, i64 0, i32 0), i64 9}, %..string* %3258
	store i64 5, i64* %3255
	store i8 0, i8* %3256
	%3259 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3260 = bitcast %Type_Info* %3259 to %Type_Info*
	%3261 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 6
	%3262 = getelementptr inbounds i64, i64* %3215, i64 6
	%3263 = getelementptr inbounds i8, i8* %3216, i64 6
	%3264 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3264, %Type_Info** %3261
	%3265 = getelementptr inbounds %..string, %..string* %3214, i64 6
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$2ce, i64 0, i32 0), i64 8}, %..string* %3265
	store i64 6, i64* %3262
	store i8 0, i8* %3263
	%3266 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3267 = bitcast %Type_Info* %3266 to %Type_Info*
	%3268 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 7
	%3269 = getelementptr inbounds i64, i64* %3215, i64 7
	%3270 = getelementptr inbounds i8, i8* %3216, i64 7
	%3271 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3271, %Type_Info** %3268
	%3272 = getelementptr inbounds %..string, %..string* %3214, i64 7
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2cf, i64 0, i32 0), i64 5}, %..string* %3272
	store i64 8, i64* %3269
	store i8 0, i8* %3270
	%3273 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3274 = bitcast %Type_Info* %3273 to %Type_Info*
	%3275 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 8
	%3276 = getelementptr inbounds i64, i64* %3215, i64 8
	%3277 = getelementptr inbounds i8, i8* %3216, i64 8
	%3278 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3278, %Type_Info** %3275
	%3279 = getelementptr inbounds %..string, %..string* %3214, i64 8
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2d0, i64 0, i32 0), i64 4}, %..string* %3279
	store i64 16, i64* %3276
	store i8 0, i8* %3277
	%3280 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3281 = bitcast %Type_Info* %3280 to %Type_Info*
	%3282 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 9
	%3283 = getelementptr inbounds i64, i64* %3215, i64 9
	%3284 = getelementptr inbounds i8, i8* %3216, i64 9
	%3285 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3285, %Type_Info** %3282
	%3286 = getelementptr inbounds %..string, %..string* %3214, i64 9
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2d1, i64 0, i32 0), i64 6}, %..string* %3286
	store i64 24, i64* %3283
	store i8 0, i8* %3284
	%3287 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3288 = bitcast %Type_Info* %3287 to %Type_Info*
	%3289 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 10
	%3290 = getelementptr inbounds i64, i64* %3215, i64 10
	%3291 = getelementptr inbounds i8, i8* %3216, i64 10
	%3292 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3292, %Type_Info** %3289
	%3293 = getelementptr inbounds %..string, %..string* %3214, i64 10
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$2d2, i64 0, i32 0), i64 9}, %..string* %3293
	store i64 32, i64* %3290
	store i8 0, i8* %3291
	%3294 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3295 = bitcast %Type_Info* %3294 to %Type_Info*
	%3296 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 11
	%3297 = getelementptr inbounds i64, i64* %3215, i64 11
	%3298 = getelementptr inbounds i8, i8* %3216, i64 11
	%3299 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3299, %Type_Info** %3296
	%3300 = getelementptr inbounds %..string, %..string* %3214, i64 11
	store %..string {i8* getelementptr inbounds ([15 x i8], [15 x i8]* @__str$2d3, i64 0, i32 0), i64 14}, %..string* %3300
	store i64 33, i64* %3297
	store i8 0, i8* %3298
	%3301 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 148
	%3302 = bitcast %Type_Info* %3301 to %Type_Info*
	%3303 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 12
	%3304 = getelementptr inbounds i64, i64* %3215, i64 12
	%3305 = getelementptr inbounds i8, i8* %3216, i64 12
	%3306 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 148
	store %Type_Info* %3306, %Type_Info** %3303
	%3307 = getelementptr inbounds %..string, %..string* %3214, i64 12
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2d4, i64 0, i32 0), i64 3}, %..string* %3307
	store i64 40, i64* %3304
	store i8 0, i8* %3305
	%3308 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	%3309 = bitcast %Type_Info* %3308 to %Type_Info*
	%3310 = getelementptr inbounds %Type_Info*, %Type_Info** %3213, i64 13
	%3311 = getelementptr inbounds i64, i64* %3215, i64 13
	%3312 = getelementptr inbounds i8, i8* %3216, i64 13
	%3313 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 73
	store %Type_Info* %3313, %Type_Info** %3310
	%3314 = getelementptr inbounds %..string, %..string* %3214, i64 13
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2d5, i64 0, i32 0), i64 3}, %..string* %3314
	store i64 48, i64* %3311
	store i8 0, i8* %3312
	%3315 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 0
	%3316 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3315, i64 0, i32 0
	store %Type_Info** %3213, %Type_Info*** %3316
	%3317 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3315, i64 0, i32 1
	store i64 14, i64* %3317
	%3318 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 1
	%3319 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3318, i64 0, i32 0
	store %..string* %3214, %..string** %3319
	%3320 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3318, i64 0, i32 1
	store i64 14, i64* %3320
	%3321 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 2
	%3322 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3321, i64 0, i32 0
	store i64* %3215, i64** %3322
	%3323 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3321, i64 0, i32 1
	store i64 14, i64* %3323
	%3324 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3209, i64 0, i32 3
	%3325 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3324, i64 0, i32 0
	store i8* %3216, i8** %3325
	%3326 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3324, i64 0, i32 1
	store i64 14, i64* %3326
	%3327 = load %Type_Info_Struct, %Type_Info_Struct* %3209, align 8
	%3328 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3206 to %Type_Info_Struct*
	store %Type_Info_Struct %3327, %Type_Info_Struct* %3328
	%3329 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3206, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3329
	%3330 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 148
	%3331 = getelementptr inbounds %Type_Info, %Type_Info* %3330, i64 0, i32 2
	%3332 = getelementptr inbounds %Type_Info, %Type_Info* %3330, i64 0, i32 0
	store i64 8, i64* %3332
	%3333 = getelementptr inbounds %Type_Info, %Type_Info* %3330, i64 0, i32 1
	store i64 8, i64* %3333
	; Type_Info_Pointer
	%3334 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3331 to %Type_Info_Pointer*
	%3335 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 145
	%3336 = bitcast %Type_Info* %3335 to %Type_Info*
	%3337 = getelementptr inbounds %Type_Info_Pointer, %Type_Info_Pointer* %3334, i64 0, i32 0
	store %Type_Info* %3336, %Type_Info** %3337
	%3338 = load %Type_Info_Pointer, %Type_Info_Pointer* %3334, align 8
	%3339 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3331 to %Type_Info_Pointer*
	store %Type_Info_Pointer %3338, %Type_Info_Pointer* %3339
	%3340 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3331, i64 0, i32 2 ; UnionTagPtr
	store i8 9, i8* %3340
	%3341 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 149
	%3342 = getelementptr inbounds %Type_Info, %Type_Info* %3341, i64 0, i32 2
	%3343 = getelementptr inbounds %Type_Info, %Type_Info* %3341, i64 0, i32 0
	store i64 40, i64* %3343
	%3344 = getelementptr inbounds %Type_Info, %Type_Info* %3341, i64 0, i32 1
	store i64 8, i64* %3344
	; Type_Info_Named
	%3345 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3342 to %Type_Info_Named*
	%3346 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 150
	%3347 = bitcast %Type_Info* %3346 to %Type_Info*
	%3348 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3345, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__str$2d6, i64 0, i32 0), i64 12}, %..string* %3348
	%3349 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3345, i64 0, i32 1
	store %Type_Info* %3347, %Type_Info** %3349
	%3350 = load %Type_Info_Named, %Type_Info_Named* %3345, align 8
	%3351 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3342 to %Type_Info_Named*
	store %Type_Info_Named %3350, %Type_Info_Named* %3351
	%3352 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3342, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3352
	%3353 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 150
	%3354 = getelementptr inbounds %Type_Info, %Type_Info* %3353, i64 0, i32 2
	%3355 = getelementptr inbounds %Type_Info, %Type_Info* %3353, i64 0, i32 0
	store i64 40, i64* %3355
	%3356 = getelementptr inbounds %Type_Info, %Type_Info* %3353, i64 0, i32 1
	store i64 8, i64* %3356
	; Type_Info_Struct
	%3357 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3354 to %Type_Info_Struct*
	%3358 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 4
	store i8 0, i8* %3358
	%3359 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 5
	store i8 0, i8* %3359
	%3360 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 6
	store i8 0, i8* %3360
	%3361 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 163
	%3362 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 130
	%3363 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 121
	%3364 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 121
	%3365 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 151
	%3366 = bitcast %Type_Info* %3365 to %Type_Info*
	%3367 = getelementptr inbounds %Type_Info*, %Type_Info** %3361, i64 0
	%3368 = getelementptr inbounds i64, i64* %3363, i64 0
	%3369 = getelementptr inbounds i8, i8* %3364, i64 0
	%3370 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 151
	store %Type_Info* %3370, %Type_Info** %3367
	%3371 = getelementptr inbounds %..string, %..string* %3362, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2d7, i64 0, i32 0), i64 6}, %..string* %3371
	store i64 0, i64* %3368
	store i8 0, i8* %3369
	%3372 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3373 = bitcast %Type_Info* %3372 to %Type_Info*
	%3374 = getelementptr inbounds %Type_Info*, %Type_Info** %3361, i64 1
	%3375 = getelementptr inbounds i64, i64* %3363, i64 1
	%3376 = getelementptr inbounds i8, i8* %3364, i64 1
	%3377 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3377, %Type_Info** %3374
	%3378 = getelementptr inbounds %..string, %..string* %3362, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2d8, i64 0, i32 0), i64 5}, %..string* %3378
	store i64 16, i64* %3375
	store i8 0, i8* %3376
	%3379 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3380 = bitcast %Type_Info* %3379 to %Type_Info*
	%3381 = getelementptr inbounds %Type_Info*, %Type_Info** %3361, i64 2
	%3382 = getelementptr inbounds i64, i64* %3363, i64 2
	%3383 = getelementptr inbounds i8, i8* %3364, i64 2
	%3384 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3384, %Type_Info** %3381
	%3385 = getelementptr inbounds %..string, %..string* %3362, i64 2
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$2d9, i64 0, i32 0), i64 13}, %..string* %3385
	store i64 24, i64* %3382
	store i8 0, i8* %3383
	%3386 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3387 = bitcast %Type_Info* %3386 to %Type_Info*
	%3388 = getelementptr inbounds %Type_Info*, %Type_Info** %3361, i64 3
	%3389 = getelementptr inbounds i64, i64* %3363, i64 3
	%3390 = getelementptr inbounds i8, i8* %3364, i64 3
	%3391 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3391, %Type_Info** %3388
	%3392 = getelementptr inbounds %..string, %..string* %3362, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2da, i64 0, i32 0), i64 3}, %..string* %3392
	store i64 32, i64* %3389
	store i8 0, i8* %3390
	%3393 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 0
	%3394 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3393, i64 0, i32 0
	store %Type_Info** %3361, %Type_Info*** %3394
	%3395 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3393, i64 0, i32 1
	store i64 4, i64* %3395
	%3396 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 1
	%3397 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3396, i64 0, i32 0
	store %..string* %3362, %..string** %3397
	%3398 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3396, i64 0, i32 1
	store i64 4, i64* %3398
	%3399 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 2
	%3400 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3399, i64 0, i32 0
	store i64* %3363, i64** %3400
	%3401 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3399, i64 0, i32 1
	store i64 4, i64* %3401
	%3402 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3357, i64 0, i32 3
	%3403 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3402, i64 0, i32 0
	store i8* %3364, i8** %3403
	%3404 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3402, i64 0, i32 1
	store i64 4, i64* %3404
	%3405 = load %Type_Info_Struct, %Type_Info_Struct* %3357, align 8
	%3406 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3354 to %Type_Info_Struct*
	store %Type_Info_Struct %3405, %Type_Info_Struct* %3406
	%3407 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3354, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3407
	%3408 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 151
	%3409 = getelementptr inbounds %Type_Info, %Type_Info* %3408, i64 0, i32 2
	%3410 = getelementptr inbounds %Type_Info, %Type_Info* %3408, i64 0, i32 0
	store i64 16, i64* %3410
	%3411 = getelementptr inbounds %Type_Info, %Type_Info* %3408, i64 0, i32 1
	store i64 8, i64* %3411
	; Type_Info_Slice
	%3412 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3409 to %Type_Info_Slice*
	%3413 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%3414 = bitcast %Type_Info* %3413 to %Type_Info*
	%3415 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %3412, i64 0, i32 0
	store %Type_Info* %3414, %Type_Info** %3415
	%3416 = getelementptr inbounds %Type_Info_Slice, %Type_Info_Slice* %3412, i64 0, i32 1
	store i64 1, i64* %3416
	%3417 = load %Type_Info_Slice, %Type_Info_Slice* %3412, align 8
	%3418 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3409 to %Type_Info_Slice*
	store %Type_Info_Slice %3417, %Type_Info_Slice* %3418
	%3419 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3409, i64 0, i32 2 ; UnionTagPtr
	store i8 13, i8* %3419
	%3420 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 152
	%3421 = getelementptr inbounds %Type_Info, %Type_Info* %3420, i64 0, i32 2
	%3422 = getelementptr inbounds %Type_Info, %Type_Info* %3420, i64 0, i32 0
	store i64 24, i64* %3422
	%3423 = getelementptr inbounds %Type_Info, %Type_Info* %3420, i64 0, i32 1
	store i64 8, i64* %3423
	; Type_Info_Named
	%3424 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3421 to %Type_Info_Named*
	%3425 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 153
	%3426 = bitcast %Type_Info* %3425 to %Type_Info*
	%3427 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3424, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([10 x i8], [10 x i8]* @__str$2db, i64 0, i32 0), i64 9}, %..string* %3427
	%3428 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3424, i64 0, i32 1
	store %Type_Info* %3426, %Type_Info** %3428
	%3429 = load %Type_Info_Named, %Type_Info_Named* %3424, align 8
	%3430 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3421 to %Type_Info_Named*
	store %Type_Info_Named %3429, %Type_Info_Named* %3430
	%3431 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3421, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3431
	%3432 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 153
	%3433 = getelementptr inbounds %Type_Info, %Type_Info* %3432, i64 0, i32 2
	%3434 = getelementptr inbounds %Type_Info, %Type_Info* %3432, i64 0, i32 0
	store i64 24, i64* %3434
	%3435 = getelementptr inbounds %Type_Info, %Type_Info* %3432, i64 0, i32 1
	store i64 8, i64* %3435
	; Type_Info_Struct
	%3436 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3433 to %Type_Info_Struct*
	%3437 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 4
	store i8 0, i8* %3437
	%3438 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 5
	store i8 0, i8* %3438
	%3439 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 6
	store i8 0, i8* %3439
	%3440 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 167
	%3441 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 134
	%3442 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 125
	%3443 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 125
	%3444 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%3445 = bitcast %Type_Info* %3444 to %Type_Info*
	%3446 = getelementptr inbounds %Type_Info*, %Type_Info** %3440, i64 0
	%3447 = getelementptr inbounds i64, i64* %3442, i64 0
	%3448 = getelementptr inbounds i8, i8* %3443, i64 0
	%3449 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	store %Type_Info* %3449, %Type_Info** %3446
	%3450 = getelementptr inbounds %..string, %..string* %3441, i64 0
	store %..string {i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__str$2dc, i64 0, i32 0), i64 8}, %..string* %3450
	store i64 0, i64* %3447
	store i8 0, i8* %3448
	%3451 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	%3452 = bitcast %Type_Info* %3451 to %Type_Info*
	%3453 = getelementptr inbounds %Type_Info*, %Type_Info** %3440, i64 1
	%3454 = getelementptr inbounds i64, i64* %3442, i64 1
	%3455 = getelementptr inbounds i8, i8* %3443, i64 1
	%3456 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 61
	store %Type_Info* %3456, %Type_Info** %3453
	%3457 = getelementptr inbounds %..string, %..string* %3441, i64 1
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2dd, i64 0, i32 0), i64 7}, %..string* %3457
	store i64 8, i64* %3454
	store i8 0, i8* %3455
	%3458 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3459 = bitcast %Type_Info* %3458 to %Type_Info*
	%3460 = getelementptr inbounds %Type_Info*, %Type_Info** %3440, i64 2
	%3461 = getelementptr inbounds i64, i64* %3442, i64 2
	%3462 = getelementptr inbounds i8, i8* %3443, i64 2
	%3463 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3463, %Type_Info** %3460
	%3464 = getelementptr inbounds %..string, %..string* %3441, i64 2
	store %..string {i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__str$2de, i64 0, i32 0), i64 4}, %..string* %3464
	store i64 16, i64* %3461
	store i8 0, i8* %3462
	%3465 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 0
	%3466 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3465, i64 0, i32 0
	store %Type_Info** %3440, %Type_Info*** %3466
	%3467 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3465, i64 0, i32 1
	store i64 3, i64* %3467
	%3468 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 1
	%3469 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3468, i64 0, i32 0
	store %..string* %3441, %..string** %3469
	%3470 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3468, i64 0, i32 1
	store i64 3, i64* %3470
	%3471 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 2
	%3472 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3471, i64 0, i32 0
	store i64* %3442, i64** %3472
	%3473 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3471, i64 0, i32 1
	store i64 3, i64* %3473
	%3474 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3436, i64 0, i32 3
	%3475 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3474, i64 0, i32 0
	store i8* %3443, i8** %3475
	%3476 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3474, i64 0, i32 1
	store i64 3, i64* %3476
	%3477 = load %Type_Info_Struct, %Type_Info_Struct* %3436, align 8
	%3478 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3433 to %Type_Info_Struct*
	store %Type_Info_Struct %3477, %Type_Info_Struct* %3478
	%3479 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3433, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3479
	%3480 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 154
	%3481 = getelementptr inbounds %Type_Info, %Type_Info* %3480, i64 0, i32 2
	%3482 = getelementptr inbounds %Type_Info, %Type_Info* %3480, i64 0, i32 0
	store i64 408, i64* %3482
	%3483 = getelementptr inbounds %Type_Info, %Type_Info* %3480, i64 0, i32 1
	store i64 8, i64* %3483
	; Type_Info_Named
	%3484 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3481 to %Type_Info_Named*
	%3485 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 155
	%3486 = bitcast %Type_Info* %3485 to %Type_Info*
	%3487 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3484, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__str$2df, i64 0, i32 0), i64 7}, %..string* %3487
	%3488 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3484, i64 0, i32 1
	store %Type_Info* %3486, %Type_Info** %3488
	%3489 = load %Type_Info_Named, %Type_Info_Named* %3484, align 8
	%3490 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3481 to %Type_Info_Named*
	store %Type_Info_Named %3489, %Type_Info_Named* %3490
	%3491 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3481, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3491
	%3492 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 155
	%3493 = getelementptr inbounds %Type_Info, %Type_Info* %3492, i64 0, i32 2
	%3494 = getelementptr inbounds %Type_Info, %Type_Info* %3492, i64 0, i32 0
	store i64 408, i64* %3494
	%3495 = getelementptr inbounds %Type_Info, %Type_Info* %3492, i64 0, i32 1
	store i64 8, i64* %3495
	; Type_Info_Struct
	%3496 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3493 to %Type_Info_Struct*
	%3497 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 4
	store i8 0, i8* %3497
	%3498 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 5
	store i8 0, i8* %3498
	%3499 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 6
	store i8 0, i8* %3499
	%3500 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 170
	%3501 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 137
	%3502 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 128
	%3503 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 128
	%3504 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 156
	%3505 = bitcast %Type_Info* %3504 to %Type_Info*
	%3506 = getelementptr inbounds %Type_Info*, %Type_Info** %3500, i64 0
	%3507 = getelementptr inbounds i64, i64* %3502, i64 0
	%3508 = getelementptr inbounds i8, i8* %3503, i64 0
	%3509 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 156
	store %Type_Info* %3509, %Type_Info** %3506
	%3510 = getelementptr inbounds %..string, %..string* %3501, i64 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2e0, i64 0, i32 0), i64 6}, %..string* %3510
	store i64 0, i64* %3507
	store i8 0, i8* %3508
	%3511 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3512 = bitcast %Type_Info* %3511 to %Type_Info*
	%3513 = getelementptr inbounds %Type_Info*, %Type_Info** %3500, i64 1
	%3514 = getelementptr inbounds i64, i64* %3502, i64 1
	%3515 = getelementptr inbounds i8, i8* %3503, i64 1
	%3516 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3516, %Type_Info** %3513
	%3517 = getelementptr inbounds %..string, %..string* %3501, i64 1
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2e1, i64 0, i32 0), i64 5}, %..string* %3517
	store i64 384, i64* %3514
	store i8 0, i8* %3515
	%3518 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3519 = bitcast %Type_Info* %3518 to %Type_Info*
	%3520 = getelementptr inbounds %Type_Info*, %Type_Info** %3500, i64 2
	%3521 = getelementptr inbounds i64, i64* %3502, i64 2
	%3522 = getelementptr inbounds i8, i8* %3503, i64 2
	%3523 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3523, %Type_Info** %3520
	%3524 = getelementptr inbounds %..string, %..string* %3501, i64 2
	store %..string {i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__str$2e2, i64 0, i32 0), i64 13}, %..string* %3524
	store i64 392, i64* %3521
	store i8 0, i8* %3522
	%3525 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3526 = bitcast %Type_Info* %3525 to %Type_Info*
	%3527 = getelementptr inbounds %Type_Info*, %Type_Info** %3500, i64 3
	%3528 = getelementptr inbounds i64, i64* %3502, i64 3
	%3529 = getelementptr inbounds i8, i8* %3503, i64 3
	%3530 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3530, %Type_Info** %3527
	%3531 = getelementptr inbounds %..string, %..string* %3501, i64 3
	store %..string {i8* getelementptr inbounds ([4 x i8], [4 x i8]* @__str$2e3, i64 0, i32 0), i64 3}, %..string* %3531
	store i64 400, i64* %3528
	store i8 0, i8* %3529
	%3532 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	%3533 = bitcast %Type_Info* %3532 to %Type_Info*
	%3534 = getelementptr inbounds %Type_Info*, %Type_Info** %3500, i64 4
	%3535 = getelementptr inbounds i64, i64* %3502, i64 4
	%3536 = getelementptr inbounds i8, i8* %3503, i64 4
	%3537 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 13
	store %Type_Info* %3537, %Type_Info** %3534
	%3538 = getelementptr inbounds %..string, %..string* %3501, i64 4
	store %..string {i8* getelementptr inbounds ([6 x i8], [6 x i8]* @__str$2e4, i64 0, i32 0), i64 5}, %..string* %3538
	store i64 401, i64* %3535
	store i8 0, i8* %3536
	%3539 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 0
	%3540 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3539, i64 0, i32 0
	store %Type_Info** %3500, %Type_Info*** %3540
	%3541 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3539, i64 0, i32 1
	store i64 5, i64* %3541
	%3542 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 1
	%3543 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3542, i64 0, i32 0
	store %..string* %3501, %..string** %3543
	%3544 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3542, i64 0, i32 1
	store i64 5, i64* %3544
	%3545 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 2
	%3546 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3545, i64 0, i32 0
	store i64* %3502, i64** %3546
	%3547 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3545, i64 0, i32 1
	store i64 5, i64* %3547
	%3548 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3496, i64 0, i32 3
	%3549 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3548, i64 0, i32 0
	store i8* %3503, i8** %3549
	%3550 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3548, i64 0, i32 1
	store i64 5, i64* %3550
	%3551 = load %Type_Info_Struct, %Type_Info_Struct* %3496, align 8
	%3552 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3493 to %Type_Info_Struct*
	store %Type_Info_Struct %3551, %Type_Info_Struct* %3552
	%3553 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3493, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3553
	%3554 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 156
	%3555 = getelementptr inbounds %Type_Info, %Type_Info* %3554, i64 0, i32 2
	%3556 = getelementptr inbounds %Type_Info, %Type_Info* %3554, i64 0, i32 0
	store i64 384, i64* %3556
	%3557 = getelementptr inbounds %Type_Info, %Type_Info* %3554, i64 0, i32 1
	store i64 1, i64* %3557
	; Type_Info_Array
	%3558 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3555 to %Type_Info_Array*
	%3559 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 5
	%3560 = bitcast %Type_Info* %3559 to %Type_Info*
	%3561 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %3558, i64 0, i32 0
	store %Type_Info* %3560, %Type_Info** %3561
	%3562 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %3558, i64 0, i32 1
	store i64 1, i64* %3562
	%3563 = getelementptr inbounds %Type_Info_Array, %Type_Info_Array* %3558, i64 0, i32 2
	store i64 384, i64* %3563
	%3564 = load %Type_Info_Array, %Type_Info_Array* %3558, align 8
	%3565 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3555 to %Type_Info_Array*
	store %Type_Info_Array %3564, %Type_Info_Array* %3565
	%3566 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3555, i64 0, i32 2 ; UnionTagPtr
	store i8 11, i8* %3566
	%3567 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 157
	%3568 = getelementptr inbounds %Type_Info, %Type_Info* %3567, i64 0, i32 2
	%3569 = getelementptr inbounds %Type_Info, %Type_Info* %3567, i64 0, i32 0
	store i64 24, i64* %3569
	%3570 = getelementptr inbounds %Type_Info, %Type_Info* %3567, i64 0, i32 1
	store i64 8, i64* %3570
	; Type_Info_Named
	%3571 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3568 to %Type_Info_Named*
	%3572 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 158
	%3573 = bitcast %Type_Info* %3572 to %Type_Info*
	%3574 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3571, i64 0, i32 0
	store %..string {i8* getelementptr inbounds ([7 x i8], [7 x i8]* @__str$2e5, i64 0, i32 0), i64 6}, %..string* %3574
	%3575 = getelementptr inbounds %Type_Info_Named, %Type_Info_Named* %3571, i64 0, i32 1
	store %Type_Info* %3573, %Type_Info** %3575
	%3576 = load %Type_Info_Named, %Type_Info_Named* %3571, align 8
	%3577 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3568 to %Type_Info_Named*
	store %Type_Info_Named %3576, %Type_Info_Named* %3577
	%3578 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3568, i64 0, i32 2 ; UnionTagPtr
	store i8 1, i8* %3578
	%3579 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 158
	%3580 = getelementptr inbounds %Type_Info, %Type_Info* %3579, i64 0, i32 2
	%3581 = getelementptr inbounds %Type_Info, %Type_Info* %3579, i64 0, i32 0
	store i64 24, i64* %3581
	%3582 = getelementptr inbounds %Type_Info, %Type_Info* %3579, i64 0, i32 1
	store i64 8, i64* %3582
	; Type_Info_Struct
	%3583 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3580 to %Type_Info_Struct*
	%3584 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 4
	store i8 0, i8* %3584
	%3585 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 5
	store i8 0, i8* %3585
	%3586 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 6
	store i8 0, i8* %3586
	%3587 = getelementptr inbounds [177 x %Type_Info*], [177 x %Type_Info*]* @__$type_info_types_data, i64 0, i32 175
	%3588 = getelementptr inbounds [177 x %..string], [177 x %..string]* @__$type_info_names_data, i64 0, i32 142
	%3589 = getelementptr inbounds [177 x i64], [177 x i64]* @__$type_info_offsets_data, i64 0, i32 133
	%3590 = getelementptr inbounds [177 x i8], [177 x i8]* @__$type_info_usings_data, i64 0, i32 133
	%3591 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 151
	%3592 = bitcast %Type_Info* %3591 to %Type_Info*
	%3593 = getelementptr inbounds %Type_Info*, %Type_Info** %3587, i64 0
	%3594 = getelementptr inbounds i64, i64* %3589, i64 0
	%3595 = getelementptr inbounds i8, i8* %3590, i64 0
	%3596 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 151
	store %Type_Info* %3596, %Type_Info** %3593
	%3597 = getelementptr inbounds %..string, %..string* %3588, i64 0
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$2e6, i64 0, i32 0), i64 1}, %..string* %3597
	store i64 0, i64* %3594
	store i8 0, i8* %3595
	%3598 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	%3599 = bitcast %Type_Info* %3598 to %Type_Info*
	%3600 = getelementptr inbounds %Type_Info*, %Type_Info** %3587, i64 1
	%3601 = getelementptr inbounds i64, i64* %3589, i64 1
	%3602 = getelementptr inbounds i8, i8* %3590, i64 1
	%3603 = getelementptr inbounds [159 x %Type_Info], [159 x %Type_Info]* @__$type_info_data, i64 0, i32 6
	store %Type_Info* %3603, %Type_Info** %3600
	%3604 = getelementptr inbounds %..string, %..string* %3588, i64 1
	store %..string {i8* getelementptr inbounds ([2 x i8], [2 x i8]* @__str$2e7, i64 0, i32 0), i64 1}, %..string* %3604
	store i64 16, i64* %3601
	store i8 0, i8* %3602
	%3605 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 0
	%3606 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3605, i64 0, i32 0
	store %Type_Info** %3587, %Type_Info*** %3606
	%3607 = getelementptr inbounds {%Type_Info**, i64}, {%Type_Info**, i64}* %3605, i64 0, i32 1
	store i64 2, i64* %3607
	%3608 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 1
	%3609 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3608, i64 0, i32 0
	store %..string* %3588, %..string** %3609
	%3610 = getelementptr inbounds {%..string*, i64}, {%..string*, i64}* %3608, i64 0, i32 1
	store i64 2, i64* %3610
	%3611 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 2
	%3612 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3611, i64 0, i32 0
	store i64* %3589, i64** %3612
	%3613 = getelementptr inbounds {i64*, i64}, {i64*, i64}* %3611, i64 0, i32 1
	store i64 2, i64* %3613
	%3614 = getelementptr inbounds %Type_Info_Struct, %Type_Info_Struct* %3583, i64 0, i32 3
	%3615 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3614, i64 0, i32 0
	store i8* %3590, i8** %3615
	%3616 = getelementptr inbounds {i8*, i64}, {i8*, i64}* %3614, i64 0, i32 1
	store i64 2, i64* %3616
	%3617 = load %Type_Info_Struct, %Type_Info_Struct* %3583, align 8
	%3618 = bitcast {[0 x <8 x i8>], [72 x i8], i8}* %3580 to %Type_Info_Struct*
	store %Type_Info_Struct %3617, %Type_Info_Struct* %3618
	%3619 = getelementptr inbounds {[0 x <8 x i8>], [72 x i8], i8}, {[0 x <8 x i8>], [72 x i8], i8}* %3580, i64 0, i32 2 ; UnionTagPtr
	store i8 15, i8* %3619
	store [5 x %utf8-4.Accept_Range] [%utf8-4.Accept_Range {i8 128, i8 191}, %utf8-4.Accept_Range {i8 160, i8 191}, %utf8-4.Accept_Range {i8 128, i8 159}, %utf8-4.Accept_Range {i8 144, i8 191}, %utf8-4.Accept_Range {i8 128, i8 143}], [5 x %utf8-4.Accept_Range]* @utf8-4.accept_ranges
	store [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241], [256 x i8]* @utf8-4.accept_sizes
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$2e8, i64 0, i32 0), i64 17}, %..string* @fmt-14.__DIGITS_LOWER
	store %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$2e9, i64 0, i32 0), i64 17}, %..string* @fmt-14.__DIGITS_UPPER
	store %strconv-16.FloatInfo {i64 23, i64 8, i64 -127}, %strconv-16.FloatInfo* @strconv-16._f32_info
	store %strconv-16.FloatInfo {i64 52, i64 11, i64 -1023}, %strconv-16.FloatInfo* @strconv-16._f64_info
	store %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__str$2ea, i64 0, i32 0), i64 36}, %..string* @strconv-16.digits
	%3620 = call i64 @windows-6.get_std_handle(i64 -11, %Context* noalias nonnull %0)
	store i64 %3620, i64* @windows-6.stdout
	%3621 = call i64 @windows-6.get_std_handle(i64 -12, %Context* noalias nonnull %0)
	store i64 %3621, i64* @windows-6.stderr
	ret void
}
@__$type_info_data = private global [159 x %Type_Info] zeroinitializer
@__$type_info_types_data = global [177 x %Type_Info*] zeroinitializer
@__$type_info_names_data = global [177 x %..string] zeroinitializer
@__$type_info_offsets_data = global [177 x i64] zeroinitializer
@__$type_info_usings_data = global [177 x i8] zeroinitializer
@__ggv$0 = global %Context zeroinitializer
@__type_table = global {%Type_Info*, i64} zeroinitializer
@__args__ = global {i8**, i64} zeroinitializer
@utf8-4.accept_ranges = global [5 x %utf8-4.Accept_Range] [%utf8-4.Accept_Range {i8 128, i8 191}, %utf8-4.Accept_Range {i8 160, i8 191}, %utf8-4.Accept_Range {i8 128, i8 159}, %utf8-4.Accept_Range {i8 144, i8 191}, %utf8-4.Accept_Range {i8 128, i8 143}]
@utf8-4.accept_sizes = global [256 x i8] [i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 240, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 19, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 35, i8 3, i8 3, i8 52, i8 4, i8 4, i8 4, i8 68, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241, i8 241]
@fmt-14.__DIGITS_LOWER = global %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$2eb, i64 0, i32 0), i64 17}
@fmt-14.__DIGITS_UPPER = global %..string {i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__str$2ec, i64 0, i32 0), i64 17}
@strconv-16._f32_info = global %strconv-16.FloatInfo {i64 23, i64 8, i64 -127}
@strconv-16._f64_info = global %strconv-16.FloatInfo {i64 52, i64 11, i64 -1023}
@strconv-16.digits = global %..string {i8* getelementptr inbounds ([37 x i8], [37 x i8]* @__str$2ed, i64 0, i32 0), i64 36}
@windows-6.stdout = global i64 zeroinitializer
@windows-6.stderr = global i64 zeroinitializer
@__csba$0 = global [1 x i8] [i8 zeroinitializer]
@__$enum_names-1b = private global [6 x %..string] zeroinitializer
@__$enum_values-1b = private global [6 x %Type_Info_Enum_Value] zeroinitializer
@__$enum_names-48 = private global [4 x %..string] zeroinitializer
@__$enum_values-48 = private global [4 x %Type_Info_Enum_Value] zeroinitializer
@__$enum_names-4c = private global [3 x %..string] zeroinitializer
@__$enum_values-4c = private global [3 x %Type_Info_Enum_Value] zeroinitializer
@__str$0 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$1 = private global [9 x i8] c"free_ptr\00"
@__str$2 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$3 = private global [23 x i8] c"default_allocator_proc\00"
@__str$4 = private global [11 x i8] c"0123456789\00"
@__str$5 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$6 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$7 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$8 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$9 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$a = private global [11 x i8] c"0123456789\00"
@__str$b = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$c = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$d = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$e = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$f = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$10 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$11 = private global [4 x i8] c"nil\00"
@__str$12 = private global [4 x i8] c"int\00"
@__str$13 = private global [5 x i8] c"uint\00"
@__str$14 = private global [8 x i8] c"uintptr\00"
@__str$15 = private global [5 x i8] c"rune\00"
@__str$16 = private global [8 x i8] c"complex\00"
@__str$17 = private global [7 x i8] c"string\00"
@__str$18 = private global [5 x i8] c"bool\00"
@__str$19 = private global [4 x i8] c"any\00"
@__str$1a = private global [7 x i8] c"rawptr\00"
@__str$1b = private global [2 x i8] c"\5E\00"
@__str$1c = private global [5 x i8] c"proc\00"
@__str$1d = private global [3 x i8] c"\28\29\00"
@__str$1e = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$1f = private global [2 x i8] c"\28\00"
@__str$20 = private global [3 x i8] c"\2C\20\00"
@__str$21 = private global [2 x i8] c"\29\00"
@__str$22 = private global [5 x i8] c"\20-\3E\20\00"
@__str$23 = private global [2 x i8] c"\28\00"
@__str$24 = private global [3 x i8] c"\2C\20\00"
@__str$25 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$26 = private global [3 x i8] c"\3A\20\00"
@__str$27 = private global [2 x i8] c"\29\00"
@__str$28 = private global [2 x i8] c"\5B\00"
@__str$29 = private global [2 x i8] c"\5D\00"
@__str$2a = private global [10 x i8] c"\5Bdynamic\5D\00"
@__str$2b = private global [3 x i8] c"\5B\5D\00"
@__str$2c = private global [5 x i8] c"map\5B\00"
@__str$2d = private global [8 x i8] c"struct\20\00"
@__str$2e = private global [9 x i8] c"\23packed\20\00"
@__str$2f = private global [12 x i8] c"\23raw_union\20\00"
@__str$30 = private global [8 x i8] c"\23align\20\00"
@__str$31 = private global [3 x i8] c"\2C\20\00"
@__str$32 = private global [3 x i8] c"\3A\20\00"
@__str$33 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$34 = private global [8 x i8] c"union\20\7B\00"
@__str$35 = private global [3 x i8] c"\2C\20\00"
@__str$36 = private global [2 x i8] c"\7D\00"
@__str$37 = private global [6 x i8] c"enum\20\00"
@__str$38 = private global [3 x i8] c"\20\7B\00"
@__str$39 = private global [3 x i8] c"\2C\20\00"
@__str$3a = private global [2 x i8] c"\7D\00"
@__str$3b = private global [11 x i8] c"bit_field\20\00"
@__str$3c = private global [8 x i8] c"\23align\20\00"
@__str$3d = private global [3 x i8] c"\20\7B\00"
@__str$3e = private global [3 x i8] c"\2C\20\00"
@__str$3f = private global [3 x i8] c"\3A\20\00"
@__str$40 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$41 = private global [2 x i8] c"\7D\00"
@__str$42 = private global [19 x i8] c"\20Runtime\20assertion\00"
@__str$43 = private global [3 x i8] c"\3A\20\00"
@__str$44 = private global [7 x i8] c"\20Panic\00"
@__str$45 = private global [3 x i8] c"\3A\20\00"
@__str$46 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$47 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$48 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$49 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$4a = private global [8 x i8] c"\20Index\20\00"
@__str$4b = private global [28 x i8] c"\20is\20out\20of\20bounds\20range\200..\00"
@__str$4c = private global [25 x i8] c"\20Invalid\20slice\20indices\3A\20\00"
@__str$4d = private global [3 x i8] c"..\00"
@__str$4e = private global [3 x i8] c"..\00"
@__str$4f = private global [32 x i8] c"\20Invalid\20dynamic\20array\20values\3A\20\00"
@__str$50 = private global [3 x i8] c"..\00"
@__str$51 = private global [3 x i8] c"..\00"
@__str$52 = private global [29 x i8] c"\20Invalid\20type\20assertion\20from\00"
@__str$53 = private global [5 x i8] c"\20to\20\00"
@__str$54 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$55 = private global [21 x i8] c"__dynamic_array_make\00"
@__str$56 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$57 = private global [24 x i8] c"__dynamic_array_reserve\00"
@__str$58 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$59 = private global [23 x i8] c"__dynamic_array_append\00"
@__str$5a = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$5b = private global [31 x i8] c"__dynamic_array_append_nothing\00"
@__str$5c = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$5d = private global [18 x i8] c"__dynamic_map_set\00"
@__str$5e = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$5f = private global [24 x i8] c"__dynamic_map_get_entry\00"
@__str$60 = private global [5 x i8] c"post\00"
@__str$61 = private global [5 x i8] c"html\00"
@__str$62 = private global [3 x i8] c"en\00"
@__str$63 = private global [5 x i8] c"Neat\00"
@__str$64 = private global [6 x i8] c"UTF-8\00"
@__str$65 = private global [9 x i8] c"viewport\00"
@__str$66 = private global [36 x i8] c"width\3Ddevice-width\2C\20initial-scale\3D1\00"
@__str$67 = private global [505 x i8] c"\0D\0Ahtml\2Cbody\20\7B\0D\0A\09background-color\3A\20white\3B\0D\0A\09font-family\3A\20\22Times\20New\20Roman\22\3B\0D\0A\7D\0D\0A\0D\0A\23title\20\7B\0D\0A\09margin-top\3A\200\3B\0D\0A\09margin-bottom\3A\200\3B\0D\0A\09color\3A\20black\3B\0D\0A\09font-size\3A\202em\3B\0D\0A\7D\0D\0A\0D\0A\23posts\20\7B\0D\0A\09width\3A\2049\25\3B\0D\0A\09overflow\3A\20auto\3B\0D\0A\09float\3A\20left\3B\0D\0A\7D\0D\0A\0D\0A\23table\20\7B\0D\0A\09float\3A\20right\3B\0D\0A\09width\3A\2049\25\3B\0D\0A\09outline-style\3A\20solid\3B\0D\0A\09outline-width\3A\201px\3B\0D\0A\09outline-color\3A\20black\3B\0D\0A\09margin\3A\205px\205px\3B\0D\0A\09padding\3A\202px\202px\3B\0D\0A\7D\0D\0A\0D\0A.post\20\7B\0D\0A\09outline-style\3A\20solid\3B\0D\0A\09outline-width\3A\201px\3B\0D\0A\09outline-color\3A\20black\3B\0D\0A\09margin\3A\205px\205px\3B\0D\0A\09padding\3A\202px\202px\3B\0D\0A\7D\0D\0A\00"
@__str$68 = private global [5 x i8] c"Neat\00"
@__str$69 = private global [6 x i8] c"title\00"
@__str$6a = private global [3 x i8] c"hr\00"
@__str$6b = private global [6 x i8] c"posts\00"
@__str$6c = private global [13 x i8] c"We\20want\20more\00"
@__str$6d = private global [19 x i8] c"by\20internetjerk321\00"
@__str$6e = private global [21 x i8] c"We\20want\20more\20posts\21\21\00"
@__str$6f = private global [13 x i8] c"Here\20is\20more\00"
@__str$70 = private global [12 x i8] c"by\20niceguy2\00"
@__str$71 = private global [23 x i8] c"https\3A\2F\2Fgoodstuff.com\2F\00"
@__str$72 = private global [10 x i8] c"Even\20more\00"
@__str$73 = private global [9 x i8] c"by\20randy\00"
@__str$74 = private global [21 x i8] c"https\3A\2F\2Fcatpics.net\2F\00"
@__str$75 = private global [10 x i8] c"Even\20more\00"
@__str$76 = private global [9 x i8] c"by\20randy\00"
@__str$77 = private global [21 x i8] c"https\3A\2F\2Fcatpics.net\2F\00"
@__str$78 = private global [10 x i8] c"Even\20more\00"
@__str$79 = private global [9 x i8] c"by\20randy\00"
@__str$7a = private global [21 x i8] c"https\3A\2F\2Fcatpics.net\2F\00"
@__str$7b = private global [10 x i8] c"Even\20more\00"
@__str$7c = private global [9 x i8] c"by\20randy\00"
@__str$7d = private global [21 x i8] c"https\3A\2F\2Fcatpics.net\2F\00"
@__str$7e = private global [6 x i8] c"table\00"
@__str$7f = private global [6 x i8] c"Text\21\00"
@__str$80 = private global [2 x i8] c"\09\00"
@__str$81 = private global [60 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Ctests\5Ctest1.odin\00"
@__str$82 = private global [11 x i8] c"test1.html\00"
@__str$83 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$84 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$85 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$86 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$87 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$88 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$89 = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8a = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8b = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8c = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8d = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8e = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$8f = private global [48 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cutf8.odin\00"
@__str$90 = private global [54 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cos\5Cwindows.odin\00"
@__str$91 = private global [54 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cos\5Cwindows.odin\00"
@__str$92 = private global [5 x i8] c"lang\00"
@__str$93 = private global [5 x i8] c"lang\00"
@__str$94 = private global [3 x i8] c"id\00"
@__str$95 = private global [3 x i8] c"id\00"
@__str$96 = private global [6 x i8] c"class\00"
@__str$97 = private global [6 x i8] c"class\00"
@__str$98 = private global [5 x i8] c"meta\00"
@__str$99 = private global [5 x i8] c"name\00"
@__str$9a = private global [5 x i8] c"meta\00"
@__str$9b = private global [8 x i8] c"content\00"
@__str$9c = private global [5 x i8] c"meta\00"
@__str$9d = private global [8 x i8] c"charset\00"
@__str$9e = private global [8 x i8] c"charset\00"
@__str$9f = private global [8 x i8] c"charset\00"
@__str$a0 = private global [5 x i8] c"meta\00"
@__str$a1 = private global [8 x i8] c"charset\00"
@__str$a2 = private global [8 x i8] c"charset\00"
@__str$a3 = private global [8 x i8] c"charset\00"
@__str$a4 = private global [8 x i8] c"charset\00"
@__str$a5 = private global [6 x i8] c"title\00"
@__str$a6 = private global [6 x i8] c"title\00"
@__str$a7 = private global [6 x i8] c"title\00"
@__str$a8 = private global [6 x i8] c"title\00"
@__str$a9 = private global [6 x i8] c"style\00"
@__str$aa = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$ab = private global [14 x i8] c"make_document\00"
@__str$ac = private global [5 x i8] c"head\00"
@__str$ad = private global [5 x i8] c"body\00"
@__str$ae = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$af = private global [13 x i8] c"make_element\00"
@__str$b0 = private global [6 x i8] c"class\00"
@__str$b1 = private global [13 x i8] c"make_element\00"
@__str$b2 = private global [3 x i8] c"id\00"
@__str$b3 = private global [13 x i8] c"make_element\00"
@__str$b4 = private global [4 x i8] c"div\00"
@__str$b5 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$b6 = private global [2 x i8] c"h\00"
@__str$b7 = private global [4 x i8] c"h\25v\00"
@__str$b8 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$b9 = private global [2 x i8] c"p\00"
@__str$ba = private global [2 x i8] c"p\00"
@__str$bb = private global [3 x i8] c"hr\00"
@__str$bc = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$bd = private global [19 x i8] c"append_to_document\00"
@__str$be = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$bf = private global [18 x i8] c"append_to_element\00"
@__str$c0 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$c1 = private global [23 x i8] c"append_string_indented\00"
@__str$c2 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$c3 = private global [23 x i8] c"append_string_indented\00"
@__str$c4 = private global [78 x i8] c"Element\20names\20should\20only\20contain\200-9\2Ca-z\2CA-Z\20found\20\27\25v\27\21\20Element\20name\3A\20\27\25s\27\0A\00"
@__str$c5 = private global [2 x i8] c"\3C\00"
@__str$c6 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$c7 = private global [12 x i8] c"gen_element\00"
@__str$c8 = private global [2 x i8] c"\20\00"
@__str$c9 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$ca = private global [12 x i8] c"gen_element\00"
@__str$cb = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$cc = private global [12 x i8] c"gen_element\00"
@__str$cd = private global [3 x i8] c"\3D\22\00"
@__str$ce = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$cf = private global [12 x i8] c"gen_element\00"
@__str$d0 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$d1 = private global [12 x i8] c"gen_element\00"
@__str$d2 = private global [2 x i8] c"\22\00"
@__str$d3 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$d4 = private global [12 x i8] c"gen_element\00"
@__str$d5 = private global [3 x i8] c"\2F\3E\00"
@__str$d6 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$d7 = private global [12 x i8] c"gen_element\00"
@__str$d8 = private global [2 x i8] c"\0A\00"
@__str$d9 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$da = private global [12 x i8] c"gen_element\00"
@__str$db = private global [2 x i8] c"\3E\00"
@__str$dc = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$dd = private global [12 x i8] c"gen_element\00"
@__str$de = private global [2 x i8] c"\0A\00"
@__str$df = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$e0 = private global [12 x i8] c"gen_element\00"
@__str$e1 = private global [2 x i8] c"\0A\00"
@__str$e2 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$e3 = private global [12 x i8] c"gen_element\00"
@__str$e4 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$e5 = private global [3 x i8] c"\3C\2F\00"
@__str$e6 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$e7 = private global [12 x i8] c"gen_element\00"
@__str$e8 = private global [2 x i8] c"\3E\00"
@__str$e9 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$ea = private global [12 x i8] c"gen_element\00"
@__str$eb = private global [2 x i8] c"\0A\00"
@__str$ec = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$ed = private global [12 x i8] c"gen_element\00"
@__str$ee = private global [11 x i8] c"\3C\21DOCTYPE\20\00"
@__str$ef = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$f0 = private global [4 x i8] c"gen\00"
@__str$f1 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$f2 = private global [4 x i8] c"gen\00"
@__str$f3 = private global [2 x i8] c"\3E\00"
@__str$f4 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$f5 = private global [4 x i8] c"gen\00"
@__str$f6 = private global [2 x i8] c"\0A\00"
@__str$f7 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$f8 = private global [4 x i8] c"gen\00"
@__str$f9 = private global [6 x i8] c"\3Chtml\00"
@__str$fa = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$fb = private global [4 x i8] c"gen\00"
@__str$fc = private global [2 x i8] c"\20\00"
@__str$fd = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$fe = private global [4 x i8] c"gen\00"
@__str$ff = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$100 = private global [4 x i8] c"gen\00"
@__str$101 = private global [3 x i8] c"\3D\22\00"
@__str$102 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$103 = private global [4 x i8] c"gen\00"
@__str$104 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$105 = private global [4 x i8] c"gen\00"
@__str$106 = private global [2 x i8] c"\22\00"
@__str$107 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$108 = private global [4 x i8] c"gen\00"
@__str$109 = private global [2 x i8] c"\3E\00"
@__str$10a = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$10b = private global [4 x i8] c"gen\00"
@__str$10c = private global [2 x i8] c"\0A\00"
@__str$10d = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$10e = private global [4 x i8] c"gen\00"
@__str$10f = private global [8 x i8] c"\3C\2Fhtml\3E\00"
@__str$110 = private global [53 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cprojects\5Codin-html\5Chtml.odin\00"
@__str$111 = private global [4 x i8] c"gen\00"
@__str$112 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$113 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$114 = private global [13 x i8] c"write_string\00"
@__str$115 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$116 = private global [12 x i8] c"write_bytes\00"
@__str$117 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$118 = private global [11 x i8] c"write_byte\00"
@__str$119 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$11a = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$11b = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$11c = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$11d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$11e = private global [8 x i8] c"aprintf\00"
@__str$11f = private global [4 x i8] c"nil\00"
@__str$120 = private global [4 x i8] c"int\00"
@__str$121 = private global [5 x i8] c"uint\00"
@__str$122 = private global [8 x i8] c"uintptr\00"
@__str$123 = private global [5 x i8] c"rune\00"
@__str$124 = private global [8 x i8] c"complex\00"
@__str$125 = private global [8 x i8] c"cstring\00"
@__str$126 = private global [7 x i8] c"string\00"
@__str$127 = private global [5 x i8] c"bool\00"
@__str$128 = private global [4 x i8] c"any\00"
@__str$129 = private global [7 x i8] c"rawptr\00"
@__str$12a = private global [2 x i8] c"\5E\00"
@__str$12b = private global [5 x i8] c"proc\00"
@__str$12c = private global [3 x i8] c"\28\29\00"
@__str$12d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$12e = private global [2 x i8] c"\28\00"
@__str$12f = private global [3 x i8] c"\2C\20\00"
@__str$130 = private global [2 x i8] c"\29\00"
@__str$131 = private global [5 x i8] c"\20-\3E\20\00"
@__str$132 = private global [2 x i8] c"\28\00"
@__str$133 = private global [3 x i8] c"\2C\20\00"
@__str$134 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$135 = private global [3 x i8] c"\3A\20\00"
@__str$136 = private global [2 x i8] c"\29\00"
@__str$137 = private global [2 x i8] c"\5B\00"
@__str$138 = private global [2 x i8] c"\5D\00"
@__str$139 = private global [10 x i8] c"\5Bdynamic\5D\00"
@__str$13a = private global [3 x i8] c"\5B\5D\00"
@__str$13b = private global [5 x i8] c"map\5B\00"
@__str$13c = private global [8 x i8] c"struct\20\00"
@__str$13d = private global [9 x i8] c"\23packed\20\00"
@__str$13e = private global [12 x i8] c"\23raw_union\20\00"
@__str$13f = private global [8 x i8] c"\23align\20\00"
@__str$140 = private global [3 x i8] c"\2C\20\00"
@__str$141 = private global [3 x i8] c"\3A\20\00"
@__str$142 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$143 = private global [8 x i8] c"union\20\7B\00"
@__str$144 = private global [3 x i8] c"\2C\20\00"
@__str$145 = private global [2 x i8] c"\7D\00"
@__str$146 = private global [6 x i8] c"enum\20\00"
@__str$147 = private global [9 x i8] c"\20\23export\00"
@__str$148 = private global [3 x i8] c"\20\7B\00"
@__str$149 = private global [3 x i8] c"\2C\20\00"
@__str$14a = private global [2 x i8] c"\7D\00"
@__str$14b = private global [11 x i8] c"bit_field\20\00"
@__str$14c = private global [8 x i8] c"\23align\20\00"
@__str$14d = private global [3 x i8] c"\20\7B\00"
@__str$14e = private global [3 x i8] c"\2C\20\00"
@__str$14f = private global [3 x i8] c"\3A\20\00"
@__str$150 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$151 = private global [2 x i8] c"\7D\00"
@__str$152 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$153 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$154 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$155 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$156 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$157 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$158 = private global [13 x i8] c"fmt_bad_verb\00"
@__str$159 = private global [3 x i8] c"\25\21\00"
@__str$15a = private global [6 x i8] c"\3Cnil\3E\00"
@__str$15b = private global [5 x i8] c"true\00"
@__str$15c = private global [6 x i8] c"false\00"
@__str$15d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$15e = private global [9 x i8] c"_fmt_int\00"
@__str$15f = private global [54 x i8] c"_fmt_int\3A\20buffer\20overrun.\20Width\20and\20precision\20too\20big\00"
@__str$160 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$161 = private global [9 x i8] c"_fmt_int\00"
@__str$162 = private global [31 x i8] c"_fmt_int\3A\20unknown\20base\2C\20whoops\00"
@__str$163 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$164 = private global [3 x i8] c"U\2B\00"
@__str$165 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$166 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$167 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$168 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$169 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16a = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16b = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16c = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16e = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$16f = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$170 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$171 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$172 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$173 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$174 = private global [3 x i8] c"0x\00"
@__str$175 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$176 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$177 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$178 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$179 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17a = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17b = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17c = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17e = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$17f = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$180 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$181 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$182 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$183 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$184 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$185 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$186 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$187 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$188 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$189 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18a = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18b = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18c = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18d = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18e = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$18f = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$190 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$191 = private global [6 x i8] c"\3Cnil\3E\00"
@__str$192 = private global [19 x i8] c"\21\25\28BAD\20ENUM\20VALUE\29\00"
@__str$193 = private global [6 x i8] c"\3Cnil\3E\00"
@__str$194 = private global [3 x i8] c"\7B\7D\00"
@__str$195 = private global [3 x i8] c"\2C\20\00"
@__str$196 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$197 = private global [4 x i8] c"\20\3D\20\00"
@__str$198 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$199 = private global [6 x i8] c"any\7B\7D\00"
@__str$19a = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$19b = private global [3 x i8] c"\2C\0A\00"
@__str$19c = private global [3 x i8] c"\2C\20\00"
@__str$19d = private global [3 x i8] c"\2C\20\00"
@__str$19e = private global [3 x i8] c"\2C\20\00"
@__str$19f = private global [5 x i8] c"map\5B\00"
@__str$1a0 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a1 = private global [10 x i8] c"fmt_value\00"
@__str$1a2 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a3 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a4 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a5 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a6 = private global [3 x i8] c"\2C\20\00"
@__str$1a7 = private global [2 x i8] c"\3D\00"
@__str$1a8 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1a9 = private global [12 x i8] c"\28raw_union\29\00"
@__str$1aa = private global [3 x i8] c"\2C\20\00"
@__str$1ab = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1ac = private global [4 x i8] c"\20\3D\20\00"
@__str$1ad = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1ae = private global [6 x i8] c"any\7B\7D\00"
@__str$1af = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1b0 = private global [3 x i8] c"\2C\0A\00"
@__str$1b1 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1b2 = private global [10 x i8] c"fmt_value\00"
@__str$1b3 = private global [23 x i8] c"Invalid\20union\20tag\20type\00"
@__str$1b4 = private global [4 x i8] c"nil\00"
@__str$1b5 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1b6 = private global [4 x i8] c"nil\00"
@__str$1b7 = private global [4 x i8] c"\20\40\20\00"
@__str$1b8 = private global [6 x i8] c"\3Cnil\3E\00"
@__str$1b9 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1ba = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1bb = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1bc = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1bd = private global [14 x i8] c"\25\21\28BAD\20WIDTH\29\00"
@__str$1be = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1bf = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1c0 = private global [18 x i8] c"\25\21\28BAD\20PRECISION\29\00"
@__str$1c1 = private global [12 x i8] c"\25\21\28NO\20VERB\29\00"
@__str$1c2 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1c3 = private global [24 x i8] c"\25\21\28BAD\20ARGUMENT\20NUMBER\29\00"
@__str$1c4 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1c5 = private global [21 x i8] c"\25\21\28MISSING\20ARGUMENT\29\00"
@__str$1c6 = private global [10 x i8] c"\25\21\28EXTRA\20\00"
@__str$1c7 = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1c8 = private global [3 x i8] c"\2C\20\00"
@__str$1c9 = private global [6 x i8] c"\3Cnil\3E\00"
@__str$1ca = private global [47 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cfmt.odin\00"
@__str$1cb = private global [2 x i8] c"\29\00"
@__str$1cc = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1cd = private global [13 x i8] c"generic_ftoa\00"
@__str$1ce = private global [26 x i8] c"strconv\3A\20invalid\20bit_size\00"
@__str$1cf = private global [4 x i8] c"NaN\00"
@__str$1d0 = private global [5 x i8] c"-Inf\00"
@__str$1d1 = private global [5 x i8] c"\2BInf\00"
@__str$1d2 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d3 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d4 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d5 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d6 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d7 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1d8 = private global [14 x i8] c"format_digits\00"
@__str$1d9 = private global [49 x i8] c"strconv\3A\20e\2FE\20float\20printing\20is\20not\20yet\20supported\00"
@__str$1da = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1db = private global [14 x i8] c"format_digits\00"
@__str$1dc = private global [49 x i8] c"strconv\3A\20g\2FG\20float\20printing\20is\20not\20yet\20supported\00"
@__str$1dd = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1de = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1df = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e0 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e1 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e2 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e3 = private global [20 x i8] c"is_integer_negative\00"
@__str$1e4 = private global [42 x i8] c"is_integer_negative\3A\20Unknown\20integer\20size\00"
@__str$1e5 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e6 = private global [12 x i8] c"append_bits\00"
@__str$1e7 = private global [44 x i8] c"strconv\3A\20illegal\20base\20passed\20to\20append_bits\00"
@__str$1e8 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1e9 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1ea = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1eb = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1ec = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1ed = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1ee = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1ef = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f0 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f1 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f2 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f3 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f4 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f5 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f6 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cstrconv.odin\00"
@__str$1f7 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1f8 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1f9 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1fa = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1fb = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1fc = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1fd = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1fe = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$1ff = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$200 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$201 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$202 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$203 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$204 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$205 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$206 = private global [51 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5Cdecimal.odin\00"
@__str$207 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$208 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$209 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$20a = private global [7 x i8] c"append\00"
@__str$20b = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$20c = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$20d = private global [7 x i8] c"append\00"
@__str$20e = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$20f = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$210 = private global [22 x i8] c"reserve_dynamic_array\00"
@__str$211 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$212 = private global [7 x i8] c"append\00"
@__str$213 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$214 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$215 = private global [22 x i8] c"reserve_dynamic_array\00"
@__str$216 = private global [52 x i8] c"C\3A\5CUsers\5CBruker\5CDropbox\5Cbin\5Codin\5Ccore\5C_preload.odin\00"
@__str$217 = private global [22 x i8] c"reserve_dynamic_array\00"
@__str$218 = private global [16 x i8] c"Type_Info_Named\00"
@__str$219 = private global [5 x i8] c"name\00"
@__str$21a = private global [5 x i8] c"base\00"
@__str$21b = private global [10 x i8] c"Type_Info\00"
@__str$21c = private global [5 x i8] c"size\00"
@__str$21d = private global [6 x i8] c"align\00"
@__str$21e = private global [8 x i8] c"variant\00"
@__str$21f = private global [18 x i8] c"Type_Info_Integer\00"
@__str$220 = private global [7 x i8] c"signed\00"
@__str$221 = private global [15 x i8] c"Type_Info_Rune\00"
@__str$222 = private global [16 x i8] c"Type_Info_Float\00"
@__str$223 = private global [18 x i8] c"Type_Info_Complex\00"
@__str$224 = private global [17 x i8] c"Type_Info_String\00"
@__str$225 = private global [11 x i8] c"is_cstring\00"
@__str$226 = private global [18 x i8] c"Type_Info_Boolean\00"
@__str$227 = private global [14 x i8] c"Type_Info_Any\00"
@__str$228 = private global [18 x i8] c"Type_Info_Pointer\00"
@__str$229 = private global [5 x i8] c"elem\00"
@__str$22a = private global [20 x i8] c"Type_Info_Procedure\00"
@__str$22b = private global [7 x i8] c"params\00"
@__str$22c = private global [8 x i8] c"results\00"
@__str$22d = private global [9 x i8] c"variadic\00"
@__str$22e = private global [11 x i8] c"convention\00"
@__str$22f = private global [19 x i8] c"Calling_Convention\00"
@__str$230 = private global [8 x i8] c"Invalid\00"
@__str$231 = private global [5 x i8] c"Odin\00"
@__str$232 = private global [12 x i8] c"Contextless\00"
@__str$233 = private global [2 x i8] c"C\00"
@__str$234 = private global [4 x i8] c"Std\00"
@__str$235 = private global [5 x i8] c"Fast\00"
@__str$236 = private global [16 x i8] c"Type_Info_Array\00"
@__str$237 = private global [5 x i8] c"elem\00"
@__str$238 = private global [10 x i8] c"elem_size\00"
@__str$239 = private global [6 x i8] c"count\00"
@__str$23a = private global [24 x i8] c"Type_Info_Dynamic_Array\00"
@__str$23b = private global [5 x i8] c"elem\00"
@__str$23c = private global [10 x i8] c"elem_size\00"
@__str$23d = private global [16 x i8] c"Type_Info_Slice\00"
@__str$23e = private global [16 x i8] c"Type_Info_Tuple\00"
@__str$23f = private global [6 x i8] c"types\00"
@__str$240 = private global [6 x i8] c"names\00"
@__str$241 = private global [17 x i8] c"Type_Info_Struct\00"
@__str$242 = private global [6 x i8] c"types\00"
@__str$243 = private global [6 x i8] c"names\00"
@__str$244 = private global [8 x i8] c"offsets\00"
@__str$245 = private global [7 x i8] c"usings\00"
@__str$246 = private global [10 x i8] c"is_packed\00"
@__str$247 = private global [13 x i8] c"is_raw_union\00"
@__str$248 = private global [13 x i8] c"custom_align\00"
@__str$249 = private global [16 x i8] c"Type_Info_Union\00"
@__str$24a = private global [9 x i8] c"variants\00"
@__str$24b = private global [11 x i8] c"tag_offset\00"
@__str$24c = private global [9 x i8] c"tag_type\00"
@__str$24d = private global [15 x i8] c"Type_Info_Enum\00"
@__str$24e = private global [5 x i8] c"base\00"
@__str$24f = private global [6 x i8] c"names\00"
@__str$250 = private global [7 x i8] c"values\00"
@__str$251 = private global [10 x i8] c"is_export\00"
@__str$252 = private global [21 x i8] c"Type_Info_Enum_Value\00"
@__str$253 = private global [14 x i8] c"Type_Info_Map\00"
@__str$254 = private global [4 x i8] c"key\00"
@__str$255 = private global [6 x i8] c"value\00"
@__str$256 = private global [17 x i8] c"generated_struct\00"
@__str$257 = private global [20 x i8] c"Type_Info_Bit_Field\00"
@__str$258 = private global [6 x i8] c"names\00"
@__str$259 = private global [5 x i8] c"bits\00"
@__str$25a = private global [8 x i8] c"offsets\00"
@__str$25b = private global [15 x i8] c"Allocator_Mode\00"
@__str$25c = private global [6 x i8] c"Alloc\00"
@__str$25d = private global [5 x i8] c"Free\00"
@__str$25e = private global [8 x i8] c"FreeAll\00"
@__str$25f = private global [7 x i8] c"Resize\00"
@__str$260 = private global [9 x i8] c"Int_Flag\00"
@__str$261 = private global [7 x i8] c"Prefix\00"
@__str$262 = private global [5 x i8] c"Plus\00"
@__str$263 = private global [6 x i8] c"Space\00"
@__str$264 = private global [21 x i8] c"Source_Code_Location\00"
@__str$265 = private global [10 x i8] c"file_path\00"
@__str$266 = private global [5 x i8] c"line\00"
@__str$267 = private global [7 x i8] c"column\00"
@__str$268 = private global [10 x i8] c"procedure\00"
@__str$269 = private global [15 x i8] c"Allocator_Proc\00"
@__str$26a = private global [15 x i8] c"allocator_data\00"
@__str$26b = private global [5 x i8] c"mode\00"
@__str$26c = private global [5 x i8] c"size\00"
@__str$26d = private global [10 x i8] c"alignment\00"
@__str$26e = private global [11 x i8] c"old_memory\00"
@__str$26f = private global [9 x i8] c"old_size\00"
@__str$270 = private global [6 x i8] c"flags\00"
@__str$271 = private global [9 x i8] c"location\00"
@__str$272 = private global [10 x i8] c"Allocator\00"
@__str$273 = private global [10 x i8] c"procedure\00"
@__str$274 = private global [5 x i8] c"data\00"
@__str$275 = private global [8 x i8] c"Context\00"
@__str$276 = private global [10 x i8] c"allocator\00"
@__str$277 = private global [10 x i8] c"thread_id\00"
@__str$278 = private global [10 x i8] c"user_data\00"
@__str$279 = private global [11 x i8] c"user_index\00"
@__str$27a = private global [7 x i8] c"parent\00"
@__str$27b = private global [8 x i8] c"derived\00"
@__str$27c = private global [10 x i8] c"__Map_Key\00"
@__str$27d = private global [5 x i8] c"hash\00"
@__str$27e = private global [4 x i8] c"str\00"
@__str$27f = private global [18 x i8] c"__Map_Find_Result\00"
@__str$280 = private global [11 x i8] c"hash_index\00"
@__str$281 = private global [11 x i8] c"entry_prev\00"
@__str$282 = private global [12 x i8] c"entry_index\00"
@__str$283 = private global [19 x i8] c"__Map_Entry_Header\00"
@__str$284 = private global [4 x i8] c"key\00"
@__str$285 = private global [5 x i8] c"next\00"
@__str$286 = private global [13 x i8] c"__Map_Header\00"
@__str$287 = private global [2 x i8] c"m\00"
@__str$288 = private global [14 x i8] c"is_key_string\00"
@__str$289 = private global [11 x i8] c"entry_size\00"
@__str$28a = private global [12 x i8] c"entry_align\00"
@__str$28b = private global [13 x i8] c"value_offset\00"
@__str$28c = private global [11 x i8] c"value_size\00"
@__str$28d = private global [4 x i8] c"Map\00"
@__str$28e = private global [7 x i8] c"hashes\00"
@__str$28f = private global [8 x i8] c"entries\00"
@__str$290 = private global [14 x i8] c"Dynamic_Array\00"
@__str$291 = private global [5 x i8] c"data\00"
@__str$292 = private global [4 x i8] c"len\00"
@__str$293 = private global [4 x i8] c"cap\00"
@__str$294 = private global [10 x i8] c"allocator\00"
@__str$295 = private global [5 x i8] c"Post\00"
@__str$296 = private global [8 x i8] c"element\00"
@__str$297 = private global [6 x i8] c"title\00"
@__str$298 = private global [7 x i8] c"author\00"
@__str$299 = private global [5 x i8] c"body\00"
@__str$29a = private global [8 x i8] c"Element\00"
@__str$29b = private global [5 x i8] c"name\00"
@__str$29c = private global [5 x i8] c"body\00"
@__str$29d = private global [11 x i8] c"attributes\00"
@__str$29e = private global [9 x i8] c"children\00"
@__str$29f = private global [7 x i8] c"hashes\00"
@__str$2a0 = private global [8 x i8] c"entries\00"
@__str$2a1 = private global [4 x i8] c"key\00"
@__str$2a2 = private global [5 x i8] c"next\00"
@__str$2a3 = private global [6 x i8] c"value\00"
@__str$2a4 = private global [7 x i8] c"String\00"
@__str$2a5 = private global [5 x i8] c"data\00"
@__str$2a6 = private global [4 x i8] c"len\00"
@__str$2a7 = private global [6 x i8] c"Slice\00"
@__str$2a8 = private global [5 x i8] c"data\00"
@__str$2a9 = private global [4 x i8] c"len\00"
@__str$2aa = private global [13 x i8] c"Accept_Range\00"
@__str$2ab = private global [3 x i8] c"lo\00"
@__str$2ac = private global [3 x i8] c"hi\00"
@__str$2ad = private global [7 x i8] c"Handle\00"
@__str$2ae = private global [6 x i8] c"Errno\00"
@__str$2af = private global [9 x i8] c"Document\00"
@__str$2b0 = private global [8 x i8] c"doctype\00"
@__str$2b1 = private global [16 x i8] c"html_attributes\00"
@__str$2b2 = private global [18 x i8] c"special_head_tags\00"
@__str$2b3 = private global [5 x i8] c"head\00"
@__str$2b4 = private global [5 x i8] c"body\00"
@__str$2b5 = private global [7 x i8] c"hashes\00"
@__str$2b6 = private global [8 x i8] c"entries\00"
@__str$2b7 = private global [4 x i8] c"key\00"
@__str$2b8 = private global [5 x i8] c"next\00"
@__str$2b9 = private global [6 x i8] c"value\00"
@__str$2ba = private global [11 x i8] c"GenOptions\00"
@__str$2bb = private global [4 x i8] c"out\00"
@__str$2bc = private global [15 x i8] c"gen_whitespace\00"
@__str$2bd = private global [16 x i8] c"gen_indentation\00"
@__str$2be = private global [7 x i8] c"indent\00"
@__str$2bf = private global [14 x i8] c"indent_string\00"
@__str$2c0 = private global [7 x i8] c"Handle\00"
@__str$2c1 = private global [5 x i8] c"Bool\00"
@__str$2c2 = private global [20 x i8] c"Security_Attributes\00"
@__str$2c3 = private global [7 x i8] c"length\00"
@__str$2c4 = private global [20 x i8] c"security_descriptor\00"
@__str$2c5 = private global [15 x i8] c"inherit_handle\00"
@__str$2c6 = private global [14 x i8] c"String_Buffer\00"
@__str$2c7 = private global [9 x i8] c"Fmt_Info\00"
@__str$2c8 = private global [6 x i8] c"minus\00"
@__str$2c9 = private global [5 x i8] c"plus\00"
@__str$2ca = private global [6 x i8] c"space\00"
@__str$2cb = private global [5 x i8] c"zero\00"
@__str$2cc = private global [5 x i8] c"hash\00"
@__str$2cd = private global [10 x i8] c"width_set\00"
@__str$2ce = private global [9 x i8] c"prec_set\00"
@__str$2cf = private global [6 x i8] c"width\00"
@__str$2d0 = private global [5 x i8] c"prec\00"
@__str$2d1 = private global [7 x i8] c"indent\00"
@__str$2d2 = private global [10 x i8] c"reordered\00"
@__str$2d3 = private global [15 x i8] c"good_arg_index\00"
@__str$2d4 = private global [4 x i8] c"buf\00"
@__str$2d5 = private global [4 x i8] c"arg\00"
@__str$2d6 = private global [13 x i8] c"DecimalSlice\00"
@__str$2d7 = private global [7 x i8] c"digits\00"
@__str$2d8 = private global [6 x i8] c"count\00"
@__str$2d9 = private global [14 x i8] c"decimal_point\00"
@__str$2da = private global [4 x i8] c"neg\00"
@__str$2db = private global [10 x i8] c"FloatInfo\00"
@__str$2dc = private global [9 x i8] c"mantbits\00"
@__str$2dd = private global [8 x i8] c"expbits\00"
@__str$2de = private global [5 x i8] c"bias\00"
@__str$2df = private global [8 x i8] c"Decimal\00"
@__str$2e0 = private global [7 x i8] c"digits\00"
@__str$2e1 = private global [6 x i8] c"count\00"
@__str$2e2 = private global [14 x i8] c"decimal_point\00"
@__str$2e3 = private global [4 x i8] c"neg\00"
@__str$2e4 = private global [6 x i8] c"trunc\00"
@__str$2e5 = private global [7 x i8] c"Buffer\00"
@__str$2e6 = private global [2 x i8] c"b\00"
@__str$2e7 = private global [2 x i8] c"n\00"
@__str$2e8 = private global [18 x i8] c"0123456789abcdefx\00"
@__str$2e9 = private global [18 x i8] c"0123456789ABCDEFX\00"
@__str$2ea = private global [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00"
@__str$2eb = private global [18 x i8] c"0123456789abcdefx\00"
@__str$2ec = private global [18 x i8] c"0123456789ABCDEFX\00"
@__str$2ed = private global [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00"
attributes #0 = {nounwind uwtable}
attributes #1 = {nounwind alwaysinline uwtable}
attributes #2 = {nounwind noinline optnone uwtable}
